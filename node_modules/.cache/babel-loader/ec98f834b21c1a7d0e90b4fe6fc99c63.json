{"ast":null,"code":"// src/index.browser.ts\nimport axios from \"axios\";\n\nasync function aptosClient(options) {\n  var _a;\n\n  const {\n    params,\n    method,\n    url,\n    headers,\n    body,\n    overrides\n  } = options;\n  const requestConfig = {\n    headers,\n    method,\n    url,\n    params,\n    data: body,\n    withCredentials: (_a = overrides == null ? void 0 : overrides.WITH_CREDENTIALS) != null ? _a : true\n  };\n\n  try {\n    const response = await axios(requestConfig);\n    return {\n      status: response.status,\n      statusText: response.statusText,\n      data: response.data,\n      headers: response.headers,\n      config: response.config\n    };\n  } catch (error) {\n    const axiosError = error;\n\n    if (axiosError.response) {\n      return axiosError.response;\n    }\n\n    throw error;\n  }\n}\n\nexport { aptosClient as default };","map":{"version":3,"mappings":";AAAA,OAAOA,KAAP,MAAsD,OAAtD;;AAGA,eAAOC,WAAP,CAA+CC,OAA/C,EAA+G;AAH/G;;AAIE,QAAM;AAAEC,UAAF;AAAUC,UAAV;AAAkBC,OAAlB;AAAuBC,WAAvB;AAAgCC,QAAhC;AAAsCC;AAAtC,MAAoDN,OAA1D;AACA,QAAMO,gBAAoC;AACxCH,WADwC;AAExCF,UAFwC;AAGxCC,OAHwC;AAIxCF,UAJwC;AAKxCO,UAAMH,IALkC;AAMxCI,sBAAiBC,4CAAWC,gBAA5B,KAAiB,IAAjB,GAAiBD,EAAjB,GAAgD;AANR,GAA1C;;AASA,MAAI;AACF,UAAME,WAAW,MAAMd,MAAMS,aAAN,CAAvB;AACA,WAAO;AACLM,cAAQD,SAASC,MADZ;AAELC,kBAAYF,SAASE,UAFhB;AAGLN,YAAMI,SAASJ,IAHV;AAILJ,eAASQ,SAASR,OAJb;AAKLW,cAAQH,SAASG;AALZ,KAAP;AAOF,GATA,CASA,OAASC,KAAT,EAAE;AACA,UAAMC,aAAaD,KAAnB;;AACA,QAAIC,WAAWL,QAAf,EAAyB;AACvB,aAAOK,WAAWL,QAAlB;AACF;;AACA,UAAMI,KAAN;AACF;AACF","names":["axios","aptosClient","options","params","method","url","headers","body","overrides","requestConfig","data","withCredentials","_a","WITH_CREDENTIALS","response","status","statusText","config","error","axiosError"],"sources":["/aptos-client/src/index.browser.ts"],"sourcesContent":["import axios, { AxiosRequestConfig, AxiosError } from \"axios\";\nimport { AptosClientRequest, AptosClientResponse } from \"./types\";\n\nexport default async function aptosClient<Res>(options: AptosClientRequest): Promise<AptosClientResponse<Res>> {\n  const { params, method, url, headers, body, overrides } = options;\n  const requestConfig: AxiosRequestConfig = {\n    headers,\n    method,\n    url,\n    params,\n    data: body,\n    withCredentials: overrides?.WITH_CREDENTIALS ?? true,\n  };\n\n  try {\n    const response = await axios(requestConfig);\n    return {\n      status: response.status,\n      statusText: response.statusText!,\n      data: response.data,\n      headers: response.headers,\n      config: response.config,\n    };\n  } catch (error) {\n    const axiosError = error as AxiosError<Res>;\n    if (axiosError.response) {\n      return axiosError.response;\n    }\n    throw error;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}