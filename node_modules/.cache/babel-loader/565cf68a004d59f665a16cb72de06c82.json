{"ast":null,"code":"var _jsxFileName = \"/home/mahir/INTER-IIT/wordle/src/components/Board/index.jsx\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport Box from \"../Error/Box\";\nimport words from \"../../words\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst correct = words[Math.floor(Math.random() * words.length - 1)].toUpperCase();\nlet defaulBoard = [];\nlet defaultLetters = [];\n\"abcdefghijklmnopqrstuvwxyz\".split(\"\").forEach(i => {\n  defaultLetters[i] = \"\";\n});\n\nfor (let i = 0; i < 6; i++) {\n  defaulBoard.push([]);\n\n  for (let j = 0; j < 5; j++) {\n    defaulBoard[i].push([\"\", \"\"]);\n  }\n}\n\nfunction Board(props) {\n  _s();\n\n  const [letters, setLetters] = useState(defaultLetters);\n  const [board, setBoard] = useState(defaulBoard);\n  const [changed, setChanged] = useState(false);\n  const [row, setRow] = useState(0);\n  const [col, setCol] = useState(0);\n  const [win, setWin] = useState(false);\n  const [lost, setLost] = useState(false);\n  const [message, setMessage] = useState(\"\");\n  useEffect(() => {\n    if (win || lost) {\n      console.log(\"Game ended!\");\n    } else {\n      if (props.clicks !== 0) {\n        if (props.letter === \"DEL\") {\n          setCol(col === 0 ? 0 : col - 1);\n          setBoard(prevBoard => {\n            prevBoard[row][col === 0 ? 0 : col - 1][0] = \"\";\n            return prevBoard;\n          });\n        } else {\n          setBoard(prevBoard => {\n            if (col < 5) {\n              if (props.letter !== \"ENTER\") {\n                prevBoard[row][col][0] = props.letter;\n                setCol(col + 1);\n              } else {\n                props.error(\"Words are 5 letters long!\");\n                setTimeout(() => {\n                  props.error(\"\");\n                }, 1000);\n              }\n            } else {\n              if (props.letter === \"ENTER\") {\n                let correctLetters = 0;\n                let word = \"\";\n\n                for (let i = 0; i < 5; i++) {\n                  word += prevBoard[row][i][0];\n                }\n\n                if (words.includes(word.toLowerCase())) {\n                  for (let i = 0; i < 5; i++) {\n                    if (correct[i] === prevBoard[row][i][0]) {\n                      prevBoard[row][i][1] = \"C\";\n                      correctLetters++;\n                    } else if (correct.includes(prevBoard[row][i][0])) prevBoard[row][i][1] = \"E\";else prevBoard[row][i][1] = \"N\";\n\n                    setRow(row + 1);\n\n                    if (row === 5) {\n                      setLost(true);\n                      setTimeout(() => {\n                        setMessage(`It was ${correct}`);\n                      }, 750);\n                    }\n\n                    setCol(0);\n                    setLetters(prev => {\n                      prev[board[row][i][0]] = board[row][i][1];\n                      return prev;\n                    });\n                  }\n\n                  setChanged(!changed);\n\n                  if (correctLetters === 5) {\n                    setWin(true);\n                    setTimeout(() => {\n                      setMessage(\"You WIN\");\n                    }, 750);\n                  }\n\n                  return prevBoard;\n                } else {\n                  props.error(\"Word not in dictionary\");\n                  setTimeout(() => {\n                    props.error(\"\");\n                  }, 1000);\n                }\n              }\n            }\n\n            return prevBoard;\n          });\n        }\n      }\n    }\n  }, [props.clicks]);\n  useEffect(() => {\n    props.letters(letters);\n  }, [changed]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"px-10 py-5 grid gap-y-1 items-center w-100 justify-center\",\n    children: [board.map((row, key) => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex gap-1 w-fit\",\n        children: row.map((value, key) => /*#__PURE__*/_jsxDEV(Box, {\n          value: value[0],\n          state: value[1],\n          pos: key\n        }, key, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 15\n        }, this))\n      }, key, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 11\n      }, this);\n    }), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \" grid place-items-center h-8 font-bold dark:text-white\",\n      children: lost || win ? message : \"\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 112,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Board, \"aTSidK8g/HnSkFvZYkyKNqFIeZw=\");\n\n_c = Board;\nexport default Board;\n\nvar _c;\n\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"sources":["/home/mahir/INTER-IIT/wordle/src/components/Board/index.jsx"],"names":["useEffect","useState","Box","words","correct","Math","floor","random","length","toUpperCase","defaulBoard","defaultLetters","split","forEach","i","push","j","Board","props","letters","setLetters","board","setBoard","changed","setChanged","row","setRow","col","setCol","win","setWin","lost","setLost","message","setMessage","console","log","clicks","letter","prevBoard","error","setTimeout","correctLetters","word","includes","toLowerCase","prev","map","key","value"],"mappings":";;;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,OAAOC,GAAP,MAAgB,cAAhB;AACA,OAAOC,KAAP,MAAkB,aAAlB;;AAEA,MAAMC,OAAO,GACXD,KAAK,CAACE,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBJ,KAAK,CAACK,MAAtB,GAA+B,CAA1C,CAAD,CAAL,CAAoDC,WAApD,EADF;AAEA,IAAIC,WAAW,GAAG,EAAlB;AACA,IAAIC,cAAc,GAAG,EAArB;AAEA,6BAA6BC,KAA7B,CAAmC,EAAnC,EAAuCC,OAAvC,CAAgDC,CAAD,IAAO;AACpDH,EAAAA,cAAc,CAACG,CAAD,CAAd,GAAoB,EAApB;AACD,CAFD;;AAIA,KAAK,IAAIA,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;AAC1BJ,EAAAA,WAAW,CAACK,IAAZ,CAAiB,EAAjB;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;AAC1BN,IAAAA,WAAW,CAACI,CAAD,CAAX,CAAeC,IAAf,CAAoB,CAAC,EAAD,EAAK,EAAL,CAApB;AACD;AACF;;AAED,SAASE,KAAT,CAAeC,KAAf,EAAsB;AAAA;;AACpB,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBnB,QAAQ,CAACU,cAAD,CAAtC;AACA,QAAM,CAACU,KAAD,EAAQC,QAAR,IAAoBrB,QAAQ,CAACS,WAAD,CAAlC;AACA,QAAM,CAACa,OAAD,EAAUC,UAAV,IAAwBvB,QAAQ,CAAC,KAAD,CAAtC;AACA,QAAM,CAACwB,GAAD,EAAMC,MAAN,IAAgBzB,QAAQ,CAAC,CAAD,CAA9B;AACA,QAAM,CAAC0B,GAAD,EAAMC,MAAN,IAAgB3B,QAAQ,CAAC,CAAD,CAA9B;AACA,QAAM,CAAC4B,GAAD,EAAMC,MAAN,IAAgB7B,QAAQ,CAAC,KAAD,CAA9B;AACA,QAAM,CAAC8B,IAAD,EAAOC,OAAP,IAAkB/B,QAAQ,CAAC,KAAD,CAAhC;AACA,QAAM,CAACgC,OAAD,EAAUC,UAAV,IAAwBjC,QAAQ,CAAC,EAAD,CAAtC;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI6B,GAAG,IAAIE,IAAX,EAAiB;AACfI,MAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ;AACD,KAFD,MAEO;AACL,UAAIlB,KAAK,CAACmB,MAAN,KAAiB,CAArB,EAAwB;AACtB,YAAInB,KAAK,CAACoB,MAAN,KAAiB,KAArB,EAA4B;AAC1BV,UAAAA,MAAM,CAACD,GAAG,KAAK,CAAR,GAAY,CAAZ,GAAgBA,GAAG,GAAG,CAAvB,CAAN;AACAL,UAAAA,QAAQ,CAAEiB,SAAD,IAAe;AACtBA,YAAAA,SAAS,CAACd,GAAD,CAAT,CAAeE,GAAG,KAAK,CAAR,GAAY,CAAZ,GAAgBA,GAAG,GAAG,CAArC,EAAwC,CAAxC,IAA6C,EAA7C;AACA,mBAAOY,SAAP;AACD,WAHO,CAAR;AAID,SAND,MAMO;AACLjB,UAAAA,QAAQ,CAAEiB,SAAD,IAAe;AACtB,gBAAIZ,GAAG,GAAG,CAAV,EAAa;AACX,kBAAIT,KAAK,CAACoB,MAAN,KAAiB,OAArB,EAA8B;AAC5BC,gBAAAA,SAAS,CAACd,GAAD,CAAT,CAAeE,GAAf,EAAoB,CAApB,IAAyBT,KAAK,CAACoB,MAA/B;AACAV,gBAAAA,MAAM,CAACD,GAAG,GAAG,CAAP,CAAN;AACD,eAHD,MAGO;AACLT,gBAAAA,KAAK,CAACsB,KAAN,CAAY,2BAAZ;AACAC,gBAAAA,UAAU,CAAC,MAAM;AACfvB,kBAAAA,KAAK,CAACsB,KAAN,CAAY,EAAZ;AACD,iBAFS,EAEP,IAFO,CAAV;AAGD;AACF,aAVD,MAUO;AACL,kBAAItB,KAAK,CAACoB,MAAN,KAAiB,OAArB,EAA8B;AAC5B,oBAAII,cAAc,GAAG,CAArB;AACA,oBAAIC,IAAI,GAAG,EAAX;;AACA,qBAAK,IAAI7B,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;AAC1B6B,kBAAAA,IAAI,IAAIJ,SAAS,CAACd,GAAD,CAAT,CAAeX,CAAf,EAAkB,CAAlB,CAAR;AACD;;AACD,oBAAIX,KAAK,CAACyC,QAAN,CAAeD,IAAI,CAACE,WAAL,EAAf,CAAJ,EAAwC;AACtC,uBAAK,IAAI/B,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;AAC1B,wBAAIV,OAAO,CAACU,CAAD,CAAP,KAAeyB,SAAS,CAACd,GAAD,CAAT,CAAeX,CAAf,EAAkB,CAAlB,CAAnB,EAAyC;AACvCyB,sBAAAA,SAAS,CAACd,GAAD,CAAT,CAAeX,CAAf,EAAkB,CAAlB,IAAuB,GAAvB;AACA4B,sBAAAA,cAAc;AACf,qBAHD,MAGO,IAAItC,OAAO,CAACwC,QAAR,CAAiBL,SAAS,CAACd,GAAD,CAAT,CAAeX,CAAf,EAAkB,CAAlB,CAAjB,CAAJ,EACLyB,SAAS,CAACd,GAAD,CAAT,CAAeX,CAAf,EAAkB,CAAlB,IAAuB,GAAvB,CADK,KAEFyB,SAAS,CAACd,GAAD,CAAT,CAAeX,CAAf,EAAkB,CAAlB,IAAuB,GAAvB;;AACLY,oBAAAA,MAAM,CAACD,GAAG,GAAG,CAAP,CAAN;;AACA,wBAAIA,GAAG,KAAK,CAAZ,EAAe;AACbO,sBAAAA,OAAO,CAAC,IAAD,CAAP;AACAS,sBAAAA,UAAU,CAAC,MAAM;AACfP,wBAAAA,UAAU,CAAE,UAAS9B,OAAQ,EAAnB,CAAV;AACD,uBAFS,EAEP,GAFO,CAAV;AAGD;;AAEDwB,oBAAAA,MAAM,CAAC,CAAD,CAAN;AACAR,oBAAAA,UAAU,CAAE0B,IAAD,IAAU;AACnBA,sBAAAA,IAAI,CAACzB,KAAK,CAACI,GAAD,CAAL,CAAWX,CAAX,EAAc,CAAd,CAAD,CAAJ,GAAyBO,KAAK,CAACI,GAAD,CAAL,CAAWX,CAAX,EAAc,CAAd,CAAzB;AACA,6BAAOgC,IAAP;AACD,qBAHS,CAAV;AAID;;AACDtB,kBAAAA,UAAU,CAAC,CAACD,OAAF,CAAV;;AAEA,sBAAImB,cAAc,KAAK,CAAvB,EAA0B;AACxBZ,oBAAAA,MAAM,CAAC,IAAD,CAAN;AACAW,oBAAAA,UAAU,CAAC,MAAM;AACfP,sBAAAA,UAAU,CAAC,SAAD,CAAV;AACD,qBAFS,EAEP,GAFO,CAAV;AAGD;;AACD,yBAAOK,SAAP;AACD,iBA/BD,MA+BO;AACLrB,kBAAAA,KAAK,CAACsB,KAAN,CAAY,wBAAZ;AACAC,kBAAAA,UAAU,CAAC,MAAM;AACfvB,oBAAAA,KAAK,CAACsB,KAAN,CAAY,EAAZ;AACD,mBAFS,EAEP,IAFO,CAAV;AAGD;AACF;AACF;;AACD,mBAAOD,SAAP;AACD,WA1DO,CAAR;AA2DD;AACF;AACF;AACF,GA1EQ,EA0EN,CAACrB,KAAK,CAACmB,MAAP,CA1EM,CAAT;AA4EArC,EAAAA,SAAS,CAAC,MAAM;AACdkB,IAAAA,KAAK,CAACC,OAAN,CAAcA,OAAd;AACD,GAFQ,EAEN,CAACI,OAAD,CAFM,CAAT;AAIA,sBACE;AAAK,IAAA,SAAS,EAAC,2DAAf;AAAA,eACGF,KAAK,CAAC0B,GAAN,CAAU,CAACtB,GAAD,EAAMuB,GAAN,KAAc;AACvB,0BACE;AAAe,QAAA,SAAS,EAAC,kBAAzB;AAAA,kBACGvB,GAAG,CAACsB,GAAJ,CAAQ,CAACE,KAAD,EAAQD,GAAR,kBACP,QAAC,GAAD;AAAe,UAAA,KAAK,EAAEC,KAAK,CAAC,CAAD,CAA3B;AAAgC,UAAA,KAAK,EAAEA,KAAK,CAAC,CAAD,CAA5C;AAAiD,UAAA,GAAG,EAAED;AAAtD,WAAUA,GAAV;AAAA;AAAA;AAAA;AAAA,gBADD;AADH,SAAUA,GAAV;AAAA;AAAA;AAAA;AAAA,cADF;AAOD,KARA,CADH,eAUE;AAAK,MAAA,SAAS,EAAC,wDAAf;AAAA,gBACGjB,IAAI,IAAIF,GAAR,GAAcI,OAAd,GAAwB;AAD3B;AAAA;AAAA;AAAA;AAAA,YAVF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAgBD;;GA1GQhB,K;;KAAAA,K;AA4GT,eAAeA,KAAf","sourcesContent":["import { useEffect, useState } from \"react\";\nimport Box from \"../Error/Box\";\nimport words from \"../../words\";\n\nconst correct =\n  words[Math.floor(Math.random() * words.length - 1)].toUpperCase();\nlet defaulBoard = [];\nlet defaultLetters = [];\n\n\"abcdefghijklmnopqrstuvwxyz\".split(\"\").forEach((i) => {\n  defaultLetters[i] = \"\";\n});\n\nfor (let i = 0; i < 6; i++) {\n  defaulBoard.push([]);\n  for (let j = 0; j < 5; j++) {\n    defaulBoard[i].push([\"\", \"\"]);\n  }\n}\n\nfunction Board(props) {\n  const [letters, setLetters] = useState(defaultLetters);\n  const [board, setBoard] = useState(defaulBoard);\n  const [changed, setChanged] = useState(false);\n  const [row, setRow] = useState(0);\n  const [col, setCol] = useState(0);\n  const [win, setWin] = useState(false);\n  const [lost, setLost] = useState(false);\n  const [message, setMessage] = useState(\"\");\n\n  useEffect(() => {\n    if (win || lost) {\n      console.log(\"Game ended!\");\n    } else {\n      if (props.clicks !== 0) {\n        if (props.letter === \"DEL\") {\n          setCol(col === 0 ? 0 : col - 1);\n          setBoard((prevBoard) => {\n            prevBoard[row][col === 0 ? 0 : col - 1][0] = \"\";\n            return prevBoard;\n          });\n        } else {\n          setBoard((prevBoard) => {\n            if (col < 5) {\n              if (props.letter !== \"ENTER\") {\n                prevBoard[row][col][0] = props.letter;\n                setCol(col + 1);\n              } else {\n                props.error(\"Words are 5 letters long!\");\n                setTimeout(() => {\n                  props.error(\"\");\n                }, 1000);\n              }\n            } else {\n              if (props.letter === \"ENTER\") {\n                let correctLetters = 0;\n                let word = \"\";\n                for (let i = 0; i < 5; i++) {\n                  word += prevBoard[row][i][0];\n                }\n                if (words.includes(word.toLowerCase())) {\n                  for (let i = 0; i < 5; i++) {\n                    if (correct[i] === prevBoard[row][i][0]) {\n                      prevBoard[row][i][1] = \"C\";\n                      correctLetters++;\n                    } else if (correct.includes(prevBoard[row][i][0]))\n                      prevBoard[row][i][1] = \"E\";\n                    else prevBoard[row][i][1] = \"N\";\n                    setRow(row + 1);\n                    if (row === 5) {\n                      setLost(true);\n                      setTimeout(() => {\n                        setMessage(`It was ${correct}`);\n                      }, 750);\n                    }\n\n                    setCol(0);\n                    setLetters((prev) => {\n                      prev[board[row][i][0]] = board[row][i][1];\n                      return prev;\n                    });\n                  }\n                  setChanged(!changed);\n\n                  if (correctLetters === 5) {\n                    setWin(true);\n                    setTimeout(() => {\n                      setMessage(\"You WIN\");\n                    }, 750);\n                  }\n                  return prevBoard;\n                } else {\n                  props.error(\"Word not in dictionary\");\n                  setTimeout(() => {\n                    props.error(\"\");\n                  }, 1000);\n                }\n              }\n            }\n            return prevBoard;\n          });\n        }\n      }\n    }\n  }, [props.clicks]);\n\n  useEffect(() => {\n    props.letters(letters);\n  }, [changed]);\n\n  return (\n    <div className=\"px-10 py-5 grid gap-y-1 items-center w-100 justify-center\">\n      {board.map((row, key) => {\n        return (\n          <div key={key} className=\"flex gap-1 w-fit\">\n            {row.map((value, key) => (\n              <Box key={key} value={value[0]} state={value[1]} pos={key} />\n            ))}\n          </div>\n        );\n      })}\n      <div className=\" grid place-items-center h-8 font-bold dark:text-white\">\n        {lost || win ? message : \"\"}\n      </div>\n    </div>\n  );\n}\n\nexport default Board;\n"]},"metadata":{},"sourceType":"module"}