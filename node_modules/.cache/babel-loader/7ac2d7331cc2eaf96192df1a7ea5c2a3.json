{"ast":null,"code":"import { SHA2 } from './_sha2.js';\nimport u64 from './_u64.js';\nimport { wrapConstructor } from './utils.js'; // Round contants (first 32 bits of the fractional parts of the cube roots of the first 80 primes 2..409):\n// prettier-ignore\n\nconst [SHA512_Kh, SHA512_Kl] = u64.split(['0x428a2f98d728ae22', '0x7137449123ef65cd', '0xb5c0fbcfec4d3b2f', '0xe9b5dba58189dbbc', '0x3956c25bf348b538', '0x59f111f1b605d019', '0x923f82a4af194f9b', '0xab1c5ed5da6d8118', '0xd807aa98a3030242', '0x12835b0145706fbe', '0x243185be4ee4b28c', '0x550c7dc3d5ffb4e2', '0x72be5d74f27b896f', '0x80deb1fe3b1696b1', '0x9bdc06a725c71235', '0xc19bf174cf692694', '0xe49b69c19ef14ad2', '0xefbe4786384f25e3', '0x0fc19dc68b8cd5b5', '0x240ca1cc77ac9c65', '0x2de92c6f592b0275', '0x4a7484aa6ea6e483', '0x5cb0a9dcbd41fbd4', '0x76f988da831153b5', '0x983e5152ee66dfab', '0xa831c66d2db43210', '0xb00327c898fb213f', '0xbf597fc7beef0ee4', '0xc6e00bf33da88fc2', '0xd5a79147930aa725', '0x06ca6351e003826f', '0x142929670a0e6e70', '0x27b70a8546d22ffc', '0x2e1b21385c26c926', '0x4d2c6dfc5ac42aed', '0x53380d139d95b3df', '0x650a73548baf63de', '0x766a0abb3c77b2a8', '0x81c2c92e47edaee6', '0x92722c851482353b', '0xa2bfe8a14cf10364', '0xa81a664bbc423001', '0xc24b8b70d0f89791', '0xc76c51a30654be30', '0xd192e819d6ef5218', '0xd69906245565a910', '0xf40e35855771202a', '0x106aa07032bbd1b8', '0x19a4c116b8d2d0c8', '0x1e376c085141ab53', '0x2748774cdf8eeb99', '0x34b0bcb5e19b48a8', '0x391c0cb3c5c95a63', '0x4ed8aa4ae3418acb', '0x5b9cca4f7763e373', '0x682e6ff3d6b2b8a3', '0x748f82ee5defb2fc', '0x78a5636f43172f60', '0x84c87814a1f0ab72', '0x8cc702081a6439ec', '0x90befffa23631e28', '0xa4506cebde82bde9', '0xbef9a3f7b2c67915', '0xc67178f2e372532b', '0xca273eceea26619c', '0xd186b8c721c0c207', '0xeada7dd6cde0eb1e', '0xf57d4f7fee6ed178', '0x06f067aa72176fba', '0x0a637dc5a2c898a6', '0x113f9804bef90dae', '0x1b710b35131c471b', '0x28db77f523047d84', '0x32caab7b40c72493', '0x3c9ebe0a15c9bebc', '0x431d67c49c100d4c', '0x4cc5d4becb3e42b6', '0x597f299cfc657e2a', '0x5fcb6fab3ad6faec', '0x6c44198c4a475817'].map(n => BigInt(n))); // Temporary buffer, not used to store anything between runs\n\nconst SHA512_W_H = new Uint32Array(80);\nconst SHA512_W_L = new Uint32Array(80);\nexport class SHA512 extends SHA2 {\n  constructor() {\n    super(128, 64, 16, false); // We cannot use array here since array allows indexing by variable which means optimizer/compiler cannot use registers.\n    // Also looks cleaner and easier to verify with spec.\n    // Initial state (first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19):\n    // h -- high 32 bits, l -- low 32 bits\n\n    this.Ah = 0x6a09e667 | 0;\n    this.Al = 0xf3bcc908 | 0;\n    this.Bh = 0xbb67ae85 | 0;\n    this.Bl = 0x84caa73b | 0;\n    this.Ch = 0x3c6ef372 | 0;\n    this.Cl = 0xfe94f82b | 0;\n    this.Dh = 0xa54ff53a | 0;\n    this.Dl = 0x5f1d36f1 | 0;\n    this.Eh = 0x510e527f | 0;\n    this.El = 0xade682d1 | 0;\n    this.Fh = 0x9b05688c | 0;\n    this.Fl = 0x2b3e6c1f | 0;\n    this.Gh = 0x1f83d9ab | 0;\n    this.Gl = 0xfb41bd6b | 0;\n    this.Hh = 0x5be0cd19 | 0;\n    this.Hl = 0x137e2179 | 0;\n  } // prettier-ignore\n\n\n  get() {\n    const {\n      Ah,\n      Al,\n      Bh,\n      Bl,\n      Ch,\n      Cl,\n      Dh,\n      Dl,\n      Eh,\n      El,\n      Fh,\n      Fl,\n      Gh,\n      Gl,\n      Hh,\n      Hl\n    } = this;\n    return [Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl];\n  } // prettier-ignore\n\n\n  set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl) {\n    this.Ah = Ah | 0;\n    this.Al = Al | 0;\n    this.Bh = Bh | 0;\n    this.Bl = Bl | 0;\n    this.Ch = Ch | 0;\n    this.Cl = Cl | 0;\n    this.Dh = Dh | 0;\n    this.Dl = Dl | 0;\n    this.Eh = Eh | 0;\n    this.El = El | 0;\n    this.Fh = Fh | 0;\n    this.Fl = Fl | 0;\n    this.Gh = Gh | 0;\n    this.Gl = Gl | 0;\n    this.Hh = Hh | 0;\n    this.Hl = Hl | 0;\n  }\n\n  process(view, offset) {\n    // Extend the first 16 words into the remaining 64 words w[16..79] of the message schedule array\n    for (let i = 0; i < 16; i++, offset += 4) {\n      SHA512_W_H[i] = view.getUint32(offset);\n      SHA512_W_L[i] = view.getUint32(offset += 4);\n    }\n\n    for (let i = 16; i < 80; i++) {\n      // s0 := (w[i-15] rightrotate 1) xor (w[i-15] rightrotate 8) xor (w[i-15] rightshift 7)\n      const W15h = SHA512_W_H[i - 15] | 0;\n      const W15l = SHA512_W_L[i - 15] | 0;\n      const s0h = u64.rotrSH(W15h, W15l, 1) ^ u64.rotrSH(W15h, W15l, 8) ^ u64.shrSH(W15h, W15l, 7);\n      const s0l = u64.rotrSL(W15h, W15l, 1) ^ u64.rotrSL(W15h, W15l, 8) ^ u64.shrSL(W15h, W15l, 7); // s1 := (w[i-2] rightrotate 19) xor (w[i-2] rightrotate 61) xor (w[i-2] rightshift 6)\n\n      const W2h = SHA512_W_H[i - 2] | 0;\n      const W2l = SHA512_W_L[i - 2] | 0;\n      const s1h = u64.rotrSH(W2h, W2l, 19) ^ u64.rotrBH(W2h, W2l, 61) ^ u64.shrSH(W2h, W2l, 6);\n      const s1l = u64.rotrSL(W2h, W2l, 19) ^ u64.rotrBL(W2h, W2l, 61) ^ u64.shrSL(W2h, W2l, 6); // SHA256_W[i] = s0 + s1 + SHA256_W[i - 7] + SHA256_W[i - 16];\n\n      const SUMl = u64.add4L(s0l, s1l, SHA512_W_L[i - 7], SHA512_W_L[i - 16]);\n      const SUMh = u64.add4H(SUMl, s0h, s1h, SHA512_W_H[i - 7], SHA512_W_H[i - 16]);\n      SHA512_W_H[i] = SUMh | 0;\n      SHA512_W_L[i] = SUMl | 0;\n    }\n\n    let {\n      Ah,\n      Al,\n      Bh,\n      Bl,\n      Ch,\n      Cl,\n      Dh,\n      Dl,\n      Eh,\n      El,\n      Fh,\n      Fl,\n      Gh,\n      Gl,\n      Hh,\n      Hl\n    } = this; // Compression function main loop, 80 rounds\n\n    for (let i = 0; i < 80; i++) {\n      // S1 := (e rightrotate 14) xor (e rightrotate 18) xor (e rightrotate 41)\n      const sigma1h = u64.rotrSH(Eh, El, 14) ^ u64.rotrSH(Eh, El, 18) ^ u64.rotrBH(Eh, El, 41);\n      const sigma1l = u64.rotrSL(Eh, El, 14) ^ u64.rotrSL(Eh, El, 18) ^ u64.rotrBL(Eh, El, 41); //const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\n\n      const CHIh = Eh & Fh ^ ~Eh & Gh;\n      const CHIl = El & Fl ^ ~El & Gl; // T1 = H + sigma1 + Chi(E, F, G) + SHA512_K[i] + SHA512_W[i]\n      // prettier-ignore\n\n      const T1ll = u64.add5L(Hl, sigma1l, CHIl, SHA512_Kl[i], SHA512_W_L[i]);\n      const T1h = u64.add5H(T1ll, Hh, sigma1h, CHIh, SHA512_Kh[i], SHA512_W_H[i]);\n      const T1l = T1ll | 0; // S0 := (a rightrotate 28) xor (a rightrotate 34) xor (a rightrotate 39)\n\n      const sigma0h = u64.rotrSH(Ah, Al, 28) ^ u64.rotrBH(Ah, Al, 34) ^ u64.rotrBH(Ah, Al, 39);\n      const sigma0l = u64.rotrSL(Ah, Al, 28) ^ u64.rotrBL(Ah, Al, 34) ^ u64.rotrBL(Ah, Al, 39);\n      const MAJh = Ah & Bh ^ Ah & Ch ^ Bh & Ch;\n      const MAJl = Al & Bl ^ Al & Cl ^ Bl & Cl;\n      Hh = Gh | 0;\n      Hl = Gl | 0;\n      Gh = Fh | 0;\n      Gl = Fl | 0;\n      Fh = Eh | 0;\n      Fl = El | 0;\n      ({\n        h: Eh,\n        l: El\n      } = u64.add(Dh | 0, Dl | 0, T1h | 0, T1l | 0));\n      Dh = Ch | 0;\n      Dl = Cl | 0;\n      Ch = Bh | 0;\n      Cl = Bl | 0;\n      Bh = Ah | 0;\n      Bl = Al | 0;\n      const All = u64.add3L(T1l, sigma0l, MAJl);\n      Ah = u64.add3H(All, T1h, sigma0h, MAJh);\n      Al = All | 0;\n    } // Add the compressed chunk to the current hash value\n\n\n    ({\n      h: Ah,\n      l: Al\n    } = u64.add(this.Ah | 0, this.Al | 0, Ah | 0, Al | 0));\n    ({\n      h: Bh,\n      l: Bl\n    } = u64.add(this.Bh | 0, this.Bl | 0, Bh | 0, Bl | 0));\n    ({\n      h: Ch,\n      l: Cl\n    } = u64.add(this.Ch | 0, this.Cl | 0, Ch | 0, Cl | 0));\n    ({\n      h: Dh,\n      l: Dl\n    } = u64.add(this.Dh | 0, this.Dl | 0, Dh | 0, Dl | 0));\n    ({\n      h: Eh,\n      l: El\n    } = u64.add(this.Eh | 0, this.El | 0, Eh | 0, El | 0));\n    ({\n      h: Fh,\n      l: Fl\n    } = u64.add(this.Fh | 0, this.Fl | 0, Fh | 0, Fl | 0));\n    ({\n      h: Gh,\n      l: Gl\n    } = u64.add(this.Gh | 0, this.Gl | 0, Gh | 0, Gl | 0));\n    ({\n      h: Hh,\n      l: Hl\n    } = u64.add(this.Hh | 0, this.Hl | 0, Hh | 0, Hl | 0));\n    this.set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl);\n  }\n\n  roundClean() {\n    SHA512_W_H.fill(0);\n    SHA512_W_L.fill(0);\n  }\n\n  destroy() {\n    this.buffer.fill(0);\n    this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);\n  }\n\n}\n\nclass SHA512_256 extends SHA512 {\n  constructor() {\n    super(); // h -- high 32 bits, l -- low 32 bits\n\n    this.Ah = 0x22312194 | 0;\n    this.Al = 0xfc2bf72c | 0;\n    this.Bh = 0x9f555fa3 | 0;\n    this.Bl = 0xc84c64c2 | 0;\n    this.Ch = 0x2393b86b | 0;\n    this.Cl = 0x6f53b151 | 0;\n    this.Dh = 0x96387719 | 0;\n    this.Dl = 0x5940eabd | 0;\n    this.Eh = 0x96283ee2 | 0;\n    this.El = 0xa88effe3 | 0;\n    this.Fh = 0xbe5e1e25 | 0;\n    this.Fl = 0x53863992 | 0;\n    this.Gh = 0x2b0199fc | 0;\n    this.Gl = 0x2c85b8aa | 0;\n    this.Hh = 0x0eb72ddc | 0;\n    this.Hl = 0x81c52ca2 | 0;\n    this.outputLen = 32;\n  }\n\n}\n\nclass SHA384 extends SHA512 {\n  constructor() {\n    super(); // h -- high 32 bits, l -- low 32 bits\n\n    this.Ah = 0xcbbb9d5d | 0;\n    this.Al = 0xc1059ed8 | 0;\n    this.Bh = 0x629a292a | 0;\n    this.Bl = 0x367cd507 | 0;\n    this.Ch = 0x9159015a | 0;\n    this.Cl = 0x3070dd17 | 0;\n    this.Dh = 0x152fecd8 | 0;\n    this.Dl = 0xf70e5939 | 0;\n    this.Eh = 0x67332667 | 0;\n    this.El = 0xffc00b31 | 0;\n    this.Fh = 0x8eb44a87 | 0;\n    this.Fl = 0x68581511 | 0;\n    this.Gh = 0xdb0c2e0d | 0;\n    this.Gl = 0x64f98fa7 | 0;\n    this.Hh = 0x47b5481d | 0;\n    this.Hl = 0xbefa4fa4 | 0;\n    this.outputLen = 48;\n  }\n\n}\n\nexport const sha512 = wrapConstructor(() => new SHA512());\nexport const sha512_256 = wrapConstructor(() => new SHA512_256());\nexport const sha384 = wrapConstructor(() => new SHA384());","map":{"version":3,"sources":["/home/mahir/INTER-IIT/wordle/node_modules/@noble/hashes/esm/sha512.js"],"names":["SHA2","u64","wrapConstructor","SHA512_Kh","SHA512_Kl","split","map","n","BigInt","SHA512_W_H","Uint32Array","SHA512_W_L","SHA512","constructor","Ah","Al","Bh","Bl","Ch","Cl","Dh","Dl","Eh","El","Fh","Fl","Gh","Gl","Hh","Hl","get","set","process","view","offset","i","getUint32","W15h","W15l","s0h","rotrSH","shrSH","s0l","rotrSL","shrSL","W2h","W2l","s1h","rotrBH","s1l","rotrBL","SUMl","add4L","SUMh","add4H","sigma1h","sigma1l","CHIh","CHIl","T1ll","add5L","T1h","add5H","T1l","sigma0h","sigma0l","MAJh","MAJl","h","l","add","All","add3L","add3H","roundClean","fill","destroy","buffer","SHA512_256","outputLen","SHA384","sha512","sha512_256","sha384"],"mappings":"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","sourcesContent":["import { SHA2 } from './_sha2.js';\nimport u64 from './_u64.js';\nimport { wrapConstructor } from './utils.js';\n// Round contants (first 32 bits of the fractional parts of the cube roots of the first 80 primes 2..409):\n// prettier-ignore\nconst [SHA512_Kh, SHA512_Kl] = u64.split([\n    '0x428a2f98d728ae22', '0x7137449123ef65cd', '0xb5c0fbcfec4d3b2f', '0xe9b5dba58189dbbc',\n    '0x3956c25bf348b538', '0x59f111f1b605d019', '0x923f82a4af194f9b', '0xab1c5ed5da6d8118',\n    '0xd807aa98a3030242', '0x12835b0145706fbe', '0x243185be4ee4b28c', '0x550c7dc3d5ffb4e2',\n    '0x72be5d74f27b896f', '0x80deb1fe3b1696b1', '0x9bdc06a725c71235', '0xc19bf174cf692694',\n    '0xe49b69c19ef14ad2', '0xefbe4786384f25e3', '0x0fc19dc68b8cd5b5', '0x240ca1cc77ac9c65',\n    '0x2de92c6f592b0275', '0x4a7484aa6ea6e483', '0x5cb0a9dcbd41fbd4', '0x76f988da831153b5',\n    '0x983e5152ee66dfab', '0xa831c66d2db43210', '0xb00327c898fb213f', '0xbf597fc7beef0ee4',\n    '0xc6e00bf33da88fc2', '0xd5a79147930aa725', '0x06ca6351e003826f', '0x142929670a0e6e70',\n    '0x27b70a8546d22ffc', '0x2e1b21385c26c926', '0x4d2c6dfc5ac42aed', '0x53380d139d95b3df',\n    '0x650a73548baf63de', '0x766a0abb3c77b2a8', '0x81c2c92e47edaee6', '0x92722c851482353b',\n    '0xa2bfe8a14cf10364', '0xa81a664bbc423001', '0xc24b8b70d0f89791', '0xc76c51a30654be30',\n    '0xd192e819d6ef5218', '0xd69906245565a910', '0xf40e35855771202a', '0x106aa07032bbd1b8',\n    '0x19a4c116b8d2d0c8', '0x1e376c085141ab53', '0x2748774cdf8eeb99', '0x34b0bcb5e19b48a8',\n    '0x391c0cb3c5c95a63', '0x4ed8aa4ae3418acb', '0x5b9cca4f7763e373', '0x682e6ff3d6b2b8a3',\n    '0x748f82ee5defb2fc', '0x78a5636f43172f60', '0x84c87814a1f0ab72', '0x8cc702081a6439ec',\n    '0x90befffa23631e28', '0xa4506cebde82bde9', '0xbef9a3f7b2c67915', '0xc67178f2e372532b',\n    '0xca273eceea26619c', '0xd186b8c721c0c207', '0xeada7dd6cde0eb1e', '0xf57d4f7fee6ed178',\n    '0x06f067aa72176fba', '0x0a637dc5a2c898a6', '0x113f9804bef90dae', '0x1b710b35131c471b',\n    '0x28db77f523047d84', '0x32caab7b40c72493', '0x3c9ebe0a15c9bebc', '0x431d67c49c100d4c',\n    '0x4cc5d4becb3e42b6', '0x597f299cfc657e2a', '0x5fcb6fab3ad6faec', '0x6c44198c4a475817'\n].map(n => BigInt(n)));\n// Temporary buffer, not used to store anything between runs\nconst SHA512_W_H = new Uint32Array(80);\nconst SHA512_W_L = new Uint32Array(80);\nexport class SHA512 extends SHA2 {\n    constructor() {\n        super(128, 64, 16, false);\n        // We cannot use array here since array allows indexing by variable which means optimizer/compiler cannot use registers.\n        // Also looks cleaner and easier to verify with spec.\n        // Initial state (first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19):\n        // h -- high 32 bits, l -- low 32 bits\n        this.Ah = 0x6a09e667 | 0;\n        this.Al = 0xf3bcc908 | 0;\n        this.Bh = 0xbb67ae85 | 0;\n        this.Bl = 0x84caa73b | 0;\n        this.Ch = 0x3c6ef372 | 0;\n        this.Cl = 0xfe94f82b | 0;\n        this.Dh = 0xa54ff53a | 0;\n        this.Dl = 0x5f1d36f1 | 0;\n        this.Eh = 0x510e527f | 0;\n        this.El = 0xade682d1 | 0;\n        this.Fh = 0x9b05688c | 0;\n        this.Fl = 0x2b3e6c1f | 0;\n        this.Gh = 0x1f83d9ab | 0;\n        this.Gl = 0xfb41bd6b | 0;\n        this.Hh = 0x5be0cd19 | 0;\n        this.Hl = 0x137e2179 | 0;\n    }\n    // prettier-ignore\n    get() {\n        const { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;\n        return [Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl];\n    }\n    // prettier-ignore\n    set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl) {\n        this.Ah = Ah | 0;\n        this.Al = Al | 0;\n        this.Bh = Bh | 0;\n        this.Bl = Bl | 0;\n        this.Ch = Ch | 0;\n        this.Cl = Cl | 0;\n        this.Dh = Dh | 0;\n        this.Dl = Dl | 0;\n        this.Eh = Eh | 0;\n        this.El = El | 0;\n        this.Fh = Fh | 0;\n        this.Fl = Fl | 0;\n        this.Gh = Gh | 0;\n        this.Gl = Gl | 0;\n        this.Hh = Hh | 0;\n        this.Hl = Hl | 0;\n    }\n    process(view, offset) {\n        // Extend the first 16 words into the remaining 64 words w[16..79] of the message schedule array\n        for (let i = 0; i < 16; i++, offset += 4) {\n            SHA512_W_H[i] = view.getUint32(offset);\n            SHA512_W_L[i] = view.getUint32((offset += 4));\n        }\n        for (let i = 16; i < 80; i++) {\n            // s0 := (w[i-15] rightrotate 1) xor (w[i-15] rightrotate 8) xor (w[i-15] rightshift 7)\n            const W15h = SHA512_W_H[i - 15] | 0;\n            const W15l = SHA512_W_L[i - 15] | 0;\n            const s0h = u64.rotrSH(W15h, W15l, 1) ^ u64.rotrSH(W15h, W15l, 8) ^ u64.shrSH(W15h, W15l, 7);\n            const s0l = u64.rotrSL(W15h, W15l, 1) ^ u64.rotrSL(W15h, W15l, 8) ^ u64.shrSL(W15h, W15l, 7);\n            // s1 := (w[i-2] rightrotate 19) xor (w[i-2] rightrotate 61) xor (w[i-2] rightshift 6)\n            const W2h = SHA512_W_H[i - 2] | 0;\n            const W2l = SHA512_W_L[i - 2] | 0;\n            const s1h = u64.rotrSH(W2h, W2l, 19) ^ u64.rotrBH(W2h, W2l, 61) ^ u64.shrSH(W2h, W2l, 6);\n            const s1l = u64.rotrSL(W2h, W2l, 19) ^ u64.rotrBL(W2h, W2l, 61) ^ u64.shrSL(W2h, W2l, 6);\n            // SHA256_W[i] = s0 + s1 + SHA256_W[i - 7] + SHA256_W[i - 16];\n            const SUMl = u64.add4L(s0l, s1l, SHA512_W_L[i - 7], SHA512_W_L[i - 16]);\n            const SUMh = u64.add4H(SUMl, s0h, s1h, SHA512_W_H[i - 7], SHA512_W_H[i - 16]);\n            SHA512_W_H[i] = SUMh | 0;\n            SHA512_W_L[i] = SUMl | 0;\n        }\n        let { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;\n        // Compression function main loop, 80 rounds\n        for (let i = 0; i < 80; i++) {\n            // S1 := (e rightrotate 14) xor (e rightrotate 18) xor (e rightrotate 41)\n            const sigma1h = u64.rotrSH(Eh, El, 14) ^ u64.rotrSH(Eh, El, 18) ^ u64.rotrBH(Eh, El, 41);\n            const sigma1l = u64.rotrSL(Eh, El, 14) ^ u64.rotrSL(Eh, El, 18) ^ u64.rotrBL(Eh, El, 41);\n            //const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\n            const CHIh = (Eh & Fh) ^ (~Eh & Gh);\n            const CHIl = (El & Fl) ^ (~El & Gl);\n            // T1 = H + sigma1 + Chi(E, F, G) + SHA512_K[i] + SHA512_W[i]\n            // prettier-ignore\n            const T1ll = u64.add5L(Hl, sigma1l, CHIl, SHA512_Kl[i], SHA512_W_L[i]);\n            const T1h = u64.add5H(T1ll, Hh, sigma1h, CHIh, SHA512_Kh[i], SHA512_W_H[i]);\n            const T1l = T1ll | 0;\n            // S0 := (a rightrotate 28) xor (a rightrotate 34) xor (a rightrotate 39)\n            const sigma0h = u64.rotrSH(Ah, Al, 28) ^ u64.rotrBH(Ah, Al, 34) ^ u64.rotrBH(Ah, Al, 39);\n            const sigma0l = u64.rotrSL(Ah, Al, 28) ^ u64.rotrBL(Ah, Al, 34) ^ u64.rotrBL(Ah, Al, 39);\n            const MAJh = (Ah & Bh) ^ (Ah & Ch) ^ (Bh & Ch);\n            const MAJl = (Al & Bl) ^ (Al & Cl) ^ (Bl & Cl);\n            Hh = Gh | 0;\n            Hl = Gl | 0;\n            Gh = Fh | 0;\n            Gl = Fl | 0;\n            Fh = Eh | 0;\n            Fl = El | 0;\n            ({ h: Eh, l: El } = u64.add(Dh | 0, Dl | 0, T1h | 0, T1l | 0));\n            Dh = Ch | 0;\n            Dl = Cl | 0;\n            Ch = Bh | 0;\n            Cl = Bl | 0;\n            Bh = Ah | 0;\n            Bl = Al | 0;\n            const All = u64.add3L(T1l, sigma0l, MAJl);\n            Ah = u64.add3H(All, T1h, sigma0h, MAJh);\n            Al = All | 0;\n        }\n        // Add the compressed chunk to the current hash value\n        ({ h: Ah, l: Al } = u64.add(this.Ah | 0, this.Al | 0, Ah | 0, Al | 0));\n        ({ h: Bh, l: Bl } = u64.add(this.Bh | 0, this.Bl | 0, Bh | 0, Bl | 0));\n        ({ h: Ch, l: Cl } = u64.add(this.Ch | 0, this.Cl | 0, Ch | 0, Cl | 0));\n        ({ h: Dh, l: Dl } = u64.add(this.Dh | 0, this.Dl | 0, Dh | 0, Dl | 0));\n        ({ h: Eh, l: El } = u64.add(this.Eh | 0, this.El | 0, Eh | 0, El | 0));\n        ({ h: Fh, l: Fl } = u64.add(this.Fh | 0, this.Fl | 0, Fh | 0, Fl | 0));\n        ({ h: Gh, l: Gl } = u64.add(this.Gh | 0, this.Gl | 0, Gh | 0, Gl | 0));\n        ({ h: Hh, l: Hl } = u64.add(this.Hh | 0, this.Hl | 0, Hh | 0, Hl | 0));\n        this.set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl);\n    }\n    roundClean() {\n        SHA512_W_H.fill(0);\n        SHA512_W_L.fill(0);\n    }\n    destroy() {\n        this.buffer.fill(0);\n        this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);\n    }\n}\nclass SHA512_256 extends SHA512 {\n    constructor() {\n        super();\n        // h -- high 32 bits, l -- low 32 bits\n        this.Ah = 0x22312194 | 0;\n        this.Al = 0xfc2bf72c | 0;\n        this.Bh = 0x9f555fa3 | 0;\n        this.Bl = 0xc84c64c2 | 0;\n        this.Ch = 0x2393b86b | 0;\n        this.Cl = 0x6f53b151 | 0;\n        this.Dh = 0x96387719 | 0;\n        this.Dl = 0x5940eabd | 0;\n        this.Eh = 0x96283ee2 | 0;\n        this.El = 0xa88effe3 | 0;\n        this.Fh = 0xbe5e1e25 | 0;\n        this.Fl = 0x53863992 | 0;\n        this.Gh = 0x2b0199fc | 0;\n        this.Gl = 0x2c85b8aa | 0;\n        this.Hh = 0x0eb72ddc | 0;\n        this.Hl = 0x81c52ca2 | 0;\n        this.outputLen = 32;\n    }\n}\nclass SHA384 extends SHA512 {\n    constructor() {\n        super();\n        // h -- high 32 bits, l -- low 32 bits\n        this.Ah = 0xcbbb9d5d | 0;\n        this.Al = 0xc1059ed8 | 0;\n        this.Bh = 0x629a292a | 0;\n        this.Bl = 0x367cd507 | 0;\n        this.Ch = 0x9159015a | 0;\n        this.Cl = 0x3070dd17 | 0;\n        this.Dh = 0x152fecd8 | 0;\n        this.Dl = 0xf70e5939 | 0;\n        this.Eh = 0x67332667 | 0;\n        this.El = 0xffc00b31 | 0;\n        this.Fh = 0x8eb44a87 | 0;\n        this.Fl = 0x68581511 | 0;\n        this.Gh = 0xdb0c2e0d | 0;\n        this.Gl = 0x64f98fa7 | 0;\n        this.Hh = 0x47b5481d | 0;\n        this.Hl = 0xbefa4fa4 | 0;\n        this.outputLen = 48;\n    }\n}\nexport const sha512 = wrapConstructor(() => new SHA512());\nexport const sha512_256 = wrapConstructor(() => new SHA512_256());\nexport const sha384 = wrapConstructor(() => new SHA384());\n"]},"metadata":{},"sourceType":"module"}