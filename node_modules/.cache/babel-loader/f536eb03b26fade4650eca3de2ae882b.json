{"ast":null,"code":"export function number(n) {\n  if (!Number.isSafeInteger(n) || n < 0) throw new Error(`Wrong positive integer: ${n}`);\n}\nexport function bool(b) {\n  if (typeof b !== 'boolean') throw new Error(`Expected boolean, not ${b}`);\n}\nexport function bytes(b) {\n  if (!(b instanceof Uint8Array)) throw new TypeError('Expected Uint8Array');\n\n  for (var _len = arguments.length, lengths = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    lengths[_key - 1] = arguments[_key];\n  }\n\n  if (lengths.length > 0 && !lengths.includes(b.length)) throw new TypeError(`Expected Uint8Array of length ${lengths}, not of length=${b.length}`);\n}\nexport function hash(hash) {\n  if (typeof hash !== 'function' || typeof hash.create !== 'function') throw new Error('Hash should be wrapped by utils.wrapConstructor');\n  number(hash.outputLen);\n  number(hash.blockLen);\n}\nexport function exists(instance) {\n  let checkFinished = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n  if (instance.destroyed) throw new Error('Hash instance has been destroyed');\n  if (checkFinished && instance.finished) throw new Error('Hash#digest() has already been called');\n}\nexport function output(out, instance) {\n  bytes(out);\n  const min = instance.outputLen;\n\n  if (out.length < min) {\n    throw new Error(`digestInto() expects output buffer of length at least ${min}`);\n  }\n}\nconst assert = {\n  number,\n  bool,\n  bytes,\n  hash,\n  exists,\n  output\n};\nexport default assert;","map":{"version":3,"sources":["/home/mahir/INTER-IIT/wordle/node_modules/@noble/hashes/esm/_assert.js"],"names":["number","n","Number","isSafeInteger","Error","bool","b","bytes","Uint8Array","TypeError","lengths","length","includes","hash","create","outputLen","blockLen","exists","instance","checkFinished","destroyed","finished","output","out","min","assert"],"mappings":"AAAA,OAAO,SAASA,MAAT,CAAgBC,CAAhB,EAAmB;AACtB,MAAI,CAACC,MAAM,CAACC,aAAP,CAAqBF,CAArB,CAAD,IAA4BA,CAAC,GAAG,CAApC,EACI,MAAM,IAAIG,KAAJ,CAAW,2BAA0BH,CAAE,EAAvC,CAAN;AACP;AACD,OAAO,SAASI,IAAT,CAAcC,CAAd,EAAiB;AACpB,MAAI,OAAOA,CAAP,KAAa,SAAjB,EACI,MAAM,IAAIF,KAAJ,CAAW,yBAAwBE,CAAE,EAArC,CAAN;AACP;AACD,OAAO,SAASC,KAAT,CAAeD,CAAf,EAA8B;AACjC,MAAI,EAAEA,CAAC,YAAYE,UAAf,CAAJ,EACI,MAAM,IAAIC,SAAJ,CAAc,qBAAd,CAAN;;AAF6B,oCAATC,OAAS;AAATA,IAAAA,OAAS;AAAA;;AAGjC,MAAIA,OAAO,CAACC,MAAR,GAAiB,CAAjB,IAAsB,CAACD,OAAO,CAACE,QAAR,CAAiBN,CAAC,CAACK,MAAnB,CAA3B,EACI,MAAM,IAAIF,SAAJ,CAAe,iCAAgCC,OAAQ,mBAAkBJ,CAAC,CAACK,MAAO,EAAlF,CAAN;AACP;AACD,OAAO,SAASE,IAAT,CAAcA,IAAd,EAAoB;AACvB,MAAI,OAAOA,IAAP,KAAgB,UAAhB,IAA8B,OAAOA,IAAI,CAACC,MAAZ,KAAuB,UAAzD,EACI,MAAM,IAAIV,KAAJ,CAAU,iDAAV,CAAN;AACJJ,EAAAA,MAAM,CAACa,IAAI,CAACE,SAAN,CAAN;AACAf,EAAAA,MAAM,CAACa,IAAI,CAACG,QAAN,CAAN;AACH;AACD,OAAO,SAASC,MAAT,CAAgBC,QAAhB,EAAgD;AAAA,MAAtBC,aAAsB,uEAAN,IAAM;AACnD,MAAID,QAAQ,CAACE,SAAb,EACI,MAAM,IAAIhB,KAAJ,CAAU,kCAAV,CAAN;AACJ,MAAIe,aAAa,IAAID,QAAQ,CAACG,QAA9B,EACI,MAAM,IAAIjB,KAAJ,CAAU,uCAAV,CAAN;AACP;AACD,OAAO,SAASkB,MAAT,CAAgBC,GAAhB,EAAqBL,QAArB,EAA+B;AAClCX,EAAAA,KAAK,CAACgB,GAAD,CAAL;AACA,QAAMC,GAAG,GAAGN,QAAQ,CAACH,SAArB;;AACA,MAAIQ,GAAG,CAACZ,MAAJ,GAAaa,GAAjB,EAAsB;AAClB,UAAM,IAAIpB,KAAJ,CAAW,yDAAwDoB,GAAI,EAAvE,CAAN;AACH;AACJ;AACD,MAAMC,MAAM,GAAG;AACXzB,EAAAA,MADW;AAEXK,EAAAA,IAFW;AAGXE,EAAAA,KAHW;AAIXM,EAAAA,IAJW;AAKXI,EAAAA,MALW;AAMXK,EAAAA;AANW,CAAf;AAQA,eAAeG,MAAf","sourcesContent":["export function number(n) {\n    if (!Number.isSafeInteger(n) || n < 0)\n        throw new Error(`Wrong positive integer: ${n}`);\n}\nexport function bool(b) {\n    if (typeof b !== 'boolean')\n        throw new Error(`Expected boolean, not ${b}`);\n}\nexport function bytes(b, ...lengths) {\n    if (!(b instanceof Uint8Array))\n        throw new TypeError('Expected Uint8Array');\n    if (lengths.length > 0 && !lengths.includes(b.length))\n        throw new TypeError(`Expected Uint8Array of length ${lengths}, not of length=${b.length}`);\n}\nexport function hash(hash) {\n    if (typeof hash !== 'function' || typeof hash.create !== 'function')\n        throw new Error('Hash should be wrapped by utils.wrapConstructor');\n    number(hash.outputLen);\n    number(hash.blockLen);\n}\nexport function exists(instance, checkFinished = true) {\n    if (instance.destroyed)\n        throw new Error('Hash instance has been destroyed');\n    if (checkFinished && instance.finished)\n        throw new Error('Hash#digest() has already been called');\n}\nexport function output(out, instance) {\n    bytes(out);\n    const min = instance.outputLen;\n    if (out.length < min) {\n        throw new Error(`digestInto() expects output buffer of length at least ${min}`);\n    }\n}\nconst assert = {\n    number,\n    bool,\n    bytes,\n    hash,\n    exists,\n    output,\n};\nexport default assert;\n"]},"metadata":{},"sourceType":"module"}