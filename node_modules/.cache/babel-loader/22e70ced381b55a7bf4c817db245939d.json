{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.hmac = void 0;\n\nconst _assert_js_1 = require(\"./_assert.js\");\n\nconst utils_js_1 = require(\"./utils.js\"); // HMAC (RFC 2104)\n\n\nclass HMAC extends utils_js_1.Hash {\n  constructor(hash, _key) {\n    super();\n    this.finished = false;\n    this.destroyed = false;\n\n    _assert_js_1.default.hash(hash);\n\n    const key = (0, utils_js_1.toBytes)(_key);\n    this.iHash = hash.create();\n    if (typeof this.iHash.update !== 'function') throw new TypeError('Expected instance of class which extends utils.Hash');\n    this.blockLen = this.iHash.blockLen;\n    this.outputLen = this.iHash.outputLen;\n    const blockLen = this.blockLen;\n    const pad = new Uint8Array(blockLen); // blockLen can be bigger than outputLen\n\n    pad.set(key.length > blockLen ? hash.create().update(key).digest() : key);\n\n    for (let i = 0; i < pad.length; i++) pad[i] ^= 0x36;\n\n    this.iHash.update(pad); // By doing update (processing of first block) of outer hash here we can re-use it between multiple calls via clone\n\n    this.oHash = hash.create(); // Undo internal XOR && apply outer XOR\n\n    for (let i = 0; i < pad.length; i++) pad[i] ^= 0x36 ^ 0x5c;\n\n    this.oHash.update(pad);\n    pad.fill(0);\n  }\n\n  update(buf) {\n    _assert_js_1.default.exists(this);\n\n    this.iHash.update(buf);\n    return this;\n  }\n\n  digestInto(out) {\n    _assert_js_1.default.exists(this);\n\n    _assert_js_1.default.bytes(out, this.outputLen);\n\n    this.finished = true;\n    this.iHash.digestInto(out);\n    this.oHash.update(out);\n    this.oHash.digestInto(out);\n    this.destroy();\n  }\n\n  digest() {\n    const out = new Uint8Array(this.oHash.outputLen);\n    this.digestInto(out);\n    return out;\n  }\n\n  _cloneInto(to) {\n    // Create new instance without calling constructor since key already in state and we don't know it.\n    to || (to = Object.create(Object.getPrototypeOf(this), {}));\n    const {\n      oHash,\n      iHash,\n      finished,\n      destroyed,\n      blockLen,\n      outputLen\n    } = this;\n    to = to;\n    to.finished = finished;\n    to.destroyed = destroyed;\n    to.blockLen = blockLen;\n    to.outputLen = outputLen;\n    to.oHash = oHash._cloneInto(to.oHash);\n    to.iHash = iHash._cloneInto(to.iHash);\n    return to;\n  }\n\n  destroy() {\n    this.destroyed = true;\n    this.oHash.destroy();\n    this.iHash.destroy();\n  }\n\n}\n/**\n * HMAC: RFC2104 message authentication code.\n * @param hash - function that would be used e.g. sha256\n * @param key - message key\n * @param message - message data\n */\n\n\nconst hmac = (hash, key, message) => new HMAC(hash, key).update(message).digest();\n\nexports.hmac = hmac;\n\nexports.hmac.create = (hash, key) => new HMAC(hash, key);","map":{"version":3,"sources":["/home/mahir/INTER-IIT/wordle/node_modules/@noble/hashes/hmac.js"],"names":["Object","defineProperty","exports","value","hmac","_assert_js_1","require","utils_js_1","HMAC","Hash","constructor","hash","_key","finished","destroyed","default","key","toBytes","iHash","create","update","TypeError","blockLen","outputLen","pad","Uint8Array","set","length","digest","i","oHash","fill","buf","exists","digestInto","out","bytes","destroy","_cloneInto","to","getPrototypeOf","message"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.hmac = void 0;\nconst _assert_js_1 = require(\"./_assert.js\");\nconst utils_js_1 = require(\"./utils.js\");\n// HMAC (RFC 2104)\nclass HMAC extends utils_js_1.Hash {\n    constructor(hash, _key) {\n        super();\n        this.finished = false;\n        this.destroyed = false;\n        _assert_js_1.default.hash(hash);\n        const key = (0, utils_js_1.toBytes)(_key);\n        this.iHash = hash.create();\n        if (typeof this.iHash.update !== 'function')\n            throw new TypeError('Expected instance of class which extends utils.Hash');\n        this.blockLen = this.iHash.blockLen;\n        this.outputLen = this.iHash.outputLen;\n        const blockLen = this.blockLen;\n        const pad = new Uint8Array(blockLen);\n        // blockLen can be bigger than outputLen\n        pad.set(key.length > blockLen ? hash.create().update(key).digest() : key);\n        for (let i = 0; i < pad.length; i++)\n            pad[i] ^= 0x36;\n        this.iHash.update(pad);\n        // By doing update (processing of first block) of outer hash here we can re-use it between multiple calls via clone\n        this.oHash = hash.create();\n        // Undo internal XOR && apply outer XOR\n        for (let i = 0; i < pad.length; i++)\n            pad[i] ^= 0x36 ^ 0x5c;\n        this.oHash.update(pad);\n        pad.fill(0);\n    }\n    update(buf) {\n        _assert_js_1.default.exists(this);\n        this.iHash.update(buf);\n        return this;\n    }\n    digestInto(out) {\n        _assert_js_1.default.exists(this);\n        _assert_js_1.default.bytes(out, this.outputLen);\n        this.finished = true;\n        this.iHash.digestInto(out);\n        this.oHash.update(out);\n        this.oHash.digestInto(out);\n        this.destroy();\n    }\n    digest() {\n        const out = new Uint8Array(this.oHash.outputLen);\n        this.digestInto(out);\n        return out;\n    }\n    _cloneInto(to) {\n        // Create new instance without calling constructor since key already in state and we don't know it.\n        to || (to = Object.create(Object.getPrototypeOf(this), {}));\n        const { oHash, iHash, finished, destroyed, blockLen, outputLen } = this;\n        to = to;\n        to.finished = finished;\n        to.destroyed = destroyed;\n        to.blockLen = blockLen;\n        to.outputLen = outputLen;\n        to.oHash = oHash._cloneInto(to.oHash);\n        to.iHash = iHash._cloneInto(to.iHash);\n        return to;\n    }\n    destroy() {\n        this.destroyed = true;\n        this.oHash.destroy();\n        this.iHash.destroy();\n    }\n}\n/**\n * HMAC: RFC2104 message authentication code.\n * @param hash - function that would be used e.g. sha256\n * @param key - message key\n * @param message - message data\n */\nconst hmac = (hash, key, message) => new HMAC(hash, key).update(message).digest();\nexports.hmac = hmac;\nexports.hmac.create = (hash, key) => new HMAC(hash, key);\n"]},"metadata":{},"sourceType":"script"}