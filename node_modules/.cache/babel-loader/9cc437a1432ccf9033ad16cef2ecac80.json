{"ast":null,"code":"var __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\n\nvar __export = (target, all) => {\n  for (var name in all) __defProp(target, name, {\n    get: all[name],\n    enumerable: true\n  });\n};\n\nvar __decorateClass = (decorators, target, key, kind) => {\n  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc(target, key) : target;\n\n  for (var i = decorators.length - 1, decorator; i >= 0; i--) if (decorator = decorators[i]) result = (kind ? decorator(target, key, result) : decorator(result)) || result;\n\n  if (kind && result) __defProp(target, key, result);\n  return result;\n}; // src/account/aptos_account.ts\n\n\nimport nacl2 from \"tweetnacl\";\nimport * as bip39 from \"@scure/bip39\";\nimport { bytesToHex as bytesToHex2 } from \"@noble/hashes/utils\";\nimport { sha256 } from \"@noble/hashes/sha256\";\nimport { sha3_256 as sha3Hash3 } from \"@noble/hashes/sha3\"; // src/utils/hd-key.ts\n\nimport nacl from \"tweetnacl\";\nimport { hmac } from \"@noble/hashes/hmac\";\nimport { sha512 } from \"@noble/hashes/sha512\";\nimport { hexToBytes } from \"@noble/hashes/utils\";\nvar pathRegex = /^m(\\/[0-9]+')+$/;\n\nvar replaceDerive = val => val.replace(\"'\", \"\");\n\nvar HMAC_KEY = \"ed25519 seed\";\nvar HARDENED_OFFSET = 2147483648;\n\nvar getMasterKeyFromSeed = seed => {\n  const h = hmac.create(sha512, HMAC_KEY);\n  const I = h.update(hexToBytes(seed)).digest();\n  const IL = I.slice(0, 32);\n  const IR = I.slice(32);\n  return {\n    key: IL,\n    chainCode: IR\n  };\n};\n\nvar CKDPriv = (_ref, index) => {\n  let {\n    key,\n    chainCode\n  } = _ref;\n  const buffer = new ArrayBuffer(4);\n  new DataView(buffer).setUint32(0, index);\n  const indexBytes = new Uint8Array(buffer);\n  const zero = new Uint8Array([0]);\n  const data = new Uint8Array([...zero, ...key, ...indexBytes]);\n  const I = hmac.create(sha512, chainCode).update(data).digest();\n  const IL = I.slice(0, 32);\n  const IR = I.slice(32);\n  return {\n    key: IL,\n    chainCode: IR\n  };\n};\n\nvar getPublicKey = function (privateKey) {\n  let withZeroByte = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n  const keyPair = nacl.sign.keyPair.fromSeed(privateKey);\n  const signPk = keyPair.secretKey.subarray(32);\n  const zero = new Uint8Array([0]);\n  return withZeroByte ? new Uint8Array([...zero, ...signPk]) : signPk;\n};\n\nvar isValidPath = path => {\n  if (!pathRegex.test(path)) {\n    return false;\n  }\n\n  return !path.split(\"/\").slice(1).map(replaceDerive).some(Number.isNaN);\n};\n\nvar derivePath = function (path, seed) {\n  let offset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : HARDENED_OFFSET;\n\n  if (!isValidPath(path)) {\n    throw new Error(\"Invalid derivation path\");\n  }\n\n  const {\n    key,\n    chainCode\n  } = getMasterKeyFromSeed(seed);\n  const segments = path.split(\"/\").slice(1).map(replaceDerive).map(el => parseInt(el, 10));\n  return segments.reduce((parentKeys, segment) => CKDPriv(parentKeys, segment + offset), {\n    key,\n    chainCode\n  });\n}; // src/version.ts\n\n\nvar VERSION = \"1.20.0\"; // src/utils/misc.ts\n\nasync function sleep(timeMs) {\n  return new Promise(resolve => {\n    setTimeout(resolve, timeMs);\n  });\n}\n\nvar DEFAULT_VERSION_PATH_BASE = \"/v1\";\n\nfunction fixNodeUrl(nodeUrl) {\n  let out = `${nodeUrl}`;\n\n  if (out.endsWith(\"/\")) {\n    out = out.substring(0, out.length - 1);\n  }\n\n  if (!out.endsWith(DEFAULT_VERSION_PATH_BASE)) {\n    out = `${out}${DEFAULT_VERSION_PATH_BASE}`;\n  }\n\n  return out;\n}\n\nvar DEFAULT_MAX_GAS_AMOUNT = 2e5;\nvar DEFAULT_TXN_EXP_SEC_FROM_NOW = 20;\nvar DEFAULT_TXN_TIMEOUT_SEC = 20;\nvar APTOS_COIN = \"0x1::aptos_coin::AptosCoin\";\nvar CUSTOM_REQUEST_HEADER = {\n  \"x-aptos-client\": `aptos-ts-sdk/${VERSION}`\n}; // src/utils/memoize-decorator.ts\n\nfunction Memoize(args) {\n  let hashFunction;\n  let ttlMs;\n  let tags;\n\n  if (typeof args === \"object\") {\n    hashFunction = args.hashFunction;\n    ttlMs = args.ttlMs;\n    tags = args.tags;\n  } else {\n    hashFunction = args;\n  }\n\n  return (target, propertyKey, descriptor) => {\n    if (descriptor.value != null) {\n      descriptor.value = getNewFunction(descriptor.value, hashFunction, ttlMs, tags);\n    } else if (descriptor.get != null) {\n      descriptor.get = getNewFunction(descriptor.get, hashFunction, ttlMs, tags);\n    } else {\n      throw new Error(\"Only put a Memoize() decorator on a method or get accessor.\");\n    }\n  };\n}\n\nfunction MemoizeExpiring(ttlMs, hashFunction) {\n  return Memoize({\n    ttlMs,\n    hashFunction\n  });\n}\n\nvar clearCacheTagsMap = /* @__PURE__ */new Map();\n\nfunction clear(tags) {\n  const cleared = /* @__PURE__ */new Set();\n\n  for (const tag of tags) {\n    const maps = clearCacheTagsMap.get(tag);\n\n    if (maps) {\n      for (const mp of maps) {\n        if (!cleared.has(mp)) {\n          mp.clear();\n          cleared.add(mp);\n        }\n      }\n    }\n  }\n\n  return cleared.size;\n}\n\nfunction getNewFunction(originalMethod, hashFunction) {\n  let ttlMs = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n  let tags = arguments.length > 3 ? arguments[3] : undefined;\n  const propMapName = Symbol(\"__memoized_map__\");\n  return function () {\n    let returnedValue;\n    const that = this;\n\n    if (!that.hasOwnProperty(propMapName)) {\n      Object.defineProperty(that, propMapName, {\n        configurable: false,\n        enumerable: false,\n        writable: false,\n        value: /* @__PURE__ */new Map()\n      });\n    }\n\n    const myMap = that[propMapName];\n\n    if (Array.isArray(tags)) {\n      for (const tag of tags) {\n        if (clearCacheTagsMap.has(tag)) {\n          clearCacheTagsMap.get(tag).push(myMap);\n        } else {\n          clearCacheTagsMap.set(tag, [myMap]);\n        }\n      }\n    }\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    if (hashFunction || args.length > 0 || ttlMs > 0) {\n      let hashKey;\n\n      if (hashFunction === true) {\n        hashKey = args.map(a => a.toString()).join(\"!\");\n      } else if (hashFunction) {\n        hashKey = hashFunction.apply(that, args);\n      } else {\n        hashKey = args[0];\n      }\n\n      const timestampKey = `${hashKey}__timestamp`;\n      let isExpired = false;\n\n      if (ttlMs > 0) {\n        if (!myMap.has(timestampKey)) {\n          isExpired = true;\n        } else {\n          const timestamp = myMap.get(timestampKey);\n          isExpired = Date.now() - timestamp > ttlMs;\n        }\n      }\n\n      if (myMap.has(hashKey) && !isExpired) {\n        returnedValue = myMap.get(hashKey);\n      } else {\n        returnedValue = originalMethod.apply(that, args);\n        myMap.set(hashKey, returnedValue);\n\n        if (ttlMs > 0) {\n          myMap.set(timestampKey, Date.now());\n        }\n      }\n    } else {\n      const hashKey = that;\n\n      if (myMap.has(hashKey)) {\n        returnedValue = myMap.get(hashKey);\n      } else {\n        returnedValue = originalMethod.apply(that, args);\n        myMap.set(hashKey, returnedValue);\n      }\n    }\n\n    return returnedValue;\n  };\n} // src/client/core.ts\n\n\nimport aptosClient from \"@aptos-labs/aptos-client\"; // src/client/types.ts\n\nvar AptosApiError = class extends Error {\n  constructor(request2, response, message) {\n    super(message);\n    this.name = \"AptosApiError\";\n    this.url = response.url;\n    this.status = response.status;\n    this.statusText = response.statusText;\n    this.data = response.data;\n    this.request = request2;\n  }\n\n}; // src/client/core.ts\n\nvar errors = {\n  400: \"Bad Request\",\n  401: \"Unauthorized\",\n  403: \"Forbidden\",\n  404: \"Not Found\",\n  429: \"Too Many Requests\",\n  500: \"Internal Server Error\",\n  502: \"Bad Gateway\",\n  503: \"Service Unavailable\"\n};\n\nasync function request(url, method, body, contentType, params, overrides) {\n  const headers = { ...(overrides == null ? void 0 : overrides.HEADERS),\n    \"x-aptos-client\": `aptos-ts-sdk/${VERSION}`,\n    \"content-type\": contentType != null ? contentType : \"application/json\"\n  };\n\n  if (overrides == null ? void 0 : overrides.TOKEN) {\n    headers.Authorization = `Bearer ${overrides == null ? void 0 : overrides.TOKEN}`;\n  }\n\n  const response = await aptosClient({\n    url,\n    method,\n    body,\n    params,\n    headers,\n    overrides\n  });\n  return response;\n}\n\nasync function aptosRequest(options) {\n  const {\n    url,\n    endpoint,\n    method,\n    body,\n    contentType,\n    params,\n    overrides\n  } = options;\n  const fullEndpoint = `${url}/${endpoint != null ? endpoint : \"\"}`;\n  const response = await request(fullEndpoint, method, body, contentType, params, overrides);\n  const result = {\n    status: response.status,\n    statusText: response.statusText,\n    data: response.data,\n    headers: response.headers,\n    config: response.config,\n    url: fullEndpoint\n  };\n\n  if (result.status >= 200 && result.status < 300) {\n    return result;\n  }\n\n  const errorMessage = errors[result.status];\n  throw new AptosApiError(options, result, errorMessage != null ? errorMessage : \"Generic Error\");\n} // src/client/get.ts\n\n\nasync function get(options) {\n  const response = await aptosRequest({ ...options,\n    method: \"GET\"\n  });\n  return response;\n} // src/client/post.ts\n\n\nasync function post(options) {\n  const response = await aptosRequest({ ...options,\n    method: \"POST\"\n  });\n  return response;\n} // src/utils/pagination_helpers.ts\n\n\nasync function paginateWithCursor(options) {\n  const out = [];\n  let cursor;\n  const requestParams = options.params;\n\n  while (true) {\n    requestParams.start = cursor;\n    const response = await get({\n      url: options.url,\n      endpoint: options.endpoint,\n      params: requestParams,\n      originMethod: options.originMethod,\n      overrides: options.overrides\n    });\n    cursor = response.headers[\"x-aptos-cursor\"];\n    delete response.headers;\n    out.push(...response.data);\n\n    if (cursor === null || cursor === void 0) {\n      break;\n    }\n  }\n\n  return out;\n} // src/utils/api-endpoints.ts\n\n\nvar NetworkToIndexerAPI = {\n  mainnet: \"https://indexer.mainnet.aptoslabs.com/v1/graphql\",\n  testnet: \"https://indexer-testnet.staging.gcp.aptosdev.com/v1/graphql\",\n  devnet: \"https://indexer-devnet.staging.gcp.aptosdev.com/v1/graphql\"\n};\nvar NetworkToNodeAPI = {\n  mainnet: \"https://fullnode.mainnet.aptoslabs.com/v1\",\n  testnet: \"https://fullnode.testnet.aptoslabs.com/v1\",\n  devnet: \"https://fullnode.devnet.aptoslabs.com/v1\",\n  local: \"http://localhost:8080/v1\"\n};\nvar NodeAPIToNetwork = {\n  \"https://fullnode.mainnet.aptoslabs.com/v1\": \"mainnet\",\n  \"https://fullnode.testnet.aptoslabs.com/v1\": \"testnet\",\n  \"https://fullnode.devnet.aptoslabs.com/v1\": \"devnet\",\n  \"http://localhost:8080/v1\": \"local\"\n};\n\nvar Network = /* @__PURE__ */(Network3 => {\n  Network3[\"MAINNET\"] = \"mainnet\";\n  Network3[\"TESTNET\"] = \"testnet\";\n  Network3[\"DEVNET\"] = \"devnet\";\n  Network3[\"LOCAL\"] = \"local\";\n  return Network3;\n})(Network || {}); // src/utils/hex_string.ts\n\n\nimport { bytesToHex, hexToBytes as hexToBytes2 } from \"@noble/hashes/utils\";\nvar HexString = class {\n  static fromBuffer(buffer) {\n    return HexString.fromUint8Array(buffer);\n  }\n\n  static fromUint8Array(arr) {\n    return new HexString(bytesToHex(arr));\n  }\n\n  static ensure(hexString) {\n    if (typeof hexString === \"string\") {\n      return new HexString(hexString);\n    }\n\n    return hexString;\n  }\n\n  constructor(hexString) {\n    if (hexString.startsWith(\"0x\")) {\n      this.hexString = hexString;\n    } else {\n      this.hexString = `0x${hexString}`;\n    }\n  }\n\n  hex() {\n    return this.hexString;\n  }\n\n  noPrefix() {\n    return this.hexString.slice(2);\n  }\n\n  toString() {\n    return this.hex();\n  }\n\n  toShortString() {\n    const trimmed = this.hexString.replace(/^0x0*/, \"\");\n    return `0x${trimmed}`;\n  }\n\n  toUint8Array() {\n    return Uint8Array.from(hexToBytes2(this.noPrefix()));\n  }\n\n}; // src/aptos_types/index.ts\n\nvar aptos_types_exports = {};\n\n__export(aptos_types_exports, {\n  AccountAddress: () => AccountAddress,\n  AccountAuthenticator: () => AccountAuthenticator,\n  AccountAuthenticatorEd25519: () => AccountAuthenticatorEd25519,\n  AccountAuthenticatorMultiEd25519: () => AccountAuthenticatorMultiEd25519,\n  ArgumentABI: () => ArgumentABI,\n  AuthenticationKey: () => AuthenticationKey,\n  ChainId: () => ChainId,\n  ChangeSet: () => ChangeSet,\n  Ed25519PublicKey: () => Ed25519PublicKey,\n  Ed25519Signature: () => Ed25519Signature,\n  EntryFunction: () => EntryFunction,\n  EntryFunctionABI: () => EntryFunctionABI,\n  FeePayerRawTransaction: () => FeePayerRawTransaction,\n  Identifier: () => Identifier,\n  Module: () => Module,\n  ModuleId: () => ModuleId,\n  MultiAgentRawTransaction: () => MultiAgentRawTransaction,\n  MultiEd25519PublicKey: () => MultiEd25519PublicKey,\n  MultiEd25519Signature: () => MultiEd25519Signature,\n  MultiSig: () => MultiSig,\n  MultiSigTransactionPayload: () => MultiSigTransactionPayload,\n  RawTransaction: () => RawTransaction,\n  RawTransactionWithData: () => RawTransactionWithData,\n  RotationProofChallenge: () => RotationProofChallenge,\n  Script: () => Script,\n  ScriptABI: () => ScriptABI,\n  SignedTransaction: () => SignedTransaction,\n  StructTag: () => StructTag,\n  Transaction: () => Transaction,\n  TransactionArgument: () => TransactionArgument,\n  TransactionArgumentAddress: () => TransactionArgumentAddress,\n  TransactionArgumentBool: () => TransactionArgumentBool,\n  TransactionArgumentU128: () => TransactionArgumentU128,\n  TransactionArgumentU16: () => TransactionArgumentU16,\n  TransactionArgumentU256: () => TransactionArgumentU256,\n  TransactionArgumentU32: () => TransactionArgumentU32,\n  TransactionArgumentU64: () => TransactionArgumentU64,\n  TransactionArgumentU8: () => TransactionArgumentU8,\n  TransactionArgumentU8Vector: () => TransactionArgumentU8Vector,\n  TransactionAuthenticator: () => TransactionAuthenticator,\n  TransactionAuthenticatorEd25519: () => TransactionAuthenticatorEd25519,\n  TransactionAuthenticatorFeePayer: () => TransactionAuthenticatorFeePayer,\n  TransactionAuthenticatorMultiAgent: () => TransactionAuthenticatorMultiAgent,\n  TransactionAuthenticatorMultiEd25519: () => TransactionAuthenticatorMultiEd25519,\n  TransactionPayload: () => TransactionPayload,\n  TransactionPayloadEntryFunction: () => TransactionPayloadEntryFunction,\n  TransactionPayloadMultisig: () => TransactionPayloadMultisig,\n  TransactionPayloadScript: () => TransactionPayloadScript,\n  TransactionScriptABI: () => TransactionScriptABI,\n  TypeArgumentABI: () => TypeArgumentABI,\n  TypeTag: () => TypeTag,\n  TypeTagAddress: () => TypeTagAddress,\n  TypeTagBool: () => TypeTagBool,\n  TypeTagParser: () => TypeTagParser,\n  TypeTagParserError: () => TypeTagParserError,\n  TypeTagSigner: () => TypeTagSigner,\n  TypeTagStruct: () => TypeTagStruct,\n  TypeTagU128: () => TypeTagU128,\n  TypeTagU16: () => TypeTagU16,\n  TypeTagU256: () => TypeTagU256,\n  TypeTagU32: () => TypeTagU32,\n  TypeTagU64: () => TypeTagU64,\n  TypeTagU8: () => TypeTagU8,\n  TypeTagVector: () => TypeTagVector,\n  UserTransaction: () => UserTransaction,\n  WriteSet: () => WriteSet,\n  objectStructTag: () => objectStructTag,\n  optionStructTag: () => optionStructTag,\n  stringStructTag: () => stringStructTag\n}); // src/bcs/index.ts\n\n\nvar bcs_exports = {};\n\n__export(bcs_exports, {\n  Deserializer: () => Deserializer,\n  Serializer: () => Serializer,\n  bcsSerializeBool: () => bcsSerializeBool,\n  bcsSerializeBytes: () => bcsSerializeBytes,\n  bcsSerializeFixedBytes: () => bcsSerializeFixedBytes,\n  bcsSerializeStr: () => bcsSerializeStr,\n  bcsSerializeU128: () => bcsSerializeU128,\n  bcsSerializeU16: () => bcsSerializeU16,\n  bcsSerializeU256: () => bcsSerializeU256,\n  bcsSerializeU32: () => bcsSerializeU32,\n  bcsSerializeU8: () => bcsSerializeU8,\n  bcsSerializeUint64: () => bcsSerializeUint64,\n  bcsToBytes: () => bcsToBytes,\n  deserializeVector: () => deserializeVector,\n  serializeVector: () => serializeVector,\n  serializeVectorWithFunc: () => serializeVectorWithFunc\n}); // src/bcs/consts.ts\n\n\nvar MAX_U8_NUMBER = 2 ** 8 - 1;\nvar MAX_U16_NUMBER = 2 ** 16 - 1;\nvar MAX_U32_NUMBER = 2 ** 32 - 1;\nvar MAX_U64_BIG_INT = BigInt(2 ** 64) - BigInt(1);\nvar MAX_U128_BIG_INT = BigInt(2 ** 128) - BigInt(1);\nvar MAX_U256_BIG_INT = BigInt(2 ** 256) - BigInt(1); // src/bcs/serializer.ts\n\nvar Serializer = class {\n  constructor() {\n    this.buffer = new ArrayBuffer(64);\n    this.offset = 0;\n  }\n\n  ensureBufferWillHandleSize(bytes) {\n    while (this.buffer.byteLength < this.offset + bytes) {\n      const newBuffer = new ArrayBuffer(this.buffer.byteLength * 2);\n      new Uint8Array(newBuffer).set(new Uint8Array(this.buffer));\n      this.buffer = newBuffer;\n    }\n  }\n\n  serialize(values) {\n    this.ensureBufferWillHandleSize(values.length);\n    new Uint8Array(this.buffer, this.offset).set(values);\n    this.offset += values.length;\n  }\n\n  serializeWithFunction(fn, bytesLength, value) {\n    this.ensureBufferWillHandleSize(bytesLength);\n    const dv = new DataView(this.buffer, this.offset);\n    fn.apply(dv, [0, value, true]);\n    this.offset += bytesLength;\n  }\n\n  serializeStr(value) {\n    const textEncoder = new TextEncoder();\n    this.serializeBytes(textEncoder.encode(value));\n  }\n\n  serializeBytes(value) {\n    this.serializeU32AsUleb128(value.length);\n    this.serialize(value);\n  }\n\n  serializeFixedBytes(value) {\n    this.serialize(value);\n  }\n\n  serializeBool(value) {\n    if (typeof value !== \"boolean\") {\n      throw new Error(\"Value needs to be a boolean\");\n    }\n\n    const byteValue = value ? 1 : 0;\n    this.serialize(new Uint8Array([byteValue]));\n  }\n\n  serializeU8(value) {\n    this.serialize(new Uint8Array([value]));\n  }\n\n  serializeU16(value) {\n    this.serializeWithFunction(DataView.prototype.setUint16, 2, value);\n  }\n\n  serializeU32(value) {\n    this.serializeWithFunction(DataView.prototype.setUint32, 4, value);\n  }\n\n  serializeU64(value) {\n    const low = BigInt(value.toString()) & BigInt(MAX_U32_NUMBER);\n    const high = BigInt(value.toString()) >> BigInt(32);\n    this.serializeU32(Number(low));\n    this.serializeU32(Number(high));\n  }\n\n  serializeU128(value) {\n    const low = BigInt(value.toString()) & MAX_U64_BIG_INT;\n    const high = BigInt(value.toString()) >> BigInt(64);\n    this.serializeU64(low);\n    this.serializeU64(high);\n  }\n\n  serializeU256(value) {\n    const low = BigInt(value.toString()) & MAX_U128_BIG_INT;\n    const high = BigInt(value.toString()) >> BigInt(128);\n    this.serializeU128(low);\n    this.serializeU128(high);\n  }\n\n  serializeU32AsUleb128(val) {\n    let value = val;\n    const valueArray = [];\n\n    while (value >>> 7 !== 0) {\n      valueArray.push(value & 127 | 128);\n      value >>>= 7;\n    }\n\n    valueArray.push(value);\n    this.serialize(new Uint8Array(valueArray));\n  }\n\n  getBytes() {\n    return new Uint8Array(this.buffer).slice(0, this.offset);\n  }\n\n};\n\n__decorateClass([checkNumberRange(0, MAX_U8_NUMBER)], Serializer.prototype, \"serializeU8\", 1);\n\n__decorateClass([checkNumberRange(0, MAX_U16_NUMBER)], Serializer.prototype, \"serializeU16\", 1);\n\n__decorateClass([checkNumberRange(0, MAX_U32_NUMBER)], Serializer.prototype, \"serializeU32\", 1);\n\n__decorateClass([checkNumberRange(BigInt(0), MAX_U64_BIG_INT)], Serializer.prototype, \"serializeU64\", 1);\n\n__decorateClass([checkNumberRange(BigInt(0), MAX_U128_BIG_INT)], Serializer.prototype, \"serializeU128\", 1);\n\n__decorateClass([checkNumberRange(BigInt(0), MAX_U256_BIG_INT)], Serializer.prototype, \"serializeU256\", 1);\n\n__decorateClass([checkNumberRange(0, MAX_U32_NUMBER)], Serializer.prototype, \"serializeU32AsUleb128\", 1);\n\nfunction checkNumberRange(minValue, maxValue, message) {\n  return (target, propertyKey, descriptor) => {\n    const childFunction = descriptor.value;\n\n    descriptor.value = function deco(value) {\n      const valueBigInt = BigInt(value.toString());\n\n      if (valueBigInt > BigInt(maxValue.toString()) || valueBigInt < BigInt(minValue.toString())) {\n        throw new Error(message || \"Value is out of range\");\n      }\n\n      childFunction.apply(this, [value]);\n    };\n\n    return descriptor;\n  };\n} // src/bcs/deserializer.ts\n\n\nvar Deserializer = class {\n  constructor(data) {\n    this.buffer = new ArrayBuffer(data.length);\n    new Uint8Array(this.buffer).set(data, 0);\n    this.offset = 0;\n  }\n\n  read(length) {\n    if (this.offset + length > this.buffer.byteLength) {\n      throw new Error(\"Reached to the end of buffer\");\n    }\n\n    const bytes = this.buffer.slice(this.offset, this.offset + length);\n    this.offset += length;\n    return bytes;\n  }\n\n  deserializeStr() {\n    const value = this.deserializeBytes();\n    const textDecoder = new TextDecoder();\n    return textDecoder.decode(value);\n  }\n\n  deserializeBytes() {\n    const len = this.deserializeUleb128AsU32();\n    return new Uint8Array(this.read(len));\n  }\n\n  deserializeFixedBytes(len) {\n    return new Uint8Array(this.read(len));\n  }\n\n  deserializeBool() {\n    const bool = new Uint8Array(this.read(1))[0];\n\n    if (bool !== 1 && bool !== 0) {\n      throw new Error(\"Invalid boolean value\");\n    }\n\n    return bool === 1;\n  }\n\n  deserializeU8() {\n    return new DataView(this.read(1)).getUint8(0);\n  }\n\n  deserializeU16() {\n    return new DataView(this.read(2)).getUint16(0, true);\n  }\n\n  deserializeU32() {\n    return new DataView(this.read(4)).getUint32(0, true);\n  }\n\n  deserializeU64() {\n    const low = this.deserializeU32();\n    const high = this.deserializeU32();\n    return BigInt(BigInt(high) << BigInt(32) | BigInt(low));\n  }\n\n  deserializeU128() {\n    const low = this.deserializeU64();\n    const high = this.deserializeU64();\n    return BigInt(high << BigInt(64) | low);\n  }\n\n  deserializeU256() {\n    const low = this.deserializeU128();\n    const high = this.deserializeU128();\n    return BigInt(high << BigInt(128) | low);\n  }\n\n  deserializeUleb128AsU32() {\n    let value = BigInt(0);\n    let shift = 0;\n\n    while (value < MAX_U32_NUMBER) {\n      const byte = this.deserializeU8();\n      value |= BigInt(byte & 127) << BigInt(shift);\n\n      if ((byte & 128) === 0) {\n        break;\n      }\n\n      shift += 7;\n    }\n\n    if (value > MAX_U32_NUMBER) {\n      throw new Error(\"Overflow while parsing uleb128-encoded uint32 value\");\n    }\n\n    return Number(value);\n  }\n\n}; // src/bcs/helper.ts\n\nfunction serializeVector(value, serializer) {\n  serializer.serializeU32AsUleb128(value.length);\n  value.forEach(item => {\n    item.serialize(serializer);\n  });\n}\n\nfunction serializeVectorWithFunc(value, func) {\n  const serializer = new Serializer();\n  serializer.serializeU32AsUleb128(value.length);\n  const f = serializer[func];\n  value.forEach(item => {\n    f.call(serializer, item);\n  });\n  return serializer.getBytes();\n}\n\nfunction deserializeVector(deserializer, cls) {\n  const length = deserializer.deserializeUleb128AsU32();\n  const list = [];\n\n  for (let i = 0; i < length; i += 1) {\n    list.push(cls.deserialize(deserializer));\n  }\n\n  return list;\n}\n\nfunction bcsToBytes(value) {\n  const serializer = new Serializer();\n  value.serialize(serializer);\n  return serializer.getBytes();\n}\n\nfunction bcsSerializeUint64(value) {\n  const serializer = new Serializer();\n  serializer.serializeU64(value);\n  return serializer.getBytes();\n}\n\nfunction bcsSerializeU8(value) {\n  const serializer = new Serializer();\n  serializer.serializeU8(value);\n  return serializer.getBytes();\n}\n\nfunction bcsSerializeU16(value) {\n  const serializer = new Serializer();\n  serializer.serializeU16(value);\n  return serializer.getBytes();\n}\n\nfunction bcsSerializeU32(value) {\n  const serializer = new Serializer();\n  serializer.serializeU32(value);\n  return serializer.getBytes();\n}\n\nfunction bcsSerializeU128(value) {\n  const serializer = new Serializer();\n  serializer.serializeU128(value);\n  return serializer.getBytes();\n}\n\nfunction bcsSerializeU256(value) {\n  const serializer = new Serializer();\n  serializer.serializeU256(value);\n  return serializer.getBytes();\n}\n\nfunction bcsSerializeBool(value) {\n  const serializer = new Serializer();\n  serializer.serializeBool(value);\n  return serializer.getBytes();\n}\n\nfunction bcsSerializeStr(value) {\n  const serializer = new Serializer();\n  serializer.serializeStr(value);\n  return serializer.getBytes();\n}\n\nfunction bcsSerializeBytes(value) {\n  const serializer = new Serializer();\n  serializer.serializeBytes(value);\n  return serializer.getBytes();\n}\n\nfunction bcsSerializeFixedBytes(value) {\n  const serializer = new Serializer();\n  serializer.serializeFixedBytes(value);\n  return serializer.getBytes();\n} // src/aptos_types/transaction.ts\n\n\nimport { sha3_256 as sha3Hash } from \"@noble/hashes/sha3\"; // src/aptos_types/account_address.ts\n\nvar _AccountAddress = class {\n  constructor(address) {\n    if (address.length !== _AccountAddress.LENGTH) {\n      throw new Error(\"Expected address of length 32\");\n    }\n\n    this.address = address;\n  }\n\n  static fromHex(addr) {\n    let address = HexString.ensure(addr);\n\n    if (address.noPrefix().length % 2 !== 0) {\n      address = new HexString(`0${address.noPrefix()}`);\n    }\n\n    const addressBytes = address.toUint8Array();\n\n    if (addressBytes.length > _AccountAddress.LENGTH) {\n      throw new Error(\"Hex string is too long. Address's length is 32 bytes.\");\n    } else if (addressBytes.length === _AccountAddress.LENGTH) {\n      return new _AccountAddress(addressBytes);\n    }\n\n    const res = new Uint8Array(_AccountAddress.LENGTH);\n    res.set(addressBytes, _AccountAddress.LENGTH - addressBytes.length);\n    return new _AccountAddress(res);\n  }\n\n  static isValid(addr) {\n    if (addr === \"\") {\n      return false;\n    }\n\n    let address = HexString.ensure(addr);\n\n    if (address.noPrefix().length % 2 !== 0) {\n      address = new HexString(`0${address.noPrefix()}`);\n    }\n\n    const addressBytes = address.toUint8Array();\n    return addressBytes.length <= _AccountAddress.LENGTH;\n  }\n\n  toHexString() {\n    return HexString.fromUint8Array(this.address).hex();\n  }\n\n  serialize(serializer) {\n    serializer.serializeFixedBytes(this.address);\n  }\n\n  static deserialize(deserializer) {\n    return new _AccountAddress(deserializer.deserializeFixedBytes(_AccountAddress.LENGTH));\n  }\n\n  static standardizeAddress(address) {\n    const lowercaseAddress = address.toLowerCase();\n    const addressWithoutPrefix = lowercaseAddress.startsWith(\"0x\") ? lowercaseAddress.slice(2) : lowercaseAddress;\n    const addressWithPadding = addressWithoutPrefix.padStart(64, \"0\");\n    return `0x${addressWithPadding}`;\n  }\n\n};\n\nvar AccountAddress = _AccountAddress;\nAccountAddress.LENGTH = 32;\nAccountAddress.CORE_CODE_ADDRESS = _AccountAddress.fromHex(\"0x1\"); // src/aptos_types/ed25519.ts\n\nvar _Ed25519PublicKey = class {\n  constructor(value) {\n    if (value.length !== _Ed25519PublicKey.LENGTH) {\n      throw new Error(`Ed25519PublicKey length should be ${_Ed25519PublicKey.LENGTH}`);\n    }\n\n    this.value = value;\n  }\n\n  toBytes() {\n    return this.value;\n  }\n\n  serialize(serializer) {\n    serializer.serializeBytes(this.value);\n  }\n\n  static deserialize(deserializer) {\n    const value = deserializer.deserializeBytes();\n    return new _Ed25519PublicKey(value);\n  }\n\n};\n\nvar Ed25519PublicKey = _Ed25519PublicKey;\nEd25519PublicKey.LENGTH = 32;\n\nvar _Ed25519Signature = class {\n  constructor(value) {\n    this.value = value;\n\n    if (value.length !== _Ed25519Signature.LENGTH) {\n      throw new Error(`Ed25519Signature length should be ${_Ed25519Signature.LENGTH}`);\n    }\n  }\n\n  serialize(serializer) {\n    serializer.serializeBytes(this.value);\n  }\n\n  static deserialize(deserializer) {\n    const value = deserializer.deserializeBytes();\n    return new _Ed25519Signature(value);\n  }\n\n};\n\nvar Ed25519Signature = _Ed25519Signature;\nEd25519Signature.LENGTH = 64; // src/aptos_types/multi_ed25519.ts\n\nvar MAX_SIGNATURES_SUPPORTED = 32;\nvar MultiEd25519PublicKey = class {\n  constructor(public_keys, threshold) {\n    this.public_keys = public_keys;\n    this.threshold = threshold;\n\n    if (threshold > MAX_SIGNATURES_SUPPORTED) {\n      throw new Error(`\"threshold\" cannot be larger than ${MAX_SIGNATURES_SUPPORTED}`);\n    }\n  }\n\n  toBytes() {\n    const bytes = new Uint8Array(this.public_keys.length * Ed25519PublicKey.LENGTH + 1);\n    this.public_keys.forEach((k, i) => {\n      bytes.set(k.value, i * Ed25519PublicKey.LENGTH);\n    });\n    bytes[this.public_keys.length * Ed25519PublicKey.LENGTH] = this.threshold;\n    return bytes;\n  }\n\n  serialize(serializer) {\n    serializer.serializeBytes(this.toBytes());\n  }\n\n  static deserialize(deserializer) {\n    const bytes = deserializer.deserializeBytes();\n    const threshold = bytes[bytes.length - 1];\n    const keys = [];\n\n    for (let i = 0; i < bytes.length - 1; i += Ed25519PublicKey.LENGTH) {\n      const begin = i;\n      keys.push(new Ed25519PublicKey(bytes.subarray(begin, begin + Ed25519PublicKey.LENGTH)));\n    }\n\n    return new MultiEd25519PublicKey(keys, threshold);\n  }\n\n};\n\nvar _MultiEd25519Signature = class {\n  constructor(signatures, bitmap) {\n    this.signatures = signatures;\n    this.bitmap = bitmap;\n\n    if (bitmap.length !== _MultiEd25519Signature.BITMAP_LEN) {\n      throw new Error(`\"bitmap\" length should be ${_MultiEd25519Signature.BITMAP_LEN}`);\n    }\n  }\n\n  toBytes() {\n    const bytes = new Uint8Array(this.signatures.length * Ed25519Signature.LENGTH + _MultiEd25519Signature.BITMAP_LEN);\n    this.signatures.forEach((k, i) => {\n      bytes.set(k.value, i * Ed25519Signature.LENGTH);\n    });\n    bytes.set(this.bitmap, this.signatures.length * Ed25519Signature.LENGTH);\n    return bytes;\n  }\n\n  static createBitmap(bits) {\n    const firstBitInByte = 128;\n    const bitmap = new Uint8Array([0, 0, 0, 0]);\n    const dupCheckSet = /* @__PURE__ */new Set();\n    bits.forEach(bit => {\n      if (bit >= MAX_SIGNATURES_SUPPORTED) {\n        throw new Error(`Invalid bit value ${bit}.`);\n      }\n\n      if (dupCheckSet.has(bit)) {\n        throw new Error(\"Duplicated bits detected.\");\n      }\n\n      dupCheckSet.add(bit);\n      const byteOffset = Math.floor(bit / 8);\n      let byte = bitmap[byteOffset];\n      byte |= firstBitInByte >> bit % 8;\n      bitmap[byteOffset] = byte;\n    });\n    return bitmap;\n  }\n\n  serialize(serializer) {\n    serializer.serializeBytes(this.toBytes());\n  }\n\n  static deserialize(deserializer) {\n    const bytes = deserializer.deserializeBytes();\n    const bitmap = bytes.subarray(bytes.length - 4);\n    const sigs = [];\n\n    for (let i = 0; i < bytes.length - bitmap.length; i += Ed25519Signature.LENGTH) {\n      const begin = i;\n      sigs.push(new Ed25519Signature(bytes.subarray(begin, begin + Ed25519Signature.LENGTH)));\n    }\n\n    return new _MultiEd25519Signature(sigs, bitmap);\n  }\n\n};\n\nvar MultiEd25519Signature = _MultiEd25519Signature;\nMultiEd25519Signature.BITMAP_LEN = 4; // src/aptos_types/authenticator.ts\n\nvar TransactionAuthenticator = class {\n  static deserialize(deserializer) {\n    const index = deserializer.deserializeUleb128AsU32();\n\n    switch (index) {\n      case 0:\n        return TransactionAuthenticatorEd25519.load(deserializer);\n\n      case 1:\n        return TransactionAuthenticatorMultiEd25519.load(deserializer);\n\n      case 2:\n        return TransactionAuthenticatorMultiAgent.load(deserializer);\n\n      case 3:\n        return TransactionAuthenticatorFeePayer.load(deserializer);\n\n      default:\n        throw new Error(`Unknown variant index for TransactionAuthenticator: ${index}`);\n    }\n  }\n\n};\nvar TransactionAuthenticatorEd25519 = class extends TransactionAuthenticator {\n  constructor(public_key, signature) {\n    super();\n    this.public_key = public_key;\n    this.signature = signature;\n  }\n\n  serialize(serializer) {\n    serializer.serializeU32AsUleb128(0);\n    this.public_key.serialize(serializer);\n    this.signature.serialize(serializer);\n  }\n\n  static load(deserializer) {\n    const public_key = Ed25519PublicKey.deserialize(deserializer);\n    const signature = Ed25519Signature.deserialize(deserializer);\n    return new TransactionAuthenticatorEd25519(public_key, signature);\n  }\n\n};\nvar TransactionAuthenticatorMultiEd25519 = class extends TransactionAuthenticator {\n  constructor(public_key, signature) {\n    super();\n    this.public_key = public_key;\n    this.signature = signature;\n  }\n\n  serialize(serializer) {\n    serializer.serializeU32AsUleb128(1);\n    this.public_key.serialize(serializer);\n    this.signature.serialize(serializer);\n  }\n\n  static load(deserializer) {\n    const public_key = MultiEd25519PublicKey.deserialize(deserializer);\n    const signature = MultiEd25519Signature.deserialize(deserializer);\n    return new TransactionAuthenticatorMultiEd25519(public_key, signature);\n  }\n\n};\nvar TransactionAuthenticatorMultiAgent = class extends TransactionAuthenticator {\n  constructor(sender, secondary_signer_addresses, secondary_signers) {\n    super();\n    this.sender = sender;\n    this.secondary_signer_addresses = secondary_signer_addresses;\n    this.secondary_signers = secondary_signers;\n  }\n\n  serialize(serializer) {\n    serializer.serializeU32AsUleb128(2);\n    this.sender.serialize(serializer);\n    serializeVector(this.secondary_signer_addresses, serializer);\n    serializeVector(this.secondary_signers, serializer);\n  }\n\n  static load(deserializer) {\n    const sender = AccountAuthenticator.deserialize(deserializer);\n    const secondary_signer_addresses = deserializeVector(deserializer, AccountAddress);\n    const secondary_signers = deserializeVector(deserializer, AccountAuthenticator);\n    return new TransactionAuthenticatorMultiAgent(sender, secondary_signer_addresses, secondary_signers);\n  }\n\n};\nvar TransactionAuthenticatorFeePayer = class extends TransactionAuthenticator {\n  constructor(sender, secondary_signer_addresses, secondary_signers, fee_payer) {\n    super();\n    this.sender = sender;\n    this.secondary_signer_addresses = secondary_signer_addresses;\n    this.secondary_signers = secondary_signers;\n    this.fee_payer = fee_payer;\n  }\n\n  serialize(serializer) {\n    serializer.serializeU32AsUleb128(3);\n    this.sender.serialize(serializer);\n    serializeVector(this.secondary_signer_addresses, serializer);\n    serializeVector(this.secondary_signers, serializer);\n    this.fee_payer.address.serialize(serializer);\n    this.fee_payer.authenticator.serialize(serializer);\n  }\n\n  static load(deserializer) {\n    const sender = AccountAuthenticator.deserialize(deserializer);\n    const secondary_signer_addresses = deserializeVector(deserializer, AccountAddress);\n    const secondary_signers = deserializeVector(deserializer, AccountAuthenticator);\n    const address = AccountAddress.deserialize(deserializer);\n    const authenticator = AccountAuthenticator.deserialize(deserializer);\n    const fee_payer = {\n      address,\n      authenticator\n    };\n    return new TransactionAuthenticatorFeePayer(sender, secondary_signer_addresses, secondary_signers, fee_payer);\n  }\n\n};\nvar AccountAuthenticator = class {\n  static deserialize(deserializer) {\n    const index = deserializer.deserializeUleb128AsU32();\n\n    switch (index) {\n      case 0:\n        return AccountAuthenticatorEd25519.load(deserializer);\n\n      case 1:\n        return AccountAuthenticatorMultiEd25519.load(deserializer);\n\n      default:\n        throw new Error(`Unknown variant index for AccountAuthenticator: ${index}`);\n    }\n  }\n\n};\nvar AccountAuthenticatorEd25519 = class extends AccountAuthenticator {\n  constructor(public_key, signature) {\n    super();\n    this.public_key = public_key;\n    this.signature = signature;\n  }\n\n  serialize(serializer) {\n    serializer.serializeU32AsUleb128(0);\n    this.public_key.serialize(serializer);\n    this.signature.serialize(serializer);\n  }\n\n  static load(deserializer) {\n    const public_key = Ed25519PublicKey.deserialize(deserializer);\n    const signature = Ed25519Signature.deserialize(deserializer);\n    return new AccountAuthenticatorEd25519(public_key, signature);\n  }\n\n};\nvar AccountAuthenticatorMultiEd25519 = class extends AccountAuthenticator {\n  constructor(public_key, signature) {\n    super();\n    this.public_key = public_key;\n    this.signature = signature;\n  }\n\n  serialize(serializer) {\n    serializer.serializeU32AsUleb128(1);\n    this.public_key.serialize(serializer);\n    this.signature.serialize(serializer);\n  }\n\n  static load(deserializer) {\n    const public_key = MultiEd25519PublicKey.deserialize(deserializer);\n    const signature = MultiEd25519Signature.deserialize(deserializer);\n    return new AccountAuthenticatorMultiEd25519(public_key, signature);\n  }\n\n}; // src/aptos_types/identifier.ts\n\nvar Identifier = class {\n  constructor(value) {\n    this.value = value;\n  }\n\n  serialize(serializer) {\n    serializer.serializeStr(this.value);\n  }\n\n  static deserialize(deserializer) {\n    const value = deserializer.deserializeStr();\n    return new Identifier(value);\n  }\n\n}; // src/aptos_types/type_tag.ts\n\nvar TypeTag = class {\n  static deserialize(deserializer) {\n    const index = deserializer.deserializeUleb128AsU32();\n\n    switch (index) {\n      case 0:\n        return TypeTagBool.load(deserializer);\n\n      case 1:\n        return TypeTagU8.load(deserializer);\n\n      case 2:\n        return TypeTagU64.load(deserializer);\n\n      case 3:\n        return TypeTagU128.load(deserializer);\n\n      case 4:\n        return TypeTagAddress.load(deserializer);\n\n      case 5:\n        return TypeTagSigner.load(deserializer);\n\n      case 6:\n        return TypeTagVector.load(deserializer);\n\n      case 7:\n        return TypeTagStruct.load(deserializer);\n\n      case 8:\n        return TypeTagU16.load(deserializer);\n\n      case 9:\n        return TypeTagU32.load(deserializer);\n\n      case 10:\n        return TypeTagU256.load(deserializer);\n\n      default:\n        throw new Error(`Unknown variant index for TypeTag: ${index}`);\n    }\n  }\n\n};\nvar TypeTagBool = class extends TypeTag {\n  serialize(serializer) {\n    serializer.serializeU32AsUleb128(0);\n  }\n\n  static load(_deserializer) {\n    return new TypeTagBool();\n  }\n\n};\nvar TypeTagU8 = class extends TypeTag {\n  serialize(serializer) {\n    serializer.serializeU32AsUleb128(1);\n  }\n\n  static load(_deserializer) {\n    return new TypeTagU8();\n  }\n\n};\nvar TypeTagU16 = class extends TypeTag {\n  serialize(serializer) {\n    serializer.serializeU32AsUleb128(8);\n  }\n\n  static load(_deserializer) {\n    return new TypeTagU16();\n  }\n\n};\nvar TypeTagU32 = class extends TypeTag {\n  serialize(serializer) {\n    serializer.serializeU32AsUleb128(9);\n  }\n\n  static load(_deserializer) {\n    return new TypeTagU32();\n  }\n\n};\nvar TypeTagU64 = class extends TypeTag {\n  serialize(serializer) {\n    serializer.serializeU32AsUleb128(2);\n  }\n\n  static load(_deserializer) {\n    return new TypeTagU64();\n  }\n\n};\nvar TypeTagU128 = class extends TypeTag {\n  serialize(serializer) {\n    serializer.serializeU32AsUleb128(3);\n  }\n\n  static load(_deserializer) {\n    return new TypeTagU128();\n  }\n\n};\nvar TypeTagU256 = class extends TypeTag {\n  serialize(serializer) {\n    serializer.serializeU32AsUleb128(10);\n  }\n\n  static load(_deserializer) {\n    return new TypeTagU256();\n  }\n\n};\nvar TypeTagAddress = class extends TypeTag {\n  serialize(serializer) {\n    serializer.serializeU32AsUleb128(4);\n  }\n\n  static load(_deserializer) {\n    return new TypeTagAddress();\n  }\n\n};\nvar TypeTagSigner = class extends TypeTag {\n  serialize(serializer) {\n    serializer.serializeU32AsUleb128(5);\n  }\n\n  static load(_deserializer) {\n    return new TypeTagSigner();\n  }\n\n};\nvar TypeTagVector = class extends TypeTag {\n  constructor(value) {\n    super();\n    this.value = value;\n  }\n\n  serialize(serializer) {\n    serializer.serializeU32AsUleb128(6);\n    this.value.serialize(serializer);\n  }\n\n  static load(deserializer) {\n    const value = TypeTag.deserialize(deserializer);\n    return new TypeTagVector(value);\n  }\n\n};\nvar TypeTagStruct = class extends TypeTag {\n  constructor(value) {\n    super();\n    this.value = value;\n  }\n\n  serialize(serializer) {\n    serializer.serializeU32AsUleb128(7);\n    this.value.serialize(serializer);\n  }\n\n  static load(deserializer) {\n    const value = StructTag.deserialize(deserializer);\n    return new TypeTagStruct(value);\n  }\n\n  isStringTypeTag() {\n    if (this.value.module_name.value === \"string\" && this.value.name.value === \"String\" && this.value.address.toHexString() === AccountAddress.CORE_CODE_ADDRESS.toHexString()) {\n      return true;\n    }\n\n    return false;\n  }\n\n};\nvar StructTag = class {\n  constructor(address, module_name, name, type_args) {\n    this.address = address;\n    this.module_name = module_name;\n    this.name = name;\n    this.type_args = type_args;\n  }\n\n  static fromString(structTag) {\n    const typeTagStruct = new TypeTagParser(structTag).parseTypeTag();\n    return new StructTag(typeTagStruct.value.address, typeTagStruct.value.module_name, typeTagStruct.value.name, typeTagStruct.value.type_args);\n  }\n\n  serialize(serializer) {\n    this.address.serialize(serializer);\n    this.module_name.serialize(serializer);\n    this.name.serialize(serializer);\n    serializeVector(this.type_args, serializer);\n  }\n\n  static deserialize(deserializer) {\n    const address = AccountAddress.deserialize(deserializer);\n    const moduleName = Identifier.deserialize(deserializer);\n    const name = Identifier.deserialize(deserializer);\n    const typeArgs = deserializeVector(deserializer, TypeTag);\n    return new StructTag(address, moduleName, name, typeArgs);\n  }\n\n};\nvar stringStructTag = new StructTag(AccountAddress.fromHex(\"0x1\"), new Identifier(\"string\"), new Identifier(\"String\"), []);\n\nfunction optionStructTag(typeArg) {\n  return new StructTag(AccountAddress.fromHex(\"0x1\"), new Identifier(\"option\"), new Identifier(\"Option\"), [typeArg]);\n}\n\nfunction objectStructTag(typeArg) {\n  return new StructTag(AccountAddress.fromHex(\"0x1\"), new Identifier(\"object\"), new Identifier(\"Object\"), [typeArg]);\n}\n\nfunction bail(message) {\n  throw new TypeTagParserError(message);\n}\n\nfunction isWhiteSpace(c) {\n  if (c.match(/\\s/)) {\n    return true;\n  }\n\n  return false;\n}\n\nfunction isValidAlphabetic(c) {\n  if (c.match(/[_A-Za-z0-9]/g)) {\n    return true;\n  }\n\n  return false;\n}\n\nfunction isGeneric(c) {\n  if (c.match(/T\\d+/g)) {\n    return true;\n  }\n\n  return false;\n}\n\nfunction nextToken(tagStr, pos) {\n  const c = tagStr[pos];\n\n  if (c === \":\") {\n    if (tagStr.slice(pos, pos + 2) === \"::\") {\n      return [[\"COLON\", \"::\"], 2];\n    }\n\n    bail(\"Unrecognized token.\");\n  } else if (c === \"<\") {\n    return [[\"LT\", \"<\"], 1];\n  } else if (c === \">\") {\n    return [[\"GT\", \">\"], 1];\n  } else if (c === \",\") {\n    return [[\"COMMA\", \",\"], 1];\n  } else if (isWhiteSpace(c)) {\n    let res = \"\";\n\n    for (let i = pos; i < tagStr.length; i += 1) {\n      const char = tagStr[i];\n\n      if (isWhiteSpace(char)) {\n        res = `${res}${char}`;\n      } else {\n        break;\n      }\n    }\n\n    return [[\"SPACE\", res], res.length];\n  } else if (isValidAlphabetic(c)) {\n    let res = \"\";\n\n    for (let i = pos; i < tagStr.length; i += 1) {\n      const char = tagStr[i];\n\n      if (isValidAlphabetic(char)) {\n        res = `${res}${char}`;\n      } else {\n        break;\n      }\n    }\n\n    if (isGeneric(res)) {\n      return [[\"GENERIC\", res], res.length];\n    }\n\n    return [[\"IDENT\", res], res.length];\n  }\n\n  throw new Error(\"Unrecognized token.\");\n}\n\nfunction tokenize(tagStr) {\n  let pos = 0;\n  const tokens = [];\n\n  while (pos < tagStr.length) {\n    const [token, size] = nextToken(tagStr, pos);\n\n    if (token[0] !== \"SPACE\") {\n      tokens.push(token);\n    }\n\n    pos += size;\n  }\n\n  return tokens;\n}\n\nvar TypeTagParser = class {\n  constructor(tagStr, typeTags) {\n    this.typeTags = [];\n    this.tokens = tokenize(tagStr);\n    this.typeTags = typeTags || [];\n  }\n\n  consume(targetToken) {\n    const token = this.tokens.shift();\n\n    if (!token || token[1] !== targetToken) {\n      bail(\"Invalid type tag.\");\n    }\n  }\n\n  consumeWholeGeneric() {\n    this.consume(\"<\");\n\n    while (this.tokens[0][1] !== \">\") {\n      if (this.tokens[0][1] === \"<\") {\n        this.consumeWholeGeneric();\n      }\n\n      this.tokens.shift();\n    }\n\n    this.consume(\">\");\n  }\n\n  parseCommaList(endToken, allowTraillingComma) {\n    const res = [];\n\n    if (this.tokens.length <= 0) {\n      bail(\"Invalid type tag.\");\n    }\n\n    while (this.tokens[0][1] !== endToken) {\n      res.push(this.parseTypeTag());\n\n      if (this.tokens.length > 0 && this.tokens[0][1] === endToken) {\n        break;\n      }\n\n      this.consume(\",\");\n\n      if (this.tokens.length > 0 && this.tokens[0][1] === endToken && allowTraillingComma) {\n        break;\n      }\n\n      if (this.tokens.length <= 0) {\n        bail(\"Invalid type tag.\");\n      }\n    }\n\n    return res;\n  }\n\n  parseTypeTag() {\n    if (this.tokens.length === 0) {\n      bail(\"Invalid type tag.\");\n    }\n\n    const [tokenTy, tokenVal] = this.tokens.shift();\n\n    if (tokenVal === \"u8\") {\n      return new TypeTagU8();\n    }\n\n    if (tokenVal === \"u16\") {\n      return new TypeTagU16();\n    }\n\n    if (tokenVal === \"u32\") {\n      return new TypeTagU32();\n    }\n\n    if (tokenVal === \"u64\") {\n      return new TypeTagU64();\n    }\n\n    if (tokenVal === \"u128\") {\n      return new TypeTagU128();\n    }\n\n    if (tokenVal === \"u256\") {\n      return new TypeTagU256();\n    }\n\n    if (tokenVal === \"bool\") {\n      return new TypeTagBool();\n    }\n\n    if (tokenVal === \"address\") {\n      return new TypeTagAddress();\n    }\n\n    if (tokenVal === \"vector\") {\n      this.consume(\"<\");\n      const res = this.parseTypeTag();\n      this.consume(\">\");\n      return new TypeTagVector(res);\n    }\n\n    if (tokenVal === \"string\") {\n      return new TypeTagStruct(stringStructTag);\n    }\n\n    if (tokenTy === \"IDENT\" && (tokenVal.startsWith(\"0x\") || tokenVal.startsWith(\"0X\"))) {\n      const address = AccountAddress.fromHex(tokenVal);\n      this.consume(\"::\");\n      const [moduleTokenTy, module] = this.tokens.shift();\n\n      if (moduleTokenTy !== \"IDENT\") {\n        bail(\"Invalid type tag.\");\n      }\n\n      this.consume(\"::\");\n      const [nameTokenTy, name] = this.tokens.shift();\n\n      if (nameTokenTy !== \"IDENT\") {\n        bail(\"Invalid type tag.\");\n      }\n\n      if (AccountAddress.CORE_CODE_ADDRESS.toHexString() === address.toHexString() && module === \"object\" && name === \"Object\") {\n        this.consumeWholeGeneric();\n        return new TypeTagAddress();\n      }\n\n      let tyTags = [];\n\n      if (this.tokens.length > 0 && this.tokens[0][1] === \"<\") {\n        this.consume(\"<\");\n        tyTags = this.parseCommaList(\">\", true);\n        this.consume(\">\");\n      }\n\n      const structTag = new StructTag(address, new Identifier(module), new Identifier(name), tyTags);\n      return new TypeTagStruct(structTag);\n    }\n\n    if (tokenTy === \"GENERIC\") {\n      if (this.typeTags.length === 0) {\n        bail(\"Can't convert generic type since no typeTags were specified.\");\n      }\n\n      const idx = parseInt(tokenVal.substring(1), 10);\n      return new TypeTagParser(this.typeTags[idx]).parseTypeTag();\n    }\n\n    throw new Error(\"Invalid type tag.\");\n  }\n\n};\nvar TypeTagParserError = class extends Error {\n  constructor(message) {\n    super(message);\n    this.name = \"TypeTagParserError\";\n  }\n\n}; // src/aptos_types/transaction.ts\n\nvar RawTransaction = class {\n  constructor(sender, sequence_number, payload, max_gas_amount, gas_unit_price, expiration_timestamp_secs, chain_id) {\n    this.sender = sender;\n    this.sequence_number = sequence_number;\n    this.payload = payload;\n    this.max_gas_amount = max_gas_amount;\n    this.gas_unit_price = gas_unit_price;\n    this.expiration_timestamp_secs = expiration_timestamp_secs;\n    this.chain_id = chain_id;\n  }\n\n  serialize(serializer) {\n    this.sender.serialize(serializer);\n    serializer.serializeU64(this.sequence_number);\n    this.payload.serialize(serializer);\n    serializer.serializeU64(this.max_gas_amount);\n    serializer.serializeU64(this.gas_unit_price);\n    serializer.serializeU64(this.expiration_timestamp_secs);\n    this.chain_id.serialize(serializer);\n  }\n\n  static deserialize(deserializer) {\n    const sender = AccountAddress.deserialize(deserializer);\n    const sequence_number = deserializer.deserializeU64();\n    const payload = TransactionPayload.deserialize(deserializer);\n    const max_gas_amount = deserializer.deserializeU64();\n    const gas_unit_price = deserializer.deserializeU64();\n    const expiration_timestamp_secs = deserializer.deserializeU64();\n    const chain_id = ChainId.deserialize(deserializer);\n    return new RawTransaction(sender, sequence_number, payload, max_gas_amount, gas_unit_price, expiration_timestamp_secs, chain_id);\n  }\n\n};\nvar Script = class {\n  constructor(code, ty_args, args) {\n    this.code = code;\n    this.ty_args = ty_args;\n    this.args = args;\n  }\n\n  serialize(serializer) {\n    serializer.serializeBytes(this.code);\n    serializeVector(this.ty_args, serializer);\n    serializeVector(this.args, serializer);\n  }\n\n  static deserialize(deserializer) {\n    const code = deserializer.deserializeBytes();\n    const ty_args = deserializeVector(deserializer, TypeTag);\n    const args = deserializeVector(deserializer, TransactionArgument);\n    return new Script(code, ty_args, args);\n  }\n\n};\nvar EntryFunction = class {\n  constructor(module_name, function_name, ty_args, args) {\n    this.module_name = module_name;\n    this.function_name = function_name;\n    this.ty_args = ty_args;\n    this.args = args;\n  }\n\n  static natural(module, func, ty_args, args) {\n    return new EntryFunction(ModuleId.fromStr(module), new Identifier(func), ty_args, args);\n  }\n\n  static natual(module, func, ty_args, args) {\n    return EntryFunction.natural(module, func, ty_args, args);\n  }\n\n  serialize(serializer) {\n    this.module_name.serialize(serializer);\n    this.function_name.serialize(serializer);\n    serializeVector(this.ty_args, serializer);\n    serializer.serializeU32AsUleb128(this.args.length);\n    this.args.forEach(item => {\n      serializer.serializeBytes(item);\n    });\n  }\n\n  static deserialize(deserializer) {\n    const module_name = ModuleId.deserialize(deserializer);\n    const function_name = Identifier.deserialize(deserializer);\n    const ty_args = deserializeVector(deserializer, TypeTag);\n    const length = deserializer.deserializeUleb128AsU32();\n    const list = [];\n\n    for (let i = 0; i < length; i += 1) {\n      list.push(deserializer.deserializeBytes());\n    }\n\n    const args = list;\n    return new EntryFunction(module_name, function_name, ty_args, args);\n  }\n\n};\nvar MultiSigTransactionPayload = class {\n  constructor(transaction_payload) {\n    this.transaction_payload = transaction_payload;\n  }\n\n  serialize(serializer) {\n    serializer.serializeU32AsUleb128(0);\n    this.transaction_payload.serialize(serializer);\n  }\n\n  static deserialize(deserializer) {\n    deserializer.deserializeUleb128AsU32();\n    return new MultiSigTransactionPayload(EntryFunction.deserialize(deserializer));\n  }\n\n};\nvar MultiSig = class {\n  constructor(multisig_address, transaction_payload) {\n    this.multisig_address = multisig_address;\n    this.transaction_payload = transaction_payload;\n  }\n\n  serialize(serializer) {\n    this.multisig_address.serialize(serializer);\n\n    if (this.transaction_payload === void 0) {\n      serializer.serializeBool(false);\n    } else {\n      serializer.serializeBool(true);\n      this.transaction_payload.serialize(serializer);\n    }\n  }\n\n  static deserialize(deserializer) {\n    const multisig_address = AccountAddress.deserialize(deserializer);\n    const payloadPresent = deserializer.deserializeBool();\n    let transaction_payload;\n\n    if (payloadPresent) {\n      transaction_payload = MultiSigTransactionPayload.deserialize(deserializer);\n    }\n\n    return new MultiSig(multisig_address, transaction_payload);\n  }\n\n};\nvar Module = class {\n  constructor(code) {\n    this.code = code;\n  }\n\n  serialize(serializer) {\n    serializer.serializeBytes(this.code);\n  }\n\n  static deserialize(deserializer) {\n    const code = deserializer.deserializeBytes();\n    return new Module(code);\n  }\n\n};\nvar ModuleId = class {\n  constructor(address, name) {\n    this.address = address;\n    this.name = name;\n  }\n\n  static fromStr(moduleId) {\n    const parts = moduleId.split(\"::\");\n\n    if (parts.length !== 2) {\n      throw new Error(\"Invalid module id.\");\n    }\n\n    return new ModuleId(AccountAddress.fromHex(new HexString(parts[0])), new Identifier(parts[1]));\n  }\n\n  serialize(serializer) {\n    this.address.serialize(serializer);\n    this.name.serialize(serializer);\n  }\n\n  static deserialize(deserializer) {\n    const address = AccountAddress.deserialize(deserializer);\n    const name = Identifier.deserialize(deserializer);\n    return new ModuleId(address, name);\n  }\n\n};\nvar ChangeSet = class {\n  serialize(serializer) {\n    throw new Error(\"Not implemented.\");\n  }\n\n  static deserialize(deserializer) {\n    throw new Error(\"Not implemented.\");\n  }\n\n};\nvar WriteSet = class {\n  serialize(serializer) {\n    throw new Error(\"Not implmented.\");\n  }\n\n  static deserialize(deserializer) {\n    throw new Error(\"Not implmented.\");\n  }\n\n};\nvar SignedTransaction = class {\n  constructor(raw_txn, authenticator) {\n    this.raw_txn = raw_txn;\n    this.authenticator = authenticator;\n  }\n\n  serialize(serializer) {\n    this.raw_txn.serialize(serializer);\n    this.authenticator.serialize(serializer);\n  }\n\n  static deserialize(deserializer) {\n    const raw_txn = RawTransaction.deserialize(deserializer);\n    const authenticator = TransactionAuthenticator.deserialize(deserializer);\n    return new SignedTransaction(raw_txn, authenticator);\n  }\n\n};\nvar RawTransactionWithData = class {\n  static deserialize(deserializer) {\n    const index = deserializer.deserializeUleb128AsU32();\n\n    switch (index) {\n      case 0:\n        return MultiAgentRawTransaction.load(deserializer);\n\n      case 1:\n        return FeePayerRawTransaction.load(deserializer);\n\n      default:\n        throw new Error(`Unknown variant index for RawTransactionWithData: ${index}`);\n    }\n  }\n\n};\nvar MultiAgentRawTransaction = class extends RawTransactionWithData {\n  constructor(raw_txn, secondary_signer_addresses) {\n    super();\n    this.raw_txn = raw_txn;\n    this.secondary_signer_addresses = secondary_signer_addresses;\n  }\n\n  serialize(serializer) {\n    serializer.serializeU32AsUleb128(0);\n    this.raw_txn.serialize(serializer);\n    serializeVector(this.secondary_signer_addresses, serializer);\n  }\n\n  static load(deserializer) {\n    const rawTxn = RawTransaction.deserialize(deserializer);\n    const secondarySignerAddresses = deserializeVector(deserializer, AccountAddress);\n    return new MultiAgentRawTransaction(rawTxn, secondarySignerAddresses);\n  }\n\n};\nvar FeePayerRawTransaction = class extends RawTransactionWithData {\n  constructor(raw_txn, secondary_signer_addresses, fee_payer_address) {\n    super();\n    this.raw_txn = raw_txn;\n    this.secondary_signer_addresses = secondary_signer_addresses;\n    this.fee_payer_address = fee_payer_address;\n  }\n\n  serialize(serializer) {\n    serializer.serializeU32AsUleb128(1);\n    this.raw_txn.serialize(serializer);\n    serializeVector(this.secondary_signer_addresses, serializer);\n    this.fee_payer_address.serialize(serializer);\n  }\n\n  static load(deserializer) {\n    const rawTxn = RawTransaction.deserialize(deserializer);\n    const secondarySignerAddresses = deserializeVector(deserializer, AccountAddress);\n    const feePayerAddress = AccountAddress.deserialize(deserializer);\n    return new FeePayerRawTransaction(rawTxn, secondarySignerAddresses, feePayerAddress);\n  }\n\n};\nvar TransactionPayload = class {\n  static deserialize(deserializer) {\n    const index = deserializer.deserializeUleb128AsU32();\n\n    switch (index) {\n      case 0:\n        return TransactionPayloadScript.load(deserializer);\n\n      case 2:\n        return TransactionPayloadEntryFunction.load(deserializer);\n\n      case 3:\n        return TransactionPayloadMultisig.load(deserializer);\n\n      default:\n        throw new Error(`Unknown variant index for TransactionPayload: ${index}`);\n    }\n  }\n\n};\nvar TransactionPayloadScript = class extends TransactionPayload {\n  constructor(value) {\n    super();\n    this.value = value;\n  }\n\n  serialize(serializer) {\n    serializer.serializeU32AsUleb128(0);\n    this.value.serialize(serializer);\n  }\n\n  static load(deserializer) {\n    const value = Script.deserialize(deserializer);\n    return new TransactionPayloadScript(value);\n  }\n\n};\nvar TransactionPayloadEntryFunction = class extends TransactionPayload {\n  constructor(value) {\n    super();\n    this.value = value;\n  }\n\n  serialize(serializer) {\n    serializer.serializeU32AsUleb128(2);\n    this.value.serialize(serializer);\n  }\n\n  static load(deserializer) {\n    const value = EntryFunction.deserialize(deserializer);\n    return new TransactionPayloadEntryFunction(value);\n  }\n\n};\nvar TransactionPayloadMultisig = class extends TransactionPayload {\n  constructor(value) {\n    super();\n    this.value = value;\n  }\n\n  serialize(serializer) {\n    serializer.serializeU32AsUleb128(3);\n    this.value.serialize(serializer);\n  }\n\n  static load(deserializer) {\n    const value = MultiSig.deserialize(deserializer);\n    return new TransactionPayloadMultisig(value);\n  }\n\n};\nvar ChainId = class {\n  constructor(value) {\n    this.value = value;\n  }\n\n  serialize(serializer) {\n    serializer.serializeU8(this.value);\n  }\n\n  static deserialize(deserializer) {\n    const value = deserializer.deserializeU8();\n    return new ChainId(value);\n  }\n\n};\nvar TransactionArgument = class {\n  static deserialize(deserializer) {\n    const index = deserializer.deserializeUleb128AsU32();\n\n    switch (index) {\n      case 0:\n        return TransactionArgumentU8.load(deserializer);\n\n      case 1:\n        return TransactionArgumentU64.load(deserializer);\n\n      case 2:\n        return TransactionArgumentU128.load(deserializer);\n\n      case 3:\n        return TransactionArgumentAddress.load(deserializer);\n\n      case 4:\n        return TransactionArgumentU8Vector.load(deserializer);\n\n      case 5:\n        return TransactionArgumentBool.load(deserializer);\n\n      case 6:\n        return TransactionArgumentU16.load(deserializer);\n\n      case 7:\n        return TransactionArgumentU32.load(deserializer);\n\n      case 8:\n        return TransactionArgumentU256.load(deserializer);\n\n      default:\n        throw new Error(`Unknown variant index for TransactionArgument: ${index}`);\n    }\n  }\n\n};\nvar TransactionArgumentU8 = class extends TransactionArgument {\n  constructor(value) {\n    super();\n    this.value = value;\n  }\n\n  serialize(serializer) {\n    serializer.serializeU32AsUleb128(0);\n    serializer.serializeU8(this.value);\n  }\n\n  static load(deserializer) {\n    const value = deserializer.deserializeU8();\n    return new TransactionArgumentU8(value);\n  }\n\n};\nvar TransactionArgumentU16 = class extends TransactionArgument {\n  constructor(value) {\n    super();\n    this.value = value;\n  }\n\n  serialize(serializer) {\n    serializer.serializeU32AsUleb128(6);\n    serializer.serializeU16(this.value);\n  }\n\n  static load(deserializer) {\n    const value = deserializer.deserializeU16();\n    return new TransactionArgumentU16(value);\n  }\n\n};\nvar TransactionArgumentU32 = class extends TransactionArgument {\n  constructor(value) {\n    super();\n    this.value = value;\n  }\n\n  serialize(serializer) {\n    serializer.serializeU32AsUleb128(7);\n    serializer.serializeU32(this.value);\n  }\n\n  static load(deserializer) {\n    const value = deserializer.deserializeU32();\n    return new TransactionArgumentU32(value);\n  }\n\n};\nvar TransactionArgumentU64 = class extends TransactionArgument {\n  constructor(value) {\n    super();\n    this.value = value;\n  }\n\n  serialize(serializer) {\n    serializer.serializeU32AsUleb128(1);\n    serializer.serializeU64(this.value);\n  }\n\n  static load(deserializer) {\n    const value = deserializer.deserializeU64();\n    return new TransactionArgumentU64(value);\n  }\n\n};\nvar TransactionArgumentU128 = class extends TransactionArgument {\n  constructor(value) {\n    super();\n    this.value = value;\n  }\n\n  serialize(serializer) {\n    serializer.serializeU32AsUleb128(2);\n    serializer.serializeU128(this.value);\n  }\n\n  static load(deserializer) {\n    const value = deserializer.deserializeU128();\n    return new TransactionArgumentU128(value);\n  }\n\n};\nvar TransactionArgumentU256 = class extends TransactionArgument {\n  constructor(value) {\n    super();\n    this.value = value;\n  }\n\n  serialize(serializer) {\n    serializer.serializeU32AsUleb128(8);\n    serializer.serializeU256(this.value);\n  }\n\n  static load(deserializer) {\n    const value = deserializer.deserializeU256();\n    return new TransactionArgumentU256(value);\n  }\n\n};\nvar TransactionArgumentAddress = class extends TransactionArgument {\n  constructor(value) {\n    super();\n    this.value = value;\n  }\n\n  serialize(serializer) {\n    serializer.serializeU32AsUleb128(3);\n    this.value.serialize(serializer);\n  }\n\n  static load(deserializer) {\n    const value = AccountAddress.deserialize(deserializer);\n    return new TransactionArgumentAddress(value);\n  }\n\n};\nvar TransactionArgumentU8Vector = class extends TransactionArgument {\n  constructor(value) {\n    super();\n    this.value = value;\n  }\n\n  serialize(serializer) {\n    serializer.serializeU32AsUleb128(4);\n    serializer.serializeBytes(this.value);\n  }\n\n  static load(deserializer) {\n    const value = deserializer.deserializeBytes();\n    return new TransactionArgumentU8Vector(value);\n  }\n\n};\nvar TransactionArgumentBool = class extends TransactionArgument {\n  constructor(value) {\n    super();\n    this.value = value;\n  }\n\n  serialize(serializer) {\n    serializer.serializeU32AsUleb128(5);\n    serializer.serializeBool(this.value);\n  }\n\n  static load(deserializer) {\n    const value = deserializer.deserializeBool();\n    return new TransactionArgumentBool(value);\n  }\n\n};\nvar Transaction = class {\n  getHashSalt() {\n    const hash = sha3Hash.create();\n    hash.update(\"APTOS::Transaction\");\n    return hash.digest();\n  }\n\n  static deserialize(deserializer) {\n    const index = deserializer.deserializeUleb128AsU32();\n\n    switch (index) {\n      case 0:\n        return UserTransaction.load(deserializer);\n\n      default:\n        throw new Error(`Unknown variant index for Transaction: ${index}`);\n    }\n  }\n\n};\nvar UserTransaction = class extends Transaction {\n  constructor(value) {\n    super();\n    this.value = value;\n  }\n\n  hash() {\n    const hash = sha3Hash.create();\n    hash.update(this.getHashSalt());\n    hash.update(bcsToBytes(this));\n    return hash.digest();\n  }\n\n  serialize(serializer) {\n    serializer.serializeU32AsUleb128(0);\n    this.value.serialize(serializer);\n  }\n\n  static load(deserializer) {\n    return new UserTransaction(SignedTransaction.deserialize(deserializer));\n  }\n\n}; // src/aptos_types/abi.ts\n\nvar TypeArgumentABI = class {\n  constructor(name) {\n    this.name = name;\n  }\n\n  serialize(serializer) {\n    serializer.serializeStr(this.name);\n  }\n\n  static deserialize(deserializer) {\n    const name = deserializer.deserializeStr();\n    return new TypeArgumentABI(name);\n  }\n\n};\nvar ArgumentABI = class {\n  constructor(name, type_tag) {\n    this.name = name;\n    this.type_tag = type_tag;\n  }\n\n  serialize(serializer) {\n    serializer.serializeStr(this.name);\n    this.type_tag.serialize(serializer);\n  }\n\n  static deserialize(deserializer) {\n    const name = deserializer.deserializeStr();\n    const typeTag = TypeTag.deserialize(deserializer);\n    return new ArgumentABI(name, typeTag);\n  }\n\n};\nvar ScriptABI = class {\n  static deserialize(deserializer) {\n    const index = deserializer.deserializeUleb128AsU32();\n\n    switch (index) {\n      case 0:\n        return TransactionScriptABI.load(deserializer);\n\n      case 1:\n        return EntryFunctionABI.load(deserializer);\n\n      default:\n        throw new Error(`Unknown variant index for TransactionPayload: ${index}`);\n    }\n  }\n\n};\nvar TransactionScriptABI = class extends ScriptABI {\n  constructor(name, doc, code, ty_args, args) {\n    super();\n    this.name = name;\n    this.doc = doc;\n    this.code = code;\n    this.ty_args = ty_args;\n    this.args = args;\n  }\n\n  serialize(serializer) {\n    serializer.serializeU32AsUleb128(0);\n    serializer.serializeStr(this.name);\n    serializer.serializeStr(this.doc);\n    serializer.serializeBytes(this.code);\n    serializeVector(this.ty_args, serializer);\n    serializeVector(this.args, serializer);\n  }\n\n  static load(deserializer) {\n    const name = deserializer.deserializeStr();\n    const doc = deserializer.deserializeStr();\n    const code = deserializer.deserializeBytes();\n    const tyArgs = deserializeVector(deserializer, TypeArgumentABI);\n    const args = deserializeVector(deserializer, ArgumentABI);\n    return new TransactionScriptABI(name, doc, code, tyArgs, args);\n  }\n\n};\nvar EntryFunctionABI = class extends ScriptABI {\n  constructor(name, module_name, doc, ty_args, args) {\n    super();\n    this.name = name;\n    this.module_name = module_name;\n    this.doc = doc;\n    this.ty_args = ty_args;\n    this.args = args;\n  }\n\n  serialize(serializer) {\n    serializer.serializeU32AsUleb128(1);\n    serializer.serializeStr(this.name);\n    this.module_name.serialize(serializer);\n    serializer.serializeStr(this.doc);\n    serializeVector(this.ty_args, serializer);\n    serializeVector(this.args, serializer);\n  }\n\n  static load(deserializer) {\n    const name = deserializer.deserializeStr();\n    const moduleName = ModuleId.deserialize(deserializer);\n    const doc = deserializer.deserializeStr();\n    const tyArgs = deserializeVector(deserializer, TypeArgumentABI);\n    const args = deserializeVector(deserializer, ArgumentABI);\n    return new EntryFunctionABI(name, moduleName, doc, tyArgs, args);\n  }\n\n}; // src/aptos_types/authentication_key.ts\n\nimport { sha3_256 as sha3Hash2 } from \"@noble/hashes/sha3\";\n\nvar _AuthenticationKey = class {\n  constructor(bytes) {\n    if (bytes.length !== _AuthenticationKey.LENGTH) {\n      throw new Error(\"Expected a byte array of length 32\");\n    }\n\n    this.bytes = bytes;\n  }\n\n  static fromMultiEd25519PublicKey(publicKey) {\n    const pubKeyBytes = publicKey.toBytes();\n    const bytes = new Uint8Array(pubKeyBytes.length + 1);\n    bytes.set(pubKeyBytes);\n    bytes.set([_AuthenticationKey.MULTI_ED25519_SCHEME], pubKeyBytes.length);\n    const hash = sha3Hash2.create();\n    hash.update(bytes);\n    return new _AuthenticationKey(hash.digest());\n  }\n\n  static fromEd25519PublicKey(publicKey) {\n    const pubKeyBytes = publicKey.value;\n    const bytes = new Uint8Array(pubKeyBytes.length + 1);\n    bytes.set(pubKeyBytes);\n    bytes.set([_AuthenticationKey.ED25519_SCHEME], pubKeyBytes.length);\n    const hash = sha3Hash2.create();\n    hash.update(bytes);\n    return new _AuthenticationKey(hash.digest());\n  }\n\n  derivedAddress() {\n    return HexString.fromUint8Array(this.bytes);\n  }\n\n};\n\nvar AuthenticationKey = _AuthenticationKey;\nAuthenticationKey.LENGTH = 32;\nAuthenticationKey.MULTI_ED25519_SCHEME = 1;\nAuthenticationKey.ED25519_SCHEME = 0;\nAuthenticationKey.DERIVE_RESOURCE_ACCOUNT_SCHEME = 255; // src/aptos_types/rotation_proof_challenge.ts\n\nvar RotationProofChallenge = class {\n  constructor(accountAddress, moduleName, structName, sequenceNumber, originator, currentAuthKey, newPublicKey) {\n    this.accountAddress = accountAddress;\n    this.moduleName = moduleName;\n    this.structName = structName;\n    this.sequenceNumber = sequenceNumber;\n    this.originator = originator;\n    this.currentAuthKey = currentAuthKey;\n    this.newPublicKey = newPublicKey;\n  }\n\n  serialize(serializer) {\n    this.accountAddress.serialize(serializer);\n    serializer.serializeStr(this.moduleName);\n    serializer.serializeStr(this.structName);\n    serializer.serializeU64(this.sequenceNumber);\n    this.originator.serialize(serializer);\n    this.currentAuthKey.serialize(serializer);\n    serializer.serializeBytes(this.newPublicKey);\n  }\n\n}; // src/account/aptos_account.ts\n\nvar _AptosAccount = class {\n  static fromAptosAccountObject(obj) {\n    return new _AptosAccount(HexString.ensure(obj.privateKeyHex).toUint8Array(), obj.address);\n  }\n\n  static isValidPath(path) {\n    return /^m\\/44'\\/637'\\/[0-9]+'\\/[0-9]+'\\/[0-9]+'+$/.test(path);\n  }\n\n  static fromDerivePath(path, mnemonics) {\n    if (!_AptosAccount.isValidPath(path)) {\n      throw new Error(\"Invalid derivation path\");\n    }\n\n    const normalizeMnemonics = mnemonics.trim().split(/\\s+/).map(part => part.toLowerCase()).join(\" \");\n    const {\n      key\n    } = derivePath(path, bytesToHex2(bip39.mnemonicToSeedSync(normalizeMnemonics)));\n    return new _AptosAccount(key);\n  }\n\n  constructor(privateKeyBytes, address) {\n    if (privateKeyBytes) {\n      this.signingKey = nacl2.sign.keyPair.fromSeed(privateKeyBytes.slice(0, 32));\n    } else {\n      this.signingKey = nacl2.sign.keyPair();\n    }\n\n    this.accountAddress = HexString.ensure(address || this.authKey().hex());\n  }\n\n  address() {\n    return this.accountAddress;\n  }\n\n  authKey() {\n    const pubKey = new Ed25519PublicKey(this.signingKey.publicKey);\n    const authKey = AuthenticationKey.fromEd25519PublicKey(pubKey);\n    return authKey.derivedAddress();\n  }\n\n  static getResourceAccountAddress(sourceAddress, seed) {\n    const source = bcsToBytes(AccountAddress.fromHex(sourceAddress));\n    const bytes = new Uint8Array([...source, ...seed, AuthenticationKey.DERIVE_RESOURCE_ACCOUNT_SCHEME]);\n    const hash = sha3Hash3.create();\n    hash.update(bytes);\n    return HexString.fromUint8Array(hash.digest());\n  }\n\n  static getCollectionID(creatorAddress, collectionName) {\n    const seed = new TextEncoder().encode(`${creatorAddress}::${collectionName}`);\n    const hash = sha256.create();\n    hash.update(seed);\n    return HexString.fromUint8Array(hash.digest());\n  }\n\n  pubKey() {\n    return HexString.fromUint8Array(this.signingKey.publicKey);\n  }\n\n  signBuffer(buffer) {\n    const signature = nacl2.sign.detached(buffer, this.signingKey.secretKey);\n    return HexString.fromUint8Array(signature);\n  }\n\n  signHexString(hexString) {\n    const toSign = HexString.ensure(hexString).toUint8Array();\n    return this.signBuffer(toSign);\n  }\n\n  verifySignature(message, signature) {\n    const rawMessage = HexString.ensure(message).toUint8Array();\n    const rawSignature = HexString.ensure(signature).toUint8Array();\n    return nacl2.sign.detached.verify(rawMessage, rawSignature, this.signingKey.publicKey);\n  }\n\n  toPrivateKeyObject() {\n    return {\n      address: this.address().hex(),\n      publicKeyHex: this.pubKey().hex(),\n      privateKeyHex: HexString.fromUint8Array(this.signingKey.secretKey.slice(0, 32)).hex()\n    };\n  }\n\n};\n\nvar AptosAccount = _AptosAccount;\n\n__decorateClass([Memoize()], AptosAccount.prototype, \"authKey\", 1);\n\nfunction getAddressFromAccountOrAddress(accountOrAddress) {\n  return accountOrAddress instanceof AptosAccount ? accountOrAddress.address() : HexString.ensure(accountOrAddress);\n} // src/indexer/generated/queries.ts\n\n\nvar CurrentTokenOwnershipFieldsFragmentDoc = `\n    fragment CurrentTokenOwnershipFields on current_token_ownerships_v2 {\n  token_standard\n  token_properties_mutated_v1\n  token_data_id\n  table_type_v1\n  storage_id\n  property_version_v1\n  owner_address\n  last_transaction_version\n  last_transaction_timestamp\n  is_soulbound_v2\n  is_fungible_v2\n  amount\n  current_token_data {\n    collection_id\n    description\n    is_fungible_v2\n    largest_property_version_v1\n    last_transaction_timestamp\n    last_transaction_version\n    maximum\n    supply\n    token_data_id\n    token_name\n    token_properties\n    token_standard\n    token_uri\n    current_collection {\n      collection_id\n      collection_name\n      creator_address\n      current_supply\n      description\n      last_transaction_timestamp\n      last_transaction_version\n      max_supply\n      mutable_description\n      mutable_uri\n      table_handle_v1\n      token_standard\n      total_minted_v2\n      uri\n    }\n  }\n}\n    `;\nvar TokenDataFieldsFragmentDoc = `\n    fragment TokenDataFields on current_token_datas {\n  creator_address\n  collection_name\n  description\n  metadata_uri\n  name\n  token_data_id_hash\n  collection_data_id_hash\n}\n    `;\nvar CollectionDataFieldsFragmentDoc = `\n    fragment CollectionDataFields on current_collection_datas {\n  metadata_uri\n  supply\n  description\n  collection_name\n  collection_data_id_hash\n  table_handle\n  creator_address\n}\n    `;\nvar TokenActivitiesFieldsFragmentDoc = `\n    fragment TokenActivitiesFields on token_activities_v2 {\n  after_value\n  before_value\n  entry_function_id_str\n  event_account_address\n  event_index\n  from_address\n  is_fungible_v2\n  property_version_v1\n  to_address\n  token_amount\n  token_data_id\n  token_standard\n  transaction_timestamp\n  transaction_version\n  type\n}\n    `;\nvar GetAccountCoinsDataCount = `\n    query getAccountCoinsDataCount($address: String) {\n  current_fungible_asset_balances_aggregate(\n    where: {owner_address: {_eq: $address}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n    `;\nvar GetAccountCoinsData = `\n    query getAccountCoinsData($where_condition: current_fungible_asset_balances_bool_exp!, $offset: Int, $limit: Int, $order_by: [current_fungible_asset_balances_order_by!]) {\n  current_fungible_asset_balances(\n    where: $where_condition\n    offset: $offset\n    limit: $limit\n    order_by: $order_by\n  ) {\n    amount\n    asset_type\n    is_frozen\n    is_primary\n    last_transaction_timestamp\n    last_transaction_version\n    owner_address\n    storage_id\n    token_standard\n    metadata {\n      token_standard\n      symbol\n      supply_aggregator_table_key_v1\n      supply_aggregator_table_handle_v1\n      project_uri\n      name\n      last_transaction_version\n      last_transaction_timestamp\n      icon_uri\n      decimals\n      creator_address\n      asset_type\n    }\n  }\n}\n    `;\nvar GetAccountCurrentTokens = `\n    query getAccountCurrentTokens($address: String!, $offset: Int, $limit: Int) {\n  current_token_ownerships(\n    where: {owner_address: {_eq: $address}, amount: {_gt: 0}}\n    order_by: [{last_transaction_version: desc}, {creator_address: asc}, {collection_name: asc}, {name: asc}]\n    offset: $offset\n    limit: $limit\n  ) {\n    amount\n    current_token_data {\n      ...TokenDataFields\n    }\n    current_collection_data {\n      ...CollectionDataFields\n    }\n    last_transaction_version\n    property_version\n  }\n}\n    ${TokenDataFieldsFragmentDoc}\n${CollectionDataFieldsFragmentDoc}`;\nvar GetAccountTokensCount = `\n    query getAccountTokensCount($where_condition: current_token_ownerships_v2_bool_exp, $offset: Int, $limit: Int) {\n  current_token_ownerships_v2_aggregate(\n    where: $where_condition\n    offset: $offset\n    limit: $limit\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n    `;\nvar GetAccountTransactionsCount = `\n    query getAccountTransactionsCount($address: String) {\n  account_transactions_aggregate(where: {account_address: {_eq: $address}}) {\n    aggregate {\n      count\n    }\n  }\n}\n    `;\nvar GetAccountTransactionsData = `\n    query getAccountTransactionsData($where_condition: account_transactions_bool_exp!, $offset: Int, $limit: Int, $order_by: [account_transactions_order_by!]) {\n  account_transactions(\n    where: $where_condition\n    order_by: $order_by\n    limit: $limit\n    offset: $offset\n  ) {\n    token_activities_v2 {\n      ...TokenActivitiesFields\n    }\n    transaction_version\n    account_address\n  }\n}\n    ${TokenActivitiesFieldsFragmentDoc}`;\nvar GetCollectionData = `\n    query getCollectionData($where_condition: current_collections_v2_bool_exp!, $offset: Int, $limit: Int, $order_by: [current_collections_v2_order_by!]) {\n  current_collections_v2(\n    where: $where_condition\n    offset: $offset\n    limit: $limit\n    order_by: $order_by\n  ) {\n    collection_id\n    collection_name\n    creator_address\n    current_supply\n    description\n    last_transaction_timestamp\n    last_transaction_version\n    max_supply\n    mutable_description\n    mutable_uri\n    table_handle_v1\n    token_standard\n    total_minted_v2\n    uri\n  }\n}\n    `;\nvar GetCollectionsWithOwnedTokens = `\n    query getCollectionsWithOwnedTokens($where_condition: current_collection_ownership_v2_view_bool_exp!, $offset: Int, $limit: Int, $order_by: [current_collection_ownership_v2_view_order_by!]) {\n  current_collection_ownership_v2_view(\n    where: $where_condition\n    offset: $offset\n    limit: $limit\n    order_by: $order_by\n  ) {\n    current_collection {\n      collection_id\n      collection_name\n      creator_address\n      current_supply\n      description\n      last_transaction_timestamp\n      last_transaction_version\n      mutable_description\n      max_supply\n      mutable_uri\n      table_handle_v1\n      token_standard\n      total_minted_v2\n      uri\n    }\n    collection_id\n    collection_name\n    collection_uri\n    creator_address\n    distinct_tokens\n    last_transaction_version\n    owner_address\n    single_token_uri\n  }\n}\n    `;\nvar GetCurrentObjects = `\n    query getCurrentObjects($where_condition: current_objects_bool_exp, $offset: Int, $limit: Int, $order_by: [current_objects_order_by!]) {\n  current_objects(\n    where: $where_condition\n    offset: $offset\n    limit: $limit\n    order_by: $order_by\n  ) {\n    allow_ungated_transfer\n    state_key_hash\n    owner_address\n    object_address\n    last_transaction_version\n    last_guid_creation_num\n    is_deleted\n  }\n}\n    `;\nvar GetDelegatedStakingActivities = `\n    query getDelegatedStakingActivities($delegatorAddress: String, $poolAddress: String) {\n  delegated_staking_activities(\n    where: {delegator_address: {_eq: $delegatorAddress}, pool_address: {_eq: $poolAddress}}\n  ) {\n    amount\n    delegator_address\n    event_index\n    event_type\n    pool_address\n    transaction_version\n  }\n}\n    `;\nvar GetIndexerLedgerInfo = `\n    query getIndexerLedgerInfo {\n  ledger_infos {\n    chain_id\n  }\n}\n    `;\nvar GetNumberOfDelegators = `\n    query getNumberOfDelegators($poolAddress: String) {\n  num_active_delegator_per_pool(\n    where: {pool_address: {_eq: $poolAddress}, num_active_delegator: {_gt: \"0\"}}\n    distinct_on: pool_address\n  ) {\n    num_active_delegator\n    pool_address\n  }\n}\n    `;\nvar GetOwnedTokens = `\n    query getOwnedTokens($where_condition: current_token_ownerships_v2_bool_exp!, $offset: Int, $limit: Int, $order_by: [current_token_ownerships_v2_order_by!]) {\n  current_token_ownerships_v2(\n    where: $where_condition\n    offset: $offset\n    limit: $limit\n    order_by: $order_by\n  ) {\n    ...CurrentTokenOwnershipFields\n  }\n}\n    ${CurrentTokenOwnershipFieldsFragmentDoc}`;\nvar GetOwnedTokensByTokenData = `\n    query getOwnedTokensByTokenData($where_condition: current_token_ownerships_v2_bool_exp!, $offset: Int, $limit: Int, $order_by: [current_token_ownerships_v2_order_by!]) {\n  current_token_ownerships_v2(\n    where: $where_condition\n    offset: $offset\n    limit: $limit\n    order_by: $order_by\n  ) {\n    ...CurrentTokenOwnershipFields\n  }\n}\n    ${CurrentTokenOwnershipFieldsFragmentDoc}`;\nvar GetTokenActivities = `\n    query getTokenActivities($where_condition: token_activities_v2_bool_exp!, $offset: Int, $limit: Int, $order_by: [token_activities_v2_order_by!]) {\n  token_activities_v2(\n    where: $where_condition\n    order_by: $order_by\n    offset: $offset\n    limit: $limit\n  ) {\n    ...TokenActivitiesFields\n  }\n}\n    ${TokenActivitiesFieldsFragmentDoc}`;\nvar GetTokenActivitiesCount = `\n    query getTokenActivitiesCount($token_id: String) {\n  token_activities_v2_aggregate(where: {token_data_id: {_eq: $token_id}}) {\n    aggregate {\n      count\n    }\n  }\n}\n    `;\nvar GetTokenCurrentOwnerData = `\n    query getTokenCurrentOwnerData($where_condition: current_token_ownerships_v2_bool_exp!, $offset: Int, $limit: Int, $order_by: [current_token_ownerships_v2_order_by!]) {\n  current_token_ownerships_v2(\n    where: $where_condition\n    offset: $offset\n    limit: $limit\n    order_by: $order_by\n  ) {\n    ...CurrentTokenOwnershipFields\n  }\n}\n    ${CurrentTokenOwnershipFieldsFragmentDoc}`;\nvar GetTokenData = `\n    query getTokenData($where_condition: current_token_datas_v2_bool_exp, $offset: Int, $limit: Int, $order_by: [current_token_datas_v2_order_by!]) {\n  current_token_datas_v2(\n    where: $where_condition\n    offset: $offset\n    limit: $limit\n    order_by: $order_by\n  ) {\n    collection_id\n    description\n    is_fungible_v2\n    largest_property_version_v1\n    last_transaction_timestamp\n    last_transaction_version\n    maximum\n    supply\n    token_data_id\n    token_name\n    token_properties\n    token_standard\n    token_uri\n    current_collection {\n      collection_id\n      collection_name\n      creator_address\n      current_supply\n      description\n      last_transaction_timestamp\n      last_transaction_version\n      max_supply\n      mutable_description\n      mutable_uri\n      table_handle_v1\n      token_standard\n      total_minted_v2\n      uri\n    }\n  }\n}\n    `;\nvar GetTokenOwnedFromCollection = `\n    query getTokenOwnedFromCollection($where_condition: current_token_ownerships_v2_bool_exp!, $offset: Int, $limit: Int, $order_by: [current_token_ownerships_v2_order_by!]) {\n  current_token_ownerships_v2(\n    where: $where_condition\n    offset: $offset\n    limit: $limit\n    order_by: $order_by\n  ) {\n    ...CurrentTokenOwnershipFields\n  }\n}\n    ${CurrentTokenOwnershipFieldsFragmentDoc}`;\nvar GetTokenOwnersData = `\n    query getTokenOwnersData($where_condition: current_token_ownerships_v2_bool_exp!, $offset: Int, $limit: Int, $order_by: [current_token_ownerships_v2_order_by!]) {\n  current_token_ownerships_v2(\n    where: $where_condition\n    offset: $offset\n    limit: $limit\n    order_by: $order_by\n  ) {\n    ...CurrentTokenOwnershipFields\n  }\n}\n    ${CurrentTokenOwnershipFieldsFragmentDoc}`;\nvar GetTopUserTransactions = `\n    query getTopUserTransactions($limit: Int) {\n  user_transactions(limit: $limit, order_by: {version: desc}) {\n    version\n  }\n}\n    `;\nvar GetUserTransactions = `\n    query getUserTransactions($where_condition: user_transactions_bool_exp!, $offset: Int, $limit: Int, $order_by: [user_transactions_order_by!]) {\n  user_transactions(\n    order_by: $order_by\n    where: $where_condition\n    limit: $limit\n    offset: $offset\n  ) {\n    version\n  }\n}\n    `; // src/transaction_builder/builder.ts\n\nimport { sha3_256 as sha3Hash4 } from \"@noble/hashes/sha3\"; // src/transaction_builder/builder_utils.ts\n\nfunction assertType(val, types, message) {\n  if (!(types == null ? void 0 : types.includes(typeof val))) {\n    throw new Error(message || `Invalid arg: ${val} type should be ${types instanceof Array ? types.join(\" or \") : types}`);\n  }\n}\n\nfunction ensureBoolean(val) {\n  assertType(val, [\"boolean\", \"string\"]);\n\n  if (typeof val === \"boolean\") {\n    return val;\n  }\n\n  if (val === \"true\") {\n    return true;\n  }\n\n  if (val === \"false\") {\n    return false;\n  }\n\n  throw new Error(\"Invalid boolean string.\");\n}\n\nfunction ensureNumber(val) {\n  assertType(val, [\"number\", \"string\"]);\n\n  if (typeof val === \"number\") {\n    return val;\n  }\n\n  const res = Number.parseInt(val, 10);\n\n  if (Number.isNaN(res)) {\n    throw new Error(\"Invalid number string.\");\n  }\n\n  return res;\n}\n\nfunction ensureBigInt(val) {\n  assertType(val, [\"number\", \"bigint\", \"string\"]);\n  return BigInt(val);\n}\n\nfunction serializeArg(argVal, argType, serializer) {\n  serializeArgInner(argVal, argType, serializer, 0);\n}\n\nfunction serializeArgInner(argVal, argType, serializer, depth) {\n  if (argType instanceof TypeTagBool) {\n    serializer.serializeBool(ensureBoolean(argVal));\n  } else if (argType instanceof TypeTagU8) {\n    serializer.serializeU8(ensureNumber(argVal));\n  } else if (argType instanceof TypeTagU16) {\n    serializer.serializeU16(ensureNumber(argVal));\n  } else if (argType instanceof TypeTagU32) {\n    serializer.serializeU32(ensureNumber(argVal));\n  } else if (argType instanceof TypeTagU64) {\n    serializer.serializeU64(ensureBigInt(argVal));\n  } else if (argType instanceof TypeTagU128) {\n    serializer.serializeU128(ensureBigInt(argVal));\n  } else if (argType instanceof TypeTagU256) {\n    serializer.serializeU256(ensureBigInt(argVal));\n  } else if (argType instanceof TypeTagAddress) {\n    serializeAddress(argVal, serializer);\n  } else if (argType instanceof TypeTagVector) {\n    serializeVector2(argVal, argType, serializer, depth);\n  } else if (argType instanceof TypeTagStruct) {\n    serializeStruct(argVal, argType, serializer, depth);\n  } else {\n    throw new Error(\"Unsupported arg type.\");\n  }\n}\n\nfunction serializeAddress(argVal, serializer) {\n  let addr;\n\n  if (typeof argVal === \"string\" || argVal instanceof HexString) {\n    addr = AccountAddress.fromHex(argVal);\n  } else if (argVal instanceof AccountAddress) {\n    addr = argVal;\n  } else {\n    throw new Error(\"Invalid account address.\");\n  }\n\n  addr.serialize(serializer);\n}\n\nfunction serializeVector2(argVal, argType, serializer, depth) {\n  if (argType.value instanceof TypeTagU8) {\n    if (argVal instanceof Uint8Array) {\n      serializer.serializeBytes(argVal);\n      return;\n    }\n\n    if (argVal instanceof HexString) {\n      serializer.serializeBytes(argVal.toUint8Array());\n      return;\n    }\n\n    if (typeof argVal === \"string\") {\n      serializer.serializeStr(argVal);\n      return;\n    }\n  }\n\n  if (!Array.isArray(argVal)) {\n    throw new Error(\"Invalid vector args.\");\n  }\n\n  serializer.serializeU32AsUleb128(argVal.length);\n  argVal.forEach(arg => serializeArgInner(arg, argType.value, serializer, depth + 1));\n}\n\nfunction serializeStruct(argVal, argType, serializer, depth) {\n  const {\n    address,\n    module_name: moduleName,\n    name,\n    type_args: typeArgs\n  } = argType.value;\n  const structType = `${HexString.fromUint8Array(address.address).toShortString()}::${moduleName.value}::${name.value}`;\n\n  if (structType === \"0x1::string::String\") {\n    assertType(argVal, [\"string\"]);\n    serializer.serializeStr(argVal);\n  } else if (structType === \"0x1::object::Object\") {\n    serializeAddress(argVal, serializer);\n  } else if (structType === \"0x1::option::Option\") {\n    if (typeArgs.length !== 1) {\n      throw new Error(`Option has the wrong number of type arguments ${typeArgs.length}`);\n    }\n\n    serializeOption(argVal, typeArgs[0], serializer, depth);\n  } else {\n    throw new Error(\"Unsupported struct type in function argument\");\n  }\n}\n\nfunction serializeOption(argVal, argType, serializer, depth) {\n  if (argVal === void 0 || argVal === null) {\n    serializer.serializeU32AsUleb128(0);\n  } else {\n    serializer.serializeU32AsUleb128(1);\n    serializeArgInner(argVal, argType, serializer, depth + 1);\n  }\n}\n\nfunction argToTransactionArgument(argVal, argType) {\n  if (argType instanceof TypeTagBool) {\n    return new TransactionArgumentBool(ensureBoolean(argVal));\n  }\n\n  if (argType instanceof TypeTagU8) {\n    return new TransactionArgumentU8(ensureNumber(argVal));\n  }\n\n  if (argType instanceof TypeTagU16) {\n    return new TransactionArgumentU16(ensureNumber(argVal));\n  }\n\n  if (argType instanceof TypeTagU32) {\n    return new TransactionArgumentU32(ensureNumber(argVal));\n  }\n\n  if (argType instanceof TypeTagU64) {\n    return new TransactionArgumentU64(ensureBigInt(argVal));\n  }\n\n  if (argType instanceof TypeTagU128) {\n    return new TransactionArgumentU128(ensureBigInt(argVal));\n  }\n\n  if (argType instanceof TypeTagU256) {\n    return new TransactionArgumentU256(ensureBigInt(argVal));\n  }\n\n  if (argType instanceof TypeTagAddress) {\n    let addr;\n\n    if (typeof argVal === \"string\" || argVal instanceof HexString) {\n      addr = AccountAddress.fromHex(argVal);\n    } else if (argVal instanceof AccountAddress) {\n      addr = argVal;\n    } else {\n      throw new Error(\"Invalid account address.\");\n    }\n\n    return new TransactionArgumentAddress(addr);\n  }\n\n  if (argType instanceof TypeTagVector && argType.value instanceof TypeTagU8) {\n    if (!(argVal instanceof Uint8Array)) {\n      throw new Error(`${argVal} should be an instance of Uint8Array`);\n    }\n\n    return new TransactionArgumentU8Vector(argVal);\n  }\n\n  throw new Error(\"Unknown type for TransactionArgument.\");\n} // src/transaction_builder/builder.ts\n\n\nvar RAW_TRANSACTION_SALT = \"APTOS::RawTransaction\";\nvar RAW_TRANSACTION_WITH_DATA_SALT = \"APTOS::RawTransactionWithData\";\nvar TransactionBuilder = class {\n  constructor(signingFunction, rawTxnBuilder) {\n    this.rawTxnBuilder = rawTxnBuilder;\n    this.signingFunction = signingFunction;\n  }\n\n  build(func, ty_tags, args) {\n    if (!this.rawTxnBuilder) {\n      throw new Error(\"this.rawTxnBuilder doesn't exist.\");\n    }\n\n    return this.rawTxnBuilder.build(func, ty_tags, args);\n  }\n\n  static getSigningMessage(rawTxn) {\n    const hash = sha3Hash4.create();\n\n    if (rawTxn instanceof RawTransaction) {\n      hash.update(RAW_TRANSACTION_SALT);\n    } else if (rawTxn instanceof MultiAgentRawTransaction) {\n      hash.update(RAW_TRANSACTION_WITH_DATA_SALT);\n    } else if (rawTxn instanceof FeePayerRawTransaction) {\n      hash.update(RAW_TRANSACTION_WITH_DATA_SALT);\n    } else {\n      throw new Error(\"Unknown transaction type.\");\n    }\n\n    const prefix = hash.digest();\n    const body = bcsToBytes(rawTxn);\n    const mergedArray = new Uint8Array(prefix.length + body.length);\n    mergedArray.set(prefix);\n    mergedArray.set(body, prefix.length);\n    return mergedArray;\n  }\n\n};\nvar TransactionBuilderEd25519 = class extends TransactionBuilder {\n  constructor(signingFunction, publicKey, rawTxnBuilder) {\n    super(signingFunction, rawTxnBuilder);\n    this.publicKey = publicKey;\n  }\n\n  rawToSigned(rawTxn) {\n    const signingMessage = TransactionBuilder.getSigningMessage(rawTxn);\n    const signature = this.signingFunction(signingMessage);\n    const authenticator = new TransactionAuthenticatorEd25519(new Ed25519PublicKey(this.publicKey), signature);\n    return new SignedTransaction(rawTxn, authenticator);\n  }\n\n  sign(rawTxn) {\n    return bcsToBytes(this.rawToSigned(rawTxn));\n  }\n\n};\nvar TransactionBuilderMultiEd25519 = class extends TransactionBuilder {\n  constructor(signingFunction, publicKey) {\n    super(signingFunction);\n    this.publicKey = publicKey;\n  }\n\n  rawToSigned(rawTxn) {\n    const signingMessage = TransactionBuilder.getSigningMessage(rawTxn);\n    const signature = this.signingFunction(signingMessage);\n    const authenticator = new TransactionAuthenticatorMultiEd25519(this.publicKey, signature);\n    return new SignedTransaction(rawTxn, authenticator);\n  }\n\n  sign(rawTxn) {\n    return bcsToBytes(this.rawToSigned(rawTxn));\n  }\n\n};\nvar TransactionBuilderABI = class {\n  constructor(abis, builderConfig) {\n    this.abiMap = /* @__PURE__ */new Map();\n    abis.forEach(abi => {\n      const deserializer = new Deserializer(abi);\n      const scriptABI = ScriptABI.deserialize(deserializer);\n      let k;\n\n      if (scriptABI instanceof EntryFunctionABI) {\n        const funcABI = scriptABI;\n        const {\n          address: addr,\n          name: moduleName\n        } = funcABI.module_name;\n        k = `${HexString.fromUint8Array(addr.address).toShortString()}::${moduleName.value}::${funcABI.name}`;\n      } else {\n        const funcABI = scriptABI;\n        k = funcABI.name;\n      }\n\n      if (this.abiMap.has(k)) {\n        throw new Error(\"Found conflicting ABI interfaces\");\n      }\n\n      this.abiMap.set(k, scriptABI);\n    });\n    this.builderConfig = {\n      maxGasAmount: BigInt(DEFAULT_MAX_GAS_AMOUNT),\n      expSecFromNow: DEFAULT_TXN_EXP_SEC_FROM_NOW,\n      ...builderConfig\n    };\n  }\n\n  static toBCSArgs(abiArgs, args) {\n    if (abiArgs.length !== args.length) {\n      throw new Error(\"Wrong number of args provided.\");\n    }\n\n    return args.map((arg, i) => {\n      const serializer = new Serializer();\n      serializeArg(arg, abiArgs[i].type_tag, serializer);\n      return serializer.getBytes();\n    });\n  }\n\n  static toTransactionArguments(abiArgs, args) {\n    if (abiArgs.length !== args.length) {\n      throw new Error(\"Wrong number of args provided.\");\n    }\n\n    return args.map((arg, i) => argToTransactionArgument(arg, abiArgs[i].type_tag));\n  }\n\n  setSequenceNumber(seqNumber) {\n    this.builderConfig.sequenceNumber = BigInt(seqNumber);\n  }\n\n  buildTransactionPayload(func, ty_tags, args) {\n    const typeTags = ty_tags.map(ty_arg => new TypeTagParser(ty_arg).parseTypeTag());\n    let payload;\n\n    if (!this.abiMap.has(func)) {\n      throw new Error(`Cannot find function: ${func}`);\n    }\n\n    const scriptABI = this.abiMap.get(func);\n\n    if (scriptABI instanceof EntryFunctionABI) {\n      const funcABI = scriptABI;\n      const bcsArgs = TransactionBuilderABI.toBCSArgs(funcABI.args, args);\n      payload = new TransactionPayloadEntryFunction(new EntryFunction(funcABI.module_name, new Identifier(funcABI.name), typeTags, bcsArgs));\n    } else if (scriptABI instanceof TransactionScriptABI) {\n      const funcABI = scriptABI;\n      const scriptArgs = TransactionBuilderABI.toTransactionArguments(funcABI.args, args);\n      payload = new TransactionPayloadScript(new Script(funcABI.code, typeTags, scriptArgs));\n    } else {\n      throw new Error(\"Unknown ABI format.\");\n    }\n\n    return payload;\n  }\n\n  build(func, ty_tags, args) {\n    const {\n      sender,\n      sequenceNumber,\n      gasUnitPrice,\n      maxGasAmount,\n      expSecFromNow,\n      chainId\n    } = this.builderConfig;\n\n    if (!gasUnitPrice) {\n      throw new Error(\"No gasUnitPrice provided.\");\n    }\n\n    const senderAccount = sender instanceof AccountAddress ? sender : AccountAddress.fromHex(sender);\n    const expTimestampSec = BigInt(Math.floor(Date.now() / 1e3) + Number(expSecFromNow));\n    const payload = this.buildTransactionPayload(func, ty_tags, args);\n\n    if (payload) {\n      return new RawTransaction(senderAccount, BigInt(sequenceNumber), payload, BigInt(maxGasAmount), BigInt(gasUnitPrice), expTimestampSec, new ChainId(Number(chainId)));\n    }\n\n    throw new Error(\"Invalid ABI.\");\n  }\n\n};\nvar TransactionBuilderRemoteABI = class {\n  constructor(aptosClient2, builderConfig) {\n    this.aptosClient = aptosClient2;\n    this.builderConfig = builderConfig;\n  }\n\n  async fetchABI(addr) {\n    const modules = await this.aptosClient.getAccountModules(addr);\n    const abis = modules.map(module => module.abi).flatMap(abi => abi.exposed_functions.filter(ef => ef.is_entry).map(ef => ({\n      fullName: `${abi.address}::${abi.name}::${ef.name}`,\n      ...ef\n    })));\n    const abiMap = /* @__PURE__ */new Map();\n    abis.forEach(abi => {\n      abiMap.set(abi.fullName, abi);\n    });\n    return abiMap;\n  }\n\n  async build(func, ty_tags, args) {\n    const normlize = s => s.replace(/^0[xX]0*/g, \"0x\");\n\n    func = normlize(func);\n    const funcNameParts = func.split(\"::\");\n\n    if (funcNameParts.length !== 3) {\n      throw new Error(\"'func' needs to be a fully qualified function name in format <address>::<module>::<function>, e.g. 0x1::coin::transfer\");\n    }\n\n    const [addr, module] = func.split(\"::\");\n    const abiMap = await this.fetchABI(addr);\n\n    if (!abiMap.has(func)) {\n      throw new Error(`${func} doesn't exist.`);\n    }\n\n    const funcAbi = abiMap.get(func);\n    const abiArgs = funcAbi.params.filter(param => param !== \"signer\" && param !== \"&signer\");\n    const typeArgABIs = abiArgs.map((abiArg, i) => new ArgumentABI(`var${i}`, new TypeTagParser(abiArg, ty_tags).parseTypeTag()));\n    const entryFunctionABI = new EntryFunctionABI(funcAbi.name, ModuleId.fromStr(`${addr}::${module}`), \"\", funcAbi.generic_type_params.map((_, i) => new TypeArgumentABI(`${i}`)), typeArgABIs);\n    const {\n      sender,\n      ...rest\n    } = this.builderConfig;\n    const senderAddress = sender instanceof AccountAddress ? HexString.fromUint8Array(sender.address) : sender;\n    const [{\n      sequence_number: sequenceNumber\n    }, chainId, {\n      gas_estimate: gasUnitPrice\n    }] = await Promise.all([(rest == null ? void 0 : rest.sequenceNumber) ? Promise.resolve({\n      sequence_number: rest == null ? void 0 : rest.sequenceNumber\n    }) : this.aptosClient.getAccount(senderAddress), (rest == null ? void 0 : rest.chainId) ? Promise.resolve(rest == null ? void 0 : rest.chainId) : this.aptosClient.getChainId(), (rest == null ? void 0 : rest.gasUnitPrice) ? Promise.resolve({\n      gas_estimate: rest == null ? void 0 : rest.gasUnitPrice\n    }) : this.aptosClient.estimateGasPrice()]);\n    const builderABI = new TransactionBuilderABI([bcsToBytes(entryFunctionABI)], {\n      sender,\n      sequenceNumber,\n      chainId,\n      gasUnitPrice: BigInt(gasUnitPrice),\n      ...rest\n    });\n    return builderABI.build(func, ty_tags, args);\n  }\n\n};\n\n__decorateClass([MemoizeExpiring(10 * 60 * 1e3)], TransactionBuilderRemoteABI.prototype, \"fetchABI\", 1); // src/providers/aptos_client.ts\n\n\nvar _AptosClient = class {\n  constructor(nodeUrl, config) {\n    let doNotFixNodeUrl = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n    if (!nodeUrl) {\n      throw new Error(\"Node URL cannot be empty.\");\n    }\n\n    if (doNotFixNodeUrl) {\n      this.nodeUrl = nodeUrl;\n    } else {\n      this.nodeUrl = fixNodeUrl(nodeUrl);\n    }\n\n    this.config = config === void 0 || config === null ? {} : { ...config\n    };\n  }\n\n  async getAccount(accountAddress) {\n    const {\n      data\n    } = await get({\n      url: this.nodeUrl,\n      endpoint: `accounts/${HexString.ensure(accountAddress).hex()}`,\n      originMethod: \"getAccount\",\n      overrides: { ...this.config\n      }\n    });\n    return data;\n  }\n\n  async getAccountTransactions(accountAddress, query) {\n    const {\n      data\n    } = await get({\n      url: this.nodeUrl,\n      endpoint: `accounts/${HexString.ensure(accountAddress).hex()}/transactions`,\n      originMethod: \"getAccountTransactions\",\n      params: {\n        start: query == null ? void 0 : query.start,\n        limit: query == null ? void 0 : query.limit\n      },\n      overrides: { ...this.config\n      }\n    });\n    return data;\n  }\n\n  async getAccountModules(accountAddress, query) {\n    const out = await paginateWithCursor({\n      url: this.nodeUrl,\n      endpoint: `accounts/${accountAddress}/modules`,\n      params: {\n        ledger_version: query == null ? void 0 : query.ledgerVersion,\n        limit: 1e3\n      },\n      originMethod: \"getAccountModules\",\n      overrides: { ...this.config\n      }\n    });\n    return out;\n  }\n\n  async getAccountModule(accountAddress, moduleName, query) {\n    const {\n      data\n    } = await get({\n      url: this.nodeUrl,\n      endpoint: `accounts/${HexString.ensure(accountAddress).hex()}/module/${moduleName}`,\n      originMethod: \"getAccountModule\",\n      params: {\n        ledger_version: query == null ? void 0 : query.ledgerVersion\n      },\n      overrides: { ...this.config\n      }\n    });\n    return data;\n  }\n\n  async getAccountResources(accountAddress, query) {\n    const out = await paginateWithCursor({\n      url: this.nodeUrl,\n      endpoint: `accounts/${accountAddress}/resources`,\n      params: {\n        ledger_version: query == null ? void 0 : query.ledgerVersion,\n        limit: 9999\n      },\n      originMethod: \"getAccountResources\",\n      overrides: { ...this.config\n      }\n    });\n    return out;\n  }\n\n  async getAccountResource(accountAddress, resourceType, query) {\n    const {\n      data\n    } = await get({\n      url: this.nodeUrl,\n      endpoint: `accounts/${HexString.ensure(accountAddress).hex()}/resource/${resourceType}`,\n      originMethod: \"getAccountResource\",\n      params: {\n        ledger_version: query == null ? void 0 : query.ledgerVersion\n      },\n      overrides: { ...this.config\n      }\n    });\n    return data;\n  }\n\n  static generateBCSTransaction(accountFrom, rawTxn) {\n    const txnBuilder = new TransactionBuilderEd25519(signingMessage => {\n      const sigHexStr = accountFrom.signBuffer(signingMessage);\n      return new aptos_types_exports.Ed25519Signature(sigHexStr.toUint8Array());\n    }, accountFrom.pubKey().toUint8Array());\n    return txnBuilder.sign(rawTxn);\n  }\n\n  static generateBCSSimulation(accountFrom, rawTxn) {\n    const txnBuilder = new TransactionBuilderEd25519(_signingMessage => {\n      const invalidSigBytes = new Uint8Array(64);\n      return new aptos_types_exports.Ed25519Signature(invalidSigBytes);\n    }, accountFrom.pubKey().toUint8Array());\n    return txnBuilder.sign(rawTxn);\n  }\n\n  async generateTransaction(sender, payload, options) {\n    const config = {\n      sender\n    };\n\n    if (options == null ? void 0 : options.sequence_number) {\n      config.sequenceNumber = options.sequence_number;\n    }\n\n    if (options == null ? void 0 : options.gas_unit_price) {\n      config.gasUnitPrice = options.gas_unit_price;\n    }\n\n    if (options == null ? void 0 : options.max_gas_amount) {\n      config.maxGasAmount = options.max_gas_amount;\n    }\n\n    if (options == null ? void 0 : options.expiration_timestamp_secs) {\n      const timestamp = Number.parseInt(options.expiration_timestamp_secs, 10);\n      config.expSecFromNow = timestamp - Math.floor(Date.now() / 1e3);\n    }\n\n    const builder = new TransactionBuilderRemoteABI(this, config);\n    return builder.build(payload.function, payload.type_arguments, payload.arguments);\n  }\n\n  async generateFeePayerTransaction(sender, payload, feePayer) {\n    let secondarySignerAccounts = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];\n    let options = arguments.length > 4 ? arguments[4] : undefined;\n    const rawTxn = await this.generateTransaction(sender, payload, options);\n    const signers = secondarySignerAccounts.map(signer => AccountAddress.fromHex(signer));\n    const feePayerTxn = new aptos_types_exports.FeePayerRawTransaction(rawTxn, signers, AccountAddress.fromHex(feePayer));\n    return feePayerTxn;\n  }\n\n  async submitFeePayerTransaction(feePayerTransaction, senderAuthenticator, feePayerAuthenticator) {\n    let additionalSignersAuthenticators = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];\n    const txAuthenticatorFeePayer = new aptos_types_exports.TransactionAuthenticatorFeePayer(senderAuthenticator, feePayerTransaction.secondary_signer_addresses, additionalSignersAuthenticators, {\n      address: feePayerTransaction.fee_payer_address,\n      authenticator: feePayerAuthenticator\n    });\n    const bcsTxn = bcsToBytes(new aptos_types_exports.SignedTransaction(feePayerTransaction.raw_txn, txAuthenticatorFeePayer));\n    const transactionRes = await this.submitSignedBCSTransaction(bcsTxn);\n    return transactionRes;\n  }\n\n  async signMultiTransaction(signer, rawTxn) {\n    const signerSignature = new aptos_types_exports.Ed25519Signature(signer.signBuffer(TransactionBuilder.getSigningMessage(rawTxn)).toUint8Array());\n    const signerAuthenticator = new aptos_types_exports.AccountAuthenticatorEd25519(new aptos_types_exports.Ed25519PublicKey(signer.signingKey.publicKey), signerSignature);\n    return Promise.resolve(signerAuthenticator);\n  }\n\n  async signTransaction(accountFrom, rawTransaction) {\n    return Promise.resolve(_AptosClient.generateBCSTransaction(accountFrom, rawTransaction));\n  }\n\n  async getEventsByCreationNumber(address, creationNumber, query) {\n    const {\n      data\n    } = await get({\n      url: this.nodeUrl,\n      endpoint: `accounts/${HexString.ensure(address).hex()}/events/${creationNumber}`,\n      originMethod: \"getEventsByCreationNumber\",\n      params: {\n        start: query == null ? void 0 : query.start,\n        limit: query == null ? void 0 : query.limit\n      },\n      overrides: { ...this.config\n      }\n    });\n    return data;\n  }\n\n  async getEventsByEventHandle(address, eventHandleStruct, fieldName, query) {\n    const {\n      data\n    } = await get({\n      url: this.nodeUrl,\n      endpoint: `accounts/${HexString.ensure(address).hex()}/events/${eventHandleStruct}/${fieldName}`,\n      originMethod: \"getEventsByEventHandle\",\n      params: {\n        start: query == null ? void 0 : query.start,\n        limit: query == null ? void 0 : query.limit\n      },\n      overrides: { ...this.config\n      }\n    });\n    return data;\n  }\n\n  async submitTransaction(signedTxn) {\n    return this.submitSignedBCSTransaction(signedTxn);\n  }\n\n  async simulateTransaction(accountOrPubkey, rawTransaction, query) {\n    let signedTxn;\n\n    if (accountOrPubkey instanceof AptosAccount) {\n      signedTxn = _AptosClient.generateBCSSimulation(accountOrPubkey, rawTransaction);\n    } else if (accountOrPubkey instanceof MultiEd25519PublicKey) {\n      const txnBuilder = new TransactionBuilderMultiEd25519(() => {\n        const {\n          threshold\n        } = accountOrPubkey;\n        const bits = [];\n        const signatures = [];\n\n        for (let i = 0; i < threshold; i += 1) {\n          bits.push(i);\n          signatures.push(new aptos_types_exports.Ed25519Signature(new Uint8Array(64)));\n        }\n\n        const bitmap = aptos_types_exports.MultiEd25519Signature.createBitmap(bits);\n        return new aptos_types_exports.MultiEd25519Signature(signatures, bitmap);\n      }, accountOrPubkey);\n      signedTxn = txnBuilder.sign(rawTransaction);\n    } else {\n      const txnBuilder = new TransactionBuilderEd25519(() => {\n        const invalidSigBytes = new Uint8Array(64);\n        return new aptos_types_exports.Ed25519Signature(invalidSigBytes);\n      }, accountOrPubkey.toBytes());\n      signedTxn = txnBuilder.sign(rawTransaction);\n    }\n\n    return this.submitBCSSimulation(signedTxn, query);\n  }\n\n  async submitSignedBCSTransaction(signedTxn) {\n    const {\n      data\n    } = await post({\n      url: this.nodeUrl,\n      body: signedTxn,\n      endpoint: \"transactions\",\n      originMethod: \"submitSignedBCSTransaction\",\n      contentType: \"application/x.aptos.signed_transaction+bcs\",\n      overrides: { ...this.config\n      }\n    });\n    return data;\n  }\n\n  async submitBCSSimulation(bcsBody, query) {\n    var _a, _b, _c;\n\n    const queryParams = {\n      estimate_gas_unit_price: (_a = query == null ? void 0 : query.estimateGasUnitPrice) != null ? _a : false,\n      estimate_max_gas_amount: (_b = query == null ? void 0 : query.estimateMaxGasAmount) != null ? _b : false,\n      estimate_prioritized_gas_unit_price: (_c = query == null ? void 0 : query.estimatePrioritizedGasUnitPrice) != null ? _c : false\n    };\n    const {\n      data\n    } = await post({\n      url: this.nodeUrl,\n      body: bcsBody,\n      endpoint: \"transactions/simulate\",\n      params: queryParams,\n      originMethod: \"submitBCSSimulation\",\n      contentType: \"application/x.aptos.signed_transaction+bcs\",\n      overrides: { ...this.config\n      }\n    });\n    return data;\n  }\n\n  async getTransactions(query) {\n    var _a;\n\n    const {\n      data\n    } = await get({\n      url: this.nodeUrl,\n      endpoint: \"transactions\",\n      originMethod: \"getTransactions\",\n      params: {\n        start: (_a = query == null ? void 0 : query.start) == null ? void 0 : _a.toString(),\n        limit: query == null ? void 0 : query.limit\n      },\n      overrides: { ...this.config\n      }\n    });\n    return data;\n  }\n\n  async getTransactionByHash(txnHash) {\n    const {\n      data\n    } = await get({\n      url: this.nodeUrl,\n      endpoint: `transactions/by_hash/${txnHash}`,\n      originMethod: \"getTransactionByHash\",\n      overrides: { ...this.config\n      }\n    });\n    return data;\n  }\n\n  async getTransactionByVersion(txnVersion) {\n    const {\n      data\n    } = await get({\n      url: this.nodeUrl,\n      endpoint: `transactions/by_version/${txnVersion}`,\n      originMethod: \"getTransactionByVersion\",\n      overrides: { ...this.config\n      }\n    });\n    return data;\n  }\n\n  async transactionPending(txnHash) {\n    try {\n      const response = await this.getTransactionByHash(txnHash);\n      return response.type === \"pending_transaction\";\n    } catch (e) {\n      if ((e == null ? void 0 : e.status) === 404) {\n        return true;\n      }\n\n      throw e;\n    }\n  }\n\n  async waitForTransactionWithResult(txnHash, extraArgs) {\n    var _a, _b;\n\n    const timeoutSecs = (_a = extraArgs == null ? void 0 : extraArgs.timeoutSecs) != null ? _a : DEFAULT_TXN_TIMEOUT_SEC;\n    const checkSuccess = (_b = extraArgs == null ? void 0 : extraArgs.checkSuccess) != null ? _b : false;\n    let isPending = true;\n    let count = 0;\n    let lastTxn;\n\n    while (isPending) {\n      if (count >= timeoutSecs) {\n        break;\n      }\n\n      try {\n        lastTxn = await this.getTransactionByHash(txnHash);\n        isPending = lastTxn.type === \"pending_transaction\";\n\n        if (!isPending) {\n          break;\n        }\n      } catch (e) {\n        const isApiError = e instanceof ApiError;\n        const isRequestError = isApiError && e.status !== 404 && e.status >= 400 && e.status < 500;\n\n        if (!isApiError || isRequestError) {\n          throw e;\n        }\n      }\n\n      await sleep(1e3);\n      count += 1;\n    }\n\n    if (lastTxn === void 0) {\n      throw new Error(`Waiting for transaction ${txnHash} failed`);\n    }\n\n    if (isPending) {\n      throw new WaitForTransactionError(`Waiting for transaction ${txnHash} timed out after ${timeoutSecs} seconds`, lastTxn);\n    }\n\n    if (!checkSuccess) {\n      return lastTxn;\n    }\n\n    if (!(lastTxn == null ? void 0 : lastTxn.success)) {\n      throw new FailedTransactionError(`Transaction ${txnHash} failed with an error: ${lastTxn.vm_status}`, lastTxn);\n    }\n\n    return lastTxn;\n  }\n\n  async waitForTransaction(txnHash, extraArgs) {\n    await this.waitForTransactionWithResult(txnHash, extraArgs);\n  }\n\n  async getLedgerInfo() {\n    const {\n      data\n    } = await get({\n      url: this.nodeUrl,\n      originMethod: \"getLedgerInfo\",\n      overrides: { ...this.config\n      }\n    });\n    return data;\n  }\n\n  async getChainId() {\n    const result = await this.getLedgerInfo();\n    return result.chain_id;\n  }\n\n  async getTableItem(handle, data, query) {\n    var _a;\n\n    const response = await post({\n      url: this.nodeUrl,\n      body: data,\n      endpoint: `tables/${handle}/item`,\n      originMethod: \"getTableItem\",\n      params: {\n        ledger_version: (_a = query == null ? void 0 : query.ledgerVersion) == null ? void 0 : _a.toString()\n      },\n      overrides: { ...this.config\n      }\n    });\n    return response.data;\n  }\n\n  async generateRawTransaction(accountFrom, payload, extraArgs) {\n    const [{\n      sequence_number: sequenceNumber\n    }, chainId, {\n      gas_estimate: gasEstimate\n    }] = await Promise.all([(extraArgs == null ? void 0 : extraArgs.providedSequenceNumber) ? Promise.resolve({\n      sequence_number: extraArgs.providedSequenceNumber\n    }) : this.getAccount(accountFrom), this.getChainId(), (extraArgs == null ? void 0 : extraArgs.gasUnitPrice) ? Promise.resolve({\n      gas_estimate: extraArgs.gasUnitPrice\n    }) : this.estimateGasPrice()]);\n    const {\n      maxGasAmount,\n      gasUnitPrice,\n      expireTimestamp\n    } = {\n      maxGasAmount: BigInt(DEFAULT_MAX_GAS_AMOUNT),\n      gasUnitPrice: BigInt(gasEstimate),\n      expireTimestamp: BigInt(Math.floor(Date.now() / 1e3) + DEFAULT_TXN_EXP_SEC_FROM_NOW),\n      ...extraArgs\n    };\n    return new aptos_types_exports.RawTransaction(aptos_types_exports.AccountAddress.fromHex(accountFrom), BigInt(sequenceNumber), payload, maxGasAmount, gasUnitPrice, expireTimestamp, new aptos_types_exports.ChainId(chainId));\n  }\n\n  async generateSignSubmitTransaction(sender, payload, extraArgs) {\n    const rawTransaction = await this.generateRawTransaction(sender.address(), payload, extraArgs);\n\n    const bcsTxn = _AptosClient.generateBCSTransaction(sender, rawTransaction);\n\n    const pendingTransaction = await this.submitSignedBCSTransaction(bcsTxn);\n    return pendingTransaction.hash;\n  }\n\n  async signAndSubmitTransaction(sender, transaction) {\n    const bcsTxn = _AptosClient.generateBCSTransaction(sender, transaction);\n\n    const pendingTransaction = await this.submitSignedBCSTransaction(bcsTxn);\n    return pendingTransaction.hash;\n  }\n\n  async publishPackage(sender, packageMetadata, modules, extraArgs) {\n    const codeSerializer = new Serializer();\n    serializeVector(modules, codeSerializer);\n    const payload = new aptos_types_exports.TransactionPayloadEntryFunction(aptos_types_exports.EntryFunction.natural(\"0x1::code\", \"publish_package_txn\", [], [bcsSerializeBytes(packageMetadata), codeSerializer.getBytes()]));\n    return this.generateSignSubmitTransaction(sender, payload, extraArgs);\n  }\n\n  async createResourceAccountAndPublishPackage(sender, seed, packageMetadata, modules, extraArgs) {\n    const codeSerializer = new Serializer();\n    serializeVector(modules, codeSerializer);\n    const payload = new aptos_types_exports.TransactionPayloadEntryFunction(aptos_types_exports.EntryFunction.natural(\"0x1::resource_account\", \"create_resource_account_and_publish_package\", [], [bcsSerializeBytes(seed), bcsSerializeBytes(packageMetadata), codeSerializer.getBytes()]));\n    return this.generateSignSubmitTransaction(sender, payload, extraArgs);\n  }\n\n  async generateSignSubmitWaitForTransaction(sender, payload, extraArgs) {\n    const txnHash = await this.generateSignSubmitTransaction(sender, payload, extraArgs);\n    return this.waitForTransactionWithResult(txnHash, extraArgs);\n  }\n\n  async estimateGasPrice() {\n    const {\n      data\n    } = await get({\n      url: this.nodeUrl,\n      endpoint: \"estimate_gas_price\",\n      originMethod: \"estimateGasPrice\",\n      overrides: { ...this.config\n      }\n    });\n    return data;\n  }\n\n  async estimateMaxGasAmount(forAccount) {\n    const typeTag = `0x1::coin::CoinStore<${APTOS_COIN}>`;\n    const [{\n      gas_estimate: gasUnitPrice\n    }, resources] = await Promise.all([this.estimateGasPrice(), this.getAccountResources(forAccount)]);\n    const accountResource = resources.find(r => r.type === typeTag);\n    const balance = BigInt(accountResource.data.coin.value);\n    return balance / BigInt(gasUnitPrice);\n  }\n\n  async rotateAuthKeyEd25519(forAccount, toPrivateKeyBytes, extraArgs) {\n    const {\n      sequence_number: sequenceNumber,\n      authentication_key: authKey\n    } = await this.getAccount(forAccount.address());\n    const helperAccount = new AptosAccount(toPrivateKeyBytes);\n    const challenge = new aptos_types_exports.RotationProofChallenge(aptos_types_exports.AccountAddress.CORE_CODE_ADDRESS, \"account\", \"RotationProofChallenge\", BigInt(sequenceNumber), aptos_types_exports.AccountAddress.fromHex(forAccount.address()), new aptos_types_exports.AccountAddress(new HexString(authKey).toUint8Array()), helperAccount.pubKey().toUint8Array());\n    const challengeHex = HexString.fromUint8Array(bcsToBytes(challenge));\n    const proofSignedByCurrentPrivateKey = forAccount.signHexString(challengeHex);\n    const proofSignedByNewPrivateKey = helperAccount.signHexString(challengeHex);\n    const payload = new aptos_types_exports.TransactionPayloadEntryFunction(aptos_types_exports.EntryFunction.natural(\"0x1::account\", \"rotate_authentication_key\", [], [bcsSerializeU8(0), bcsSerializeBytes(forAccount.pubKey().toUint8Array()), bcsSerializeU8(0), bcsSerializeBytes(helperAccount.pubKey().toUint8Array()), bcsSerializeBytes(proofSignedByCurrentPrivateKey.toUint8Array()), bcsSerializeBytes(proofSignedByNewPrivateKey.toUint8Array())]));\n    const rawTransaction = await this.generateRawTransaction(forAccount.address(), payload, extraArgs);\n\n    const bcsTxn = _AptosClient.generateBCSTransaction(forAccount, rawTransaction);\n\n    return this.submitSignedBCSTransaction(bcsTxn);\n  }\n\n  async lookupOriginalAddress(addressOrAuthKey) {\n    const resource = await this.getAccountResource(\"0x1\", \"0x1::account::OriginatingAddress\");\n    const {\n      address_map: {\n        handle\n      }\n    } = resource.data;\n    const origAddress = await this.getTableItem(handle, {\n      key_type: \"address\",\n      value_type: \"address\",\n      key: HexString.ensure(addressOrAuthKey).hex()\n    });\n    return new HexString(origAddress);\n  }\n\n  async getBlockByHeight(blockHeight, withTransactions) {\n    const {\n      data\n    } = await get({\n      url: this.nodeUrl,\n      endpoint: `blocks/by_height/${blockHeight}`,\n      originMethod: \"getBlockByHeight\",\n      params: {\n        with_transactions: withTransactions\n      },\n      overrides: { ...this.config\n      }\n    });\n    return data;\n  }\n\n  async getBlockByVersion(version, withTransactions) {\n    const {\n      data\n    } = await get({\n      url: this.nodeUrl,\n      endpoint: `blocks/by_version/${version}`,\n      originMethod: \"getBlockByVersion\",\n      params: {\n        with_transactions: withTransactions\n      },\n      overrides: { ...this.config\n      }\n    });\n    return data;\n  }\n\n  async view(payload, ledger_version) {\n    const {\n      data\n    } = await post({\n      url: this.nodeUrl,\n      body: payload,\n      endpoint: \"view\",\n      originMethod: \"getTableItem\",\n      params: {\n        ledger_version\n      },\n      overrides: { ...this.config\n      }\n    });\n    return data;\n  }\n\n  clearCache(tags) {\n    clear(tags);\n  }\n\n};\n\nvar AptosClient = _AptosClient;\n\n__decorateClass([parseApiError], AptosClient.prototype, \"getAccount\", 1);\n\n__decorateClass([parseApiError], AptosClient.prototype, \"getAccountTransactions\", 1);\n\n__decorateClass([parseApiError, MemoizeExpiring(10 * 60 * 1e3)], AptosClient.prototype, \"getAccountModules\", 1);\n\n__decorateClass([parseApiError], AptosClient.prototype, \"getAccountModule\", 1);\n\n__decorateClass([parseApiError], AptosClient.prototype, \"getAccountResources\", 1);\n\n__decorateClass([parseApiError], AptosClient.prototype, \"getAccountResource\", 1);\n\n__decorateClass([parseApiError], AptosClient.prototype, \"getEventsByCreationNumber\", 1);\n\n__decorateClass([parseApiError], AptosClient.prototype, \"getEventsByEventHandle\", 1);\n\n__decorateClass([parseApiError], AptosClient.prototype, \"submitSignedBCSTransaction\", 1);\n\n__decorateClass([parseApiError], AptosClient.prototype, \"submitBCSSimulation\", 1);\n\n__decorateClass([parseApiError], AptosClient.prototype, \"getTransactions\", 1);\n\n__decorateClass([parseApiError], AptosClient.prototype, \"getTransactionByHash\", 1);\n\n__decorateClass([parseApiError], AptosClient.prototype, \"getTransactionByVersion\", 1);\n\n__decorateClass([parseApiError], AptosClient.prototype, \"getLedgerInfo\", 1);\n\n__decorateClass([Memoize()], AptosClient.prototype, \"getChainId\", 1);\n\n__decorateClass([parseApiError], AptosClient.prototype, \"getTableItem\", 1);\n\n__decorateClass([parseApiError, Memoize({\n  ttlMs: 5 * 60 * 1e3,\n  tags: [\"gas_estimates\"]\n})], AptosClient.prototype, \"estimateGasPrice\", 1);\n\n__decorateClass([parseApiError], AptosClient.prototype, \"estimateMaxGasAmount\", 1);\n\n__decorateClass([parseApiError], AptosClient.prototype, \"getBlockByHeight\", 1);\n\n__decorateClass([parseApiError], AptosClient.prototype, \"getBlockByVersion\", 1);\n\n__decorateClass([parseApiError], AptosClient.prototype, \"view\", 1);\n\nvar WaitForTransactionError = class extends Error {\n  constructor(message, lastSubmittedTransaction) {\n    super(message);\n    this.lastSubmittedTransaction = lastSubmittedTransaction;\n  }\n\n};\nvar FailedTransactionError = class extends Error {\n  constructor(message, transaction) {\n    super(message);\n    this.transaction = transaction;\n  }\n\n};\nvar ApiError = class extends Error {\n  constructor(status, message, errorCode, vmErrorCode) {\n    super(message);\n    this.status = status;\n    this.message = message;\n    this.errorCode = errorCode;\n    this.vmErrorCode = vmErrorCode;\n  }\n\n};\n\nfunction parseApiError(target, propertyKey, descriptor) {\n  const childFunction = descriptor.value;\n\n  descriptor.value = async function wrapper() {\n    var _a, _b;\n\n    try {\n      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        args[_key2] = arguments[_key2];\n      }\n\n      const res = await childFunction.apply(this, [...args]);\n      return res;\n    } catch (e) {\n      if (e instanceof AptosApiError) {\n        throw new ApiError(e.status, JSON.stringify({\n          message: e.message,\n          ...e.data\n        }), (_a = e.data) == null ? void 0 : _a.error_code, (_b = e.data) == null ? void 0 : _b.vm_error_code);\n      }\n\n      throw e;\n    }\n  };\n\n  return descriptor;\n} // src/providers/indexer.ts\n\n\nvar IndexerClient = class {\n  constructor(endpoint, config) {\n    this.endpoint = endpoint;\n    this.config = config;\n  }\n\n  static validateAddress(address) {\n    if (address.length < 66) {\n      throw new Error(`${address} is less than 66 chars long.`);\n    }\n  }\n\n  async queryIndexer(graphqlQuery) {\n    const response = await post({\n      url: this.endpoint,\n      body: graphqlQuery,\n      overrides: {\n        WITH_CREDENTIALS: false,\n        ...this.config\n      }\n    });\n\n    if (response.data.errors) {\n      throw new ApiError(response.data.errors[0].extensions.code, JSON.stringify({\n        message: response.data.errors[0].message,\n        error_code: response.data.errors[0].extensions.code\n      }));\n    }\n\n    return response.data.data;\n  }\n\n  async getIndexerLedgerInfo() {\n    const graphqlQuery = {\n      query: GetIndexerLedgerInfo\n    };\n    return this.queryIndexer(graphqlQuery);\n  }\n\n  async getAccountNFTs(ownerAddress, options) {\n    const address = HexString.ensure(ownerAddress).hex();\n    IndexerClient.validateAddress(address);\n    const graphqlQuery = {\n      query: GetAccountCurrentTokens,\n      variables: {\n        address,\n        offset: options == null ? void 0 : options.offset,\n        limit: options == null ? void 0 : options.limit\n      }\n    };\n    return this.queryIndexer(graphqlQuery);\n  }\n\n  async getTokenActivities(token, extraArgs) {\n    var _a, _b;\n\n    const tokenAddress = HexString.ensure(token).hex();\n    IndexerClient.validateAddress(tokenAddress);\n    const whereCondition = {\n      token_data_id: {\n        _eq: tokenAddress\n      }\n    };\n\n    if (extraArgs == null ? void 0 : extraArgs.tokenStandard) {\n      whereCondition.token_standard = {\n        _eq: extraArgs == null ? void 0 : extraArgs.tokenStandard\n      };\n    }\n\n    const graphqlQuery = {\n      query: GetTokenActivities,\n      variables: {\n        where_condition: whereCondition,\n        offset: (_a = extraArgs == null ? void 0 : extraArgs.options) == null ? void 0 : _a.offset,\n        limit: (_b = extraArgs == null ? void 0 : extraArgs.options) == null ? void 0 : _b.limit,\n        order_by: extraArgs == null ? void 0 : extraArgs.orderBy\n      }\n    };\n    return this.queryIndexer(graphqlQuery);\n  }\n\n  async getTokenActivitiesCount(token) {\n    const graphqlQuery = {\n      query: GetTokenActivitiesCount,\n      variables: {\n        token_id: token\n      }\n    };\n    return this.queryIndexer(graphqlQuery);\n  }\n\n  async getAccountTokensCount(ownerAddress, extraArgs) {\n    var _a, _b;\n\n    const whereCondition = {\n      owner_address: {\n        _eq: ownerAddress\n      },\n      amount: {\n        _gt: \"0\"\n      }\n    };\n\n    if (extraArgs == null ? void 0 : extraArgs.tokenStandard) {\n      whereCondition.token_standard = {\n        _eq: extraArgs == null ? void 0 : extraArgs.tokenStandard\n      };\n    }\n\n    const address = HexString.ensure(ownerAddress).hex();\n    IndexerClient.validateAddress(address);\n    const graphqlQuery = {\n      query: GetAccountTokensCount,\n      variables: {\n        where_condition: whereCondition,\n        offset: (_a = extraArgs == null ? void 0 : extraArgs.options) == null ? void 0 : _a.offset,\n        limit: (_b = extraArgs == null ? void 0 : extraArgs.options) == null ? void 0 : _b.limit\n      }\n    };\n    return this.queryIndexer(graphqlQuery);\n  }\n\n  async getTokenData(token, extraArgs) {\n    var _a, _b;\n\n    const tokenAddress = HexString.ensure(token).hex();\n    IndexerClient.validateAddress(tokenAddress);\n    const whereCondition = {\n      token_data_id: {\n        _eq: tokenAddress\n      }\n    };\n\n    if (extraArgs == null ? void 0 : extraArgs.tokenStandard) {\n      whereCondition.token_standard = {\n        _eq: extraArgs == null ? void 0 : extraArgs.tokenStandard\n      };\n    }\n\n    const graphqlQuery = {\n      query: GetTokenData,\n      variables: {\n        where_condition: whereCondition,\n        offset: (_a = extraArgs == null ? void 0 : extraArgs.options) == null ? void 0 : _a.offset,\n        limit: (_b = extraArgs == null ? void 0 : extraArgs.options) == null ? void 0 : _b.limit,\n        order_by: extraArgs == null ? void 0 : extraArgs.orderBy\n      }\n    };\n    return this.queryIndexer(graphqlQuery);\n  }\n\n  async getTokenOwnersData(token, propertyVersion, extraArgs) {\n    var _a, _b;\n\n    const tokenAddress = HexString.ensure(token).hex();\n    IndexerClient.validateAddress(tokenAddress);\n    const whereCondition = {\n      token_data_id: {\n        _eq: tokenAddress\n      },\n      amount: {\n        _gt: \"0\"\n      }\n    };\n\n    if (propertyVersion) {\n      whereCondition.property_version_v1 = {\n        _eq: propertyVersion\n      };\n    }\n\n    if (extraArgs == null ? void 0 : extraArgs.tokenStandard) {\n      whereCondition.token_standard = {\n        _eq: extraArgs == null ? void 0 : extraArgs.tokenStandard\n      };\n    }\n\n    const graphqlQuery = {\n      query: GetTokenOwnersData,\n      variables: {\n        where_condition: whereCondition,\n        offset: (_a = extraArgs == null ? void 0 : extraArgs.options) == null ? void 0 : _a.offset,\n        limit: (_b = extraArgs == null ? void 0 : extraArgs.options) == null ? void 0 : _b.limit,\n        order_by: extraArgs == null ? void 0 : extraArgs.orderBy\n      }\n    };\n    return this.queryIndexer(graphqlQuery);\n  }\n\n  async getTokenCurrentOwnerData(token, propertyVersion, extraArgs) {\n    var _a, _b;\n\n    const tokenAddress = HexString.ensure(token).hex();\n    IndexerClient.validateAddress(tokenAddress);\n    const whereCondition = {\n      token_data_id: {\n        _eq: tokenAddress\n      },\n      amount: {\n        _gt: \"0\"\n      }\n    };\n\n    if (propertyVersion) {\n      whereCondition.property_version_v1 = {\n        _eq: propertyVersion\n      };\n    }\n\n    if (extraArgs == null ? void 0 : extraArgs.tokenStandard) {\n      whereCondition.token_standard = {\n        _eq: extraArgs == null ? void 0 : extraArgs.tokenStandard\n      };\n    }\n\n    const graphqlQuery = {\n      query: GetTokenCurrentOwnerData,\n      variables: {\n        where_condition: whereCondition,\n        offset: (_a = extraArgs == null ? void 0 : extraArgs.options) == null ? void 0 : _a.offset,\n        limit: (_b = extraArgs == null ? void 0 : extraArgs.options) == null ? void 0 : _b.limit,\n        order_by: extraArgs == null ? void 0 : extraArgs.orderBy\n      }\n    };\n    return this.queryIndexer(graphqlQuery);\n  }\n\n  async getOwnedTokens(ownerAddress, extraArgs) {\n    var _a, _b;\n\n    const address = HexString.ensure(ownerAddress).hex();\n    IndexerClient.validateAddress(address);\n    const whereCondition = {\n      owner_address: {\n        _eq: address\n      },\n      amount: {\n        _gt: 0\n      }\n    };\n\n    if (extraArgs == null ? void 0 : extraArgs.tokenStandard) {\n      whereCondition.token_standard = {\n        _eq: extraArgs == null ? void 0 : extraArgs.tokenStandard\n      };\n    }\n\n    const graphqlQuery = {\n      query: GetOwnedTokens,\n      variables: {\n        where_condition: whereCondition,\n        offset: (_a = extraArgs == null ? void 0 : extraArgs.options) == null ? void 0 : _a.offset,\n        limit: (_b = extraArgs == null ? void 0 : extraArgs.options) == null ? void 0 : _b.limit,\n        order_by: extraArgs == null ? void 0 : extraArgs.orderBy\n      }\n    };\n    return this.queryIndexer(graphqlQuery);\n  }\n\n  async getOwnedTokensByTokenData(token, extraArgs) {\n    var _a, _b;\n\n    const address = HexString.ensure(token).hex();\n    IndexerClient.validateAddress(address);\n    const whereCondition = {\n      token_data_id: {\n        _eq: address\n      },\n      amount: {\n        _gt: 0\n      }\n    };\n\n    if (extraArgs == null ? void 0 : extraArgs.tokenStandard) {\n      whereCondition.token_standard = {\n        _eq: extraArgs == null ? void 0 : extraArgs.tokenStandard\n      };\n    }\n\n    const graphqlQuery = {\n      query: GetOwnedTokensByTokenData,\n      variables: {\n        where_condition: whereCondition,\n        offset: (_a = extraArgs == null ? void 0 : extraArgs.options) == null ? void 0 : _a.offset,\n        limit: (_b = extraArgs == null ? void 0 : extraArgs.options) == null ? void 0 : _b.limit,\n        order_by: extraArgs == null ? void 0 : extraArgs.orderBy\n      }\n    };\n    return this.queryIndexer(graphqlQuery);\n  }\n\n  async getTokenOwnedFromCollectionAddress(ownerAddress, collectionAddress, extraArgs) {\n    var _a, _b;\n\n    const ownerHexAddress = HexString.ensure(ownerAddress).hex();\n    IndexerClient.validateAddress(ownerHexAddress);\n    const collectionHexAddress = HexString.ensure(collectionAddress).hex();\n    IndexerClient.validateAddress(collectionHexAddress);\n    const whereCondition = {\n      owner_address: {\n        _eq: ownerHexAddress\n      },\n      current_token_data: {\n        collection_id: {\n          _eq: collectionHexAddress\n        }\n      },\n      amount: {\n        _gt: 0\n      }\n    };\n\n    if (extraArgs == null ? void 0 : extraArgs.tokenStandard) {\n      whereCondition.token_standard = {\n        _eq: extraArgs == null ? void 0 : extraArgs.tokenStandard\n      };\n    }\n\n    const graphqlQuery = {\n      query: GetTokenOwnedFromCollection,\n      variables: {\n        where_condition: whereCondition,\n        offset: (_a = extraArgs == null ? void 0 : extraArgs.options) == null ? void 0 : _a.offset,\n        limit: (_b = extraArgs == null ? void 0 : extraArgs.options) == null ? void 0 : _b.limit,\n        order_by: extraArgs == null ? void 0 : extraArgs.orderBy\n      }\n    };\n    return this.queryIndexer(graphqlQuery);\n  }\n\n  async getTokenOwnedFromCollectionNameAndCreatorAddress(ownerAddress, collectionName, creatorAddress, extraArgs) {\n    const collectionAddress = await this.getCollectionAddress(creatorAddress, collectionName, extraArgs);\n    const tokens = await this.getTokenOwnedFromCollectionAddress(ownerAddress, collectionAddress, extraArgs);\n    return tokens;\n  }\n\n  async getCollectionData(creatorAddress, collectionName, extraArgs) {\n    var _a, _b;\n\n    const address = HexString.ensure(creatorAddress).hex();\n    IndexerClient.validateAddress(address);\n    const whereCondition = {\n      collection_name: {\n        _eq: collectionName\n      },\n      creator_address: {\n        _eq: address\n      }\n    };\n\n    if (extraArgs == null ? void 0 : extraArgs.tokenStandard) {\n      whereCondition.token_standard = {\n        _eq: extraArgs == null ? void 0 : extraArgs.tokenStandard\n      };\n    }\n\n    const graphqlQuery = {\n      query: GetCollectionData,\n      variables: {\n        where_condition: whereCondition,\n        offset: (_a = extraArgs == null ? void 0 : extraArgs.options) == null ? void 0 : _a.offset,\n        limit: (_b = extraArgs == null ? void 0 : extraArgs.options) == null ? void 0 : _b.limit,\n        order_by: extraArgs == null ? void 0 : extraArgs.orderBy\n      }\n    };\n    return this.queryIndexer(graphqlQuery);\n  }\n\n  async getCollectionAddress(creatorAddress, collectionName, extraArgs) {\n    return (await this.getCollectionData(creatorAddress, collectionName, extraArgs)).current_collections_v2[0].collection_id;\n  }\n\n  async getCollectionsWithOwnedTokens(ownerAddress, extraArgs) {\n    var _a, _b;\n\n    const ownerHexAddress = HexString.ensure(ownerAddress).hex();\n    IndexerClient.validateAddress(ownerHexAddress);\n    const whereCondition = {\n      owner_address: {\n        _eq: ownerHexAddress\n      }\n    };\n\n    if (extraArgs == null ? void 0 : extraArgs.tokenStandard) {\n      whereCondition.current_collection = {\n        token_standard: {\n          _eq: extraArgs == null ? void 0 : extraArgs.tokenStandard\n        }\n      };\n    }\n\n    const graphqlQuery = {\n      query: GetCollectionsWithOwnedTokens,\n      variables: {\n        where_condition: whereCondition,\n        offset: (_a = extraArgs == null ? void 0 : extraArgs.options) == null ? void 0 : _a.offset,\n        limit: (_b = extraArgs == null ? void 0 : extraArgs.options) == null ? void 0 : _b.limit,\n        order_by: extraArgs == null ? void 0 : extraArgs.orderBy\n      }\n    };\n    return this.queryIndexer(graphqlQuery);\n  }\n\n  async getAccountTransactionsCount(accountAddress) {\n    const address = HexString.ensure(accountAddress).hex();\n    IndexerClient.validateAddress(address);\n    const graphqlQuery = {\n      query: GetAccountTransactionsCount,\n      variables: {\n        address\n      }\n    };\n    return this.queryIndexer(graphqlQuery);\n  }\n\n  async getAccountTransactionsData(accountAddress, extraArgs) {\n    var _a, _b;\n\n    const address = HexString.ensure(accountAddress).hex();\n    IndexerClient.validateAddress(address);\n    const whereCondition = {\n      account_address: {\n        _eq: address\n      }\n    };\n    const graphqlQuery = {\n      query: GetAccountTransactionsData,\n      variables: {\n        where_condition: whereCondition,\n        offset: (_a = extraArgs == null ? void 0 : extraArgs.options) == null ? void 0 : _a.offset,\n        limit: (_b = extraArgs == null ? void 0 : extraArgs.options) == null ? void 0 : _b.limit,\n        order_by: extraArgs == null ? void 0 : extraArgs.orderBy\n      }\n    };\n    return this.queryIndexer(graphqlQuery);\n  }\n\n  async getTopUserTransactions(limit) {\n    const graphqlQuery = {\n      query: GetTopUserTransactions,\n      variables: {\n        limit\n      }\n    };\n    return this.queryIndexer(graphqlQuery);\n  }\n\n  async getUserTransactions(extraArgs) {\n    var _a, _b;\n\n    const whereCondition = {\n      version: {\n        _lte: extraArgs == null ? void 0 : extraArgs.startVersion\n      }\n    };\n    const graphqlQuery = {\n      query: GetUserTransactions,\n      variables: {\n        where_condition: whereCondition,\n        offset: (_a = extraArgs == null ? void 0 : extraArgs.options) == null ? void 0 : _a.offset,\n        limit: (_b = extraArgs == null ? void 0 : extraArgs.options) == null ? void 0 : _b.limit,\n        order_by: extraArgs == null ? void 0 : extraArgs.orderBy\n      }\n    };\n    return this.queryIndexer(graphqlQuery);\n  }\n\n  async getDelegatedStakingActivities(delegatorAddress, poolAddress) {\n    const delegator = HexString.ensure(delegatorAddress).hex();\n    const pool = HexString.ensure(poolAddress).hex();\n    IndexerClient.validateAddress(delegator);\n    IndexerClient.validateAddress(pool);\n    const graphqlQuery = {\n      query: GetDelegatedStakingActivities,\n      variables: {\n        delegatorAddress: delegator,\n        poolAddress: pool\n      }\n    };\n    return this.queryIndexer(graphqlQuery);\n  }\n\n  async getNumberOfDelegators(poolAddress) {\n    const address = HexString.ensure(poolAddress).hex();\n    IndexerClient.validateAddress(address);\n    const graphqlQuery = {\n      query: GetNumberOfDelegators,\n      variables: {\n        poolAddress: address\n      }\n    };\n    return this.queryIndexer(graphqlQuery);\n  }\n\n  async getAccountCoinsData(ownerAddress, extraArgs) {\n    var _a, _b;\n\n    const address = HexString.ensure(ownerAddress).hex();\n    IndexerClient.validateAddress(address);\n    const whereCondition = {\n      owner_address: {\n        _eq: address\n      }\n    };\n    const graphqlQuery = {\n      query: GetAccountCoinsData,\n      variables: {\n        where_condition: whereCondition,\n        offset: (_a = extraArgs == null ? void 0 : extraArgs.options) == null ? void 0 : _a.offset,\n        limit: (_b = extraArgs == null ? void 0 : extraArgs.options) == null ? void 0 : _b.limit,\n        order_by: extraArgs == null ? void 0 : extraArgs.orderBy\n      }\n    };\n    return this.queryIndexer(graphqlQuery);\n  }\n\n  async getAccountCoinsDataCount(ownerAddress) {\n    const address = HexString.ensure(ownerAddress).hex();\n    IndexerClient.validateAddress(address);\n    const graphqlQuery = {\n      query: GetAccountCoinsDataCount,\n      variables: {\n        address\n      }\n    };\n    return this.queryIndexer(graphqlQuery);\n  }\n\n  async getAccountOwnedObjects(ownerAddress, extraArgs) {\n    var _a, _b;\n\n    const address = HexString.ensure(ownerAddress).hex();\n    IndexerClient.validateAddress(address);\n    const whereCondition = {\n      owner_address: {\n        _eq: address\n      }\n    };\n    const graphqlQuery = {\n      query: GetCurrentObjects,\n      variables: {\n        where_condition: whereCondition,\n        offset: (_a = extraArgs == null ? void 0 : extraArgs.options) == null ? void 0 : _a.offset,\n        limit: (_b = extraArgs == null ? void 0 : extraArgs.options) == null ? void 0 : _b.limit,\n        order_by: extraArgs == null ? void 0 : extraArgs.orderBy\n      }\n    };\n    return this.queryIndexer(graphqlQuery);\n  }\n\n}; // src/providers/provider.ts\n\nvar Provider = class {\n  constructor(network, config) {\n    let doNotFixNodeUrl = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    let fullNodeUrl = null;\n    let indexerUrl = null;\n\n    if (typeof network === \"object\" && isCustomEndpoints(network)) {\n      fullNodeUrl = network.fullnodeUrl;\n      indexerUrl = network.indexerUrl;\n      this.network = \"CUSTOM\";\n    } else {\n      fullNodeUrl = NetworkToNodeAPI[network];\n      indexerUrl = NetworkToIndexerAPI[network];\n      this.network = network;\n    }\n\n    if (this.network === \"CUSTOM\" && !fullNodeUrl) {\n      throw new Error(\"fullnode url is not provided\");\n    }\n\n    if (indexerUrl) {\n      this.indexerClient = new IndexerClient(indexerUrl, config);\n    }\n\n    this.aptosClient = new AptosClient(fullNodeUrl, config, doNotFixNodeUrl);\n  }\n\n};\n\nfunction applyMixin(targetClass, baseClass, baseClassProp) {\n  Object.getOwnPropertyNames(baseClass.prototype).forEach(propertyName => {\n    const propertyDescriptor = Object.getOwnPropertyDescriptor(baseClass.prototype, propertyName);\n    if (!propertyDescriptor) return;\n\n    propertyDescriptor.value = function () {\n      return this[baseClassProp][propertyName](...arguments);\n    };\n\n    Object.defineProperty(targetClass.prototype, propertyName, propertyDescriptor);\n  });\n  Object.getOwnPropertyNames(baseClass).forEach(propertyName => {\n    const propertyDescriptor = Object.getOwnPropertyDescriptor(baseClass, propertyName);\n    if (!propertyDescriptor) return;\n\n    propertyDescriptor.value = function () {\n      return this[baseClassProp][propertyName](...arguments);\n    };\n\n    if (targetClass.hasOwnProperty.call(targetClass, propertyName)) {\n      return;\n    }\n\n    Object.defineProperty(targetClass, propertyName, propertyDescriptor);\n  });\n}\n\napplyMixin(Provider, AptosClient, \"aptosClient\");\napplyMixin(Provider, IndexerClient, \"indexerClient\");\n\nfunction isCustomEndpoints(network) {\n  return network.fullnodeUrl !== void 0 && typeof network.fullnodeUrl === \"string\";\n} // src/utils/property_map_serde.ts\n\n\nvar PropertyValue = class {\n  constructor(type, value) {\n    this.type = type;\n    this.value = value;\n  }\n\n};\nvar PropertyMap = class {\n  constructor() {\n    this.data = {};\n  }\n\n  setProperty(key, value) {\n    this.data[key] = value;\n  }\n\n};\n\nfunction getPropertyType(typ) {\n  let typeTag;\n\n  if (typ === \"string\" || typ === \"String\") {\n    typeTag = new TypeTagStruct(stringStructTag);\n  } else {\n    typeTag = new TypeTagParser(typ).parseTypeTag();\n  }\n\n  return typeTag;\n}\n\nfunction getPropertyValueRaw(values, types) {\n  if (values.length !== types.length) {\n    throw new Error(\"Length of property values and types not match\");\n  }\n\n  const results = new Array();\n  types.forEach((typ, index) => {\n    try {\n      const typeTag = getPropertyType(typ);\n      const serializer = new Serializer();\n      serializeArg(values[index], typeTag, serializer);\n      results.push(serializer.getBytes());\n    } catch (error) {\n      results.push(new TextEncoder().encode(values[index]));\n    }\n  });\n  return results;\n}\n\nfunction getSinglePropertyValueRaw(value, type) {\n  if (!value || !type) {\n    throw new Error(\"value or type can not be empty\");\n  }\n\n  try {\n    const typeTag = getPropertyType(type);\n    const serializer = new Serializer();\n    serializeArg(value, typeTag, serializer);\n    return serializer.getBytes();\n  } catch (error) {\n    return new TextEncoder().encode(value);\n  }\n}\n\nfunction deserializePropertyMap(rawPropertyMap) {\n  const entries = rawPropertyMap.map.data;\n  const pm = new PropertyMap();\n  entries.forEach(prop => {\n    const {\n      key\n    } = prop;\n    const val = prop.value.value;\n    const typ = prop.value.type;\n    const typeTag = getPropertyType(typ);\n    const newValue = deserializeValueBasedOnTypeTag(typeTag, val);\n    const pv = new PropertyValue(typ, newValue);\n    pm.setProperty(key, pv);\n  });\n  return pm;\n}\n\nfunction deserializeValueBasedOnTypeTag(tag, val) {\n  const de = new Deserializer(new HexString(val).toUint8Array());\n  let res = \"\";\n\n  if (tag instanceof TypeTagU8) {\n    res = de.deserializeU8().toString();\n  } else if (tag instanceof TypeTagU64) {\n    res = de.deserializeU64().toString();\n  } else if (tag instanceof TypeTagU128) {\n    res = de.deserializeU128().toString();\n  } else if (tag instanceof TypeTagBool) {\n    res = de.deserializeBool() ? \"true\" : \"false\";\n  } else if (tag instanceof TypeTagAddress) {\n    res = HexString.fromUint8Array(de.deserializeFixedBytes(32)).hex();\n  } else if (tag instanceof TypeTagStruct && tag.isStringTypeTag()) {\n    res = de.deserializeStr();\n  } else {\n    res = val;\n  }\n\n  return res;\n} // src/aptos_types/token_types.ts\n\n\nvar token_types_exports = {};\n\n__export(token_types_exports, {\n  PropertyMap: () => PropertyMap,\n  PropertyValue: () => PropertyValue,\n  Token: () => Token,\n  TokenData: () => TokenData\n});\n\nvar TokenData = class {\n  constructor(collection, description, name, maximum, supply, uri, default_properties, mutability_config) {\n    this.collection = collection;\n    this.description = description;\n    this.name = name;\n    this.maximum = maximum;\n    this.supply = supply;\n    this.uri = uri;\n    this.default_properties = deserializePropertyMap(default_properties);\n    this.mutability_config = mutability_config;\n  }\n\n};\nvar Token = class {\n  constructor(id, amount, token_properties) {\n    this.id = id;\n    this.amount = amount;\n    this.token_properties = deserializePropertyMap(token_properties);\n  }\n\n}; // src/plugins/token_client.ts\n\nvar TokenClient = class {\n  constructor(aptosClient2) {\n    this.aptosClient = aptosClient2;\n  }\n\n  async createCollection(account, name, description, uri) {\n    let maxAmount = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : MAX_U64_BIG_INT;\n    let extraArgs = arguments.length > 5 ? arguments[5] : undefined;\n    const builder = new TransactionBuilderRemoteABI(this.aptosClient, {\n      sender: account.address(),\n      ...extraArgs\n    });\n    const rawTxn = await builder.build(\"0x3::token::create_collection_script\", [], [name, description, uri, maxAmount, [false, false, false]]);\n    const bcsTxn = AptosClient.generateBCSTransaction(account, rawTxn);\n    const pendingTransaction = await this.aptosClient.submitSignedBCSTransaction(bcsTxn);\n    return pendingTransaction.hash;\n  }\n\n  async createToken(account, collectionName, name, description, supply, uri) {\n    let max = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : MAX_U64_BIG_INT;\n    let royalty_payee_address = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : account.address();\n    let royalty_points_denominator = arguments.length > 8 && arguments[8] !== undefined ? arguments[8] : 0;\n    let royalty_points_numerator = arguments.length > 9 && arguments[9] !== undefined ? arguments[9] : 0;\n    let property_keys = arguments.length > 10 && arguments[10] !== undefined ? arguments[10] : [];\n    let property_values = arguments.length > 11 && arguments[11] !== undefined ? arguments[11] : [];\n    let property_types = arguments.length > 12 && arguments[12] !== undefined ? arguments[12] : [];\n    let extraArgs = arguments.length > 13 ? arguments[13] : undefined;\n    const builder = new TransactionBuilderRemoteABI(this.aptosClient, {\n      sender: account.address(),\n      ...extraArgs\n    });\n    const rawTxn = await builder.build(\"0x3::token::create_token_script\", [], [collectionName, name, description, supply, max, uri, royalty_payee_address, royalty_points_denominator, royalty_points_numerator, [false, false, false, false, false], property_keys, getPropertyValueRaw(property_values, property_types), property_types]);\n    const bcsTxn = AptosClient.generateBCSTransaction(account, rawTxn);\n    const pendingTransaction = await this.aptosClient.submitSignedBCSTransaction(bcsTxn);\n    return pendingTransaction.hash;\n  }\n\n  async createTokenWithMutabilityConfig(account, collectionName, name, description, supply, uri) {\n    let max = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : MAX_U64_BIG_INT;\n    let royalty_payee_address = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : account.address();\n    let royalty_points_denominator = arguments.length > 8 && arguments[8] !== undefined ? arguments[8] : 0;\n    let royalty_points_numerator = arguments.length > 9 && arguments[9] !== undefined ? arguments[9] : 0;\n    let property_keys = arguments.length > 10 && arguments[10] !== undefined ? arguments[10] : [];\n    let property_values = arguments.length > 11 && arguments[11] !== undefined ? arguments[11] : [];\n    let property_types = arguments.length > 12 && arguments[12] !== undefined ? arguments[12] : [];\n    let mutability_config = arguments.length > 13 && arguments[13] !== undefined ? arguments[13] : [false, false, false, false, false];\n    let extraArgs = arguments.length > 14 ? arguments[14] : undefined;\n    const builder = new TransactionBuilderRemoteABI(this.aptosClient, {\n      sender: account.address(),\n      ...extraArgs\n    });\n    const rawTxn = await builder.build(\"0x3::token::create_token_script\", [], [collectionName, name, description, supply, max, uri, royalty_payee_address, royalty_points_denominator, royalty_points_numerator, mutability_config, property_keys, property_values, property_types]);\n    const bcsTxn = AptosClient.generateBCSTransaction(account, rawTxn);\n    const pendingTransaction = await this.aptosClient.submitSignedBCSTransaction(bcsTxn);\n    return pendingTransaction.hash;\n  }\n\n  async offerToken(account, receiver, creator, collectionName, name, amount) {\n    let property_version = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : 0;\n    let extraArgs = arguments.length > 7 ? arguments[7] : undefined;\n    const builder = new TransactionBuilderRemoteABI(this.aptosClient, {\n      sender: account.address(),\n      ...extraArgs\n    });\n    const rawTxn = await builder.build(\"0x3::token_transfers::offer_script\", [], [receiver, creator, collectionName, name, property_version, amount]);\n    const bcsTxn = AptosClient.generateBCSTransaction(account, rawTxn);\n    const pendingTransaction = await this.aptosClient.submitSignedBCSTransaction(bcsTxn);\n    return pendingTransaction.hash;\n  }\n\n  async claimToken(account, sender, creator, collectionName, name) {\n    let property_version = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0;\n    let extraArgs = arguments.length > 6 ? arguments[6] : undefined;\n    const builder = new TransactionBuilderRemoteABI(this.aptosClient, {\n      sender: account.address(),\n      ...extraArgs\n    });\n    const rawTxn = await builder.build(\"0x3::token_transfers::claim_script\", [], [sender, creator, collectionName, name, property_version]);\n    const bcsTxn = AptosClient.generateBCSTransaction(account, rawTxn);\n    const pendingTransaction = await this.aptosClient.submitSignedBCSTransaction(bcsTxn);\n    return pendingTransaction.hash;\n  }\n\n  async cancelTokenOffer(account, receiver, creator, collectionName, name) {\n    let property_version = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0;\n    let extraArgs = arguments.length > 6 ? arguments[6] : undefined;\n    const builder = new TransactionBuilderRemoteABI(this.aptosClient, {\n      sender: account.address(),\n      ...extraArgs\n    });\n    const rawTxn = await builder.build(\"0x3::token_transfers::cancel_offer_script\", [], [receiver, creator, collectionName, name, property_version]);\n    const bcsTxn = AptosClient.generateBCSTransaction(account, rawTxn);\n    const pendingTransaction = await this.aptosClient.submitSignedBCSTransaction(bcsTxn);\n    return pendingTransaction.hash;\n  }\n\n  async directTransferToken(sender, receiver, creator, collectionName, name, amount) {\n    let propertyVersion = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : 0;\n    let extraArgs = arguments.length > 7 ? arguments[7] : undefined;\n    const builder = new TransactionBuilderRemoteABI(this.aptosClient, {\n      sender: sender.address(),\n      ...extraArgs\n    });\n    const rawTxn = await builder.build(\"0x3::token::direct_transfer_script\", [], [creator, collectionName, name, propertyVersion, amount]);\n    const multiAgentTxn = new aptos_types_exports.MultiAgentRawTransaction(rawTxn, [aptos_types_exports.AccountAddress.fromHex(receiver.address())]);\n    const senderSignature = new aptos_types_exports.Ed25519Signature(sender.signBuffer(TransactionBuilder.getSigningMessage(multiAgentTxn)).toUint8Array());\n    const senderAuthenticator = new aptos_types_exports.AccountAuthenticatorEd25519(new aptos_types_exports.Ed25519PublicKey(sender.signingKey.publicKey), senderSignature);\n    const receiverSignature = new aptos_types_exports.Ed25519Signature(receiver.signBuffer(TransactionBuilder.getSigningMessage(multiAgentTxn)).toUint8Array());\n    const receiverAuthenticator = new aptos_types_exports.AccountAuthenticatorEd25519(new aptos_types_exports.Ed25519PublicKey(receiver.signingKey.publicKey), receiverSignature);\n    const multiAgentAuthenticator = new aptos_types_exports.TransactionAuthenticatorMultiAgent(senderAuthenticator, [aptos_types_exports.AccountAddress.fromHex(receiver.address())], [receiverAuthenticator]);\n    const bcsTxn = bcsToBytes(new aptos_types_exports.SignedTransaction(rawTxn, multiAgentAuthenticator));\n    const transactionRes = await this.aptosClient.submitSignedBCSTransaction(bcsTxn);\n    return transactionRes.hash;\n  }\n\n  async directTransferTokenWithFeePayer(sender, receiver, creator, collectionName, name, amount, fee_payer) {\n    let propertyVersion = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : 0;\n    let extraArgs = arguments.length > 8 ? arguments[8] : undefined;\n    const builder = new TransactionBuilderRemoteABI(this.aptosClient, {\n      sender: sender.address(),\n      ...extraArgs\n    });\n    const rawTxn = await builder.build(\"0x3::token::direct_transfer_script\", [], [creator, collectionName, name, propertyVersion, amount]);\n    const feePayerTxn = new aptos_types_exports.FeePayerRawTransaction(rawTxn, [aptos_types_exports.AccountAddress.fromHex(receiver.address())], aptos_types_exports.AccountAddress.fromHex(fee_payer.address()));\n    const senderSignature = new aptos_types_exports.Ed25519Signature(sender.signBuffer(TransactionBuilder.getSigningMessage(feePayerTxn)).toUint8Array());\n    const senderAuthenticator = new aptos_types_exports.AccountAuthenticatorEd25519(new aptos_types_exports.Ed25519PublicKey(sender.signingKey.publicKey), senderSignature);\n    const receiverSignature = new aptos_types_exports.Ed25519Signature(receiver.signBuffer(TransactionBuilder.getSigningMessage(feePayerTxn)).toUint8Array());\n    const receiverAuthenticator = new aptos_types_exports.AccountAuthenticatorEd25519(new aptos_types_exports.Ed25519PublicKey(receiver.signingKey.publicKey), receiverSignature);\n    const feePayerSignature = new aptos_types_exports.Ed25519Signature(fee_payer.signBuffer(TransactionBuilder.getSigningMessage(feePayerTxn)).toUint8Array());\n    const feePayerAuthenticator = new aptos_types_exports.AccountAuthenticatorEd25519(new aptos_types_exports.Ed25519PublicKey(fee_payer.signingKey.publicKey), feePayerSignature);\n    const txAuthenticatorFeePayer = new aptos_types_exports.TransactionAuthenticatorFeePayer(senderAuthenticator, [aptos_types_exports.AccountAddress.fromHex(receiver.address())], [receiverAuthenticator], {\n      address: aptos_types_exports.AccountAddress.fromHex(fee_payer.address()),\n      authenticator: feePayerAuthenticator\n    });\n    const bcsTxn = bcsToBytes(new aptos_types_exports.SignedTransaction(rawTxn, txAuthenticatorFeePayer));\n    const transactionRes = await this.aptosClient.submitSignedBCSTransaction(bcsTxn);\n    return transactionRes.hash;\n  }\n\n  async optInTokenTransfer(sender, optIn, extraArgs) {\n    const builder = new TransactionBuilderRemoteABI(this.aptosClient, {\n      sender: sender.address(),\n      ...extraArgs\n    });\n    const rawTxn = await builder.build(\"0x3::token::opt_in_direct_transfer\", [], [optIn]);\n    const bcsTxn = AptosClient.generateBCSTransaction(sender, rawTxn);\n    const pendingTransaction = await this.aptosClient.submitSignedBCSTransaction(bcsTxn);\n    return pendingTransaction.hash;\n  }\n\n  async transferWithOptIn(sender, creator, collectionName, tokenName, propertyVersion, receiver, amount, extraArgs) {\n    const builder = new TransactionBuilderRemoteABI(this.aptosClient, {\n      sender: sender.address(),\n      ...extraArgs\n    });\n    const rawTxn = await builder.build(\"0x3::token::transfer_with_opt_in\", [], [creator, collectionName, tokenName, propertyVersion, receiver, amount]);\n    const bcsTxn = AptosClient.generateBCSTransaction(sender, rawTxn);\n    const pendingTransaction = await this.aptosClient.submitSignedBCSTransaction(bcsTxn);\n    return pendingTransaction.hash;\n  }\n\n  async burnByCreator(creator, ownerAddress, collection, name, PropertyVersion, amount, extraArgs) {\n    const builder = new TransactionBuilderRemoteABI(this.aptosClient, {\n      sender: creator.address(),\n      ...extraArgs\n    });\n    const rawTxn = await builder.build(\"0x3::token::burn_by_creator\", [], [ownerAddress, collection, name, PropertyVersion, amount]);\n    const bcsTxn = AptosClient.generateBCSTransaction(creator, rawTxn);\n    const pendingTransaction = await this.aptosClient.submitSignedBCSTransaction(bcsTxn);\n    return pendingTransaction.hash;\n  }\n\n  async burnByOwner(owner, creatorAddress, collection, name, PropertyVersion, amount, extraArgs) {\n    const builder = new TransactionBuilderRemoteABI(this.aptosClient, {\n      sender: owner.address(),\n      ...extraArgs\n    });\n    const rawTxn = await builder.build(\"0x3::token::burn\", [], [creatorAddress, collection, name, PropertyVersion, amount]);\n    const bcsTxn = AptosClient.generateBCSTransaction(owner, rawTxn);\n    const pendingTransaction = await this.aptosClient.submitSignedBCSTransaction(bcsTxn);\n    return pendingTransaction.hash;\n  }\n\n  async mutateTokenProperties(account, tokenOwner, creator, collection_name, tokenName, propertyVersion, amount, keys, values, types, extraArgs) {\n    const builder = new TransactionBuilderRemoteABI(this.aptosClient, {\n      sender: account.address(),\n      ...extraArgs\n    });\n    const rawTxn = await builder.build(\"0x3::token::mutate_token_properties\", [], [tokenOwner, creator, collection_name, tokenName, propertyVersion, amount, keys, values, types]);\n    const bcsTxn = AptosClient.generateBCSTransaction(account, rawTxn);\n    const pendingTransaction = await this.aptosClient.submitSignedBCSTransaction(bcsTxn);\n    return pendingTransaction.hash;\n  }\n\n  async getCollectionData(creator, collectionName) {\n    const resources = await this.aptosClient.getAccountResources(creator);\n    const accountResource = resources.find(r => r.type === \"0x3::token::Collections\");\n    const {\n      handle\n    } = accountResource.data.collection_data;\n    const getCollectionTableItemRequest = {\n      key_type: \"0x1::string::String\",\n      value_type: \"0x3::token::CollectionData\",\n      key: collectionName\n    };\n    const collectionTable = await this.aptosClient.getTableItem(handle, getCollectionTableItemRequest);\n    return collectionTable;\n  }\n\n  async getTokenData(creator, collectionName, tokenName) {\n    const creatorHex = creator instanceof HexString ? creator.hex() : creator;\n    const collection = await this.aptosClient.getAccountResource(creatorHex, \"0x3::token::Collections\");\n    const {\n      handle\n    } = collection.data.token_data;\n    const tokenDataId = {\n      creator: creatorHex,\n      collection: collectionName,\n      name: tokenName\n    };\n    const getTokenTableItemRequest = {\n      key_type: \"0x3::token::TokenDataId\",\n      value_type: \"0x3::token::TokenData\",\n      key: tokenDataId\n    };\n    const rawTokenData = await this.aptosClient.getTableItem(handle, getTokenTableItemRequest);\n    return new TokenData(rawTokenData.collection, rawTokenData.description, rawTokenData.name, rawTokenData.maximum, rawTokenData.supply, rawTokenData.uri, rawTokenData.default_properties, rawTokenData.mutability_config);\n  }\n\n  async getToken(creator, collectionName, tokenName) {\n    let property_version = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : \"0\";\n    const tokenDataId = {\n      creator: creator instanceof HexString ? creator.hex() : creator,\n      collection: collectionName,\n      name: tokenName\n    };\n    return this.getTokenForAccount(creator, {\n      token_data_id: tokenDataId,\n      property_version\n    });\n  }\n\n  async getTokenForAccount(account, tokenId) {\n    const tokenStore = await this.aptosClient.getAccountResource(account instanceof HexString ? account.hex() : account, \"0x3::token::TokenStore\");\n    const {\n      handle\n    } = tokenStore.data.tokens;\n    const getTokenTableItemRequest = {\n      key_type: \"0x3::token::TokenId\",\n      value_type: \"0x3::token::Token\",\n      key: tokenId\n    };\n\n    try {\n      const rawToken = await this.aptosClient.getTableItem(handle, getTokenTableItemRequest);\n      return new Token(rawToken.id, rawToken.amount, rawToken.token_properties);\n    } catch (error) {\n      if ((error == null ? void 0 : error.status) === 404) {\n        return {\n          id: tokenId,\n          amount: \"0\",\n          token_properties: new PropertyMap()\n        };\n      }\n\n      return error;\n    }\n  }\n\n}; // src/plugins/fungible_asset_client.ts\n\nvar FungibleAssetClient = class {\n  constructor(provider) {\n    this.assetType = \"0x1::fungible_asset::Metadata\";\n    this.provider = provider;\n  }\n\n  async transfer(sender, fungibleAssetMetadataAddress, recipient, amount, extraArgs) {\n    const rawTransaction = await this.generateTransfer(sender, fungibleAssetMetadataAddress, recipient, amount, extraArgs);\n    const txnHash = await this.provider.signAndSubmitTransaction(sender, rawTransaction);\n    return txnHash;\n  }\n\n  async getPrimaryBalance(account, fungibleAssetMetadataAddress) {\n    const payload = {\n      function: \"0x1::primary_fungible_store::balance\",\n      type_arguments: [this.assetType],\n      arguments: [HexString.ensure(account).hex(), HexString.ensure(fungibleAssetMetadataAddress).hex()]\n    };\n    const response = await this.provider.view(payload);\n    return BigInt(response[0]);\n  }\n\n  async generateTransfer(sender, fungibleAssetMetadataAddress, recipient, amount, extraArgs) {\n    const builder = new TransactionBuilderRemoteABI(this.provider, {\n      sender: sender.address(),\n      ...extraArgs\n    });\n    const rawTxn = await builder.build(\"0x1::primary_fungible_store::transfer\", [this.assetType], [HexString.ensure(fungibleAssetMetadataAddress).hex(), HexString.ensure(recipient).hex(), amount]);\n    return rawTxn;\n  }\n\n}; // src/plugins/aptos_token.ts\n\nvar PropertyTypeMap = {\n  BOOLEAN: \"bool\",\n  U8: \"u8\",\n  U16: \"u16\",\n  U32: \"u32\",\n  U64: \"u64\",\n  U128: \"u128\",\n  U256: \"u256\",\n  ADDRESS: \"address\",\n  VECTOR: \"vector<u8>\",\n  STRING: \"string\"\n};\nvar AptosToken = class {\n  constructor(provider) {\n    this.tokenType = \"0x4::token::Token\";\n    this.provider = provider;\n  }\n\n  async submitTransaction(account, funcName, typeArgs, args, extraArgs) {\n    const builder = new TransactionBuilderRemoteABI(this.provider, {\n      sender: account.address(),\n      ...extraArgs\n    });\n    const rawTxn = await builder.build(`0x4::aptos_token::${funcName}`, typeArgs, args);\n    const bcsTxn = AptosClient.generateBCSTransaction(account, rawTxn);\n    const pendingTransaction = await this.provider.submitSignedBCSTransaction(bcsTxn);\n    return pendingTransaction.hash;\n  }\n\n  async createCollection(creator, description, name, uri) {\n    let maxSupply = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : MAX_U64_BIG_INT;\n    let options = arguments.length > 5 ? arguments[5] : undefined;\n    let extraArgs = arguments.length > 6 ? arguments[6] : undefined;\n\n    var _a, _b, _c, _d, _e, _f, _g, _h, _i, _j, _k;\n\n    return this.submitTransaction(creator, \"create_collection\", [], [description, maxSupply, name, uri, (_a = options == null ? void 0 : options.mutableDescription) != null ? _a : true, (_b = options == null ? void 0 : options.mutableRoyalty) != null ? _b : true, (_c = options == null ? void 0 : options.mutableURI) != null ? _c : true, (_d = options == null ? void 0 : options.mutableTokenDescription) != null ? _d : true, (_e = options == null ? void 0 : options.mutableTokenName) != null ? _e : true, (_f = options == null ? void 0 : options.mutableTokenProperties) != null ? _f : true, (_g = options == null ? void 0 : options.mutableTokenURI) != null ? _g : true, (_h = options == null ? void 0 : options.tokensBurnableByCreator) != null ? _h : true, (_i = options == null ? void 0 : options.tokensFreezableByCreator) != null ? _i : true, (_j = options == null ? void 0 : options.royaltyNumerator) != null ? _j : 0, (_k = options == null ? void 0 : options.royaltyDenominator) != null ? _k : 1], extraArgs);\n  }\n\n  async mint(account, collection, description, name, uri) {\n    let propertyKeys = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : [];\n    let propertyTypes = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : [];\n    let propertyValues = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : [];\n    let extraArgs = arguments.length > 8 ? arguments[8] : undefined;\n    return this.submitTransaction(account, \"mint\", [], [collection, description, name, uri, propertyKeys, propertyTypes, getPropertyValueRaw(propertyValues, propertyTypes)], extraArgs);\n  }\n\n  async mintSoulBound(account, collection, description, name, uri, recipient) {\n    let propertyKeys = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : [];\n    let propertyTypes = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : [];\n    let propertyValues = arguments.length > 8 && arguments[8] !== undefined ? arguments[8] : [];\n    let extraArgs = arguments.length > 9 ? arguments[9] : undefined;\n    return this.submitTransaction(account, \"mint_soul_bound\", [], [collection, description, name, uri, propertyKeys, propertyTypes, getPropertyValueRaw(propertyValues, propertyTypes), recipient.address().hex()], extraArgs);\n  }\n\n  async burnToken(creator, token, tokenType, extraArgs) {\n    return this.submitTransaction(creator, \"burn\", [tokenType || this.tokenType], [HexString.ensure(token).hex()], extraArgs);\n  }\n\n  async freezeTokenTransafer(creator, token, tokenType, extraArgs) {\n    return this.submitTransaction(creator, \"freeze_transfer\", [tokenType || this.tokenType], [HexString.ensure(token).hex()], extraArgs);\n  }\n\n  async unfreezeTokenTransafer(creator, token, tokenType, extraArgs) {\n    return this.submitTransaction(creator, \"unfreeze_transfer\", [tokenType || this.tokenType], [HexString.ensure(token).hex()], extraArgs);\n  }\n\n  async setTokenDescription(creator, token, description, tokenType, extraArgs) {\n    return this.submitTransaction(creator, \"set_description\", [tokenType || this.tokenType], [HexString.ensure(token).hex(), description], extraArgs);\n  }\n\n  async setTokenName(creator, token, name, tokenType, extraArgs) {\n    return this.submitTransaction(creator, \"set_name\", [tokenType || this.tokenType], [HexString.ensure(token).hex(), name], extraArgs);\n  }\n\n  async setTokenURI(creator, token, uri, tokenType, extraArgs) {\n    return this.submitTransaction(creator, \"set_uri\", [tokenType || this.tokenType], [HexString.ensure(token).hex(), uri], extraArgs);\n  }\n\n  async addTokenProperty(creator, token, propertyKey, propertyType, propertyValue, tokenType, extraArgs) {\n    return this.submitTransaction(creator, \"add_property\", [tokenType || this.tokenType], [HexString.ensure(token).hex(), propertyKey, PropertyTypeMap[propertyType], getSinglePropertyValueRaw(propertyValue, PropertyTypeMap[propertyType])], extraArgs);\n  }\n\n  async removeTokenProperty(creator, token, propertyKey, tokenType, extraArgs) {\n    return this.submitTransaction(creator, \"remove_property\", [tokenType || this.tokenType], [HexString.ensure(token).hex(), propertyKey], extraArgs);\n  }\n\n  async updateTokenProperty(creator, token, propertyKey, propertyType, propertyValue, tokenType, extraArgs) {\n    return this.submitTransaction(creator, \"update_property\", [tokenType || this.tokenType], [HexString.ensure(token).hex(), propertyKey, PropertyTypeMap[propertyType], getSinglePropertyValueRaw(propertyValue, PropertyTypeMap[propertyType])], extraArgs);\n  }\n\n  async addTypedProperty(creator, token, propertyKey, propertyType, propertyValue, tokenType, extraArgs) {\n    return this.submitTransaction(creator, \"add_typed_property\", [tokenType || this.tokenType, PropertyTypeMap[propertyType]], [HexString.ensure(token).hex(), propertyKey, propertyValue], extraArgs);\n  }\n\n  async updateTypedProperty(creator, token, propertyKey, propertyType, propertyValue, tokenType, extraArgs) {\n    return this.submitTransaction(creator, \"update_typed_property\", [tokenType || this.tokenType, PropertyTypeMap[propertyType]], [HexString.ensure(token).hex(), propertyKey, propertyValue], extraArgs);\n  }\n\n  async transferTokenOwnership(owner, token, recipient, tokenType, extraArgs) {\n    const builder = new TransactionBuilderRemoteABI(this.provider, {\n      sender: owner.address(),\n      ...extraArgs\n    });\n    const rawTxn = await builder.build(\"0x1::object::transfer\", [tokenType || this.tokenType], [HexString.ensure(token).hex(), HexString.ensure(recipient).hex()]);\n    const bcsTxn = AptosClient.generateBCSTransaction(owner, rawTxn);\n    const pendingTransaction = await this.provider.submitSignedBCSTransaction(bcsTxn);\n    return pendingTransaction.hash;\n  }\n\n  async transfer(data, isFungibleToken) {\n    let isFungible = isFungibleToken;\n\n    if (isFungible === void 0 || isFungible === null) {\n      const tokenData = await this.provider.getTokenData(HexString.ensure(data.tokenAddress).hex());\n      isFungible = tokenData.current_token_datas_v2[0].is_fungible_v2;\n    }\n\n    if (isFungible) {\n      const token2 = data;\n      const fungibleAsset = new FungibleAssetClient(this.provider);\n      const txnHash2 = await fungibleAsset.transfer(token2.owner, token2.tokenAddress, token2.recipient, token2.amount, token2.extraArgs);\n      return txnHash2;\n    }\n\n    const token = data;\n    const txnHash = await this.transferTokenOwnership(token.owner, token.tokenAddress, token.recipient, token.tokenType, token.extraArgs);\n    return txnHash;\n  }\n\n  async burnObject(owner, objectId, objectType, extraArgs) {\n    const builder = new TransactionBuilderRemoteABI(this.provider, {\n      sender: owner.address(),\n      ...extraArgs\n    });\n    const rawTxn = await builder.build(\"0x1::object::burn\", [objectType || \"0x1::object::ObjectCore\"], [HexString.ensure(objectId).hex()]);\n    const bcsTxn = AptosClient.generateBCSTransaction(owner, rawTxn);\n    const pendingTransaction = await this.provider.submitSignedBCSTransaction(bcsTxn);\n    return pendingTransaction.hash;\n  }\n\n}; // src/plugins/coin_client.ts\n\nvar TRANSFER_COINS = \"0x1::aptos_account::transfer_coins\";\nvar COIN_TRANSFER = \"0x1::coin::transfer\";\nvar CoinClient = class {\n  constructor(aptosClient2) {\n    this.aptosClient = aptosClient2;\n  }\n\n  async transfer(from, to, amount, extraArgs) {\n    var _a, _b, _c;\n\n    const isTypeTag = ((_a = extraArgs == null ? void 0 : extraArgs.coinType) != null ? _a : \"\").toString().includes(\"::\");\n\n    if ((extraArgs == null ? void 0 : extraArgs.coinType) && !isTypeTag && AccountAddress.isValid(extraArgs.coinType)) {\n      console.warn(\"to transfer a fungible asset, use `FungibleAssetClient()` class for better support\");\n      const provider = new Provider({\n        fullnodeUrl: this.aptosClient.nodeUrl,\n        indexerUrl: (_b = NetworkToIndexerAPI[NodeAPIToNetwork[this.aptosClient.nodeUrl]]) != null ? _b : this.aptosClient.nodeUrl\n      });\n      const fungibleAsset = new FungibleAssetClient(provider);\n      const txnHash = await fungibleAsset.transfer(from, extraArgs == null ? void 0 : extraArgs.coinType, getAddressFromAccountOrAddress(to), amount);\n      return txnHash;\n    }\n\n    const coinTypeToTransfer = (_c = extraArgs == null ? void 0 : extraArgs.coinType) != null ? _c : APTOS_COIN;\n    let func;\n\n    if ((extraArgs == null ? void 0 : extraArgs.createReceiverIfMissing) === void 0) {\n      func = TRANSFER_COINS;\n    } else {\n      func = (extraArgs == null ? void 0 : extraArgs.createReceiverIfMissing) ? TRANSFER_COINS : COIN_TRANSFER;\n    }\n\n    const toAddress = getAddressFromAccountOrAddress(to);\n    const builder = new TransactionBuilderRemoteABI(this.aptosClient, {\n      sender: from.address(),\n      ...extraArgs\n    });\n    const rawTxn = await builder.build(func, [coinTypeToTransfer], [toAddress, amount]);\n    const bcsTxn = AptosClient.generateBCSTransaction(from, rawTxn);\n    const pendingTransaction = await this.aptosClient.submitSignedBCSTransaction(bcsTxn);\n    return pendingTransaction.hash;\n  }\n\n  async checkBalance(account, extraArgs) {\n    var _a, _b, _c;\n\n    const isTypeTag = ((_a = extraArgs == null ? void 0 : extraArgs.coinType) != null ? _a : \"\").toString().includes(\"::\");\n\n    if ((extraArgs == null ? void 0 : extraArgs.coinType) && !isTypeTag && AccountAddress.isValid(extraArgs.coinType)) {\n      console.warn(\"to check balance of a fungible asset, use `FungibleAssetClient()` class for better support\");\n      const provider = new Provider({\n        fullnodeUrl: this.aptosClient.nodeUrl,\n        indexerUrl: (_b = NetworkToIndexerAPI[NodeAPIToNetwork[this.aptosClient.nodeUrl]]) != null ? _b : this.aptosClient.nodeUrl\n      });\n      const fungibleAsset = new FungibleAssetClient(provider);\n      const balance = await fungibleAsset.getPrimaryBalance(getAddressFromAccountOrAddress(account), extraArgs == null ? void 0 : extraArgs.coinType);\n      return balance;\n    }\n\n    const coinType = (_c = extraArgs == null ? void 0 : extraArgs.coinType) != null ? _c : APTOS_COIN;\n    const typeTag = `0x1::coin::CoinStore<${coinType}>`;\n    const address = getAddressFromAccountOrAddress(account);\n    const accountResource = await this.aptosClient.getAccountResource(address, typeTag);\n    return BigInt(accountResource.data.coin.value);\n  }\n\n}; // src/plugins/faucet_client.ts\n\nvar FaucetClient = class extends AptosClient {\n  constructor(nodeUrl, faucetUrl, config) {\n    super(nodeUrl, config);\n\n    if (!faucetUrl) {\n      throw new Error(\"Faucet URL cannot be empty.\");\n    }\n\n    this.faucetUrl = faucetUrl;\n    this.config = config;\n  }\n\n  async fundAccount(address, amount) {\n    let timeoutSecs = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : DEFAULT_TXN_TIMEOUT_SEC;\n    const {\n      data\n    } = await post({\n      url: this.faucetUrl,\n      endpoint: \"mint\",\n      body: null,\n      params: {\n        address: HexString.ensure(address).noPrefix(),\n        amount\n      },\n      overrides: { ...this.config\n      },\n      originMethod: \"fundAccount\"\n    });\n    const promises = [];\n\n    for (let i = 0; i < data.length; i += 1) {\n      const tnxHash = data[i];\n      promises.push(this.waitForTransaction(tnxHash, {\n        timeoutSecs\n      }));\n    }\n\n    await Promise.all(promises);\n    return data;\n  }\n\n}; // src/plugins/ans_client.ts\n\nvar ansContractsMap = {\n  testnet: \"0x5f8fd2347449685cf41d4db97926ec3a096eaf381332be4f1318ad4d16a8497c\",\n  mainnet: \"0x867ed1f6bf916171b1de3ee92849b8978b7d1b9e0a8cc982a3d19d535dfd9c0c\"\n};\nvar nameComponentPattern = /^[a-z\\d][a-z\\d-]{1,61}[a-z\\d]$/;\nvar namePattern = new RegExp(\"^(?:(?<subdomain>[^.]+)\\\\.(?!apt$))?(?<domain>[^.]+)(?:\\\\.apt)?$\");\nvar AnsClient = class {\n  constructor(provider, contractAddress) {\n    var _a;\n\n    this.provider = provider;\n\n    if (!ansContractsMap[this.provider.network] && !contractAddress) {\n      throw new Error(\"Error: For custom providers, you must pass in a contract address\");\n    }\n\n    this.contractAddress = (_a = ansContractsMap[this.provider.network]) != null ? _a : contractAddress;\n  }\n\n  async getPrimaryNameByAddress(address) {\n    const ansResource = await this.provider.getAccountResource(this.contractAddress, `${this.contractAddress}::domains::ReverseLookupRegistryV1`);\n    const data = ansResource.data;\n    const {\n      handle\n    } = data.registry;\n    const domainsTableItemRequest = {\n      key_type: \"address\",\n      value_type: `${this.contractAddress}::domains::NameRecordKeyV1`,\n      key: address\n    };\n\n    try {\n      const item = await this.provider.getTableItem(handle, domainsTableItemRequest);\n      return item.subdomain_name.vec[0] ? `${item.subdomain_name.vec[0]}.${item.domain_name}` : item.domain_name;\n    } catch (error) {\n      if (error.status === 404) {\n        return null;\n      }\n\n      throw new Error(error);\n    }\n  }\n\n  async getAddressByName(name) {\n    var _a, _b;\n\n    const {\n      domain,\n      subdomain\n    } = (_b = (_a = name.match(namePattern)) == null ? void 0 : _a.groups) != null ? _b : {};\n    if (!domain) return null;\n    const registration = subdomain ? await this.getRegistrationForSubdomainName(domain, subdomain) : await this.getRegistrationForDomainName(domain);\n    return registration === null ? null : registration.target;\n  }\n\n  async mintAptosName(account, domainName) {\n    let years = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n    let extraArgs = arguments.length > 3 ? arguments[3] : undefined;\n\n    if (domainName.match(nameComponentPattern) === null) {\n      throw new ApiError(400, `Name ${domainName} is not valid`);\n    }\n\n    const registration = await this.getRegistrationForDomainName(domainName);\n\n    if (registration) {\n      const now2 = Math.ceil(Date.now() / 1e3);\n\n      if (now2 < registration.expirationTimestampSeconds) {\n        throw new ApiError(400, `Name ${domainName} is not available`);\n      }\n    }\n\n    const builder = new TransactionBuilderRemoteABI(this.provider.aptosClient, {\n      sender: account.address(),\n      ...extraArgs\n    });\n    const rawTxn = await builder.build(`${this.contractAddress}::domains::register_domain`, [], [domainName, years]);\n    const bcsTxn = AptosClient.generateBCSTransaction(account, rawTxn);\n    const pendingTransaction = await this.provider.submitSignedBCSTransaction(bcsTxn);\n    return pendingTransaction.hash;\n  }\n\n  async mintAptosSubdomain(account, subdomainName, domainName, expirationTimestampSeconds, extraArgs) {\n    if (domainName.match(nameComponentPattern) === null) {\n      throw new ApiError(400, `Domain name ${domainName} is not valid`);\n    }\n\n    if (subdomainName.match(nameComponentPattern) === null) {\n      throw new ApiError(400, `Subdomain name ${subdomainName} is not valid`);\n    }\n\n    const subdomainRegistration = await this.getRegistrationForSubdomainName(domainName, subdomainName);\n\n    if (subdomainRegistration) {\n      const now3 = Math.ceil(Date.now() / 1e3);\n\n      if (now3 < subdomainRegistration.expirationTimestampSeconds) {\n        throw new ApiError(400, `Name ${subdomainName}.${domainName} is not available`);\n      }\n    }\n\n    const domainRegistration = await this.getRegistrationForDomainName(domainName);\n\n    if (domainRegistration === null) {\n      throw new ApiError(400, `Domain name ${domainName} does not exist`);\n    }\n\n    const now2 = Math.ceil(Date.now() / 1e3);\n\n    if (domainRegistration.expirationTimestampSeconds < now2) {\n      throw new ApiError(400, `Domain name ${domainName} expired`);\n    }\n\n    const actualExpirationTimestampSeconds = expirationTimestampSeconds || domainRegistration.expirationTimestampSeconds;\n\n    if (actualExpirationTimestampSeconds < now2) {\n      throw new ApiError(400, `Expiration for ${subdomainName}.${domainName} is before now`);\n    }\n\n    const builder = new TransactionBuilderRemoteABI(this.provider.aptosClient, {\n      sender: account.address(),\n      ...extraArgs\n    });\n    const rawTxn = await builder.build(`${this.contractAddress}::domains::register_subdomain`, [], [subdomainName, domainName, actualExpirationTimestampSeconds]);\n    const bcsTxn = AptosClient.generateBCSTransaction(account, rawTxn);\n    const pendingTransaction = await this.provider.submitSignedBCSTransaction(bcsTxn);\n    return pendingTransaction.hash;\n  }\n\n  async setSubdomainAddress(account, subdomainName, domainName, target, extraArgs) {\n    const standardizeAddress = AccountAddress.standardizeAddress(target);\n\n    if (domainName.match(nameComponentPattern) === null) {\n      throw new ApiError(400, `Name ${domainName} is not valid`);\n    }\n\n    if (subdomainName.match(nameComponentPattern) === null) {\n      throw new ApiError(400, `Name ${subdomainName} is not valid`);\n    }\n\n    const builder = new TransactionBuilderRemoteABI(this.provider.aptosClient, {\n      sender: account.address(),\n      ...extraArgs\n    });\n    const rawTxn = await builder.build(`${this.contractAddress}::domains::set_subdomain_address`, [], [subdomainName, domainName, standardizeAddress]);\n    const bcsTxn = AptosClient.generateBCSTransaction(account, rawTxn);\n    const pendingTransaction = await this.provider.submitSignedBCSTransaction(bcsTxn);\n    return pendingTransaction.hash;\n  }\n\n  async initReverseLookupRegistry(owner, extraArgs) {\n    const builder = new TransactionBuilderRemoteABI(this.provider.aptosClient, {\n      sender: owner.address(),\n      ...extraArgs\n    });\n    const rawTxn = await builder.build(`${this.contractAddress}::domains::init_reverse_lookup_registry_v1`, [], []);\n    const bcsTxn = AptosClient.generateBCSTransaction(owner, rawTxn);\n    const pendingTransaction = await this.provider.submitSignedBCSTransaction(bcsTxn);\n    return pendingTransaction.hash;\n  }\n\n  async getRegistrationForDomainName(domain) {\n    if (domain.match(nameComponentPattern) === null) return null;\n    const ansResource = await this.provider.getAccountResource(this.contractAddress, `${this.contractAddress}::domains::NameRegistryV1`);\n    const data = ansResource.data;\n    const {\n      handle\n    } = data.registry;\n    const domainsTableItemRequest = {\n      key_type: `${this.contractAddress}::domains::NameRecordKeyV1`,\n      value_type: `${this.contractAddress}::domains::NameRecordV1`,\n      key: {\n        subdomain_name: {\n          vec: []\n        },\n        domain_name: domain\n      }\n    };\n\n    try {\n      const item = await this.provider.getTableItem(handle, domainsTableItemRequest);\n      return {\n        target: item.target_address.vec.length === 1 ? item.target_address.vec[0] : null,\n        expirationTimestampSeconds: item.expiration_time_sec\n      };\n    } catch (error) {\n      if (error.status === 404) {\n        return null;\n      }\n\n      throw new Error(error);\n    }\n  }\n\n  async getRegistrationForSubdomainName(domain, subdomain) {\n    if (domain.match(nameComponentPattern) === null) return null;\n    if (subdomain.match(nameComponentPattern) === null) return null;\n    const ansResource = await this.provider.getAccountResource(this.contractAddress, `${this.contractAddress}::domains::NameRegistryV1`);\n    const data = ansResource.data;\n    const {\n      handle\n    } = data.registry;\n    const domainsTableItemRequest = {\n      key_type: `${this.contractAddress}::domains::NameRecordKeyV1`,\n      value_type: `${this.contractAddress}::domains::NameRecordV1`,\n      key: {\n        subdomain_name: {\n          vec: [subdomain]\n        },\n        domain_name: domain\n      }\n    };\n\n    try {\n      const item = await this.provider.getTableItem(handle, domainsTableItemRequest);\n      return {\n        target: item.target_address.vec.length === 1 ? item.target_address.vec[0] : null,\n        expirationTimestampSeconds: item.expiration_time_sec\n      };\n    } catch (error) {\n      if (error.status === 404) {\n        return null;\n      }\n\n      throw new Error(error);\n    }\n  }\n\n}; // src/transactions/account_sequence_number.ts\n\nvar now = () => Math.floor(Date.now() / 1e3);\n\nvar AccountSequenceNumber = class {\n  constructor(provider, account, maxWaitTime, maximumInFlight, sleepTime) {\n    this.lastUncommintedNumber = null;\n    this.currentNumber = null;\n    this.lock = false;\n    this.provider = provider;\n    this.account = account;\n    this.maxWaitTime = maxWaitTime;\n    this.maximumInFlight = maximumInFlight;\n    this.sleepTime = sleepTime;\n  }\n\n  async nextSequenceNumber() {\n    while (this.lock) {\n      await sleep(this.sleepTime);\n    }\n\n    this.lock = true;\n    let nextNumber = BigInt(0);\n\n    try {\n      if (this.lastUncommintedNumber === null || this.currentNumber === null) {\n        await this.initialize();\n      }\n\n      if (this.currentNumber - this.lastUncommintedNumber >= this.maximumInFlight) {\n        await this.update();\n        const startTime = now();\n\n        while (this.currentNumber - this.lastUncommintedNumber >= this.maximumInFlight) {\n          await sleep(this.sleepTime);\n\n          if (now() - startTime > this.maxWaitTime) {\n            console.warn(`Waited over 30 seconds for a transaction to commit, resyncing ${this.account.address()}`);\n            await this.initialize();\n          } else {\n            await this.update();\n          }\n        }\n      }\n\n      nextNumber = this.currentNumber;\n      this.currentNumber += BigInt(1);\n    } catch (e) {\n      console.error(\"error in getting next sequence number for this account\", e);\n    } finally {\n      this.lock = false;\n    }\n\n    return nextNumber;\n  }\n\n  async initialize() {\n    const {\n      sequence_number: sequenceNumber\n    } = await this.provider.getAccount(this.account.address());\n    this.currentNumber = BigInt(sequenceNumber);\n    this.lastUncommintedNumber = BigInt(sequenceNumber);\n  }\n\n  async update() {\n    const {\n      sequence_number: sequenceNumber\n    } = await this.provider.getAccount(this.account.address());\n    this.lastUncommintedNumber = BigInt(sequenceNumber);\n    return this.lastUncommintedNumber;\n  }\n\n  async synchronize() {\n    if (this.lastUncommintedNumber === this.currentNumber) return;\n\n    while (this.lock) {\n      await sleep(this.sleepTime);\n    }\n\n    this.lock = true;\n\n    try {\n      await this.update();\n      const startTime = now();\n\n      while (this.lastUncommintedNumber !== this.currentNumber) {\n        if (now() - startTime > this.maxWaitTime) {\n          console.warn(`Waited over 30 seconds for a transaction to commit, resyncing ${this.account.address()}`);\n          await this.initialize();\n        } else {\n          await sleep(this.sleepTime);\n          await this.update();\n        }\n      }\n    } catch (e) {\n      console.error(\"error in synchronizing this account sequence number with the one on chain\", e);\n    } finally {\n      this.lock = false;\n    }\n  }\n\n}; // src/transactions/transaction_worker.ts\n\nimport EventEmitter from \"eventemitter3\"; // src/transactions/async_queue.ts\n\nvar AsyncQueue = class {\n  constructor() {\n    this.queue = [];\n    this.resolveMap = /* @__PURE__ */new Map();\n    this.counter = 0;\n    this.cancelled = false;\n  }\n\n  enqueue(item) {\n    if (this.resolveMap.size > 0) {\n      const resolve = this.resolveMap.get(0);\n\n      if (resolve) {\n        this.resolveMap.delete(0);\n        resolve(item);\n        return;\n      }\n    }\n\n    this.queue.push(item);\n  }\n\n  async dequeue() {\n    if (this.queue.length > 0) {\n      return Promise.resolve(this.queue.shift());\n    }\n\n    const promise = new Promise(resolve => {\n      this.counter += 1;\n      this.resolveMap.set(this.counter, resolve);\n    });\n    return promise;\n  }\n\n  isEmpty() {\n    return this.queue.length === 0;\n  }\n\n  cancel() {\n    this.cancelled = true;\n    this.resolveMap.forEach(async resolve => {\n      resolve(await Promise.reject(new AsyncQueueCancelledError(\"Task cancelled\")));\n    });\n    this.resolveMap.clear();\n    this.queue.length = 0;\n  }\n\n  isCancelled() {\n    return this.cancelled;\n  }\n\n};\nvar AsyncQueueCancelledError = class extends Error {\n  constructor(message) {\n    super(message);\n  }\n\n}; // src/transactions/transaction_worker.ts\n\nvar promiseFulfilledStatus = \"fulfilled\";\n\nvar TransactionWorkerEvents = /* @__PURE__ */(TransactionWorkerEvents2 => {\n  TransactionWorkerEvents2[\"TransactionSent\"] = \"transactionSent\";\n  TransactionWorkerEvents2[\"TransactionSendFailed\"] = \"transactionsendFailed\";\n  TransactionWorkerEvents2[\"TransactionExecuted\"] = \"transactionExecuted\";\n  TransactionWorkerEvents2[\"TransactionExecutionFailed\"] = \"transactionexecutionFailed\";\n  return TransactionWorkerEvents2;\n})(TransactionWorkerEvents || {});\n\nvar TransactionWorker = class extends EventEmitter {\n  constructor(provider, account) {\n    let maxWaitTime = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 30;\n    let maximumInFlight = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 100;\n    let sleepTime = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 10;\n    super();\n    this.taskQueue = new AsyncQueue();\n    this.transactionsQueue = new AsyncQueue();\n    this.outstandingTransactions = new AsyncQueue();\n    this.sentTransactions = [];\n    this.executedTransactions = [];\n    this.provider = provider;\n    this.account = account;\n    this.started = false;\n    this.accountSequnceNumber = new AccountSequenceNumber(provider, account, maxWaitTime, maximumInFlight, sleepTime);\n  }\n\n  async submitNextTransaction() {\n    try {\n      while (true) {\n        if (this.transactionsQueue.isEmpty()) return;\n        const sequenceNumber = await this.accountSequnceNumber.nextSequenceNumber();\n        if (sequenceNumber === null) return;\n        const transaction = await this.generateNextTransaction(this.account, sequenceNumber);\n        if (!transaction) return;\n        const pendingTransaction = this.provider.submitSignedBCSTransaction(transaction);\n        await this.outstandingTransactions.enqueue([pendingTransaction, sequenceNumber]);\n      }\n    } catch (error) {\n      if (error instanceof AsyncQueueCancelledError) {\n        return;\n      }\n\n      console.log(error);\n    }\n  }\n\n  async processTransactions() {\n    try {\n      while (true) {\n        const awaitingTransactions = [];\n        const sequenceNumbers = [];\n        let [pendingTransaction, sequenceNumber] = await this.outstandingTransactions.dequeue();\n        awaitingTransactions.push(pendingTransaction);\n        sequenceNumbers.push(sequenceNumber);\n\n        while (!this.outstandingTransactions.isEmpty()) {\n          [pendingTransaction, sequenceNumber] = await this.outstandingTransactions.dequeue();\n          awaitingTransactions.push(pendingTransaction);\n          sequenceNumbers.push(sequenceNumber);\n        }\n\n        const sentTransactions = await Promise.allSettled(awaitingTransactions);\n\n        for (let i = 0; i < sentTransactions.length && i < sequenceNumbers.length; i += 1) {\n          const sentTransaction = sentTransactions[i];\n          sequenceNumber = sequenceNumbers[i];\n\n          if (sentTransaction.status === promiseFulfilledStatus) {\n            this.sentTransactions.push([sentTransaction.value.hash, sequenceNumber, null]);\n            this.emit(\"transactionSent\"\n            /* TransactionSent */\n            , [this.sentTransactions.length, sentTransaction.value.hash]);\n            await this.checkTransaction(sentTransaction, sequenceNumber);\n          } else {\n            this.sentTransactions.push([sentTransaction.status, sequenceNumber, sentTransaction.reason]);\n            this.emit(\"transactionsendFailed\"\n            /* TransactionSendFailed */\n            , [this.sentTransactions.length, sentTransaction.reason]);\n          }\n        }\n      }\n    } catch (error) {\n      if (error instanceof AsyncQueueCancelledError) {\n        return;\n      }\n\n      console.log(error);\n    }\n  }\n\n  async checkTransaction(sentTransaction, sequenceNumber) {\n    const waitFor = [];\n    waitFor.push(this.provider.waitForTransactionWithResult(sentTransaction.value.hash, {\n      checkSuccess: true\n    }));\n    const sentTransactions = await Promise.allSettled(waitFor);\n\n    for (let i = 0; i < sentTransactions.length; i += 1) {\n      const executedTransaction = sentTransactions[i];\n\n      if (executedTransaction.status === promiseFulfilledStatus) {\n        this.executedTransactions.push([executedTransaction.value.hash, sequenceNumber, null]);\n        this.emit(\"transactionExecuted\"\n        /* TransactionExecuted */\n        , [this.executedTransactions.length, executedTransaction.value.hash]);\n      } else {\n        this.executedTransactions.push([executedTransaction.status, sequenceNumber, executedTransaction.reason]);\n        this.emit(\"transactionexecutionFailed\"\n        /* TransactionExecutionFailed */\n        , [this.executedTransactions.length, executedTransaction.reason]);\n      }\n    }\n  }\n\n  async push(payload) {\n    await this.transactionsQueue.enqueue(payload);\n  }\n\n  async generateNextTransaction(account, sequenceNumber) {\n    if (this.transactionsQueue.isEmpty()) return void 0;\n    const payload = await this.transactionsQueue.dequeue();\n    const rawTransaction = await this.provider.generateRawTransaction(account.address(), payload, {\n      providedSequenceNumber: sequenceNumber\n    });\n    const signedTransaction = AptosClient.generateBCSTransaction(account, rawTransaction);\n    return signedTransaction;\n  }\n\n  async run() {\n    try {\n      while (!this.taskQueue.isCancelled()) {\n        const task = await this.taskQueue.dequeue();\n        await task();\n      }\n    } catch (error) {\n      throw new Error(error);\n    }\n  }\n\n  start() {\n    if (this.started) {\n      throw new Error(\"worker has already started\");\n    }\n\n    this.started = true;\n    this.taskQueue.enqueue(() => this.submitNextTransaction());\n    this.taskQueue.enqueue(() => this.processTransactions());\n    this.run();\n  }\n\n  stop() {\n    if (this.taskQueue.isCancelled()) {\n      throw new Error(\"worker has already stopped\");\n    }\n\n    this.started = false;\n    this.taskQueue.cancel();\n  }\n\n}; // src/generated/index.ts\n\nvar generated_exports = {};\n\n__export(generated_exports, {\n  AptosErrorCode: () => AptosErrorCode,\n  MoveFunctionVisibility: () => MoveFunctionVisibility,\n  RoleType: () => RoleType\n}); // src/generated/models/AptosErrorCode.ts\n\n\nvar AptosErrorCode = /* @__PURE__ */(AptosErrorCode2 => {\n  AptosErrorCode2[\"ACCOUNT_NOT_FOUND\"] = \"account_not_found\";\n  AptosErrorCode2[\"RESOURCE_NOT_FOUND\"] = \"resource_not_found\";\n  AptosErrorCode2[\"MODULE_NOT_FOUND\"] = \"module_not_found\";\n  AptosErrorCode2[\"STRUCT_FIELD_NOT_FOUND\"] = \"struct_field_not_found\";\n  AptosErrorCode2[\"VERSION_NOT_FOUND\"] = \"version_not_found\";\n  AptosErrorCode2[\"TRANSACTION_NOT_FOUND\"] = \"transaction_not_found\";\n  AptosErrorCode2[\"TABLE_ITEM_NOT_FOUND\"] = \"table_item_not_found\";\n  AptosErrorCode2[\"BLOCK_NOT_FOUND\"] = \"block_not_found\";\n  AptosErrorCode2[\"STATE_VALUE_NOT_FOUND\"] = \"state_value_not_found\";\n  AptosErrorCode2[\"VERSION_PRUNED\"] = \"version_pruned\";\n  AptosErrorCode2[\"BLOCK_PRUNED\"] = \"block_pruned\";\n  AptosErrorCode2[\"INVALID_INPUT\"] = \"invalid_input\";\n  AptosErrorCode2[\"INVALID_TRANSACTION_UPDATE\"] = \"invalid_transaction_update\";\n  AptosErrorCode2[\"SEQUENCE_NUMBER_TOO_OLD\"] = \"sequence_number_too_old\";\n  AptosErrorCode2[\"VM_ERROR\"] = \"vm_error\";\n  AptosErrorCode2[\"HEALTH_CHECK_FAILED\"] = \"health_check_failed\";\n  AptosErrorCode2[\"MEMPOOL_IS_FULL\"] = \"mempool_is_full\";\n  AptosErrorCode2[\"INTERNAL_ERROR\"] = \"internal_error\";\n  AptosErrorCode2[\"WEB_FRAMEWORK_ERROR\"] = \"web_framework_error\";\n  AptosErrorCode2[\"BCS_NOT_SUPPORTED\"] = \"bcs_not_supported\";\n  AptosErrorCode2[\"API_DISABLED\"] = \"api_disabled\";\n  return AptosErrorCode2;\n})(AptosErrorCode || {}); // src/generated/models/MoveFunctionVisibility.ts\n\n\nvar MoveFunctionVisibility = /* @__PURE__ */(MoveFunctionVisibility2 => {\n  MoveFunctionVisibility2[\"PRIVATE\"] = \"private\";\n  MoveFunctionVisibility2[\"PUBLIC\"] = \"public\";\n  MoveFunctionVisibility2[\"FRIEND\"] = \"friend\";\n  return MoveFunctionVisibility2;\n})(MoveFunctionVisibility || {}); // src/generated/models/RoleType.ts\n\n\nvar RoleType = /* @__PURE__ */(RoleType2 => {\n  RoleType2[\"VALIDATOR\"] = \"validator\";\n  RoleType2[\"FULL_NODE\"] = \"full_node\";\n  return RoleType2;\n})(RoleType || {}); // src/indexer/generated/types.ts\n\n\nvar Account_Transactions_Select_Column = /* @__PURE__ */(Account_Transactions_Select_Column2 => {\n  Account_Transactions_Select_Column2[\"AccountAddress\"] = \"account_address\";\n  Account_Transactions_Select_Column2[\"TransactionVersion\"] = \"transaction_version\";\n  return Account_Transactions_Select_Column2;\n})(Account_Transactions_Select_Column || {});\n\nvar Address_Events_Summary_Select_Column = /* @__PURE__ */(Address_Events_Summary_Select_Column2 => {\n  Address_Events_Summary_Select_Column2[\"AccountAddress\"] = \"account_address\";\n  Address_Events_Summary_Select_Column2[\"MinBlockHeight\"] = \"min_block_height\";\n  Address_Events_Summary_Select_Column2[\"NumDistinctVersions\"] = \"num_distinct_versions\";\n  return Address_Events_Summary_Select_Column2;\n})(Address_Events_Summary_Select_Column || {});\n\nvar Address_Version_From_Events_Select_Column = /* @__PURE__ */(Address_Version_From_Events_Select_Column2 => {\n  Address_Version_From_Events_Select_Column2[\"AccountAddress\"] = \"account_address\";\n  Address_Version_From_Events_Select_Column2[\"TransactionVersion\"] = \"transaction_version\";\n  return Address_Version_From_Events_Select_Column2;\n})(Address_Version_From_Events_Select_Column || {});\n\nvar Address_Version_From_Move_Resources_Select_Column = /* @__PURE__ */(Address_Version_From_Move_Resources_Select_Column2 => {\n  Address_Version_From_Move_Resources_Select_Column2[\"Address\"] = \"address\";\n  Address_Version_From_Move_Resources_Select_Column2[\"TransactionVersion\"] = \"transaction_version\";\n  return Address_Version_From_Move_Resources_Select_Column2;\n})(Address_Version_From_Move_Resources_Select_Column || {});\n\nvar Block_Metadata_Transactions_Select_Column = /* @__PURE__ */(Block_Metadata_Transactions_Select_Column2 => {\n  Block_Metadata_Transactions_Select_Column2[\"BlockHeight\"] = \"block_height\";\n  Block_Metadata_Transactions_Select_Column2[\"Epoch\"] = \"epoch\";\n  Block_Metadata_Transactions_Select_Column2[\"FailedProposerIndices\"] = \"failed_proposer_indices\";\n  Block_Metadata_Transactions_Select_Column2[\"Id\"] = \"id\";\n  Block_Metadata_Transactions_Select_Column2[\"PreviousBlockVotesBitvec\"] = \"previous_block_votes_bitvec\";\n  Block_Metadata_Transactions_Select_Column2[\"Proposer\"] = \"proposer\";\n  Block_Metadata_Transactions_Select_Column2[\"Round\"] = \"round\";\n  Block_Metadata_Transactions_Select_Column2[\"Timestamp\"] = \"timestamp\";\n  Block_Metadata_Transactions_Select_Column2[\"Version\"] = \"version\";\n  return Block_Metadata_Transactions_Select_Column2;\n})(Block_Metadata_Transactions_Select_Column || {});\n\nvar Coin_Activities_Select_Column = /* @__PURE__ */(Coin_Activities_Select_Column2 => {\n  Coin_Activities_Select_Column2[\"ActivityType\"] = \"activity_type\";\n  Coin_Activities_Select_Column2[\"Amount\"] = \"amount\";\n  Coin_Activities_Select_Column2[\"BlockHeight\"] = \"block_height\";\n  Coin_Activities_Select_Column2[\"CoinType\"] = \"coin_type\";\n  Coin_Activities_Select_Column2[\"EntryFunctionIdStr\"] = \"entry_function_id_str\";\n  Coin_Activities_Select_Column2[\"EventAccountAddress\"] = \"event_account_address\";\n  Coin_Activities_Select_Column2[\"EventCreationNumber\"] = \"event_creation_number\";\n  Coin_Activities_Select_Column2[\"EventIndex\"] = \"event_index\";\n  Coin_Activities_Select_Column2[\"EventSequenceNumber\"] = \"event_sequence_number\";\n  Coin_Activities_Select_Column2[\"IsGasFee\"] = \"is_gas_fee\";\n  Coin_Activities_Select_Column2[\"IsTransactionSuccess\"] = \"is_transaction_success\";\n  Coin_Activities_Select_Column2[\"OwnerAddress\"] = \"owner_address\";\n  Coin_Activities_Select_Column2[\"TransactionTimestamp\"] = \"transaction_timestamp\";\n  Coin_Activities_Select_Column2[\"TransactionVersion\"] = \"transaction_version\";\n  return Coin_Activities_Select_Column2;\n})(Coin_Activities_Select_Column || {});\n\nvar Coin_Balances_Select_Column = /* @__PURE__ */(Coin_Balances_Select_Column2 => {\n  Coin_Balances_Select_Column2[\"Amount\"] = \"amount\";\n  Coin_Balances_Select_Column2[\"CoinType\"] = \"coin_type\";\n  Coin_Balances_Select_Column2[\"CoinTypeHash\"] = \"coin_type_hash\";\n  Coin_Balances_Select_Column2[\"OwnerAddress\"] = \"owner_address\";\n  Coin_Balances_Select_Column2[\"TransactionTimestamp\"] = \"transaction_timestamp\";\n  Coin_Balances_Select_Column2[\"TransactionVersion\"] = \"transaction_version\";\n  return Coin_Balances_Select_Column2;\n})(Coin_Balances_Select_Column || {});\n\nvar Coin_Infos_Select_Column = /* @__PURE__ */(Coin_Infos_Select_Column2 => {\n  Coin_Infos_Select_Column2[\"CoinType\"] = \"coin_type\";\n  Coin_Infos_Select_Column2[\"CoinTypeHash\"] = \"coin_type_hash\";\n  Coin_Infos_Select_Column2[\"CreatorAddress\"] = \"creator_address\";\n  Coin_Infos_Select_Column2[\"Decimals\"] = \"decimals\";\n  Coin_Infos_Select_Column2[\"Name\"] = \"name\";\n  Coin_Infos_Select_Column2[\"SupplyAggregatorTableHandle\"] = \"supply_aggregator_table_handle\";\n  Coin_Infos_Select_Column2[\"SupplyAggregatorTableKey\"] = \"supply_aggregator_table_key\";\n  Coin_Infos_Select_Column2[\"Symbol\"] = \"symbol\";\n  Coin_Infos_Select_Column2[\"TransactionCreatedTimestamp\"] = \"transaction_created_timestamp\";\n  Coin_Infos_Select_Column2[\"TransactionVersionCreated\"] = \"transaction_version_created\";\n  return Coin_Infos_Select_Column2;\n})(Coin_Infos_Select_Column || {});\n\nvar Coin_Supply_Select_Column = /* @__PURE__ */(Coin_Supply_Select_Column2 => {\n  Coin_Supply_Select_Column2[\"CoinType\"] = \"coin_type\";\n  Coin_Supply_Select_Column2[\"CoinTypeHash\"] = \"coin_type_hash\";\n  Coin_Supply_Select_Column2[\"Supply\"] = \"supply\";\n  Coin_Supply_Select_Column2[\"TransactionEpoch\"] = \"transaction_epoch\";\n  Coin_Supply_Select_Column2[\"TransactionTimestamp\"] = \"transaction_timestamp\";\n  Coin_Supply_Select_Column2[\"TransactionVersion\"] = \"transaction_version\";\n  return Coin_Supply_Select_Column2;\n})(Coin_Supply_Select_Column || {});\n\nvar Collection_Datas_Select_Column = /* @__PURE__ */(Collection_Datas_Select_Column2 => {\n  Collection_Datas_Select_Column2[\"CollectionDataIdHash\"] = \"collection_data_id_hash\";\n  Collection_Datas_Select_Column2[\"CollectionName\"] = \"collection_name\";\n  Collection_Datas_Select_Column2[\"CreatorAddress\"] = \"creator_address\";\n  Collection_Datas_Select_Column2[\"Description\"] = \"description\";\n  Collection_Datas_Select_Column2[\"DescriptionMutable\"] = \"description_mutable\";\n  Collection_Datas_Select_Column2[\"Maximum\"] = \"maximum\";\n  Collection_Datas_Select_Column2[\"MaximumMutable\"] = \"maximum_mutable\";\n  Collection_Datas_Select_Column2[\"MetadataUri\"] = \"metadata_uri\";\n  Collection_Datas_Select_Column2[\"Supply\"] = \"supply\";\n  Collection_Datas_Select_Column2[\"TableHandle\"] = \"table_handle\";\n  Collection_Datas_Select_Column2[\"TransactionTimestamp\"] = \"transaction_timestamp\";\n  Collection_Datas_Select_Column2[\"TransactionVersion\"] = \"transaction_version\";\n  Collection_Datas_Select_Column2[\"UriMutable\"] = \"uri_mutable\";\n  return Collection_Datas_Select_Column2;\n})(Collection_Datas_Select_Column || {});\n\nvar Current_Ans_Lookup_Select_Column = /* @__PURE__ */(Current_Ans_Lookup_Select_Column2 => {\n  Current_Ans_Lookup_Select_Column2[\"Domain\"] = \"domain\";\n  Current_Ans_Lookup_Select_Column2[\"ExpirationTimestamp\"] = \"expiration_timestamp\";\n  Current_Ans_Lookup_Select_Column2[\"IsDeleted\"] = \"is_deleted\";\n  Current_Ans_Lookup_Select_Column2[\"LastTransactionVersion\"] = \"last_transaction_version\";\n  Current_Ans_Lookup_Select_Column2[\"RegisteredAddress\"] = \"registered_address\";\n  Current_Ans_Lookup_Select_Column2[\"Subdomain\"] = \"subdomain\";\n  Current_Ans_Lookup_Select_Column2[\"TokenName\"] = \"token_name\";\n  return Current_Ans_Lookup_Select_Column2;\n})(Current_Ans_Lookup_Select_Column || {});\n\nvar Current_Aptos_Names_Select_Column = /* @__PURE__ */(Current_Aptos_Names_Select_Column2 => {\n  Current_Aptos_Names_Select_Column2[\"Domain\"] = \"domain\";\n  Current_Aptos_Names_Select_Column2[\"ExpirationTimestamp\"] = \"expiration_timestamp\";\n  Current_Aptos_Names_Select_Column2[\"IsPrimary\"] = \"is_primary\";\n  Current_Aptos_Names_Select_Column2[\"LastTransactionVersion\"] = \"last_transaction_version\";\n  Current_Aptos_Names_Select_Column2[\"RegisteredAddress\"] = \"registered_address\";\n  Current_Aptos_Names_Select_Column2[\"Subdomain\"] = \"subdomain\";\n  Current_Aptos_Names_Select_Column2[\"TokenName\"] = \"token_name\";\n  return Current_Aptos_Names_Select_Column2;\n})(Current_Aptos_Names_Select_Column || {});\n\nvar Current_Coin_Balances_Select_Column = /* @__PURE__ */(Current_Coin_Balances_Select_Column2 => {\n  Current_Coin_Balances_Select_Column2[\"Amount\"] = \"amount\";\n  Current_Coin_Balances_Select_Column2[\"CoinType\"] = \"coin_type\";\n  Current_Coin_Balances_Select_Column2[\"CoinTypeHash\"] = \"coin_type_hash\";\n  Current_Coin_Balances_Select_Column2[\"LastTransactionTimestamp\"] = \"last_transaction_timestamp\";\n  Current_Coin_Balances_Select_Column2[\"LastTransactionVersion\"] = \"last_transaction_version\";\n  Current_Coin_Balances_Select_Column2[\"OwnerAddress\"] = \"owner_address\";\n  return Current_Coin_Balances_Select_Column2;\n})(Current_Coin_Balances_Select_Column || {});\n\nvar Current_Collection_Datas_Select_Column = /* @__PURE__ */(Current_Collection_Datas_Select_Column2 => {\n  Current_Collection_Datas_Select_Column2[\"CollectionDataIdHash\"] = \"collection_data_id_hash\";\n  Current_Collection_Datas_Select_Column2[\"CollectionName\"] = \"collection_name\";\n  Current_Collection_Datas_Select_Column2[\"CreatorAddress\"] = \"creator_address\";\n  Current_Collection_Datas_Select_Column2[\"Description\"] = \"description\";\n  Current_Collection_Datas_Select_Column2[\"DescriptionMutable\"] = \"description_mutable\";\n  Current_Collection_Datas_Select_Column2[\"LastTransactionTimestamp\"] = \"last_transaction_timestamp\";\n  Current_Collection_Datas_Select_Column2[\"LastTransactionVersion\"] = \"last_transaction_version\";\n  Current_Collection_Datas_Select_Column2[\"Maximum\"] = \"maximum\";\n  Current_Collection_Datas_Select_Column2[\"MaximumMutable\"] = \"maximum_mutable\";\n  Current_Collection_Datas_Select_Column2[\"MetadataUri\"] = \"metadata_uri\";\n  Current_Collection_Datas_Select_Column2[\"Supply\"] = \"supply\";\n  Current_Collection_Datas_Select_Column2[\"TableHandle\"] = \"table_handle\";\n  Current_Collection_Datas_Select_Column2[\"UriMutable\"] = \"uri_mutable\";\n  return Current_Collection_Datas_Select_Column2;\n})(Current_Collection_Datas_Select_Column || {});\n\nvar Current_Collection_Ownership_V2_View_Select_Column = /* @__PURE__ */(Current_Collection_Ownership_V2_View_Select_Column2 => {\n  Current_Collection_Ownership_V2_View_Select_Column2[\"CollectionId\"] = \"collection_id\";\n  Current_Collection_Ownership_V2_View_Select_Column2[\"CollectionName\"] = \"collection_name\";\n  Current_Collection_Ownership_V2_View_Select_Column2[\"CollectionUri\"] = \"collection_uri\";\n  Current_Collection_Ownership_V2_View_Select_Column2[\"CreatorAddress\"] = \"creator_address\";\n  Current_Collection_Ownership_V2_View_Select_Column2[\"DistinctTokens\"] = \"distinct_tokens\";\n  Current_Collection_Ownership_V2_View_Select_Column2[\"LastTransactionVersion\"] = \"last_transaction_version\";\n  Current_Collection_Ownership_V2_View_Select_Column2[\"OwnerAddress\"] = \"owner_address\";\n  Current_Collection_Ownership_V2_View_Select_Column2[\"SingleTokenUri\"] = \"single_token_uri\";\n  return Current_Collection_Ownership_V2_View_Select_Column2;\n})(Current_Collection_Ownership_V2_View_Select_Column || {});\n\nvar Current_Collections_V2_Select_Column = /* @__PURE__ */(Current_Collections_V2_Select_Column2 => {\n  Current_Collections_V2_Select_Column2[\"CollectionId\"] = \"collection_id\";\n  Current_Collections_V2_Select_Column2[\"CollectionName\"] = \"collection_name\";\n  Current_Collections_V2_Select_Column2[\"CreatorAddress\"] = \"creator_address\";\n  Current_Collections_V2_Select_Column2[\"CurrentSupply\"] = \"current_supply\";\n  Current_Collections_V2_Select_Column2[\"Description\"] = \"description\";\n  Current_Collections_V2_Select_Column2[\"LastTransactionTimestamp\"] = \"last_transaction_timestamp\";\n  Current_Collections_V2_Select_Column2[\"LastTransactionVersion\"] = \"last_transaction_version\";\n  Current_Collections_V2_Select_Column2[\"MaxSupply\"] = \"max_supply\";\n  Current_Collections_V2_Select_Column2[\"MutableDescription\"] = \"mutable_description\";\n  Current_Collections_V2_Select_Column2[\"MutableUri\"] = \"mutable_uri\";\n  Current_Collections_V2_Select_Column2[\"TableHandleV1\"] = \"table_handle_v1\";\n  Current_Collections_V2_Select_Column2[\"TokenStandard\"] = \"token_standard\";\n  Current_Collections_V2_Select_Column2[\"TotalMintedV2\"] = \"total_minted_v2\";\n  Current_Collections_V2_Select_Column2[\"Uri\"] = \"uri\";\n  return Current_Collections_V2_Select_Column2;\n})(Current_Collections_V2_Select_Column || {});\n\nvar Current_Delegated_Staking_Pool_Balances_Select_Column = /* @__PURE__ */(Current_Delegated_Staking_Pool_Balances_Select_Column2 => {\n  Current_Delegated_Staking_Pool_Balances_Select_Column2[\"ActiveTableHandle\"] = \"active_table_handle\";\n  Current_Delegated_Staking_Pool_Balances_Select_Column2[\"InactiveTableHandle\"] = \"inactive_table_handle\";\n  Current_Delegated_Staking_Pool_Balances_Select_Column2[\"LastTransactionVersion\"] = \"last_transaction_version\";\n  Current_Delegated_Staking_Pool_Balances_Select_Column2[\"OperatorCommissionPercentage\"] = \"operator_commission_percentage\";\n  Current_Delegated_Staking_Pool_Balances_Select_Column2[\"StakingPoolAddress\"] = \"staking_pool_address\";\n  Current_Delegated_Staking_Pool_Balances_Select_Column2[\"TotalCoins\"] = \"total_coins\";\n  Current_Delegated_Staking_Pool_Balances_Select_Column2[\"TotalShares\"] = \"total_shares\";\n  return Current_Delegated_Staking_Pool_Balances_Select_Column2;\n})(Current_Delegated_Staking_Pool_Balances_Select_Column || {});\n\nvar Current_Delegated_Voter_Select_Column = /* @__PURE__ */(Current_Delegated_Voter_Select_Column2 => {\n  Current_Delegated_Voter_Select_Column2[\"DelegationPoolAddress\"] = \"delegation_pool_address\";\n  Current_Delegated_Voter_Select_Column2[\"DelegatorAddress\"] = \"delegator_address\";\n  Current_Delegated_Voter_Select_Column2[\"LastTransactionTimestamp\"] = \"last_transaction_timestamp\";\n  Current_Delegated_Voter_Select_Column2[\"LastTransactionVersion\"] = \"last_transaction_version\";\n  Current_Delegated_Voter_Select_Column2[\"PendingVoter\"] = \"pending_voter\";\n  Current_Delegated_Voter_Select_Column2[\"TableHandle\"] = \"table_handle\";\n  Current_Delegated_Voter_Select_Column2[\"Voter\"] = \"voter\";\n  return Current_Delegated_Voter_Select_Column2;\n})(Current_Delegated_Voter_Select_Column || {});\n\nvar Current_Delegator_Balances_Select_Column = /* @__PURE__ */(Current_Delegator_Balances_Select_Column2 => {\n  Current_Delegator_Balances_Select_Column2[\"DelegatorAddress\"] = \"delegator_address\";\n  Current_Delegator_Balances_Select_Column2[\"LastTransactionVersion\"] = \"last_transaction_version\";\n  Current_Delegator_Balances_Select_Column2[\"ParentTableHandle\"] = \"parent_table_handle\";\n  Current_Delegator_Balances_Select_Column2[\"PoolAddress\"] = \"pool_address\";\n  Current_Delegator_Balances_Select_Column2[\"PoolType\"] = \"pool_type\";\n  Current_Delegator_Balances_Select_Column2[\"Shares\"] = \"shares\";\n  Current_Delegator_Balances_Select_Column2[\"TableHandle\"] = \"table_handle\";\n  return Current_Delegator_Balances_Select_Column2;\n})(Current_Delegator_Balances_Select_Column || {});\n\nvar Current_Fungible_Asset_Balances_Select_Column = /* @__PURE__ */(Current_Fungible_Asset_Balances_Select_Column2 => {\n  Current_Fungible_Asset_Balances_Select_Column2[\"Amount\"] = \"amount\";\n  Current_Fungible_Asset_Balances_Select_Column2[\"AssetType\"] = \"asset_type\";\n  Current_Fungible_Asset_Balances_Select_Column2[\"IsFrozen\"] = \"is_frozen\";\n  Current_Fungible_Asset_Balances_Select_Column2[\"IsPrimary\"] = \"is_primary\";\n  Current_Fungible_Asset_Balances_Select_Column2[\"LastTransactionTimestamp\"] = \"last_transaction_timestamp\";\n  Current_Fungible_Asset_Balances_Select_Column2[\"LastTransactionVersion\"] = \"last_transaction_version\";\n  Current_Fungible_Asset_Balances_Select_Column2[\"OwnerAddress\"] = \"owner_address\";\n  Current_Fungible_Asset_Balances_Select_Column2[\"StorageId\"] = \"storage_id\";\n  Current_Fungible_Asset_Balances_Select_Column2[\"TokenStandard\"] = \"token_standard\";\n  return Current_Fungible_Asset_Balances_Select_Column2;\n})(Current_Fungible_Asset_Balances_Select_Column || {});\n\nvar Current_Objects_Select_Column = /* @__PURE__ */(Current_Objects_Select_Column2 => {\n  Current_Objects_Select_Column2[\"AllowUngatedTransfer\"] = \"allow_ungated_transfer\";\n  Current_Objects_Select_Column2[\"IsDeleted\"] = \"is_deleted\";\n  Current_Objects_Select_Column2[\"LastGuidCreationNum\"] = \"last_guid_creation_num\";\n  Current_Objects_Select_Column2[\"LastTransactionVersion\"] = \"last_transaction_version\";\n  Current_Objects_Select_Column2[\"ObjectAddress\"] = \"object_address\";\n  Current_Objects_Select_Column2[\"OwnerAddress\"] = \"owner_address\";\n  Current_Objects_Select_Column2[\"StateKeyHash\"] = \"state_key_hash\";\n  return Current_Objects_Select_Column2;\n})(Current_Objects_Select_Column || {});\n\nvar Current_Staking_Pool_Voter_Select_Column = /* @__PURE__ */(Current_Staking_Pool_Voter_Select_Column2 => {\n  Current_Staking_Pool_Voter_Select_Column2[\"LastTransactionVersion\"] = \"last_transaction_version\";\n  Current_Staking_Pool_Voter_Select_Column2[\"OperatorAddress\"] = \"operator_address\";\n  Current_Staking_Pool_Voter_Select_Column2[\"StakingPoolAddress\"] = \"staking_pool_address\";\n  Current_Staking_Pool_Voter_Select_Column2[\"VoterAddress\"] = \"voter_address\";\n  return Current_Staking_Pool_Voter_Select_Column2;\n})(Current_Staking_Pool_Voter_Select_Column || {});\n\nvar Current_Table_Items_Select_Column = /* @__PURE__ */(Current_Table_Items_Select_Column2 => {\n  Current_Table_Items_Select_Column2[\"DecodedKey\"] = \"decoded_key\";\n  Current_Table_Items_Select_Column2[\"DecodedValue\"] = \"decoded_value\";\n  Current_Table_Items_Select_Column2[\"IsDeleted\"] = \"is_deleted\";\n  Current_Table_Items_Select_Column2[\"Key\"] = \"key\";\n  Current_Table_Items_Select_Column2[\"KeyHash\"] = \"key_hash\";\n  Current_Table_Items_Select_Column2[\"LastTransactionVersion\"] = \"last_transaction_version\";\n  Current_Table_Items_Select_Column2[\"TableHandle\"] = \"table_handle\";\n  return Current_Table_Items_Select_Column2;\n})(Current_Table_Items_Select_Column || {});\n\nvar Current_Token_Datas_Select_Column = /* @__PURE__ */(Current_Token_Datas_Select_Column2 => {\n  Current_Token_Datas_Select_Column2[\"CollectionDataIdHash\"] = \"collection_data_id_hash\";\n  Current_Token_Datas_Select_Column2[\"CollectionName\"] = \"collection_name\";\n  Current_Token_Datas_Select_Column2[\"CreatorAddress\"] = \"creator_address\";\n  Current_Token_Datas_Select_Column2[\"DefaultProperties\"] = \"default_properties\";\n  Current_Token_Datas_Select_Column2[\"Description\"] = \"description\";\n  Current_Token_Datas_Select_Column2[\"DescriptionMutable\"] = \"description_mutable\";\n  Current_Token_Datas_Select_Column2[\"LargestPropertyVersion\"] = \"largest_property_version\";\n  Current_Token_Datas_Select_Column2[\"LastTransactionTimestamp\"] = \"last_transaction_timestamp\";\n  Current_Token_Datas_Select_Column2[\"LastTransactionVersion\"] = \"last_transaction_version\";\n  Current_Token_Datas_Select_Column2[\"Maximum\"] = \"maximum\";\n  Current_Token_Datas_Select_Column2[\"MaximumMutable\"] = \"maximum_mutable\";\n  Current_Token_Datas_Select_Column2[\"MetadataUri\"] = \"metadata_uri\";\n  Current_Token_Datas_Select_Column2[\"Name\"] = \"name\";\n  Current_Token_Datas_Select_Column2[\"PayeeAddress\"] = \"payee_address\";\n  Current_Token_Datas_Select_Column2[\"PropertiesMutable\"] = \"properties_mutable\";\n  Current_Token_Datas_Select_Column2[\"RoyaltyMutable\"] = \"royalty_mutable\";\n  Current_Token_Datas_Select_Column2[\"RoyaltyPointsDenominator\"] = \"royalty_points_denominator\";\n  Current_Token_Datas_Select_Column2[\"RoyaltyPointsNumerator\"] = \"royalty_points_numerator\";\n  Current_Token_Datas_Select_Column2[\"Supply\"] = \"supply\";\n  Current_Token_Datas_Select_Column2[\"TokenDataIdHash\"] = \"token_data_id_hash\";\n  Current_Token_Datas_Select_Column2[\"UriMutable\"] = \"uri_mutable\";\n  return Current_Token_Datas_Select_Column2;\n})(Current_Token_Datas_Select_Column || {});\n\nvar Current_Token_Datas_V2_Select_Column = /* @__PURE__ */(Current_Token_Datas_V2_Select_Column2 => {\n  Current_Token_Datas_V2_Select_Column2[\"CollectionId\"] = \"collection_id\";\n  Current_Token_Datas_V2_Select_Column2[\"Description\"] = \"description\";\n  Current_Token_Datas_V2_Select_Column2[\"IsFungibleV2\"] = \"is_fungible_v2\";\n  Current_Token_Datas_V2_Select_Column2[\"LargestPropertyVersionV1\"] = \"largest_property_version_v1\";\n  Current_Token_Datas_V2_Select_Column2[\"LastTransactionTimestamp\"] = \"last_transaction_timestamp\";\n  Current_Token_Datas_V2_Select_Column2[\"LastTransactionVersion\"] = \"last_transaction_version\";\n  Current_Token_Datas_V2_Select_Column2[\"Maximum\"] = \"maximum\";\n  Current_Token_Datas_V2_Select_Column2[\"Supply\"] = \"supply\";\n  Current_Token_Datas_V2_Select_Column2[\"TokenDataId\"] = \"token_data_id\";\n  Current_Token_Datas_V2_Select_Column2[\"TokenName\"] = \"token_name\";\n  Current_Token_Datas_V2_Select_Column2[\"TokenProperties\"] = \"token_properties\";\n  Current_Token_Datas_V2_Select_Column2[\"TokenStandard\"] = \"token_standard\";\n  Current_Token_Datas_V2_Select_Column2[\"TokenUri\"] = \"token_uri\";\n  return Current_Token_Datas_V2_Select_Column2;\n})(Current_Token_Datas_V2_Select_Column || {});\n\nvar Current_Token_Ownerships_Select_Column = /* @__PURE__ */(Current_Token_Ownerships_Select_Column2 => {\n  Current_Token_Ownerships_Select_Column2[\"Amount\"] = \"amount\";\n  Current_Token_Ownerships_Select_Column2[\"CollectionDataIdHash\"] = \"collection_data_id_hash\";\n  Current_Token_Ownerships_Select_Column2[\"CollectionName\"] = \"collection_name\";\n  Current_Token_Ownerships_Select_Column2[\"CreatorAddress\"] = \"creator_address\";\n  Current_Token_Ownerships_Select_Column2[\"LastTransactionTimestamp\"] = \"last_transaction_timestamp\";\n  Current_Token_Ownerships_Select_Column2[\"LastTransactionVersion\"] = \"last_transaction_version\";\n  Current_Token_Ownerships_Select_Column2[\"Name\"] = \"name\";\n  Current_Token_Ownerships_Select_Column2[\"OwnerAddress\"] = \"owner_address\";\n  Current_Token_Ownerships_Select_Column2[\"PropertyVersion\"] = \"property_version\";\n  Current_Token_Ownerships_Select_Column2[\"TableType\"] = \"table_type\";\n  Current_Token_Ownerships_Select_Column2[\"TokenDataIdHash\"] = \"token_data_id_hash\";\n  Current_Token_Ownerships_Select_Column2[\"TokenProperties\"] = \"token_properties\";\n  return Current_Token_Ownerships_Select_Column2;\n})(Current_Token_Ownerships_Select_Column || {});\n\nvar Current_Token_Ownerships_V2_Select_Column = /* @__PURE__ */(Current_Token_Ownerships_V2_Select_Column2 => {\n  Current_Token_Ownerships_V2_Select_Column2[\"Amount\"] = \"amount\";\n  Current_Token_Ownerships_V2_Select_Column2[\"IsFungibleV2\"] = \"is_fungible_v2\";\n  Current_Token_Ownerships_V2_Select_Column2[\"IsSoulboundV2\"] = \"is_soulbound_v2\";\n  Current_Token_Ownerships_V2_Select_Column2[\"LastTransactionTimestamp\"] = \"last_transaction_timestamp\";\n  Current_Token_Ownerships_V2_Select_Column2[\"LastTransactionVersion\"] = \"last_transaction_version\";\n  Current_Token_Ownerships_V2_Select_Column2[\"OwnerAddress\"] = \"owner_address\";\n  Current_Token_Ownerships_V2_Select_Column2[\"PropertyVersionV1\"] = \"property_version_v1\";\n  Current_Token_Ownerships_V2_Select_Column2[\"StorageId\"] = \"storage_id\";\n  Current_Token_Ownerships_V2_Select_Column2[\"TableTypeV1\"] = \"table_type_v1\";\n  Current_Token_Ownerships_V2_Select_Column2[\"TokenDataId\"] = \"token_data_id\";\n  Current_Token_Ownerships_V2_Select_Column2[\"TokenPropertiesMutatedV1\"] = \"token_properties_mutated_v1\";\n  Current_Token_Ownerships_V2_Select_Column2[\"TokenStandard\"] = \"token_standard\";\n  return Current_Token_Ownerships_V2_Select_Column2;\n})(Current_Token_Ownerships_V2_Select_Column || {});\n\nvar Current_Token_Pending_Claims_Select_Column = /* @__PURE__ */(Current_Token_Pending_Claims_Select_Column2 => {\n  Current_Token_Pending_Claims_Select_Column2[\"Amount\"] = \"amount\";\n  Current_Token_Pending_Claims_Select_Column2[\"CollectionDataIdHash\"] = \"collection_data_id_hash\";\n  Current_Token_Pending_Claims_Select_Column2[\"CollectionId\"] = \"collection_id\";\n  Current_Token_Pending_Claims_Select_Column2[\"CollectionName\"] = \"collection_name\";\n  Current_Token_Pending_Claims_Select_Column2[\"CreatorAddress\"] = \"creator_address\";\n  Current_Token_Pending_Claims_Select_Column2[\"FromAddress\"] = \"from_address\";\n  Current_Token_Pending_Claims_Select_Column2[\"LastTransactionTimestamp\"] = \"last_transaction_timestamp\";\n  Current_Token_Pending_Claims_Select_Column2[\"LastTransactionVersion\"] = \"last_transaction_version\";\n  Current_Token_Pending_Claims_Select_Column2[\"Name\"] = \"name\";\n  Current_Token_Pending_Claims_Select_Column2[\"PropertyVersion\"] = \"property_version\";\n  Current_Token_Pending_Claims_Select_Column2[\"TableHandle\"] = \"table_handle\";\n  Current_Token_Pending_Claims_Select_Column2[\"ToAddress\"] = \"to_address\";\n  Current_Token_Pending_Claims_Select_Column2[\"TokenDataId\"] = \"token_data_id\";\n  Current_Token_Pending_Claims_Select_Column2[\"TokenDataIdHash\"] = \"token_data_id_hash\";\n  return Current_Token_Pending_Claims_Select_Column2;\n})(Current_Token_Pending_Claims_Select_Column || {});\n\nvar Cursor_Ordering = /* @__PURE__ */(Cursor_Ordering2 => {\n  Cursor_Ordering2[\"Asc\"] = \"ASC\";\n  Cursor_Ordering2[\"Desc\"] = \"DESC\";\n  return Cursor_Ordering2;\n})(Cursor_Ordering || {});\n\nvar Delegated_Staking_Activities_Select_Column = /* @__PURE__ */(Delegated_Staking_Activities_Select_Column2 => {\n  Delegated_Staking_Activities_Select_Column2[\"Amount\"] = \"amount\";\n  Delegated_Staking_Activities_Select_Column2[\"DelegatorAddress\"] = \"delegator_address\";\n  Delegated_Staking_Activities_Select_Column2[\"EventIndex\"] = \"event_index\";\n  Delegated_Staking_Activities_Select_Column2[\"EventType\"] = \"event_type\";\n  Delegated_Staking_Activities_Select_Column2[\"PoolAddress\"] = \"pool_address\";\n  Delegated_Staking_Activities_Select_Column2[\"TransactionVersion\"] = \"transaction_version\";\n  return Delegated_Staking_Activities_Select_Column2;\n})(Delegated_Staking_Activities_Select_Column || {});\n\nvar Delegated_Staking_Pools_Select_Column = /* @__PURE__ */(Delegated_Staking_Pools_Select_Column2 => {\n  Delegated_Staking_Pools_Select_Column2[\"FirstTransactionVersion\"] = \"first_transaction_version\";\n  Delegated_Staking_Pools_Select_Column2[\"StakingPoolAddress\"] = \"staking_pool_address\";\n  return Delegated_Staking_Pools_Select_Column2;\n})(Delegated_Staking_Pools_Select_Column || {});\n\nvar Delegator_Distinct_Pool_Select_Column = /* @__PURE__ */(Delegator_Distinct_Pool_Select_Column2 => {\n  Delegator_Distinct_Pool_Select_Column2[\"DelegatorAddress\"] = \"delegator_address\";\n  Delegator_Distinct_Pool_Select_Column2[\"PoolAddress\"] = \"pool_address\";\n  return Delegator_Distinct_Pool_Select_Column2;\n})(Delegator_Distinct_Pool_Select_Column || {});\n\nvar Events_Select_Column = /* @__PURE__ */(Events_Select_Column2 => {\n  Events_Select_Column2[\"AccountAddress\"] = \"account_address\";\n  Events_Select_Column2[\"CreationNumber\"] = \"creation_number\";\n  Events_Select_Column2[\"Data\"] = \"data\";\n  Events_Select_Column2[\"EventIndex\"] = \"event_index\";\n  Events_Select_Column2[\"SequenceNumber\"] = \"sequence_number\";\n  Events_Select_Column2[\"TransactionBlockHeight\"] = \"transaction_block_height\";\n  Events_Select_Column2[\"TransactionVersion\"] = \"transaction_version\";\n  Events_Select_Column2[\"Type\"] = \"type\";\n  return Events_Select_Column2;\n})(Events_Select_Column || {});\n\nvar Fungible_Asset_Activities_Select_Column = /* @__PURE__ */(Fungible_Asset_Activities_Select_Column2 => {\n  Fungible_Asset_Activities_Select_Column2[\"Amount\"] = \"amount\";\n  Fungible_Asset_Activities_Select_Column2[\"AssetType\"] = \"asset_type\";\n  Fungible_Asset_Activities_Select_Column2[\"BlockHeight\"] = \"block_height\";\n  Fungible_Asset_Activities_Select_Column2[\"EntryFunctionIdStr\"] = \"entry_function_id_str\";\n  Fungible_Asset_Activities_Select_Column2[\"EventIndex\"] = \"event_index\";\n  Fungible_Asset_Activities_Select_Column2[\"GasFeePayerAddress\"] = \"gas_fee_payer_address\";\n  Fungible_Asset_Activities_Select_Column2[\"IsFrozen\"] = \"is_frozen\";\n  Fungible_Asset_Activities_Select_Column2[\"IsGasFee\"] = \"is_gas_fee\";\n  Fungible_Asset_Activities_Select_Column2[\"IsTransactionSuccess\"] = \"is_transaction_success\";\n  Fungible_Asset_Activities_Select_Column2[\"OwnerAddress\"] = \"owner_address\";\n  Fungible_Asset_Activities_Select_Column2[\"StorageId\"] = \"storage_id\";\n  Fungible_Asset_Activities_Select_Column2[\"TokenStandard\"] = \"token_standard\";\n  Fungible_Asset_Activities_Select_Column2[\"TransactionTimestamp\"] = \"transaction_timestamp\";\n  Fungible_Asset_Activities_Select_Column2[\"TransactionVersion\"] = \"transaction_version\";\n  Fungible_Asset_Activities_Select_Column2[\"Type\"] = \"type\";\n  return Fungible_Asset_Activities_Select_Column2;\n})(Fungible_Asset_Activities_Select_Column || {});\n\nvar Fungible_Asset_Metadata_Select_Column = /* @__PURE__ */(Fungible_Asset_Metadata_Select_Column2 => {\n  Fungible_Asset_Metadata_Select_Column2[\"AssetType\"] = \"asset_type\";\n  Fungible_Asset_Metadata_Select_Column2[\"CreatorAddress\"] = \"creator_address\";\n  Fungible_Asset_Metadata_Select_Column2[\"Decimals\"] = \"decimals\";\n  Fungible_Asset_Metadata_Select_Column2[\"IconUri\"] = \"icon_uri\";\n  Fungible_Asset_Metadata_Select_Column2[\"LastTransactionTimestamp\"] = \"last_transaction_timestamp\";\n  Fungible_Asset_Metadata_Select_Column2[\"LastTransactionVersion\"] = \"last_transaction_version\";\n  Fungible_Asset_Metadata_Select_Column2[\"Name\"] = \"name\";\n  Fungible_Asset_Metadata_Select_Column2[\"ProjectUri\"] = \"project_uri\";\n  Fungible_Asset_Metadata_Select_Column2[\"SupplyAggregatorTableHandleV1\"] = \"supply_aggregator_table_handle_v1\";\n  Fungible_Asset_Metadata_Select_Column2[\"SupplyAggregatorTableKeyV1\"] = \"supply_aggregator_table_key_v1\";\n  Fungible_Asset_Metadata_Select_Column2[\"Symbol\"] = \"symbol\";\n  Fungible_Asset_Metadata_Select_Column2[\"TokenStandard\"] = \"token_standard\";\n  return Fungible_Asset_Metadata_Select_Column2;\n})(Fungible_Asset_Metadata_Select_Column || {});\n\nvar Indexer_Status_Select_Column = /* @__PURE__ */(Indexer_Status_Select_Column2 => {\n  Indexer_Status_Select_Column2[\"Db\"] = \"db\";\n  Indexer_Status_Select_Column2[\"IsIndexerUp\"] = \"is_indexer_up\";\n  return Indexer_Status_Select_Column2;\n})(Indexer_Status_Select_Column || {});\n\nvar Ledger_Infos_Select_Column = /* @__PURE__ */(Ledger_Infos_Select_Column2 => {\n  Ledger_Infos_Select_Column2[\"ChainId\"] = \"chain_id\";\n  return Ledger_Infos_Select_Column2;\n})(Ledger_Infos_Select_Column || {});\n\nvar Move_Resources_Select_Column = /* @__PURE__ */(Move_Resources_Select_Column2 => {\n  Move_Resources_Select_Column2[\"Address\"] = \"address\";\n  Move_Resources_Select_Column2[\"TransactionVersion\"] = \"transaction_version\";\n  return Move_Resources_Select_Column2;\n})(Move_Resources_Select_Column || {});\n\nvar Nft_Marketplace_V2_Current_Nft_Marketplace_Auctions_Select_Column = /* @__PURE__ */(Nft_Marketplace_V2_Current_Nft_Marketplace_Auctions_Select_Column2 => {\n  Nft_Marketplace_V2_Current_Nft_Marketplace_Auctions_Select_Column2[\"BuyItNowPrice\"] = \"buy_it_now_price\";\n  Nft_Marketplace_V2_Current_Nft_Marketplace_Auctions_Select_Column2[\"CoinType\"] = \"coin_type\";\n  Nft_Marketplace_V2_Current_Nft_Marketplace_Auctions_Select_Column2[\"CollectionId\"] = \"collection_id\";\n  Nft_Marketplace_V2_Current_Nft_Marketplace_Auctions_Select_Column2[\"ContractAddress\"] = \"contract_address\";\n  Nft_Marketplace_V2_Current_Nft_Marketplace_Auctions_Select_Column2[\"CurrentBidPrice\"] = \"current_bid_price\";\n  Nft_Marketplace_V2_Current_Nft_Marketplace_Auctions_Select_Column2[\"CurrentBidder\"] = \"current_bidder\";\n  Nft_Marketplace_V2_Current_Nft_Marketplace_Auctions_Select_Column2[\"EntryFunctionIdStr\"] = \"entry_function_id_str\";\n  Nft_Marketplace_V2_Current_Nft_Marketplace_Auctions_Select_Column2[\"ExpirationTime\"] = \"expiration_time\";\n  Nft_Marketplace_V2_Current_Nft_Marketplace_Auctions_Select_Column2[\"FeeScheduleId\"] = \"fee_schedule_id\";\n  Nft_Marketplace_V2_Current_Nft_Marketplace_Auctions_Select_Column2[\"IsDeleted\"] = \"is_deleted\";\n  Nft_Marketplace_V2_Current_Nft_Marketplace_Auctions_Select_Column2[\"LastTransactionTimestamp\"] = \"last_transaction_timestamp\";\n  Nft_Marketplace_V2_Current_Nft_Marketplace_Auctions_Select_Column2[\"LastTransactionVersion\"] = \"last_transaction_version\";\n  Nft_Marketplace_V2_Current_Nft_Marketplace_Auctions_Select_Column2[\"ListingId\"] = \"listing_id\";\n  Nft_Marketplace_V2_Current_Nft_Marketplace_Auctions_Select_Column2[\"Marketplace\"] = \"marketplace\";\n  Nft_Marketplace_V2_Current_Nft_Marketplace_Auctions_Select_Column2[\"Seller\"] = \"seller\";\n  Nft_Marketplace_V2_Current_Nft_Marketplace_Auctions_Select_Column2[\"StartingBidPrice\"] = \"starting_bid_price\";\n  Nft_Marketplace_V2_Current_Nft_Marketplace_Auctions_Select_Column2[\"TokenAmount\"] = \"token_amount\";\n  Nft_Marketplace_V2_Current_Nft_Marketplace_Auctions_Select_Column2[\"TokenDataId\"] = \"token_data_id\";\n  Nft_Marketplace_V2_Current_Nft_Marketplace_Auctions_Select_Column2[\"TokenStandard\"] = \"token_standard\";\n  return Nft_Marketplace_V2_Current_Nft_Marketplace_Auctions_Select_Column2;\n})(Nft_Marketplace_V2_Current_Nft_Marketplace_Auctions_Select_Column || {});\n\nvar Nft_Marketplace_V2_Current_Nft_Marketplace_Collection_Offers_Select_Column = /* @__PURE__ */(Nft_Marketplace_V2_Current_Nft_Marketplace_Collection_Offers_Select_Column2 => {\n  Nft_Marketplace_V2_Current_Nft_Marketplace_Collection_Offers_Select_Column2[\"Buyer\"] = \"buyer\";\n  Nft_Marketplace_V2_Current_Nft_Marketplace_Collection_Offers_Select_Column2[\"CoinType\"] = \"coin_type\";\n  Nft_Marketplace_V2_Current_Nft_Marketplace_Collection_Offers_Select_Column2[\"CollectionId\"] = \"collection_id\";\n  Nft_Marketplace_V2_Current_Nft_Marketplace_Collection_Offers_Select_Column2[\"CollectionOfferId\"] = \"collection_offer_id\";\n  Nft_Marketplace_V2_Current_Nft_Marketplace_Collection_Offers_Select_Column2[\"ContractAddress\"] = \"contract_address\";\n  Nft_Marketplace_V2_Current_Nft_Marketplace_Collection_Offers_Select_Column2[\"EntryFunctionIdStr\"] = \"entry_function_id_str\";\n  Nft_Marketplace_V2_Current_Nft_Marketplace_Collection_Offers_Select_Column2[\"ExpirationTime\"] = \"expiration_time\";\n  Nft_Marketplace_V2_Current_Nft_Marketplace_Collection_Offers_Select_Column2[\"FeeScheduleId\"] = \"fee_schedule_id\";\n  Nft_Marketplace_V2_Current_Nft_Marketplace_Collection_Offers_Select_Column2[\"IsDeleted\"] = \"is_deleted\";\n  Nft_Marketplace_V2_Current_Nft_Marketplace_Collection_Offers_Select_Column2[\"ItemPrice\"] = \"item_price\";\n  Nft_Marketplace_V2_Current_Nft_Marketplace_Collection_Offers_Select_Column2[\"LastTransactionTimestamp\"] = \"last_transaction_timestamp\";\n  Nft_Marketplace_V2_Current_Nft_Marketplace_Collection_Offers_Select_Column2[\"LastTransactionVersion\"] = \"last_transaction_version\";\n  Nft_Marketplace_V2_Current_Nft_Marketplace_Collection_Offers_Select_Column2[\"Marketplace\"] = \"marketplace\";\n  Nft_Marketplace_V2_Current_Nft_Marketplace_Collection_Offers_Select_Column2[\"RemainingTokenAmount\"] = \"remaining_token_amount\";\n  Nft_Marketplace_V2_Current_Nft_Marketplace_Collection_Offers_Select_Column2[\"TokenStandard\"] = \"token_standard\";\n  return Nft_Marketplace_V2_Current_Nft_Marketplace_Collection_Offers_Select_Column2;\n})(Nft_Marketplace_V2_Current_Nft_Marketplace_Collection_Offers_Select_Column || {});\n\nvar Nft_Marketplace_V2_Current_Nft_Marketplace_Listings_Select_Column = /* @__PURE__ */(Nft_Marketplace_V2_Current_Nft_Marketplace_Listings_Select_Column2 => {\n  Nft_Marketplace_V2_Current_Nft_Marketplace_Listings_Select_Column2[\"CoinType\"] = \"coin_type\";\n  Nft_Marketplace_V2_Current_Nft_Marketplace_Listings_Select_Column2[\"CollectionId\"] = \"collection_id\";\n  Nft_Marketplace_V2_Current_Nft_Marketplace_Listings_Select_Column2[\"ContractAddress\"] = \"contract_address\";\n  Nft_Marketplace_V2_Current_Nft_Marketplace_Listings_Select_Column2[\"EntryFunctionIdStr\"] = \"entry_function_id_str\";\n  Nft_Marketplace_V2_Current_Nft_Marketplace_Listings_Select_Column2[\"FeeScheduleId\"] = \"fee_schedule_id\";\n  Nft_Marketplace_V2_Current_Nft_Marketplace_Listings_Select_Column2[\"IsDeleted\"] = \"is_deleted\";\n  Nft_Marketplace_V2_Current_Nft_Marketplace_Listings_Select_Column2[\"LastTransactionTimestamp\"] = \"last_transaction_timestamp\";\n  Nft_Marketplace_V2_Current_Nft_Marketplace_Listings_Select_Column2[\"LastTransactionVersion\"] = \"last_transaction_version\";\n  Nft_Marketplace_V2_Current_Nft_Marketplace_Listings_Select_Column2[\"ListingId\"] = \"listing_id\";\n  Nft_Marketplace_V2_Current_Nft_Marketplace_Listings_Select_Column2[\"Marketplace\"] = \"marketplace\";\n  Nft_Marketplace_V2_Current_Nft_Marketplace_Listings_Select_Column2[\"Price\"] = \"price\";\n  Nft_Marketplace_V2_Current_Nft_Marketplace_Listings_Select_Column2[\"Seller\"] = \"seller\";\n  Nft_Marketplace_V2_Current_Nft_Marketplace_Listings_Select_Column2[\"TokenAmount\"] = \"token_amount\";\n  Nft_Marketplace_V2_Current_Nft_Marketplace_Listings_Select_Column2[\"TokenDataId\"] = \"token_data_id\";\n  Nft_Marketplace_V2_Current_Nft_Marketplace_Listings_Select_Column2[\"TokenStandard\"] = \"token_standard\";\n  return Nft_Marketplace_V2_Current_Nft_Marketplace_Listings_Select_Column2;\n})(Nft_Marketplace_V2_Current_Nft_Marketplace_Listings_Select_Column || {});\n\nvar Nft_Marketplace_V2_Current_Nft_Marketplace_Token_Offers_Select_Column = /* @__PURE__ */(Nft_Marketplace_V2_Current_Nft_Marketplace_Token_Offers_Select_Column2 => {\n  Nft_Marketplace_V2_Current_Nft_Marketplace_Token_Offers_Select_Column2[\"Buyer\"] = \"buyer\";\n  Nft_Marketplace_V2_Current_Nft_Marketplace_Token_Offers_Select_Column2[\"CoinType\"] = \"coin_type\";\n  Nft_Marketplace_V2_Current_Nft_Marketplace_Token_Offers_Select_Column2[\"CollectionId\"] = \"collection_id\";\n  Nft_Marketplace_V2_Current_Nft_Marketplace_Token_Offers_Select_Column2[\"ContractAddress\"] = \"contract_address\";\n  Nft_Marketplace_V2_Current_Nft_Marketplace_Token_Offers_Select_Column2[\"EntryFunctionIdStr\"] = \"entry_function_id_str\";\n  Nft_Marketplace_V2_Current_Nft_Marketplace_Token_Offers_Select_Column2[\"ExpirationTime\"] = \"expiration_time\";\n  Nft_Marketplace_V2_Current_Nft_Marketplace_Token_Offers_Select_Column2[\"FeeScheduleId\"] = \"fee_schedule_id\";\n  Nft_Marketplace_V2_Current_Nft_Marketplace_Token_Offers_Select_Column2[\"IsDeleted\"] = \"is_deleted\";\n  Nft_Marketplace_V2_Current_Nft_Marketplace_Token_Offers_Select_Column2[\"LastTransactionTimestamp\"] = \"last_transaction_timestamp\";\n  Nft_Marketplace_V2_Current_Nft_Marketplace_Token_Offers_Select_Column2[\"LastTransactionVersion\"] = \"last_transaction_version\";\n  Nft_Marketplace_V2_Current_Nft_Marketplace_Token_Offers_Select_Column2[\"Marketplace\"] = \"marketplace\";\n  Nft_Marketplace_V2_Current_Nft_Marketplace_Token_Offers_Select_Column2[\"OfferId\"] = \"offer_id\";\n  Nft_Marketplace_V2_Current_Nft_Marketplace_Token_Offers_Select_Column2[\"Price\"] = \"price\";\n  Nft_Marketplace_V2_Current_Nft_Marketplace_Token_Offers_Select_Column2[\"TokenAmount\"] = \"token_amount\";\n  Nft_Marketplace_V2_Current_Nft_Marketplace_Token_Offers_Select_Column2[\"TokenDataId\"] = \"token_data_id\";\n  Nft_Marketplace_V2_Current_Nft_Marketplace_Token_Offers_Select_Column2[\"TokenStandard\"] = \"token_standard\";\n  return Nft_Marketplace_V2_Current_Nft_Marketplace_Token_Offers_Select_Column2;\n})(Nft_Marketplace_V2_Current_Nft_Marketplace_Token_Offers_Select_Column || {});\n\nvar Nft_Marketplace_V2_Nft_Marketplace_Activities_Select_Column = /* @__PURE__ */(Nft_Marketplace_V2_Nft_Marketplace_Activities_Select_Column2 => {\n  Nft_Marketplace_V2_Nft_Marketplace_Activities_Select_Column2[\"Buyer\"] = \"buyer\";\n  Nft_Marketplace_V2_Nft_Marketplace_Activities_Select_Column2[\"CoinType\"] = \"coin_type\";\n  Nft_Marketplace_V2_Nft_Marketplace_Activities_Select_Column2[\"CollectionId\"] = \"collection_id\";\n  Nft_Marketplace_V2_Nft_Marketplace_Activities_Select_Column2[\"CollectionName\"] = \"collection_name\";\n  Nft_Marketplace_V2_Nft_Marketplace_Activities_Select_Column2[\"ContractAddress\"] = \"contract_address\";\n  Nft_Marketplace_V2_Nft_Marketplace_Activities_Select_Column2[\"CreatorAddress\"] = \"creator_address\";\n  Nft_Marketplace_V2_Nft_Marketplace_Activities_Select_Column2[\"EntryFunctionIdStr\"] = \"entry_function_id_str\";\n  Nft_Marketplace_V2_Nft_Marketplace_Activities_Select_Column2[\"EventIndex\"] = \"event_index\";\n  Nft_Marketplace_V2_Nft_Marketplace_Activities_Select_Column2[\"EventType\"] = \"event_type\";\n  Nft_Marketplace_V2_Nft_Marketplace_Activities_Select_Column2[\"FeeScheduleId\"] = \"fee_schedule_id\";\n  Nft_Marketplace_V2_Nft_Marketplace_Activities_Select_Column2[\"Marketplace\"] = \"marketplace\";\n  Nft_Marketplace_V2_Nft_Marketplace_Activities_Select_Column2[\"OfferOrListingId\"] = \"offer_or_listing_id\";\n  Nft_Marketplace_V2_Nft_Marketplace_Activities_Select_Column2[\"Price\"] = \"price\";\n  Nft_Marketplace_V2_Nft_Marketplace_Activities_Select_Column2[\"PropertyVersion\"] = \"property_version\";\n  Nft_Marketplace_V2_Nft_Marketplace_Activities_Select_Column2[\"Seller\"] = \"seller\";\n  Nft_Marketplace_V2_Nft_Marketplace_Activities_Select_Column2[\"TokenAmount\"] = \"token_amount\";\n  Nft_Marketplace_V2_Nft_Marketplace_Activities_Select_Column2[\"TokenDataId\"] = \"token_data_id\";\n  Nft_Marketplace_V2_Nft_Marketplace_Activities_Select_Column2[\"TokenName\"] = \"token_name\";\n  Nft_Marketplace_V2_Nft_Marketplace_Activities_Select_Column2[\"TokenStandard\"] = \"token_standard\";\n  Nft_Marketplace_V2_Nft_Marketplace_Activities_Select_Column2[\"TransactionTimestamp\"] = \"transaction_timestamp\";\n  Nft_Marketplace_V2_Nft_Marketplace_Activities_Select_Column2[\"TransactionVersion\"] = \"transaction_version\";\n  return Nft_Marketplace_V2_Nft_Marketplace_Activities_Select_Column2;\n})(Nft_Marketplace_V2_Nft_Marketplace_Activities_Select_Column || {});\n\nvar Nft_Metadata_Crawler_Parsed_Asset_Uris_Select_Column = /* @__PURE__ */(Nft_Metadata_Crawler_Parsed_Asset_Uris_Select_Column2 => {\n  Nft_Metadata_Crawler_Parsed_Asset_Uris_Select_Column2[\"AssetUri\"] = \"asset_uri\";\n  Nft_Metadata_Crawler_Parsed_Asset_Uris_Select_Column2[\"CdnAnimationUri\"] = \"cdn_animation_uri\";\n  Nft_Metadata_Crawler_Parsed_Asset_Uris_Select_Column2[\"CdnImageUri\"] = \"cdn_image_uri\";\n  Nft_Metadata_Crawler_Parsed_Asset_Uris_Select_Column2[\"CdnJsonUri\"] = \"cdn_json_uri\";\n  Nft_Metadata_Crawler_Parsed_Asset_Uris_Select_Column2[\"RawAnimationUri\"] = \"raw_animation_uri\";\n  Nft_Metadata_Crawler_Parsed_Asset_Uris_Select_Column2[\"RawImageUri\"] = \"raw_image_uri\";\n  return Nft_Metadata_Crawler_Parsed_Asset_Uris_Select_Column2;\n})(Nft_Metadata_Crawler_Parsed_Asset_Uris_Select_Column || {});\n\nvar Num_Active_Delegator_Per_Pool_Select_Column = /* @__PURE__ */(Num_Active_Delegator_Per_Pool_Select_Column2 => {\n  Num_Active_Delegator_Per_Pool_Select_Column2[\"NumActiveDelegator\"] = \"num_active_delegator\";\n  Num_Active_Delegator_Per_Pool_Select_Column2[\"PoolAddress\"] = \"pool_address\";\n  return Num_Active_Delegator_Per_Pool_Select_Column2;\n})(Num_Active_Delegator_Per_Pool_Select_Column || {});\n\nvar Order_By = /* @__PURE__ */(Order_By2 => {\n  Order_By2[\"Asc\"] = \"asc\";\n  Order_By2[\"AscNullsFirst\"] = \"asc_nulls_first\";\n  Order_By2[\"AscNullsLast\"] = \"asc_nulls_last\";\n  Order_By2[\"Desc\"] = \"desc\";\n  Order_By2[\"DescNullsFirst\"] = \"desc_nulls_first\";\n  Order_By2[\"DescNullsLast\"] = \"desc_nulls_last\";\n  return Order_By2;\n})(Order_By || {});\n\nvar Processor_Status_Select_Column = /* @__PURE__ */(Processor_Status_Select_Column2 => {\n  Processor_Status_Select_Column2[\"LastSuccessVersion\"] = \"last_success_version\";\n  Processor_Status_Select_Column2[\"LastUpdated\"] = \"last_updated\";\n  Processor_Status_Select_Column2[\"Processor\"] = \"processor\";\n  return Processor_Status_Select_Column2;\n})(Processor_Status_Select_Column || {});\n\nvar Proposal_Votes_Select_Column = /* @__PURE__ */(Proposal_Votes_Select_Column2 => {\n  Proposal_Votes_Select_Column2[\"NumVotes\"] = \"num_votes\";\n  Proposal_Votes_Select_Column2[\"ProposalId\"] = \"proposal_id\";\n  Proposal_Votes_Select_Column2[\"ShouldPass\"] = \"should_pass\";\n  Proposal_Votes_Select_Column2[\"StakingPoolAddress\"] = \"staking_pool_address\";\n  Proposal_Votes_Select_Column2[\"TransactionTimestamp\"] = \"transaction_timestamp\";\n  Proposal_Votes_Select_Column2[\"TransactionVersion\"] = \"transaction_version\";\n  Proposal_Votes_Select_Column2[\"VoterAddress\"] = \"voter_address\";\n  return Proposal_Votes_Select_Column2;\n})(Proposal_Votes_Select_Column || {});\n\nvar Table_Items_Select_Column = /* @__PURE__ */(Table_Items_Select_Column2 => {\n  Table_Items_Select_Column2[\"DecodedKey\"] = \"decoded_key\";\n  Table_Items_Select_Column2[\"DecodedValue\"] = \"decoded_value\";\n  Table_Items_Select_Column2[\"Key\"] = \"key\";\n  Table_Items_Select_Column2[\"TableHandle\"] = \"table_handle\";\n  Table_Items_Select_Column2[\"TransactionVersion\"] = \"transaction_version\";\n  Table_Items_Select_Column2[\"WriteSetChangeIndex\"] = \"write_set_change_index\";\n  return Table_Items_Select_Column2;\n})(Table_Items_Select_Column || {});\n\nvar Table_Metadatas_Select_Column = /* @__PURE__ */(Table_Metadatas_Select_Column2 => {\n  Table_Metadatas_Select_Column2[\"Handle\"] = \"handle\";\n  Table_Metadatas_Select_Column2[\"KeyType\"] = \"key_type\";\n  Table_Metadatas_Select_Column2[\"ValueType\"] = \"value_type\";\n  return Table_Metadatas_Select_Column2;\n})(Table_Metadatas_Select_Column || {});\n\nvar Token_Activities_Select_Column = /* @__PURE__ */(Token_Activities_Select_Column2 => {\n  Token_Activities_Select_Column2[\"CoinAmount\"] = \"coin_amount\";\n  Token_Activities_Select_Column2[\"CoinType\"] = \"coin_type\";\n  Token_Activities_Select_Column2[\"CollectionDataIdHash\"] = \"collection_data_id_hash\";\n  Token_Activities_Select_Column2[\"CollectionName\"] = \"collection_name\";\n  Token_Activities_Select_Column2[\"CreatorAddress\"] = \"creator_address\";\n  Token_Activities_Select_Column2[\"EventAccountAddress\"] = \"event_account_address\";\n  Token_Activities_Select_Column2[\"EventCreationNumber\"] = \"event_creation_number\";\n  Token_Activities_Select_Column2[\"EventIndex\"] = \"event_index\";\n  Token_Activities_Select_Column2[\"EventSequenceNumber\"] = \"event_sequence_number\";\n  Token_Activities_Select_Column2[\"FromAddress\"] = \"from_address\";\n  Token_Activities_Select_Column2[\"Name\"] = \"name\";\n  Token_Activities_Select_Column2[\"PropertyVersion\"] = \"property_version\";\n  Token_Activities_Select_Column2[\"ToAddress\"] = \"to_address\";\n  Token_Activities_Select_Column2[\"TokenAmount\"] = \"token_amount\";\n  Token_Activities_Select_Column2[\"TokenDataIdHash\"] = \"token_data_id_hash\";\n  Token_Activities_Select_Column2[\"TransactionTimestamp\"] = \"transaction_timestamp\";\n  Token_Activities_Select_Column2[\"TransactionVersion\"] = \"transaction_version\";\n  Token_Activities_Select_Column2[\"TransferType\"] = \"transfer_type\";\n  return Token_Activities_Select_Column2;\n})(Token_Activities_Select_Column || {});\n\nvar Token_Activities_V2_Select_Column = /* @__PURE__ */(Token_Activities_V2_Select_Column2 => {\n  Token_Activities_V2_Select_Column2[\"AfterValue\"] = \"after_value\";\n  Token_Activities_V2_Select_Column2[\"BeforeValue\"] = \"before_value\";\n  Token_Activities_V2_Select_Column2[\"EntryFunctionIdStr\"] = \"entry_function_id_str\";\n  Token_Activities_V2_Select_Column2[\"EventAccountAddress\"] = \"event_account_address\";\n  Token_Activities_V2_Select_Column2[\"EventIndex\"] = \"event_index\";\n  Token_Activities_V2_Select_Column2[\"FromAddress\"] = \"from_address\";\n  Token_Activities_V2_Select_Column2[\"IsFungibleV2\"] = \"is_fungible_v2\";\n  Token_Activities_V2_Select_Column2[\"PropertyVersionV1\"] = \"property_version_v1\";\n  Token_Activities_V2_Select_Column2[\"ToAddress\"] = \"to_address\";\n  Token_Activities_V2_Select_Column2[\"TokenAmount\"] = \"token_amount\";\n  Token_Activities_V2_Select_Column2[\"TokenDataId\"] = \"token_data_id\";\n  Token_Activities_V2_Select_Column2[\"TokenStandard\"] = \"token_standard\";\n  Token_Activities_V2_Select_Column2[\"TransactionTimestamp\"] = \"transaction_timestamp\";\n  Token_Activities_V2_Select_Column2[\"TransactionVersion\"] = \"transaction_version\";\n  Token_Activities_V2_Select_Column2[\"Type\"] = \"type\";\n  return Token_Activities_V2_Select_Column2;\n})(Token_Activities_V2_Select_Column || {});\n\nvar Token_Datas_Select_Column = /* @__PURE__ */(Token_Datas_Select_Column2 => {\n  Token_Datas_Select_Column2[\"CollectionDataIdHash\"] = \"collection_data_id_hash\";\n  Token_Datas_Select_Column2[\"CollectionName\"] = \"collection_name\";\n  Token_Datas_Select_Column2[\"CreatorAddress\"] = \"creator_address\";\n  Token_Datas_Select_Column2[\"DefaultProperties\"] = \"default_properties\";\n  Token_Datas_Select_Column2[\"Description\"] = \"description\";\n  Token_Datas_Select_Column2[\"DescriptionMutable\"] = \"description_mutable\";\n  Token_Datas_Select_Column2[\"LargestPropertyVersion\"] = \"largest_property_version\";\n  Token_Datas_Select_Column2[\"Maximum\"] = \"maximum\";\n  Token_Datas_Select_Column2[\"MaximumMutable\"] = \"maximum_mutable\";\n  Token_Datas_Select_Column2[\"MetadataUri\"] = \"metadata_uri\";\n  Token_Datas_Select_Column2[\"Name\"] = \"name\";\n  Token_Datas_Select_Column2[\"PayeeAddress\"] = \"payee_address\";\n  Token_Datas_Select_Column2[\"PropertiesMutable\"] = \"properties_mutable\";\n  Token_Datas_Select_Column2[\"RoyaltyMutable\"] = \"royalty_mutable\";\n  Token_Datas_Select_Column2[\"RoyaltyPointsDenominator\"] = \"royalty_points_denominator\";\n  Token_Datas_Select_Column2[\"RoyaltyPointsNumerator\"] = \"royalty_points_numerator\";\n  Token_Datas_Select_Column2[\"Supply\"] = \"supply\";\n  Token_Datas_Select_Column2[\"TokenDataIdHash\"] = \"token_data_id_hash\";\n  Token_Datas_Select_Column2[\"TransactionTimestamp\"] = \"transaction_timestamp\";\n  Token_Datas_Select_Column2[\"TransactionVersion\"] = \"transaction_version\";\n  Token_Datas_Select_Column2[\"UriMutable\"] = \"uri_mutable\";\n  return Token_Datas_Select_Column2;\n})(Token_Datas_Select_Column || {});\n\nvar Token_Ownerships_Select_Column = /* @__PURE__ */(Token_Ownerships_Select_Column2 => {\n  Token_Ownerships_Select_Column2[\"Amount\"] = \"amount\";\n  Token_Ownerships_Select_Column2[\"CollectionDataIdHash\"] = \"collection_data_id_hash\";\n  Token_Ownerships_Select_Column2[\"CollectionName\"] = \"collection_name\";\n  Token_Ownerships_Select_Column2[\"CreatorAddress\"] = \"creator_address\";\n  Token_Ownerships_Select_Column2[\"Name\"] = \"name\";\n  Token_Ownerships_Select_Column2[\"OwnerAddress\"] = \"owner_address\";\n  Token_Ownerships_Select_Column2[\"PropertyVersion\"] = \"property_version\";\n  Token_Ownerships_Select_Column2[\"TableHandle\"] = \"table_handle\";\n  Token_Ownerships_Select_Column2[\"TableType\"] = \"table_type\";\n  Token_Ownerships_Select_Column2[\"TokenDataIdHash\"] = \"token_data_id_hash\";\n  Token_Ownerships_Select_Column2[\"TransactionTimestamp\"] = \"transaction_timestamp\";\n  Token_Ownerships_Select_Column2[\"TransactionVersion\"] = \"transaction_version\";\n  return Token_Ownerships_Select_Column2;\n})(Token_Ownerships_Select_Column || {});\n\nvar Tokens_Select_Column = /* @__PURE__ */(Tokens_Select_Column2 => {\n  Tokens_Select_Column2[\"CollectionDataIdHash\"] = \"collection_data_id_hash\";\n  Tokens_Select_Column2[\"CollectionName\"] = \"collection_name\";\n  Tokens_Select_Column2[\"CreatorAddress\"] = \"creator_address\";\n  Tokens_Select_Column2[\"Name\"] = \"name\";\n  Tokens_Select_Column2[\"PropertyVersion\"] = \"property_version\";\n  Tokens_Select_Column2[\"TokenDataIdHash\"] = \"token_data_id_hash\";\n  Tokens_Select_Column2[\"TokenProperties\"] = \"token_properties\";\n  Tokens_Select_Column2[\"TransactionTimestamp\"] = \"transaction_timestamp\";\n  Tokens_Select_Column2[\"TransactionVersion\"] = \"transaction_version\";\n  return Tokens_Select_Column2;\n})(Tokens_Select_Column || {});\n\nvar User_Transactions_Select_Column = /* @__PURE__ */(User_Transactions_Select_Column2 => {\n  User_Transactions_Select_Column2[\"BlockHeight\"] = \"block_height\";\n  User_Transactions_Select_Column2[\"EntryFunctionIdStr\"] = \"entry_function_id_str\";\n  User_Transactions_Select_Column2[\"Epoch\"] = \"epoch\";\n  User_Transactions_Select_Column2[\"ExpirationTimestampSecs\"] = \"expiration_timestamp_secs\";\n  User_Transactions_Select_Column2[\"GasUnitPrice\"] = \"gas_unit_price\";\n  User_Transactions_Select_Column2[\"MaxGasAmount\"] = \"max_gas_amount\";\n  User_Transactions_Select_Column2[\"ParentSignatureType\"] = \"parent_signature_type\";\n  User_Transactions_Select_Column2[\"Sender\"] = \"sender\";\n  User_Transactions_Select_Column2[\"SequenceNumber\"] = \"sequence_number\";\n  User_Transactions_Select_Column2[\"Timestamp\"] = \"timestamp\";\n  User_Transactions_Select_Column2[\"Version\"] = \"version\";\n  return User_Transactions_Select_Column2;\n})(User_Transactions_Select_Column || {});\n\nexport { APTOS_COIN, AccountSequenceNumber, Account_Transactions_Select_Column, Address_Events_Summary_Select_Column, Address_Version_From_Events_Select_Column, Address_Version_From_Move_Resources_Select_Column, AnsClient, ApiError, AptosAccount, AptosApiError, AptosClient, AptosToken, bcs_exports as BCS, Block_Metadata_Transactions_Select_Column, CKDPriv, COIN_TRANSFER, CoinClient, Coin_Activities_Select_Column, Coin_Balances_Select_Column, Coin_Infos_Select_Column, Coin_Supply_Select_Column, Collection_Datas_Select_Column, Current_Ans_Lookup_Select_Column, Current_Aptos_Names_Select_Column, Current_Coin_Balances_Select_Column, Current_Collection_Datas_Select_Column, Current_Collection_Ownership_V2_View_Select_Column, Current_Collections_V2_Select_Column, Current_Delegated_Staking_Pool_Balances_Select_Column, Current_Delegated_Voter_Select_Column, Current_Delegator_Balances_Select_Column, Current_Fungible_Asset_Balances_Select_Column, Current_Objects_Select_Column, Current_Staking_Pool_Voter_Select_Column, Current_Table_Items_Select_Column, Current_Token_Datas_Select_Column, Current_Token_Datas_V2_Select_Column, Current_Token_Ownerships_Select_Column, Current_Token_Ownerships_V2_Select_Column, Current_Token_Pending_Claims_Select_Column, Cursor_Ordering, Delegated_Staking_Activities_Select_Column, Delegated_Staking_Pools_Select_Column, Delegator_Distinct_Pool_Select_Column, Events_Select_Column, FailedTransactionError, FaucetClient, FungibleAssetClient, Fungible_Asset_Activities_Select_Column, Fungible_Asset_Metadata_Select_Column, HexString, IndexerClient, Indexer_Status_Select_Column, Ledger_Infos_Select_Column, Move_Resources_Select_Column, Network, NetworkToIndexerAPI, NetworkToNodeAPI, Nft_Marketplace_V2_Current_Nft_Marketplace_Auctions_Select_Column, Nft_Marketplace_V2_Current_Nft_Marketplace_Collection_Offers_Select_Column, Nft_Marketplace_V2_Current_Nft_Marketplace_Listings_Select_Column, Nft_Marketplace_V2_Current_Nft_Marketplace_Token_Offers_Select_Column, Nft_Marketplace_V2_Nft_Marketplace_Activities_Select_Column, Nft_Metadata_Crawler_Parsed_Asset_Uris_Select_Column, NodeAPIToNetwork, Num_Active_Delegator_Per_Pool_Select_Column, Order_By, Processor_Status_Select_Column, PropertyMap, PropertyValue, Proposal_Votes_Select_Column, Provider, TRANSFER_COINS, Table_Items_Select_Column, Table_Metadatas_Select_Column, TokenClient, token_types_exports as TokenTypes, Token_Activities_Select_Column, Token_Activities_V2_Select_Column, Token_Datas_Select_Column, Token_Ownerships_Select_Column, Tokens_Select_Column, TransactionBuilder, TransactionBuilderABI, TransactionBuilderEd25519, TransactionBuilderMultiEd25519, TransactionBuilderRemoteABI, TransactionWorker, TransactionWorkerEvents, aptos_types_exports as TxnBuilderTypes, TypeTagParser, generated_exports as Types, User_Transactions_Select_Column, WaitForTransactionError, ansContractsMap, aptosRequest, argToTransactionArgument, derivePath, deserializePropertyMap, deserializeValueBasedOnTypeTag, ensureBigInt, ensureBoolean, ensureNumber, get, getAddressFromAccountOrAddress, getMasterKeyFromSeed, getPropertyType, getPropertyValueRaw, getPublicKey, getSinglePropertyValueRaw, isValidPath, nameComponentPattern, namePattern, post, serializeArg };","map":{"version":3,"mappings":"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","names":["nacl","bip39","bytesToHex","sha256","sha3_256","sha3Hash","hmac","sha512","hexToBytes","pathRegex","replaceDerive","val","replace","HMAC_KEY","HARDENED_OFFSET","getMasterKeyFromSeed","seed","h","create","I","update","digest","IL","slice","IR","key","chainCode","CKDPriv","index","buffer","ArrayBuffer","DataView","setUint32","indexBytes","Uint8Array","zero","data","getPublicKey","privateKey","withZeroByte","keyPair","sign","fromSeed","signPk","secretKey","subarray","isValidPath","path","test","split","map","some","Number","isNaN","derivePath","offset","Error","segments","el","parseInt","reduce","parentKeys","segment","VERSION","sleep","timeMs","Promise","resolve","setTimeout","DEFAULT_VERSION_PATH_BASE","fixNodeUrl","nodeUrl","out","endsWith","substring","length","DEFAULT_MAX_GAS_AMOUNT","DEFAULT_TXN_EXP_SEC_FROM_NOW","DEFAULT_TXN_TIMEOUT_SEC","APTOS_COIN","CUSTOM_REQUEST_HEADER","Memoize","args","hashFunction","ttlMs","tags","target","propertyKey","descriptor","value","getNewFunction","get","MemoizeExpiring","clearCacheTagsMap","Map","clear","cleared","Set","tag","maps","mp","has","add","size","originalMethod","propMapName","Symbol","returnedValue","that","hasOwnProperty","Object","defineProperty","configurable","enumerable","writable","myMap","Array","isArray","push","set","hashKey","a","toString","join","apply","timestampKey","isExpired","timestamp","Date","now","aptosClient","AptosApiError","constructor","request","response","message","name","url","status","statusText","errors","method","body","contentType","params","overrides","headers","HEADERS","TOKEN","Authorization","aptosRequest","options","endpoint","fullEndpoint","result","config","errorMessage","post","paginateWithCursor","cursor","requestParams","start","originMethod","NetworkToIndexerAPI","mainnet","testnet","devnet","NetworkToNodeAPI","local","NodeAPIToNetwork","Network","HexString","fromUint8Array","arr","hexString","startsWith","hex","noPrefix","toShortString","trimmed","toUint8Array","from","__export","AccountAddress","AccountAuthenticator","AccountAuthenticatorEd25519","AccountAuthenticatorMultiEd25519","ArgumentABI","AuthenticationKey","ChainId","ChangeSet","Ed25519PublicKey","Ed25519Signature","EntryFunction","EntryFunctionABI","FeePayerRawTransaction","Identifier","Module","ModuleId","MultiAgentRawTransaction","MultiEd25519PublicKey","MultiEd25519Signature","MultiSig","MultiSigTransactionPayload","RawTransaction","RawTransactionWithData","RotationProofChallenge","Script","ScriptABI","SignedTransaction","StructTag","Transaction","TransactionArgument","TransactionArgumentAddress","TransactionArgumentBool","TransactionArgumentU128","TransactionArgumentU16","TransactionArgumentU256","TransactionArgumentU32","TransactionArgumentU64","TransactionArgumentU8","TransactionArgumentU8Vector","TransactionAuthenticator","TransactionAuthenticatorEd25519","TransactionAuthenticatorFeePayer","TransactionAuthenticatorMultiAgent","TransactionAuthenticatorMultiEd25519","TransactionPayload","TransactionPayloadEntryFunction","TransactionPayloadMultisig","TransactionPayloadScript","TransactionScriptABI","TypeArgumentABI","TypeTag","TypeTagAddress","TypeTagBool","TypeTagParser","TypeTagParserError","TypeTagSigner","TypeTagStruct","TypeTagU128","TypeTagU16","TypeTagU256","TypeTagU32","TypeTagU64","TypeTagU8","TypeTagVector","UserTransaction","WriteSet","objectStructTag","optionStructTag","stringStructTag","Deserializer","Serializer","bcsSerializeBool","bcsSerializeBytes","bcsSerializeFixedBytes","bcsSerializeStr","bcsSerializeU128","bcsSerializeU16","bcsSerializeU256","bcsSerializeU32","bcsSerializeU8","bcsSerializeUint64","bcsToBytes","deserializeVector","serializeVector","serializeVectorWithFunc","MAX_U8_NUMBER","MAX_U16_NUMBER","MAX_U32_NUMBER","MAX_U64_BIG_INT","BigInt","MAX_U128_BIG_INT","MAX_U256_BIG_INT","ensureBufferWillHandleSize","bytes","byteLength","newBuffer","serialize","values","serializeWithFunction","fn","bytesLength","dv","serializeStr","textEncoder","TextEncoder","serializeBytes","encode","serializeU32AsUleb128","serializeFixedBytes","serializeBool","byteValue","serializeU8","serializeU16","prototype","setUint16","serializeU32","serializeU64","low","high","serializeU128","serializeU256","valueArray","getBytes","__decorateClass","checkNumberRange","minValue","maxValue","childFunction","deco","valueBigInt","read","deserializeStr","deserializeBytes","textDecoder","TextDecoder","decode","len","deserializeUleb128AsU32","deserializeFixedBytes","deserializeBool","bool","deserializeU8","getUint8","deserializeU16","getUint16","deserializeU32","getUint32","deserializeU64","deserializeU128","deserializeU256","shift","byte","serializer","forEach","item","func","f","call","deserializer","cls","list","i","deserialize","_AccountAddress","address","LENGTH","addr","ensure","addressBytes","res","toHexString","lowercaseAddress","toLowerCase","addressWithoutPrefix","addressWithPadding","padStart","CORE_CODE_ADDRESS","fromHex","_Ed25519PublicKey","toBytes","_Ed25519Signature","MAX_SIGNATURES_SUPPORTED","public_keys","threshold","k","keys","begin","_MultiEd25519Signature","signatures","bitmap","BITMAP_LEN","bits","firstBitInByte","dupCheckSet","bit","byteOffset","Math","floor","sigs","load","public_key","signature","sender","secondary_signer_addresses","secondary_signers","fee_payer","authenticator","_deserializer","isStringTypeTag","module_name","type_args","structTag","typeTagStruct","parseTypeTag","moduleName","typeArgs","typeArg","bail","isWhiteSpace","c","match","isValidAlphabetic","isGeneric","nextToken","tagStr","pos","char","tokenize","tokens","token","typeTags","consume","targetToken","consumeWholeGeneric","parseCommaList","endToken","allowTraillingComma","tokenTy","tokenVal","moduleTokenTy","module","nameTokenTy","tyTags","idx","sequence_number","payload","max_gas_amount","gas_unit_price","expiration_timestamp_secs","chain_id","code","ty_args","function_name","fromStr","natural","transaction_payload","multisig_address","payloadPresent","moduleId","parts","raw_txn","rawTxn","secondarySignerAddresses","fee_payer_address","feePayerAddress","getHashSalt","hash","type_tag","typeTag","doc","tyArgs","_AuthenticationKey","publicKey","pubKeyBytes","MULTI_ED25519_SCHEME","ED25519_SCHEME","derivedAddress","DERIVE_RESOURCE_ACCOUNT_SCHEME","accountAddress","structName","sequenceNumber","originator","currentAuthKey","newPublicKey","_AptosAccount","obj","privateKeyHex","mnemonics","normalizeMnemonics","trim","part","privateKeyBytes","signingKey","authKey","pubKey","fromEd25519PublicKey","sourceAddress","source","creatorAddress","collectionName","signBuffer","detached","signHexString","toSign","verifySignature","rawMessage","rawSignature","verify","toPrivateKeyObject","publicKeyHex","AptosAccount","getAddressFromAccountOrAddress","accountOrAddress","CurrentTokenOwnershipFieldsFragmentDoc","TokenDataFieldsFragmentDoc","CollectionDataFieldsFragmentDoc","TokenActivitiesFieldsFragmentDoc","GetAccountCoinsDataCount","GetAccountCoinsData","GetAccountCurrentTokens","GetAccountTokensCount","GetAccountTransactionsCount","GetAccountTransactionsData","GetCollectionData","GetCollectionsWithOwnedTokens","GetCurrentObjects","GetDelegatedStakingActivities","GetIndexerLedgerInfo","GetNumberOfDelegators","GetOwnedTokens","GetOwnedTokensByTokenData","GetTokenActivities","GetTokenActivitiesCount","GetTokenCurrentOwnerData","GetTokenData","GetTokenOwnedFromCollection","GetTokenOwnersData","GetTopUserTransactions","GetUserTransactions","assertType","types","includes","ensureBoolean","ensureNumber","ensureBigInt","serializeArg","argVal","argType","serializeArgInner","depth","serializeAddress","serializeStruct","arg","structType","serializeOption","argToTransactionArgument","RAW_TRANSACTION_SALT","RAW_TRANSACTION_WITH_DATA_SALT","TransactionBuilder","signingFunction","rawTxnBuilder","build","ty_tags","prefix","mergedArray","TransactionBuilderEd25519","rawToSigned","signingMessage","getSigningMessage","TransactionBuilderMultiEd25519","TransactionBuilderABI","abis","builderConfig","abiMap","abi","scriptABI","funcABI","maxGasAmount","expSecFromNow","abiArgs","setSequenceNumber","seqNumber","buildTransactionPayload","ty_arg","bcsArgs","toBCSArgs","scriptArgs","toTransactionArguments","gasUnitPrice","chainId","senderAccount","expTimestampSec","TransactionBuilderRemoteABI","modules","getAccountModules","flatMap","exposed_functions","filter","ef","is_entry","fullName","normlize","s","funcNameParts","fetchABI","funcAbi","param","typeArgABIs","abiArg","entryFunctionABI","generic_type_params","_","rest","senderAddress","gas_estimate","all","getAccount","getChainId","estimateGasPrice","builderABI","_AptosClient","doNotFixNodeUrl","query","limit","ledger_version","ledgerVersion","resourceType","accountFrom","txnBuilder","sigHexStr","aptos_types_exports","_signingMessage","invalidSigBytes","builder","function","type_arguments","arguments","feePayer","secondarySignerAccounts","generateTransaction","signers","signer","feePayerTxn","feePayerTransaction","senderAuthenticator","feePayerAuthenticator","additionalSignersAuthenticators","txAuthenticatorFeePayer","bcsTxn","transactionRes","submitSignedBCSTransaction","signerSignature","signerAuthenticator","rawTransaction","generateBCSTransaction","creationNumber","eventHandleStruct","fieldName","signedTxn","accountOrPubkey","generateBCSSimulation","createBitmap","submitBCSSimulation","bcsBody","queryParams","estimate_gas_unit_price","_a","estimateGasUnitPrice","estimate_max_gas_amount","_b","estimateMaxGasAmount","estimate_prioritized_gas_unit_price","_c","estimatePrioritizedGasUnitPrice","txnHash","txnVersion","getTransactionByHash","type","e","extraArgs","timeoutSecs","checkSuccess","isPending","count","lastTxn","isApiError","ApiError","isRequestError","WaitForTransactionError","success","FailedTransactionError","vm_status","waitForTransactionWithResult","getLedgerInfo","handle","gasEstimate","providedSequenceNumber","expireTimestamp","generateRawTransaction","pendingTransaction","transaction","packageMetadata","codeSerializer","generateSignSubmitTransaction","forAccount","resources","getAccountResources","accountResource","find","r","balance","coin","toPrivateKeyBytes","authentication_key","helperAccount","challenge","challengeHex","proofSignedByCurrentPrivateKey","proofSignedByNewPrivateKey","addressOrAuthKey","resource","getAccountResource","address_map","origAddress","getTableItem","key_type","value_type","blockHeight","withTransactions","with_transactions","version","clearCache","AptosClient","parseApiError","lastSubmittedTransaction","errorCode","vmErrorCode","wrapper","JSON","stringify","error_code","vm_error_code","IndexerClient","graphqlQuery","WITH_CREDENTIALS","extensions","queryIndexer","ownerAddress","validateAddress","variables","tokenAddress","whereCondition","token_data_id","_eq","tokenStandard","token_standard","where_condition","order_by","orderBy","token_id","owner_address","amount","_gt","propertyVersion","property_version_v1","collectionAddress","ownerHexAddress","collectionHexAddress","current_token_data","collection_id","getCollectionAddress","getTokenOwnedFromCollectionAddress","collection_name","creator_address","getCollectionData","current_collections_v2","current_collection","account_address","_lte","startVersion","delegatorAddress","poolAddress","delegator","pool","Provider","network","fullNodeUrl","indexerUrl","isCustomEndpoints","fullnodeUrl","indexerClient","applyMixin","targetClass","baseClass","baseClassProp","getOwnPropertyNames","propertyName","propertyDescriptor","getOwnPropertyDescriptor","PropertyValue","PropertyMap","setProperty","getPropertyType","typ","getPropertyValueRaw","results","error","getSinglePropertyValueRaw","deserializePropertyMap","rawPropertyMap","entries","pm","prop","newValue","deserializeValueBasedOnTypeTag","pv","de","Token","TokenData","collection","description","maximum","supply","uri","default_properties","mutability_config","id","token_properties","TokenClient","account","maxAmount","max","royalty_payee_address","royalty_points_denominator","royalty_points_numerator","property_keys","property_values","property_types","receiver","creator","property_version","multiAgentTxn","senderSignature","receiverSignature","receiverAuthenticator","multiAgentAuthenticator","feePayerSignature","optIn","tokenName","PropertyVersion","owner","tokenOwner","collection_data","getCollectionTableItemRequest","collectionTable","creatorHex","token_data","tokenDataId","getTokenTableItemRequest","rawTokenData","getTokenForAccount","tokenId","tokenStore","rawToken","FungibleAssetClient","provider","assetType","fungibleAssetMetadataAddress","recipient","generateTransfer","signAndSubmitTransaction","view","PropertyTypeMap","BOOLEAN","U8","U16","U32","U64","U128","U256","ADDRESS","VECTOR","STRING","AptosToken","tokenType","funcName","maxSupply","submitTransaction","mutableDescription","mutableRoyalty","mutableURI","_d","mutableTokenDescription","_e","mutableTokenName","_f","mutableTokenProperties","_g","mutableTokenURI","_h","tokensBurnableByCreator","_i","tokensFreezableByCreator","_j","royaltyNumerator","_k","royaltyDenominator","propertyKeys","propertyTypes","propertyValues","propertyType","propertyValue","isFungibleToken","isFungible","tokenData","getTokenData","current_token_datas_v2","is_fungible_v2","fungibleAsset","transfer","transferTokenOwnership","objectId","objectType","TRANSFER_COINS","COIN_TRANSFER","CoinClient","to","isTypeTag","coinType","isValid","console","warn","coinTypeToTransfer","createReceiverIfMissing","toAddress","getPrimaryBalance","FaucetClient","faucetUrl","promises","tnxHash","waitForTransaction","ansContractsMap","nameComponentPattern","namePattern","RegExp","AnsClient","contractAddress","ansResource","registry","domainsTableItemRequest","subdomain_name","vec","domain_name","domain","subdomain","groups","registration","getRegistrationForSubdomainName","getRegistrationForDomainName","domainName","years","ceil","expirationTimestampSeconds","subdomainName","subdomainRegistration","domainRegistration","actualExpirationTimestampSeconds","standardizeAddress","target_address","expiration_time_sec","AccountSequenceNumber","maxWaitTime","maximumInFlight","sleepTime","lock","nextNumber","lastUncommintedNumber","currentNumber","initialize","startTime","EventEmitter","AsyncQueue","queue","resolveMap","counter","cancelled","enqueue","delete","promise","isEmpty","cancel","reject","AsyncQueueCancelledError","isCancelled","promiseFulfilledStatus","TransactionWorkerEvents","TransactionWorker","taskQueue","started","accountSequnceNumber","transactionsQueue","nextSequenceNumber","generateNextTransaction","outstandingTransactions","log","awaitingTransactions","sequenceNumbers","dequeue","sentTransactions","allSettled","sentTransaction","emit","checkTransaction","reason","waitFor","executedTransaction","executedTransactions","signedTransaction","task","submitNextTransaction","processTransactions","run","stop","AptosErrorCode","MoveFunctionVisibility","RoleType","Account_Transactions_Select_Column","Address_Events_Summary_Select_Column","Address_Version_From_Events_Select_Column","Address_Version_From_Move_Resources_Select_Column","Block_Metadata_Transactions_Select_Column","Coin_Activities_Select_Column","Coin_Balances_Select_Column","Coin_Infos_Select_Column","Coin_Supply_Select_Column","Collection_Datas_Select_Column","Current_Ans_Lookup_Select_Column","Current_Aptos_Names_Select_Column","Current_Coin_Balances_Select_Column","Current_Collection_Datas_Select_Column","Current_Collection_Ownership_V2_View_Select_Column","Current_Collections_V2_Select_Column","Current_Delegated_Staking_Pool_Balances_Select_Column","Current_Delegated_Voter_Select_Column","Current_Delegator_Balances_Select_Column","Current_Fungible_Asset_Balances_Select_Column","Current_Objects_Select_Column","Current_Staking_Pool_Voter_Select_Column","Current_Table_Items_Select_Column","Current_Token_Datas_Select_Column","Current_Token_Datas_V2_Select_Column","Current_Token_Ownerships_Select_Column","Current_Token_Ownerships_V2_Select_Column","Current_Token_Pending_Claims_Select_Column","Cursor_Ordering","Delegated_Staking_Activities_Select_Column","Delegated_Staking_Pools_Select_Column","Delegator_Distinct_Pool_Select_Column","Events_Select_Column","Fungible_Asset_Activities_Select_Column","Fungible_Asset_Metadata_Select_Column","Indexer_Status_Select_Column","Ledger_Infos_Select_Column","Move_Resources_Select_Column","Nft_Marketplace_V2_Current_Nft_Marketplace_Auctions_Select_Column","Nft_Marketplace_V2_Current_Nft_Marketplace_Collection_Offers_Select_Column","Nft_Marketplace_V2_Current_Nft_Marketplace_Listings_Select_Column","Nft_Marketplace_V2_Current_Nft_Marketplace_Token_Offers_Select_Column","Nft_Marketplace_V2_Nft_Marketplace_Activities_Select_Column","Nft_Metadata_Crawler_Parsed_Asset_Uris_Select_Column","Num_Active_Delegator_Per_Pool_Select_Column","Order_By","Processor_Status_Select_Column","Proposal_Votes_Select_Column","Table_Items_Select_Column","Table_Metadatas_Select_Column","Token_Activities_Select_Column","Token_Activities_V2_Select_Column","Token_Datas_Select_Column","Token_Ownerships_Select_Column","Tokens_Select_Column","User_Transactions_Select_Column"],"sources":["/home/mahir/INTER-IIT/wordle/node_modules/aptos/src/account/aptos_account.ts","/home/mahir/INTER-IIT/wordle/node_modules/aptos/src/utils/hd-key.ts","/home/mahir/INTER-IIT/wordle/node_modules/aptos/src/version.ts","/home/mahir/INTER-IIT/wordle/node_modules/aptos/src/utils/misc.ts","/home/mahir/INTER-IIT/wordle/node_modules/aptos/src/utils/memoize-decorator.ts","/home/mahir/INTER-IIT/wordle/node_modules/aptos/src/client/core.ts","/home/mahir/INTER-IIT/wordle/node_modules/aptos/src/client/types.ts","/home/mahir/INTER-IIT/wordle/node_modules/aptos/src/client/get.ts","/home/mahir/INTER-IIT/wordle/node_modules/aptos/src/client/post.ts","/home/mahir/INTER-IIT/wordle/node_modules/aptos/src/utils/pagination_helpers.ts","/home/mahir/INTER-IIT/wordle/node_modules/aptos/src/utils/api-endpoints.ts","/home/mahir/INTER-IIT/wordle/node_modules/aptos/src/utils/hex_string.ts","/home/mahir/INTER-IIT/wordle/node_modules/aptos/src/aptos_types/index.ts","/home/mahir/INTER-IIT/wordle/node_modules/aptos/src/bcs/index.ts","/home/mahir/INTER-IIT/wordle/node_modules/aptos/src/bcs/consts.ts","/home/mahir/INTER-IIT/wordle/node_modules/aptos/src/bcs/serializer.ts","/home/mahir/INTER-IIT/wordle/node_modules/aptos/src/bcs/deserializer.ts","/home/mahir/INTER-IIT/wordle/node_modules/aptos/src/bcs/helper.ts","/home/mahir/INTER-IIT/wordle/node_modules/aptos/src/aptos_types/transaction.ts","/home/mahir/INTER-IIT/wordle/node_modules/aptos/src/aptos_types/account_address.ts","/home/mahir/INTER-IIT/wordle/node_modules/aptos/src/aptos_types/ed25519.ts","/home/mahir/INTER-IIT/wordle/node_modules/aptos/src/aptos_types/multi_ed25519.ts","/home/mahir/INTER-IIT/wordle/node_modules/aptos/src/aptos_types/authenticator.ts","/home/mahir/INTER-IIT/wordle/node_modules/aptos/src/aptos_types/identifier.ts","/home/mahir/INTER-IIT/wordle/node_modules/aptos/src/aptos_types/type_tag.ts","/home/mahir/INTER-IIT/wordle/node_modules/aptos/src/aptos_types/abi.ts","/home/mahir/INTER-IIT/wordle/node_modules/aptos/src/aptos_types/authentication_key.ts","/home/mahir/INTER-IIT/wordle/node_modules/aptos/src/aptos_types/rotation_proof_challenge.ts","/home/mahir/INTER-IIT/wordle/node_modules/aptos/src/indexer/generated/queries.ts","/home/mahir/INTER-IIT/wordle/node_modules/aptos/src/transaction_builder/builder.ts","/home/mahir/INTER-IIT/wordle/node_modules/aptos/src/transaction_builder/builder_utils.ts","/home/mahir/INTER-IIT/wordle/node_modules/aptos/src/providers/aptos_client.ts","/home/mahir/INTER-IIT/wordle/node_modules/aptos/src/providers/indexer.ts","/home/mahir/INTER-IIT/wordle/node_modules/aptos/src/providers/provider.ts","/home/mahir/INTER-IIT/wordle/node_modules/aptos/src/utils/property_map_serde.ts","/home/mahir/INTER-IIT/wordle/node_modules/aptos/src/aptos_types/token_types.ts","/home/mahir/INTER-IIT/wordle/node_modules/aptos/src/plugins/token_client.ts","/home/mahir/INTER-IIT/wordle/node_modules/aptos/src/plugins/fungible_asset_client.ts","/home/mahir/INTER-IIT/wordle/node_modules/aptos/src/plugins/aptos_token.ts","/home/mahir/INTER-IIT/wordle/node_modules/aptos/src/plugins/coin_client.ts","/home/mahir/INTER-IIT/wordle/node_modules/aptos/src/plugins/faucet_client.ts","/home/mahir/INTER-IIT/wordle/node_modules/aptos/src/plugins/ans_client.ts","/home/mahir/INTER-IIT/wordle/node_modules/aptos/src/transactions/account_sequence_number.ts","/home/mahir/INTER-IIT/wordle/node_modules/aptos/src/transactions/transaction_worker.ts","/home/mahir/INTER-IIT/wordle/node_modules/aptos/src/transactions/async_queue.ts","/home/mahir/INTER-IIT/wordle/node_modules/aptos/src/generated/index.ts","/home/mahir/INTER-IIT/wordle/node_modules/aptos/src/generated/models/AptosErrorCode.ts","/home/mahir/INTER-IIT/wordle/node_modules/aptos/src/generated/models/MoveFunctionVisibility.ts","/home/mahir/INTER-IIT/wordle/node_modules/aptos/src/generated/models/RoleType.ts","/home/mahir/INTER-IIT/wordle/node_modules/aptos/src/indexer/generated/types.ts"],"sourcesContent":["// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\nimport nacl from \"tweetnacl\";\nimport * as bip39 from \"@scure/bip39\";\nimport { bytesToHex } from \"@noble/hashes/utils\";\nimport { sha256 } from \"@noble/hashes/sha256\";\nimport { sha3_256 as sha3Hash } from \"@noble/hashes/sha3\";\nimport { derivePath } from \"../utils/hd-key\";\nimport { HexString, MaybeHexString, Memoize } from \"../utils\";\nimport * as Gen from \"../generated/index\";\nimport { AccountAddress, AuthenticationKey, Ed25519PublicKey } from \"../aptos_types\";\nimport { bcsToBytes } from \"../bcs\";\n\nexport interface AptosAccountObject {\n  address?: Gen.HexEncodedBytes;\n  publicKeyHex?: Gen.HexEncodedBytes;\n  privateKeyHex: Gen.HexEncodedBytes;\n}\n\n/**\n * Class for creating and managing Aptos account\n */\nexport class AptosAccount {\n  /**\n   * A private key and public key, associated with the given account\n   */\n  readonly signingKey: nacl.SignKeyPair;\n\n  /**\n   * Address associated with the given account\n   */\n  private readonly accountAddress: HexString;\n\n  static fromAptosAccountObject(obj: AptosAccountObject): AptosAccount {\n    return new AptosAccount(HexString.ensure(obj.privateKeyHex).toUint8Array(), obj.address);\n  }\n\n  /**\n   * Check's if the derive path is valid\n   */\n  static isValidPath(path: string): boolean {\n    return /^m\\/44'\\/637'\\/[0-9]+'\\/[0-9]+'\\/[0-9]+'+$/.test(path);\n  }\n\n  /**\n   * Creates new account with bip44 path and mnemonics,\n   * @param path. (e.g. m/44'/637'/0'/0'/0')\n   * Detailed description: {@link https://github.com/bitcoin/bips/blob/master/bip-0044.mediawiki}\n   * @param mnemonics.\n   * @returns AptosAccount\n   */\n  static fromDerivePath(path: string, mnemonics: string): AptosAccount {\n    if (!AptosAccount.isValidPath(path)) {\n      throw new Error(\"Invalid derivation path\");\n    }\n\n    const normalizeMnemonics = mnemonics\n      .trim()\n      .split(/\\s+/)\n      .map((part) => part.toLowerCase())\n      .join(\" \");\n\n    const { key } = derivePath(path, bytesToHex(bip39.mnemonicToSeedSync(normalizeMnemonics)));\n\n    return new AptosAccount(key);\n  }\n\n  /**\n   * Creates new account instance. Constructor allows passing in an address,\n   * to handle account key rotation, where auth_key != public_key\n   * @param privateKeyBytes  Private key from which account key pair will be generated.\n   * If not specified, new key pair is going to be created.\n   * @param address Account address (e.g. 0xe8012714cd17606cee7188a2a365eef3fe760be598750678c8c5954eb548a591).\n   * If not specified, a new one will be generated from public key\n   */\n  constructor(privateKeyBytes?: Uint8Array | undefined, address?: MaybeHexString) {\n    if (privateKeyBytes) {\n      this.signingKey = nacl.sign.keyPair.fromSeed(privateKeyBytes.slice(0, 32));\n    } else {\n      this.signingKey = nacl.sign.keyPair();\n    }\n    this.accountAddress = HexString.ensure(address || this.authKey().hex());\n  }\n\n  /**\n   * This is the key by which Aptos account is referenced.\n   * It is the 32-byte of the SHA-3 256 cryptographic hash\n   * of the public key(s) concatenated with a signature scheme identifier byte\n   * @returns Address associated with the given account\n   */\n  address(): HexString {\n    return this.accountAddress;\n  }\n\n  /**\n   * This key enables account owners to rotate their private key(s)\n   * associated with the account without changing the address that hosts their account.\n   * See here for more info: {@link https://aptos.dev/concepts/accounts#single-signer-authentication}\n   * @returns Authentication key for the associated account\n   */\n  @Memoize()\n  authKey(): HexString {\n    const pubKey = new Ed25519PublicKey(this.signingKey.publicKey);\n    const authKey = AuthenticationKey.fromEd25519PublicKey(pubKey);\n    return authKey.derivedAddress();\n  }\n\n  /**\n   * Takes source address and seeds and returns the resource account address\n   * @param sourceAddress Address used to derive the resource account\n   * @param seed The seed bytes\n   * @returns The resource account address\n   */\n  static getResourceAccountAddress(sourceAddress: MaybeHexString, seed: Uint8Array): HexString {\n    const source = bcsToBytes(AccountAddress.fromHex(sourceAddress));\n\n    const bytes = new Uint8Array([...source, ...seed, AuthenticationKey.DERIVE_RESOURCE_ACCOUNT_SCHEME]);\n\n    const hash = sha3Hash.create();\n    hash.update(bytes);\n\n    return HexString.fromUint8Array(hash.digest());\n  }\n\n  /**\n   * Takes creator address and collection name and returns the collection id hash.\n   * Collection id hash are generated as sha256 hash of (`creator_address::collection_name`)\n   *\n   * @param creatorAddress Collection creator address\n   * @param collectionName The collection name\n   * @returns The collection id hash\n   */\n  static getCollectionID(creatorAddress: MaybeHexString, collectionName: string): HexString {\n    const seed = new TextEncoder().encode(`${creatorAddress}::${collectionName}`);\n    const hash = sha256.create();\n    hash.update(seed);\n    return HexString.fromUint8Array(hash.digest());\n  }\n\n  /**\n   * This key is generated with Ed25519 scheme.\n   * Public key is used to check a signature of transaction, signed by given account\n   * @returns The public key for the associated account\n   */\n  pubKey(): HexString {\n    return HexString.fromUint8Array(this.signingKey.publicKey);\n  }\n\n  /**\n   * Signs specified `buffer` with account's private key\n   * @param buffer A buffer to sign\n   * @returns A signature HexString\n   */\n  signBuffer(buffer: Uint8Array): HexString {\n    const signature = nacl.sign.detached(buffer, this.signingKey.secretKey);\n    return HexString.fromUint8Array(signature);\n  }\n\n  /**\n   * Signs specified `hexString` with account's private key\n   * @param hexString A regular string or HexString to sign\n   * @returns A signature HexString\n   */\n  signHexString(hexString: MaybeHexString): HexString {\n    const toSign = HexString.ensure(hexString).toUint8Array();\n    return this.signBuffer(toSign);\n  }\n\n  /**\n   * Verifies the signature of the message with the public key of the account\n   * @param message a signed message\n   * @param signature the signature of the message\n   */\n  verifySignature(message: MaybeHexString, signature: MaybeHexString): boolean {\n    const rawMessage = HexString.ensure(message).toUint8Array();\n    const rawSignature = HexString.ensure(signature).toUint8Array();\n    return nacl.sign.detached.verify(rawMessage, rawSignature, this.signingKey.publicKey);\n  }\n\n  /**\n   * Derives account address, public key and private key\n   * @returns AptosAccountObject instance.\n   * @example An example of the returned AptosAccountObject object\n   * ```\n   * {\n   *    address: \"0xe8012714cd17606cee7188a2a365eef3fe760be598750678c8c5954eb548a591\",\n   *    publicKeyHex: \"0xf56d8524faf79fbc0f48c13aeed3b0ce5dd376b4db93b8130a107c0a5e04ba04\",\n   *    privateKeyHex: `0x009c9f7c992a06cfafe916f125d8adb7a395fca243e264a8e56a4b3e6accf940\n   *      d2b11e9ece3049ce60e3c7b4a1c58aebfa9298e29a30a58a67f1998646135204`\n   * }\n   * ```\n   */\n  toPrivateKeyObject(): AptosAccountObject {\n    return {\n      address: this.address().hex(),\n      publicKeyHex: this.pubKey().hex(),\n      privateKeyHex: HexString.fromUint8Array(this.signingKey.secretKey.slice(0, 32)).hex(),\n    };\n  }\n}\n\n// Returns an account address as a HexString given either an AptosAccount or a MaybeHexString.\nexport function getAddressFromAccountOrAddress(accountOrAddress: AptosAccount | MaybeHexString): HexString {\n  return accountOrAddress instanceof AptosAccount ? accountOrAddress.address() : HexString.ensure(accountOrAddress);\n}\n","import nacl from \"tweetnacl\";\nimport { hmac } from \"@noble/hashes/hmac\";\nimport { sha512 } from \"@noble/hashes/sha512\";\nimport { hexToBytes } from \"@noble/hashes/utils\";\n\nexport type Keys = {\n  key: Uint8Array;\n  chainCode: Uint8Array;\n};\n\nconst pathRegex = /^m(\\/[0-9]+')+$/;\n\nconst replaceDerive = (val: string): string => val.replace(\"'\", \"\");\n\nconst HMAC_KEY = \"ed25519 seed\";\nconst HARDENED_OFFSET = 0x80000000;\n\nexport const getMasterKeyFromSeed = (seed: string): Keys => {\n  const h = hmac.create(sha512, HMAC_KEY);\n  const I = h.update(hexToBytes(seed)).digest();\n  const IL = I.slice(0, 32);\n  const IR = I.slice(32);\n  return {\n    key: IL,\n    chainCode: IR,\n  };\n};\n\nexport const CKDPriv = ({ key, chainCode }: Keys, index: number): Keys => {\n  const buffer = new ArrayBuffer(4);\n  new DataView(buffer).setUint32(0, index);\n  const indexBytes = new Uint8Array(buffer);\n  const zero = new Uint8Array([0]);\n  const data = new Uint8Array([...zero, ...key, ...indexBytes]);\n\n  const I = hmac.create(sha512, chainCode).update(data).digest();\n  const IL = I.slice(0, 32);\n  const IR = I.slice(32);\n  return {\n    key: IL,\n    chainCode: IR,\n  };\n};\n\nexport const getPublicKey = (privateKey: Uint8Array, withZeroByte = true): Uint8Array => {\n  const keyPair = nacl.sign.keyPair.fromSeed(privateKey);\n  const signPk = keyPair.secretKey.subarray(32);\n  const zero = new Uint8Array([0]);\n  return withZeroByte ? new Uint8Array([...zero, ...signPk]) : signPk;\n};\n\nexport const isValidPath = (path: string): boolean => {\n  if (!pathRegex.test(path)) {\n    return false;\n  }\n  return !path\n    .split(\"/\")\n    .slice(1)\n    .map(replaceDerive)\n    .some(Number.isNaN as any);\n};\n\nexport const derivePath = (path: string, seed: string, offset = HARDENED_OFFSET): Keys => {\n  if (!isValidPath(path)) {\n    throw new Error(\"Invalid derivation path\");\n  }\n\n  const { key, chainCode } = getMasterKeyFromSeed(seed);\n  const segments = path\n    .split(\"/\")\n    .slice(1)\n    .map(replaceDerive)\n    .map((el) => parseInt(el, 10));\n\n  return segments.reduce((parentKeys, segment) => CKDPriv(parentKeys, segment + offset), { key, chainCode });\n};\n","// hardcoded for now, we would want to have it injected dynamically\nexport const VERSION = \"1.20.0\";\n","// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\nimport { VERSION } from \"../version\";\n\nexport async function sleep(timeMs: number): Promise<null> {\n  return new Promise((resolve) => {\n    setTimeout(resolve, timeMs);\n  });\n}\n\nexport const DEFAULT_VERSION_PATH_BASE = \"/v1\";\n\nexport function fixNodeUrl(nodeUrl: string): string {\n  let out = `${nodeUrl}`;\n  if (out.endsWith(\"/\")) {\n    out = out.substring(0, out.length - 1);\n  }\n  if (!out.endsWith(DEFAULT_VERSION_PATH_BASE)) {\n    out = `${out}${DEFAULT_VERSION_PATH_BASE}`;\n  }\n  return out;\n}\n\nexport const DEFAULT_MAX_GAS_AMOUNT = 200000;\n// Transaction expire timestamp\nexport const DEFAULT_TXN_EXP_SEC_FROM_NOW = 20;\n// How long does SDK wait for txn to finish\nexport const DEFAULT_TXN_TIMEOUT_SEC = 20;\nexport const APTOS_COIN = \"0x1::aptos_coin::AptosCoin\";\n\nexport const CUSTOM_REQUEST_HEADER = { \"x-aptos-client\": `aptos-ts-sdk/${VERSION}` };\n","/**\n * Credits to https://github.com/darrylhodgins/typescript-memoize\n */\n\n/* eslint-disable no-param-reassign */\n/* eslint-disable no-restricted-syntax */\n\ninterface MemoizeArgs {\n  // ttl in milliseconds for cached items. After `ttlMs`, cached items are evicted automatically. If no `ttlMs`\n  // is provided, cached items won't get auto-evicted.\n  ttlMs?: number;\n  // produces the cache key based on `args`.\n  hashFunction?: boolean | ((...args: any[]) => any);\n  // cached items can be taged with `tags`. `tags` can be used to evict cached items\n  tags?: string[];\n}\n\nexport function Memoize(args?: MemoizeArgs | MemoizeArgs[\"hashFunction\"]) {\n  let hashFunction: MemoizeArgs[\"hashFunction\"];\n  let ttlMs: MemoizeArgs[\"ttlMs\"];\n  let tags: MemoizeArgs[\"tags\"];\n\n  if (typeof args === \"object\") {\n    hashFunction = args.hashFunction;\n    ttlMs = args.ttlMs;\n    tags = args.tags;\n  } else {\n    hashFunction = args;\n  }\n\n  return (target: Object, propertyKey: string, descriptor: TypedPropertyDescriptor<any>) => {\n    if (descriptor.value != null) {\n      descriptor.value = getNewFunction(descriptor.value, hashFunction, ttlMs, tags);\n    } else if (descriptor.get != null) {\n      descriptor.get = getNewFunction(descriptor.get, hashFunction, ttlMs, tags);\n    } else {\n      throw new Error(\"Only put a Memoize() decorator on a method or get accessor.\");\n    }\n  };\n}\n\nexport function MemoizeExpiring(ttlMs: number, hashFunction?: MemoizeArgs[\"hashFunction\"]) {\n  return Memoize({\n    ttlMs,\n    hashFunction,\n  });\n}\n\nconst clearCacheTagsMap: Map<string, Map<any, any>[]> = new Map();\n\nexport function clear(tags: string[]): number {\n  const cleared: Set<Map<any, any>> = new Set();\n  for (const tag of tags) {\n    const maps = clearCacheTagsMap.get(tag);\n    if (maps) {\n      for (const mp of maps) {\n        if (!cleared.has(mp)) {\n          mp.clear();\n          cleared.add(mp);\n        }\n      }\n    }\n  }\n  return cleared.size;\n}\n\nfunction getNewFunction(\n  originalMethod: () => void,\n  hashFunction?: MemoizeArgs[\"hashFunction\"],\n  ttlMs: number = 0,\n  tags?: MemoizeArgs[\"tags\"],\n) {\n  const propMapName = Symbol(\"__memoized_map__\");\n\n  // The function returned here gets called instead of originalMethod.\n  // eslint-disable-next-line func-names\n  return function (...args: any[]) {\n    let returnedValue: any;\n\n    // @ts-ignore\n    const that: any = this;\n\n    // Get or create map\n    // eslint-disable-next-line no-prototype-builtins\n    if (!that.hasOwnProperty(propMapName)) {\n      Object.defineProperty(that, propMapName, {\n        configurable: false,\n        enumerable: false,\n        writable: false,\n        value: new Map<any, any>(),\n      });\n    }\n    const myMap: Map<any, any> = that[propMapName];\n\n    if (Array.isArray(tags)) {\n      for (const tag of tags) {\n        if (clearCacheTagsMap.has(tag)) {\n          clearCacheTagsMap.get(tag)!.push(myMap);\n        } else {\n          clearCacheTagsMap.set(tag, [myMap]);\n        }\n      }\n    }\n\n    if (hashFunction || args.length > 0 || ttlMs > 0) {\n      let hashKey: any;\n\n      // If true is passed as first parameter, will automatically use every argument, passed to string\n      if (hashFunction === true) {\n        hashKey = args.map((a) => a.toString()).join(\"!\");\n      } else if (hashFunction) {\n        hashKey = hashFunction.apply(that, args);\n      } else {\n        // eslint-disable-next-line prefer-destructuring\n        hashKey = args[0];\n      }\n\n      const timestampKey = `${hashKey}__timestamp`;\n      let isExpired: boolean = false;\n      if (ttlMs > 0) {\n        if (!myMap.has(timestampKey)) {\n          // \"Expired\" since it was never called before\n          isExpired = true;\n        } else {\n          const timestamp = myMap.get(timestampKey);\n          isExpired = Date.now() - timestamp > ttlMs;\n        }\n      }\n\n      if (myMap.has(hashKey) && !isExpired) {\n        returnedValue = myMap.get(hashKey);\n      } else {\n        returnedValue = originalMethod.apply(that, args as any);\n        myMap.set(hashKey, returnedValue);\n        if (ttlMs > 0) {\n          myMap.set(timestampKey, Date.now());\n        }\n      }\n    } else {\n      const hashKey = that;\n      if (myMap.has(hashKey)) {\n        returnedValue = myMap.get(hashKey);\n      } else {\n        returnedValue = originalMethod.apply(that, args as any);\n        myMap.set(hashKey, returnedValue);\n      }\n    }\n\n    return returnedValue;\n  };\n}\n","import aptosClient from \"@aptos-labs/aptos-client\";\nimport { AptosApiError, AptosRequest, AptosResponse, ClientConfig } from \"./types\";\nimport { VERSION } from \"../version\";\n\n/**\n * Meaningful errors map\n */\nconst errors: Record<number, string> = {\n  400: \"Bad Request\",\n  401: \"Unauthorized\",\n  403: \"Forbidden\",\n  404: \"Not Found\",\n  429: \"Too Many Requests\",\n  500: \"Internal Server Error\",\n  502: \"Bad Gateway\",\n  503: \"Service Unavailable\",\n};\n\n/**\n * Given a url and method, sends the request with axios and\n * returns the response.\n */\nasync function request<Req, Res>(\n  url: string,\n  method: \"GET\" | \"POST\",\n  body?: Req,\n  contentType?: string,\n  params?: any,\n  overrides?: ClientConfig,\n): Promise<any> {\n  const headers: Record<string, string | string[] | undefined> = {\n    ...overrides?.HEADERS,\n    \"x-aptos-client\": `aptos-ts-sdk/${VERSION}`,\n    \"content-type\": contentType ?? \"application/json\",\n  };\n\n  if (overrides?.TOKEN) {\n    headers.Authorization = `Bearer ${overrides?.TOKEN}`;\n  }\n\n  /**\n   * make a call using the @aptos-labs/aptos-client package\n   * {@link https://www.npmjs.com/package/@aptos-labs/aptos-client}\n   */\n  const response = await aptosClient<Res>({ url, method, body, params, headers, overrides });\n  return response;\n}\n\n/**\n * The main function to use when doing an API request.\n *\n * @param options AptosRequest\n * @returns the response or AptosApiError\n */\nexport async function aptosRequest<Req, Res>(options: AptosRequest): Promise<AptosResponse<Req, Res>> {\n  const { url, endpoint, method, body, contentType, params, overrides } = options;\n  const fullEndpoint = `${url}/${endpoint ?? \"\"}`;\n  const response = await request<Req, Res>(fullEndpoint, method, body, contentType, params, overrides);\n\n  const result: AptosResponse<Req, Res> = {\n    status: response.status,\n    statusText: response.statusText!,\n    data: response.data,\n    headers: response.headers,\n    config: response.config,\n    url: fullEndpoint,\n  };\n\n  if (result.status >= 200 && result.status < 300) {\n    return result;\n  }\n  const errorMessage = errors[result.status];\n  throw new AptosApiError(options, result, errorMessage ?? \"Generic Error\");\n}\n","import { AnyNumber } from \"../bcs\";\n\n/**\n * A configuration object we can pass with the request to the server.\n *\n * @param TOKEN - an auth token to send with the request\n * @param HEADERS - extra headers we want to send with the request\n * @param WITH_CREDENTIALS - whether to carry cookies. By default, it is set to true and cookies will be sent\n */\nexport type ClientConfig = {\n  TOKEN?: string;\n  HEADERS?: Record<string, string | number | boolean>;\n  WITH_CREDENTIALS?: boolean;\n};\n\n/**\n * The API request type\n *\n * @param url - the url to make the request to, i.e https://fullnode.aptoslabs.devnet.com/v1\n * @param method - the request method \"GET\" | \"POST\"\n * @param endpoint (optional) - the endpoint to make the request to, i.e transactions\n * @param body (optional) - the body of the request\n * @param contentType (optional) - the content type to set the `content-type` header to,\n * by default is set to `application/json`\n * @param params (optional) - query params to add to the request\n * @param originMethod (optional) - the local method the request came from\n * @param overrides (optional) - a `ClientConfig` object type to override request data\n */\nexport type AptosRequest = {\n  url: string;\n  method: \"GET\" | \"POST\";\n  endpoint?: string;\n  body?: any;\n  contentType?: string;\n  params?: Record<string, string | AnyNumber | boolean | undefined>;\n  originMethod?: string;\n  overrides?: ClientConfig;\n};\n\n/**\n * The API response type\n *\n * @param status - the response status. i.e 200\n * @param statusText - the response message\n * @param data the response data\n * @param url the url the request was made to\n * @param headers the response headers\n * @param config (optional) - the request object\n * @param request (optional) - the request object\n */\nexport interface AptosResponse<Req, Res> {\n  status: number;\n  statusText: string;\n  data: Res;\n  url: string;\n  headers: any;\n  config?: any;\n  request?: Req;\n}\n\n/**\n * The type returned from an API error\n *\n * @param name - the error name \"AptosApiError\"\n * @param url the url the request was made to\n * @param status - the response status. i.e 400\n * @param statusText - the response message\n * @param data the response data\n * @param request - the AptosRequest\n */\nexport class AptosApiError extends Error {\n  readonly url: string;\n\n  readonly status: number;\n\n  readonly statusText: string;\n\n  readonly data: any;\n\n  readonly request: AptosRequest;\n\n  constructor(request: AptosRequest, response: AptosResponse<any, any>, message: string) {\n    super(message);\n\n    this.name = \"AptosApiError\";\n    this.url = response.url;\n    this.status = response.status;\n    this.statusText = response.statusText;\n    this.data = response.data;\n    this.request = request;\n  }\n}\n","import { aptosRequest } from \"./core\";\nimport { AptosRequest, AptosResponse } from \"./types\";\n\nexport type GetRequestOptions = Omit<AptosRequest, \"body\" | \"method\">;\n\n/**\n * Main function to do a Get request\n *\n * @param options GetRequestOptions\n * @returns\n */\nexport async function get<Req, Res>(options: GetRequestOptions): Promise<AptosResponse<Req, Res>> {\n  const response: AptosResponse<Req, Res> = await aptosRequest<Req, Res>({ ...options, method: \"GET\" });\n  return response;\n}\n","import { aptosRequest } from \"./core\";\nimport { AptosRequest, AptosResponse } from \"./types\";\n\nexport type PostRequestOptions = Omit<AptosRequest, \"method\">;\n\n/**\n * Main function to do a Post request\n *\n * @param options PostRequestOptions\n * @returns\n */\nexport async function post<Req, Res>(options: PostRequestOptions): Promise<AptosResponse<Req, Res>> {\n  const response: AptosResponse<Req, Res> = await aptosRequest<Req, Res>({ ...options, method: \"POST\" });\n  return response;\n}\n","import { ClientConfig, get } from \"../client\";\n\n/// This function is a helper for paginating using a function wrapping an API\nexport async function paginateWithCursor<Req extends Record<string, any>, Res extends any[]>(options: {\n  url: string;\n  endpoint?: string;\n  body?: any;\n  params?: Req;\n  originMethod?: string;\n  overrides?: ClientConfig;\n}): Promise<Res> {\n  const out = [];\n  let cursor: string | undefined;\n  const requestParams = options.params as Req & { start?: string };\n  // eslint-disable-next-line no-constant-condition\n  while (true) {\n    requestParams.start = cursor;\n    // eslint-disable-next-line no-await-in-loop\n    const response = await get<Req, Res>({\n      url: options.url,\n      endpoint: options.endpoint,\n      params: requestParams,\n      originMethod: options.originMethod,\n      overrides: options.overrides,\n    });\n    // eslint-disable-next-line no-underscore-dangle\n    /**\n     * the cursor is a \"state key\" from the API prespective. Client\n     * should not need to \"care\" what it represents but just use it\n     * to query the next chunck of data.\n     */\n    cursor = response.headers[\"x-aptos-cursor\"];\n    // Now that we have the cursor (if any), we remove the headers before\n    // adding these to the output of this function.\n    // eslint-disable-next-line no-underscore-dangle\n    delete (response as any).headers;\n    out.push(...response.data);\n    if (cursor === null || cursor === undefined) {\n      break;\n    }\n  }\n  return out as any;\n}\n","export const NetworkToIndexerAPI: Record<string, string> = {\n  mainnet: \"https://indexer.mainnet.aptoslabs.com/v1/graphql\",\n  testnet: \"https://indexer-testnet.staging.gcp.aptosdev.com/v1/graphql\",\n  devnet: \"https://indexer-devnet.staging.gcp.aptosdev.com/v1/graphql\",\n};\n\nexport const NetworkToNodeAPI: Record<string, string> = {\n  mainnet: \"https://fullnode.mainnet.aptoslabs.com/v1\",\n  testnet: \"https://fullnode.testnet.aptoslabs.com/v1\",\n  devnet: \"https://fullnode.devnet.aptoslabs.com/v1\",\n  local: \"http://localhost:8080/v1\",\n};\n\nexport const NodeAPIToNetwork: Record<string, string> = {\n  \"https://fullnode.mainnet.aptoslabs.com/v1\": \"mainnet\",\n  \"https://fullnode.testnet.aptoslabs.com/v1\": \"testnet\",\n  \"https://fullnode.devnet.aptoslabs.com/v1\": \"devnet\",\n  \"http://localhost:8080/v1\": \"local\",\n};\n\nexport enum Network {\n  MAINNET = \"mainnet\",\n  TESTNET = \"testnet\",\n  DEVNET = \"devnet\",\n  LOCAL = \"local\",\n}\n\nexport interface CustomEndpoints {\n  fullnodeUrl: string;\n  indexerUrl?: string;\n}\n","// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\nimport { bytesToHex, hexToBytes } from \"@noble/hashes/utils\";\nimport { HexEncodedBytes } from \"../generated\";\n\n// eslint-disable-next-line no-use-before-define\nexport type MaybeHexString = HexString | string | HexEncodedBytes;\n\n/**\n * A util class for working with hex strings.\n * Hex strings are strings that are prefixed with `0x`\n */\nexport class HexString {\n  /// We want to make sure this hexString has the `0x` hex prefix\n  private readonly hexString: string;\n\n  /**\n   * Creates new hex string from Buffer\n   * @param buffer A buffer to convert\n   * @returns New HexString\n   */\n  static fromBuffer(buffer: Uint8Array): HexString {\n    return HexString.fromUint8Array(buffer);\n  }\n\n  /**\n   * Creates new hex string from Uint8Array\n   * @param arr Uint8Array to convert\n   * @returns New HexString\n   */\n  static fromUint8Array(arr: Uint8Array): HexString {\n    return new HexString(bytesToHex(arr));\n  }\n\n  /**\n   * Ensures `hexString` is instance of `HexString` class\n   * @param hexString String to check\n   * @returns New HexString if `hexString` is regular string or `hexString` if it is HexString instance\n   * @example\n   * ```\n   *  const regularString = \"string\";\n   *  const hexString = new HexString(\"string\"); // \"0xstring\"\n   *  HexString.ensure(regularString); // \"0xstring\"\n   *  HexString.ensure(hexString); // \"0xstring\"\n   * ```\n   */\n  static ensure(hexString: MaybeHexString): HexString {\n    if (typeof hexString === \"string\") {\n      return new HexString(hexString);\n    }\n    return hexString;\n  }\n\n  /**\n   * Creates new HexString instance from regular string. If specified string already starts with \"0x\" prefix,\n   * it will not add another one\n   * @param hexString String to convert\n   * @example\n   * ```\n   *  const string = \"string\";\n   *  new HexString(string); // \"0xstring\"\n   * ```\n   */\n  constructor(hexString: string | HexEncodedBytes) {\n    if (hexString.startsWith(\"0x\")) {\n      this.hexString = hexString;\n    } else {\n      this.hexString = `0x${hexString}`;\n    }\n  }\n\n  /**\n   * Getter for inner hexString\n   * @returns Inner hex string\n   */\n  hex(): string {\n    return this.hexString;\n  }\n\n  /**\n   * Getter for inner hexString without prefix\n   * @returns Inner hex string without prefix\n   * @example\n   * ```\n   *  const hexString = new HexString(\"string\"); // \"0xstring\"\n   *  hexString.noPrefix(); // \"string\"\n   * ```\n   */\n  noPrefix(): string {\n    return this.hexString.slice(2);\n  }\n\n  /**\n   * Overrides default `toString` method\n   * @returns Inner hex string\n   */\n  toString(): string {\n    return this.hex();\n  }\n\n  /**\n   * Trimmes extra zeroes in the begining of a string\n   * @returns Inner hexString without leading zeroes\n   * @example\n   * ```\n   *  new HexString(\"0x000000string\").toShortString(); // result = \"0xstring\"\n   * ```\n   */\n  toShortString(): string {\n    const trimmed = this.hexString.replace(/^0x0*/, \"\");\n    return `0x${trimmed}`;\n  }\n\n  /**\n   * Converts hex string to a Uint8Array\n   * @returns Uint8Array from inner hexString without prefix\n   */\n  toUint8Array(): Uint8Array {\n    return Uint8Array.from(hexToBytes(this.noPrefix()));\n  }\n}\n","// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\nexport * from \"./abi\";\nexport * from \"./account_address\";\nexport * from \"./authenticator\";\nexport * from \"./transaction\";\nexport * from \"./type_tag\";\nexport * from \"./identifier\";\nexport * from \"./ed25519\";\nexport * from \"./multi_ed25519\";\nexport * from \"./authentication_key\";\nexport * from \"./rotation_proof_challenge\";\n\nexport type SigningMessage = Uint8Array;\n","// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\nexport * from \"./types\";\nexport * from \"./serializer\";\nexport * from \"./deserializer\";\nexport * from \"./helper\";\n","// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\nimport { Uint128, Uint16, Uint32, Uint64, Uint8, Uint256 } from \"./types\";\n\n// Upper bound values for uint8, uint16, uint64 and uint128\nexport const MAX_U8_NUMBER: Uint8 = 2 ** 8 - 1;\nexport const MAX_U16_NUMBER: Uint16 = 2 ** 16 - 1;\nexport const MAX_U32_NUMBER: Uint32 = 2 ** 32 - 1;\nexport const MAX_U64_BIG_INT: Uint64 = BigInt(2 ** 64) - BigInt(1);\nexport const MAX_U128_BIG_INT: Uint128 = BigInt(2 ** 128) - BigInt(1);\nexport const MAX_U256_BIG_INT: Uint256 = BigInt(2 ** 256) - BigInt(1);\n","// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\n/* eslint-disable no-bitwise */\nimport {\n  MAX_U128_BIG_INT,\n  MAX_U16_NUMBER,\n  MAX_U32_NUMBER,\n  MAX_U64_BIG_INT,\n  MAX_U8_NUMBER,\n  MAX_U256_BIG_INT,\n} from \"./consts\";\nimport { AnyNumber, Bytes, Uint16, Uint32, Uint8 } from \"./types\";\n\nexport class Serializer {\n  private buffer: ArrayBuffer;\n\n  private offset: number;\n\n  constructor() {\n    this.buffer = new ArrayBuffer(64);\n    this.offset = 0;\n  }\n\n  private ensureBufferWillHandleSize(bytes: number) {\n    while (this.buffer.byteLength < this.offset + bytes) {\n      const newBuffer = new ArrayBuffer(this.buffer.byteLength * 2);\n      new Uint8Array(newBuffer).set(new Uint8Array(this.buffer));\n      this.buffer = newBuffer;\n    }\n  }\n\n  protected serialize(values: Bytes) {\n    this.ensureBufferWillHandleSize(values.length);\n    new Uint8Array(this.buffer, this.offset).set(values);\n    this.offset += values.length;\n  }\n\n  private serializeWithFunction(\n    fn: (byteOffset: number, value: number, littleEndian?: boolean) => void,\n    bytesLength: number,\n    value: number,\n  ) {\n    this.ensureBufferWillHandleSize(bytesLength);\n    const dv = new DataView(this.buffer, this.offset);\n    fn.apply(dv, [0, value, true]);\n    this.offset += bytesLength;\n  }\n\n  /**\n   * Serializes a string. UTF8 string is supported. Serializes the string's bytes length \"l\" first,\n   * and then serializes \"l\" bytes of the string content.\n   *\n   * BCS layout for \"string\": string_length | string_content. string_length is the bytes length of\n   * the string that is uleb128 encoded. string_length is a u32 integer.\n   *\n   * @example\n   * ```ts\n   * const serializer = new Serializer();\n   * serializer.serializeStr(\"çå∞≠¢õß∂ƒ∫\");\n   * assert(serializer.getBytes() === new Uint8Array([24, 0xc3, 0xa7, 0xc3, 0xa5, 0xe2, 0x88, 0x9e,\n   * 0xe2, 0x89, 0xa0, 0xc2, 0xa2, 0xc3, 0xb5, 0xc3, 0x9f, 0xe2, 0x88, 0x82, 0xc6, 0x92, 0xe2, 0x88, 0xab]));\n   * ```\n   */\n  serializeStr(value: string): void {\n    const textEncoder = new TextEncoder();\n    this.serializeBytes(textEncoder.encode(value));\n  }\n\n  /**\n   * Serializes an array of bytes.\n   *\n   * BCS layout for \"bytes\": bytes_length | bytes. bytes_length is the length of the bytes array that is\n   * uleb128 encoded. bytes_length is a u32 integer.\n   */\n  serializeBytes(value: Bytes): void {\n    this.serializeU32AsUleb128(value.length);\n    this.serialize(value);\n  }\n\n  /**\n   * Serializes an array of bytes with known length. Therefore length doesn't need to be\n   * serialized to help deserialization.  When deserializing, the number of\n   * bytes to deserialize needs to be passed in.\n   */\n  serializeFixedBytes(value: Bytes): void {\n    this.serialize(value);\n  }\n\n  /**\n   * Serializes a boolean value.\n   *\n   * BCS layout for \"boolean\": One byte. \"0x01\" for True and \"0x00\" for False.\n   */\n  serializeBool(value: boolean): void {\n    if (typeof value !== \"boolean\") {\n      throw new Error(\"Value needs to be a boolean\");\n    }\n    const byteValue = value ? 1 : 0;\n    this.serialize(new Uint8Array([byteValue]));\n  }\n\n  /**\n   * Serializes a uint8 number.\n   *\n   * BCS layout for \"uint8\": One byte. Binary format in little-endian representation.\n   */\n  @checkNumberRange(0, MAX_U8_NUMBER)\n  serializeU8(value: Uint8): void {\n    this.serialize(new Uint8Array([value]));\n  }\n\n  /**\n   * Serializes a uint16 number.\n   *\n   * BCS layout for \"uint16\": Two bytes. Binary format in little-endian representation.\n   * @example\n   * ```ts\n   * const serializer = new Serializer();\n   * serializer.serializeU16(4660);\n   * assert(serializer.getBytes() === new Uint8Array([0x34, 0x12]));\n   * ```\n   */\n  @checkNumberRange(0, MAX_U16_NUMBER)\n  serializeU16(value: Uint16): void {\n    this.serializeWithFunction(DataView.prototype.setUint16, 2, value);\n  }\n\n  /**\n   * Serializes a uint32 number.\n   *\n   * BCS layout for \"uint32\": Four bytes. Binary format in little-endian representation.\n   * @example\n   * ```ts\n   * const serializer = new Serializer();\n   * serializer.serializeU32(305419896);\n   * assert(serializer.getBytes() === new Uint8Array([0x78, 0x56, 0x34, 0x12]));\n   * ```\n   */\n  @checkNumberRange(0, MAX_U32_NUMBER)\n  serializeU32(value: Uint32): void {\n    this.serializeWithFunction(DataView.prototype.setUint32, 4, value);\n  }\n\n  /**\n   * Serializes a uint64 number.\n   *\n   * BCS layout for \"uint64\": Eight bytes. Binary format in little-endian representation.\n   * @example\n   * ```ts\n   * const serializer = new Serializer();\n   * serializer.serializeU64(1311768467750121216);\n   * assert(serializer.getBytes() === new Uint8Array([0x00, 0xEF, 0xCD, 0xAB, 0x78, 0x56, 0x34, 0x12]));\n   * ```\n   */\n  @checkNumberRange(BigInt(0), MAX_U64_BIG_INT)\n  serializeU64(value: AnyNumber): void {\n    const low = BigInt(value.toString()) & BigInt(MAX_U32_NUMBER);\n    const high = BigInt(value.toString()) >> BigInt(32);\n\n    // write little endian number\n    this.serializeU32(Number(low));\n    this.serializeU32(Number(high));\n  }\n\n  /**\n   * Serializes a uint128 number.\n   *\n   * BCS layout for \"uint128\": Sixteen bytes. Binary format in little-endian representation.\n   */\n  @checkNumberRange(BigInt(0), MAX_U128_BIG_INT)\n  serializeU128(value: AnyNumber): void {\n    const low = BigInt(value.toString()) & MAX_U64_BIG_INT;\n    const high = BigInt(value.toString()) >> BigInt(64);\n\n    // write little endian number\n    this.serializeU64(low);\n    this.serializeU64(high);\n  }\n\n  /**\n   * Serializes a uint256 number.\n   *\n   * BCS layout for \"uint256\": Sixteen bytes. Binary format in little-endian representation.\n   */\n  @checkNumberRange(BigInt(0), MAX_U256_BIG_INT)\n  serializeU256(value: AnyNumber): void {\n    const low = BigInt(value.toString()) & MAX_U128_BIG_INT;\n    const high = BigInt(value.toString()) >> BigInt(128);\n\n    // write little endian number\n    this.serializeU128(low);\n    this.serializeU128(high);\n  }\n\n  /**\n   * Serializes a uint32 number with uleb128.\n   *\n   * BCS use uleb128 encoding in two cases: (1) lengths of variable-length sequences and (2) tags of enum values\n   */\n  @checkNumberRange(0, MAX_U32_NUMBER)\n  serializeU32AsUleb128(val: Uint32): void {\n    let value = val;\n    const valueArray = [];\n    while (value >>> 7 !== 0) {\n      valueArray.push((value & 0x7f) | 0x80);\n      value >>>= 7;\n    }\n    valueArray.push(value);\n    this.serialize(new Uint8Array(valueArray));\n  }\n\n  /**\n   * Returns the buffered bytes\n   */\n  getBytes(): Bytes {\n    return new Uint8Array(this.buffer).slice(0, this.offset);\n  }\n}\n\n/**\n * Creates a decorator to make sure the arg value of the decorated function is within a range.\n * @param minValue The arg value of decorated function must >= minValue\n * @param maxValue The arg value of decorated function must <= maxValue\n * @param message Error message\n */\nfunction checkNumberRange<T extends AnyNumber>(minValue: T, maxValue: T, message?: string) {\n  return (target: unknown, propertyKey: string, descriptor: PropertyDescriptor) => {\n    const childFunction = descriptor.value;\n    // eslint-disable-next-line no-param-reassign\n    descriptor.value = function deco(value: AnyNumber) {\n      const valueBigInt = BigInt(value.toString());\n      if (valueBigInt > BigInt(maxValue.toString()) || valueBigInt < BigInt(minValue.toString())) {\n        throw new Error(message || \"Value is out of range\");\n      }\n      childFunction.apply(this, [value]);\n    };\n    return descriptor;\n  };\n}\n","// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\n/* eslint-disable no-bitwise */\nimport { MAX_U32_NUMBER } from \"./consts\";\nimport { Bytes, Uint128, Uint16, Uint256, Uint32, Uint64, Uint8 } from \"./types\";\n\nexport class Deserializer {\n  private buffer: ArrayBuffer;\n\n  private offset: number;\n\n  constructor(data: Bytes) {\n    // copies data to prevent outside mutation of buffer.\n    this.buffer = new ArrayBuffer(data.length);\n    new Uint8Array(this.buffer).set(data, 0);\n    this.offset = 0;\n  }\n\n  private read(length: number): ArrayBuffer {\n    if (this.offset + length > this.buffer.byteLength) {\n      throw new Error(\"Reached to the end of buffer\");\n    }\n\n    const bytes = this.buffer.slice(this.offset, this.offset + length);\n    this.offset += length;\n    return bytes;\n  }\n\n  /**\n   * Deserializes a string. UTF8 string is supported. Reads the string's bytes length \"l\" first,\n   * and then reads \"l\" bytes of content. Decodes the byte array into a string.\n   *\n   * BCS layout for \"string\": string_length | string_content. string_length is the bytes length of\n   * the string that is uleb128 encoded. string_length is a u32 integer.\n   *\n   * @example\n   * ```ts\n   * const deserializer = new Deserializer(new Uint8Array([24, 0xc3, 0xa7, 0xc3, 0xa5, 0xe2, 0x88, 0x9e,\n   * 0xe2, 0x89, 0xa0, 0xc2, 0xa2, 0xc3, 0xb5, 0xc3, 0x9f, 0xe2, 0x88, 0x82, 0xc6, 0x92, 0xe2, 0x88, 0xab]));\n   * assert(deserializer.deserializeStr() === \"çå∞≠¢õß∂ƒ∫\");\n   * ```\n   */\n  deserializeStr(): string {\n    const value = this.deserializeBytes();\n    const textDecoder = new TextDecoder();\n    return textDecoder.decode(value);\n  }\n\n  /**\n   * Deserializes an array of bytes.\n   *\n   * BCS layout for \"bytes\": bytes_length | bytes. bytes_length is the length of the bytes array that is\n   * uleb128 encoded. bytes_length is a u32 integer.\n   */\n  deserializeBytes(): Bytes {\n    const len = this.deserializeUleb128AsU32();\n    return new Uint8Array(this.read(len));\n  }\n\n  /**\n   * Deserializes an array of bytes. The number of bytes to read is already known.\n   *\n   */\n  deserializeFixedBytes(len: number): Bytes {\n    return new Uint8Array(this.read(len));\n  }\n\n  /**\n   * Deserializes a boolean value.\n   *\n   * BCS layout for \"boolean\": One byte. \"0x01\" for True and \"0x00\" for False.\n   */\n  deserializeBool(): boolean {\n    const bool = new Uint8Array(this.read(1))[0];\n    if (bool !== 1 && bool !== 0) {\n      throw new Error(\"Invalid boolean value\");\n    }\n    return bool === 1;\n  }\n\n  /**\n   * Deserializes a uint8 number.\n   *\n   * BCS layout for \"uint8\": One byte. Binary format in little-endian representation.\n   */\n  deserializeU8(): Uint8 {\n    return new DataView(this.read(1)).getUint8(0);\n  }\n\n  /**\n   * Deserializes a uint16 number.\n   *\n   * BCS layout for \"uint16\": Two bytes. Binary format in little-endian representation.\n   * @example\n   * ```ts\n   * const deserializer = new Deserializer(new Uint8Array([0x34, 0x12]));\n   * assert(deserializer.deserializeU16() === 4660);\n   * ```\n   */\n  deserializeU16(): Uint16 {\n    return new DataView(this.read(2)).getUint16(0, true);\n  }\n\n  /**\n   * Deserializes a uint32 number.\n   *\n   * BCS layout for \"uint32\": Four bytes. Binary format in little-endian representation.\n   * @example\n   * ```ts\n   * const deserializer = new Deserializer(new Uint8Array([0x78, 0x56, 0x34, 0x12]));\n   * assert(deserializer.deserializeU32() === 305419896);\n   * ```\n   */\n  deserializeU32(): Uint32 {\n    return new DataView(this.read(4)).getUint32(0, true);\n  }\n\n  /**\n   * Deserializes a uint64 number.\n   *\n   * BCS layout for \"uint64\": Eight bytes. Binary format in little-endian representation.\n   * @example\n   * ```ts\n   * const deserializer = new Deserializer(new Uint8Array([0x00, 0xEF, 0xCD, 0xAB, 0x78, 0x56, 0x34, 0x12]));\n   * assert(deserializer.deserializeU64() === 1311768467750121216);\n   * ```\n   */\n  deserializeU64(): Uint64 {\n    const low = this.deserializeU32();\n    const high = this.deserializeU32();\n\n    // combine the two 32-bit values and return (little endian)\n    return BigInt((BigInt(high) << BigInt(32)) | BigInt(low));\n  }\n\n  /**\n   * Deserializes a uint128 number.\n   *\n   * BCS layout for \"uint128\": Sixteen bytes. Binary format in little-endian representation.\n   */\n  deserializeU128(): Uint128 {\n    const low = this.deserializeU64();\n    const high = this.deserializeU64();\n\n    // combine the two 64-bit values and return (little endian)\n    return BigInt((high << BigInt(64)) | low);\n  }\n\n  /**\n   * Deserializes a uint256 number.\n   *\n   * BCS layout for \"uint256\": Thirty-two bytes. Binary format in little-endian representation.\n   */\n  deserializeU256(): Uint256 {\n    const low = this.deserializeU128();\n    const high = this.deserializeU128();\n\n    // combine the two 128-bit values and return (little endian)\n    return BigInt((high << BigInt(128)) | low);\n  }\n\n  /**\n   * Deserializes a uleb128 encoded uint32 number.\n   *\n   * BCS use uleb128 encoding in two cases: (1) lengths of variable-length sequences and (2) tags of enum values\n   */\n  deserializeUleb128AsU32(): Uint32 {\n    let value: bigint = BigInt(0);\n    let shift = 0;\n\n    while (value < MAX_U32_NUMBER) {\n      const byte = this.deserializeU8();\n      value |= BigInt(byte & 0x7f) << BigInt(shift);\n\n      if ((byte & 0x80) === 0) {\n        break;\n      }\n      shift += 7;\n    }\n\n    if (value > MAX_U32_NUMBER) {\n      throw new Error(\"Overflow while parsing uleb128-encoded uint32 value\");\n    }\n\n    return Number(value);\n  }\n}\n","// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\nimport { Deserializer } from \"./deserializer\";\nimport { Serializer } from \"./serializer\";\nimport { AnyNumber, Bytes, Seq, Uint16, Uint32, Uint8 } from \"./types\";\n\ninterface Serializable {\n  serialize(serializer: Serializer): void;\n}\n\n/**\n * Serializes a vector values that are \"Serializable\".\n */\nexport function serializeVector<T extends Serializable>(value: Seq<T>, serializer: Serializer): void {\n  serializer.serializeU32AsUleb128(value.length);\n  value.forEach((item: T) => {\n    item.serialize(serializer);\n  });\n}\n\n/**\n * Serializes a vector with specified item serialization function.\n * Very dynamic function and bypasses static typechecking.\n */\nexport function serializeVectorWithFunc(value: any[], func: string): Bytes {\n  const serializer = new Serializer();\n  serializer.serializeU32AsUleb128(value.length);\n  const f = (serializer as any)[func];\n  value.forEach((item) => {\n    f.call(serializer, item);\n  });\n  return serializer.getBytes();\n}\n\n/**\n * Deserializes a vector of values.\n */\nexport function deserializeVector(deserializer: Deserializer, cls: any): any[] {\n  const length = deserializer.deserializeUleb128AsU32();\n  const list: Seq<typeof cls> = [];\n  for (let i = 0; i < length; i += 1) {\n    list.push(cls.deserialize(deserializer));\n  }\n  return list;\n}\n\nexport function bcsToBytes<T extends Serializable>(value: T): Bytes {\n  const serializer = new Serializer();\n  value.serialize(serializer);\n  return serializer.getBytes();\n}\n\nexport function bcsSerializeUint64(value: AnyNumber): Bytes {\n  const serializer = new Serializer();\n  serializer.serializeU64(value);\n  return serializer.getBytes();\n}\n\nexport function bcsSerializeU8(value: Uint8): Bytes {\n  const serializer = new Serializer();\n  serializer.serializeU8(value);\n  return serializer.getBytes();\n}\n\nexport function bcsSerializeU16(value: Uint16): Bytes {\n  const serializer = new Serializer();\n  serializer.serializeU16(value);\n  return serializer.getBytes();\n}\n\nexport function bcsSerializeU32(value: Uint32): Bytes {\n  const serializer = new Serializer();\n  serializer.serializeU32(value);\n  return serializer.getBytes();\n}\n\nexport function bcsSerializeU128(value: AnyNumber): Bytes {\n  const serializer = new Serializer();\n  serializer.serializeU128(value);\n  return serializer.getBytes();\n}\n\nexport function bcsSerializeU256(value: AnyNumber): Bytes {\n  const serializer = new Serializer();\n  serializer.serializeU256(value);\n  return serializer.getBytes();\n}\n\nexport function bcsSerializeBool(value: boolean): Bytes {\n  const serializer = new Serializer();\n  serializer.serializeBool(value);\n  return serializer.getBytes();\n}\n\nexport function bcsSerializeStr(value: string): Bytes {\n  const serializer = new Serializer();\n  serializer.serializeStr(value);\n  return serializer.getBytes();\n}\n\nexport function bcsSerializeBytes(value: Bytes): Bytes {\n  const serializer = new Serializer();\n  serializer.serializeBytes(value);\n  return serializer.getBytes();\n}\n\nexport function bcsSerializeFixedBytes(value: Bytes): Bytes {\n  const serializer = new Serializer();\n  serializer.serializeFixedBytes(value);\n  return serializer.getBytes();\n}\n","// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\n/* eslint-disable @typescript-eslint/naming-convention */\n/* eslint-disable class-methods-use-this */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable max-classes-per-file */\nimport { sha3_256 as sha3Hash } from \"@noble/hashes/sha3\";\nimport { HexString } from \"../utils\";\nimport {\n  Deserializer,\n  Serializer,\n  Uint64,\n  Bytes,\n  Seq,\n  Uint8,\n  Uint128,\n  deserializeVector,\n  serializeVector,\n  bcsToBytes,\n  Uint16,\n  Uint256,\n} from \"../bcs\";\nimport { AccountAuthenticator, TransactionAuthenticator, TransactionAuthenticatorMultiAgent } from \"./authenticator\";\nimport { Identifier } from \"./identifier\";\nimport { TypeTag } from \"./type_tag\";\nimport { AccountAddress } from \"./account_address\";\n\nexport class RawTransaction {\n  /**\n   * RawTransactions contain the metadata and payloads that can be submitted to Aptos chain for execution.\n   * RawTransactions must be signed before Aptos chain can execute them.\n   *\n   * @param sender Account address of the sender.\n   * @param sequence_number Sequence number of this transaction. This must match the sequence number stored in\n   *   the sender's account at the time the transaction executes.\n   * @param payload Instructions for the Aptos Blockchain, including publishing a module,\n   *   execute a entry function or execute a script payload.\n   * @param max_gas_amount Maximum total gas to spend for this transaction. The account must have more\n   *   than this gas or the transaction will be discarded during validation.\n   * @param gas_unit_price Price to be paid per gas unit.\n   * @param expiration_timestamp_secs The blockchain timestamp at which the blockchain would discard this transaction.\n   * @param chain_id The chain ID of the blockchain that this transaction is intended to be run on.\n   */\n  constructor(\n    public readonly sender: AccountAddress,\n    public readonly sequence_number: Uint64,\n    public readonly payload: TransactionPayload,\n    public readonly max_gas_amount: Uint64,\n    public readonly gas_unit_price: Uint64,\n    public readonly expiration_timestamp_secs: Uint64,\n    public readonly chain_id: ChainId,\n  ) {}\n\n  serialize(serializer: Serializer): void {\n    this.sender.serialize(serializer);\n    serializer.serializeU64(this.sequence_number);\n    this.payload.serialize(serializer);\n    serializer.serializeU64(this.max_gas_amount);\n    serializer.serializeU64(this.gas_unit_price);\n    serializer.serializeU64(this.expiration_timestamp_secs);\n    this.chain_id.serialize(serializer);\n  }\n\n  static deserialize(deserializer: Deserializer): RawTransaction {\n    const sender = AccountAddress.deserialize(deserializer);\n    const sequence_number = deserializer.deserializeU64();\n    const payload = TransactionPayload.deserialize(deserializer);\n    const max_gas_amount = deserializer.deserializeU64();\n    const gas_unit_price = deserializer.deserializeU64();\n    const expiration_timestamp_secs = deserializer.deserializeU64();\n    const chain_id = ChainId.deserialize(deserializer);\n    return new RawTransaction(\n      sender,\n      sequence_number,\n      payload,\n      max_gas_amount,\n      gas_unit_price,\n      expiration_timestamp_secs,\n      chain_id,\n    );\n  }\n}\n\nexport class Script {\n  /**\n   * Scripts contain the Move bytecodes payload that can be submitted to Aptos chain for execution.\n   * @param code Move bytecode\n   * @param ty_args Type arguments that bytecode requires.\n   *\n   * @example\n   * A coin transfer function has one type argument \"CoinType\".\n   * ```\n   * public(script) fun transfer<CoinType>(from: &signer, to: address, amount: u64,)\n   * ```\n   * @param args Arugments to bytecode function.\n   *\n   * @example\n   * A coin transfer function has three arugments \"from\", \"to\" and \"amount\".\n   * ```\n   * public(script) fun transfer<CoinType>(from: &signer, to: address, amount: u64,)\n   * ```\n   */\n  constructor(\n    public readonly code: Bytes,\n    public readonly ty_args: Seq<TypeTag>,\n    public readonly args: Seq<TransactionArgument>,\n  ) {}\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeBytes(this.code);\n    serializeVector<TypeTag>(this.ty_args, serializer);\n    serializeVector<TransactionArgument>(this.args, serializer);\n  }\n\n  static deserialize(deserializer: Deserializer): Script {\n    const code = deserializer.deserializeBytes();\n    const ty_args = deserializeVector(deserializer, TypeTag);\n    const args = deserializeVector(deserializer, TransactionArgument);\n    return new Script(code, ty_args, args);\n  }\n}\n\nexport class EntryFunction {\n  /**\n   * Contains the payload to run a function within a module.\n   * @param module_name Fully qualified module name. ModuleId consists of account address and module name.\n   * @param function_name The function to run.\n   * @param ty_args Type arguments that move function requires.\n   *\n   * @example\n   * A coin transfer function has one type argument \"CoinType\".\n   * ```\n   * public(script) fun transfer<CoinType>(from: &signer, to: address, amount: u64,)\n   * ```\n   * @param args Arugments to the move function.\n   *\n   * @example\n   * A coin transfer function has three arugments \"from\", \"to\" and \"amount\".\n   * ```\n   * public(script) fun transfer<CoinType>(from: &signer, to: address, amount: u64,)\n   * ```\n   */\n  constructor(\n    public readonly module_name: ModuleId,\n    public readonly function_name: Identifier,\n    public readonly ty_args: Seq<TypeTag>,\n    public readonly args: Seq<Bytes>,\n  ) {}\n\n  /**\n   *\n   * @param module Fully qualified module name in format \"AccountAddress::module_name\" e.g. \"0x1::coin\"\n   * @param func Function name\n   * @param ty_args Type arguments that move function requires.\n   *\n   * @example\n   * A coin transfer function has one type argument \"CoinType\".\n   * ```\n   * public(script) fun transfer<CoinType>(from: &signer, to: address, amount: u64,)\n   * ```\n   * @param args Arugments to the move function.\n   *\n   * @example\n   * A coin transfer function has three arugments \"from\", \"to\" and \"amount\".\n   * ```\n   * public(script) fun transfer<CoinType>(from: &signer, to: address, amount: u64,)\n   * ```\n   * @returns\n   */\n  static natural(module: string, func: string, ty_args: Seq<TypeTag>, args: Seq<Bytes>): EntryFunction {\n    return new EntryFunction(ModuleId.fromStr(module), new Identifier(func), ty_args, args);\n  }\n\n  /**\n   * `natual` is deprecated, please use `natural`\n   *\n   * @deprecated.\n   */\n  static natual(module: string, func: string, ty_args: Seq<TypeTag>, args: Seq<Bytes>): EntryFunction {\n    return EntryFunction.natural(module, func, ty_args, args);\n  }\n\n  serialize(serializer: Serializer): void {\n    this.module_name.serialize(serializer);\n    this.function_name.serialize(serializer);\n    serializeVector<TypeTag>(this.ty_args, serializer);\n\n    serializer.serializeU32AsUleb128(this.args.length);\n    this.args.forEach((item: Bytes) => {\n      serializer.serializeBytes(item);\n    });\n  }\n\n  static deserialize(deserializer: Deserializer): EntryFunction {\n    const module_name = ModuleId.deserialize(deserializer);\n    const function_name = Identifier.deserialize(deserializer);\n    const ty_args = deserializeVector(deserializer, TypeTag);\n\n    const length = deserializer.deserializeUleb128AsU32();\n    const list: Seq<Bytes> = [];\n    for (let i = 0; i < length; i += 1) {\n      list.push(deserializer.deserializeBytes());\n    }\n\n    const args = list;\n    return new EntryFunction(module_name, function_name, ty_args, args);\n  }\n}\n\nexport class MultiSigTransactionPayload {\n  /**\n   * Contains the payload to run a multisig account transaction.\n   * @param transaction_payload The payload of the multisig transaction. This can only be EntryFunction for now but\n   * Script might be supported in the future.\n   */\n  constructor(public readonly transaction_payload: EntryFunction) {}\n\n  serialize(serializer: Serializer): void {\n    // We can support multiple types of inner transaction payload in the future.\n    // For now it's only EntryFunction but if we support more types, we need to serialize with the right enum values\n    // here\n    serializer.serializeU32AsUleb128(0);\n    this.transaction_payload.serialize(serializer);\n  }\n\n  static deserialize(deserializer: Deserializer): MultiSigTransactionPayload {\n    // TODO: Support other types of payload beside EntryFunction.\n    // This is the enum value indicating which type of payload the multisig tx contains.\n    deserializer.deserializeUleb128AsU32();\n    return new MultiSigTransactionPayload(EntryFunction.deserialize(deserializer));\n  }\n}\n\nexport class MultiSig {\n  /**\n   * Contains the payload to run a multisig account transaction.\n   * @param multisig_address The multisig account address the transaction will be executed as.\n   * @param transaction_payload The payload of the multisig transaction. This is optional when executing a multisig\n   *  transaction whose payload is already stored on chain.\n   */\n  constructor(\n    public readonly multisig_address: AccountAddress,\n    public readonly transaction_payload?: MultiSigTransactionPayload,\n  ) {}\n\n  serialize(serializer: Serializer): void {\n    this.multisig_address.serialize(serializer);\n    // Options are encoded with an extra u8 field before the value - 0x0 is none and 0x1 is present.\n    // We use serializeBool below to create this prefix value.\n    if (this.transaction_payload === undefined) {\n      serializer.serializeBool(false);\n    } else {\n      serializer.serializeBool(true);\n      this.transaction_payload.serialize(serializer);\n    }\n  }\n\n  static deserialize(deserializer: Deserializer): MultiSig {\n    const multisig_address = AccountAddress.deserialize(deserializer);\n    const payloadPresent = deserializer.deserializeBool();\n    let transaction_payload;\n    if (payloadPresent) {\n      transaction_payload = MultiSigTransactionPayload.deserialize(deserializer);\n    }\n    return new MultiSig(multisig_address, transaction_payload);\n  }\n}\n\nexport class Module {\n  /**\n   * Contains the bytecode of a Move module that can be published to the Aptos chain.\n   * @param code Move bytecode of a module.\n   */\n  constructor(public readonly code: Bytes) {}\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeBytes(this.code);\n  }\n\n  static deserialize(deserializer: Deserializer): Module {\n    const code = deserializer.deserializeBytes();\n    return new Module(code);\n  }\n}\n\nexport class ModuleId {\n  /**\n   * Full name of a module.\n   * @param address The account address.\n   * @param name The name of the module under the account at \"address\".\n   */\n  constructor(public readonly address: AccountAddress, public readonly name: Identifier) {}\n\n  /**\n   * Converts a string literal to a ModuleId\n   * @param moduleId String literal in format \"AccountAddress::module_name\", e.g. \"0x1::coin\"\n   * @returns\n   */\n  static fromStr(moduleId: string): ModuleId {\n    const parts = moduleId.split(\"::\");\n    if (parts.length !== 2) {\n      throw new Error(\"Invalid module id.\");\n    }\n    return new ModuleId(AccountAddress.fromHex(new HexString(parts[0])), new Identifier(parts[1]));\n  }\n\n  serialize(serializer: Serializer): void {\n    this.address.serialize(serializer);\n    this.name.serialize(serializer);\n  }\n\n  static deserialize(deserializer: Deserializer): ModuleId {\n    const address = AccountAddress.deserialize(deserializer);\n    const name = Identifier.deserialize(deserializer);\n    return new ModuleId(address, name);\n  }\n}\n\nexport class ChangeSet {\n  serialize(serializer: Serializer): void {\n    throw new Error(\"Not implemented.\");\n  }\n\n  static deserialize(deserializer: Deserializer): ChangeSet {\n    throw new Error(\"Not implemented.\");\n  }\n}\n\nexport class WriteSet {\n  serialize(serializer: Serializer): void {\n    throw new Error(\"Not implmented.\");\n  }\n\n  static deserialize(deserializer: Deserializer): WriteSet {\n    throw new Error(\"Not implmented.\");\n  }\n}\n\nexport class SignedTransaction {\n  /**\n   * A SignedTransaction consists of a raw transaction and an authenticator. The authenticator\n   * contains a client's public key and the signature of the raw transaction.\n   *\n   * @see {@link https://aptos.dev/guides/creating-a-signed-transaction/ | Creating a Signed Transaction}\n   *\n   * @param raw_txn\n   * @param authenticator Contains a client's public key and the signature of the raw transaction.\n   *   Authenticator has 3 flavors: single signature, multi-signature and multi-agent.\n   *   @see authenticator.ts for details.\n   */\n  constructor(public readonly raw_txn: RawTransaction, public readonly authenticator: TransactionAuthenticator) {}\n\n  serialize(serializer: Serializer): void {\n    this.raw_txn.serialize(serializer);\n    this.authenticator.serialize(serializer);\n  }\n\n  static deserialize(deserializer: Deserializer): SignedTransaction {\n    const raw_txn = RawTransaction.deserialize(deserializer);\n    const authenticator = TransactionAuthenticator.deserialize(deserializer);\n    return new SignedTransaction(raw_txn, authenticator);\n  }\n}\n\nexport abstract class RawTransactionWithData {\n  abstract serialize(serializer: Serializer): void;\n\n  static deserialize(deserializer: Deserializer): RawTransactionWithData {\n    const index = deserializer.deserializeUleb128AsU32();\n    switch (index) {\n      case 0:\n        return MultiAgentRawTransaction.load(deserializer);\n      case 1:\n        return FeePayerRawTransaction.load(deserializer);\n      default:\n        throw new Error(`Unknown variant index for RawTransactionWithData: ${index}`);\n    }\n  }\n}\n\nexport class MultiAgentRawTransaction extends RawTransactionWithData {\n  constructor(\n    public readonly raw_txn: RawTransaction,\n    public readonly secondary_signer_addresses: Seq<AccountAddress>,\n  ) {\n    super();\n  }\n\n  serialize(serializer: Serializer): void {\n    // enum variant index\n    serializer.serializeU32AsUleb128(0);\n    this.raw_txn.serialize(serializer);\n    serializeVector<TransactionArgument>(this.secondary_signer_addresses, serializer);\n  }\n\n  static load(deserializer: Deserializer): MultiAgentRawTransaction {\n    const rawTxn = RawTransaction.deserialize(deserializer);\n    const secondarySignerAddresses = deserializeVector(deserializer, AccountAddress);\n\n    return new MultiAgentRawTransaction(rawTxn, secondarySignerAddresses);\n  }\n}\n\nexport class FeePayerRawTransaction extends RawTransactionWithData {\n  constructor(\n    public readonly raw_txn: RawTransaction,\n    public readonly secondary_signer_addresses: Seq<AccountAddress>,\n    public readonly fee_payer_address: AccountAddress,\n  ) {\n    super();\n  }\n\n  serialize(serializer: Serializer): void {\n    // enum variant index\n    serializer.serializeU32AsUleb128(1);\n    this.raw_txn.serialize(serializer);\n    serializeVector<TransactionArgument>(this.secondary_signer_addresses, serializer);\n    this.fee_payer_address.serialize(serializer);\n  }\n\n  static load(deserializer: Deserializer): FeePayerRawTransaction {\n    const rawTxn = RawTransaction.deserialize(deserializer);\n    const secondarySignerAddresses = deserializeVector(deserializer, AccountAddress);\n    const feePayerAddress = AccountAddress.deserialize(deserializer);\n\n    return new FeePayerRawTransaction(rawTxn, secondarySignerAddresses, feePayerAddress);\n  }\n}\n\nexport abstract class TransactionPayload {\n  abstract serialize(serializer: Serializer): void;\n\n  static deserialize(deserializer: Deserializer): TransactionPayload {\n    const index = deserializer.deserializeUleb128AsU32();\n    switch (index) {\n      case 0:\n        return TransactionPayloadScript.load(deserializer);\n      // TODO: change to 1 once ModuleBundle has been removed from rust\n      case 2:\n        return TransactionPayloadEntryFunction.load(deserializer);\n      case 3:\n        return TransactionPayloadMultisig.load(deserializer);\n      default:\n        throw new Error(`Unknown variant index for TransactionPayload: ${index}`);\n    }\n  }\n}\n\nexport class TransactionPayloadScript extends TransactionPayload {\n  constructor(public readonly value: Script) {\n    super();\n  }\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeU32AsUleb128(0);\n    this.value.serialize(serializer);\n  }\n\n  static load(deserializer: Deserializer): TransactionPayloadScript {\n    const value = Script.deserialize(deserializer);\n    return new TransactionPayloadScript(value);\n  }\n}\n\nexport class TransactionPayloadEntryFunction extends TransactionPayload {\n  constructor(public readonly value: EntryFunction) {\n    super();\n  }\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeU32AsUleb128(2);\n    this.value.serialize(serializer);\n  }\n\n  static load(deserializer: Deserializer): TransactionPayloadEntryFunction {\n    const value = EntryFunction.deserialize(deserializer);\n    return new TransactionPayloadEntryFunction(value);\n  }\n}\n\nexport class TransactionPayloadMultisig extends TransactionPayload {\n  constructor(public readonly value: MultiSig) {\n    super();\n  }\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeU32AsUleb128(3);\n    this.value.serialize(serializer);\n  }\n\n  static load(deserializer: Deserializer): TransactionPayloadMultisig {\n    const value = MultiSig.deserialize(deserializer);\n    return new TransactionPayloadMultisig(value);\n  }\n}\n\nexport class ChainId {\n  constructor(public readonly value: Uint8) {}\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeU8(this.value);\n  }\n\n  static deserialize(deserializer: Deserializer): ChainId {\n    const value = deserializer.deserializeU8();\n    return new ChainId(value);\n  }\n}\n\nexport abstract class TransactionArgument {\n  abstract serialize(serializer: Serializer): void;\n\n  static deserialize(deserializer: Deserializer): TransactionArgument {\n    const index = deserializer.deserializeUleb128AsU32();\n    switch (index) {\n      case 0:\n        return TransactionArgumentU8.load(deserializer);\n      case 1:\n        return TransactionArgumentU64.load(deserializer);\n      case 2:\n        return TransactionArgumentU128.load(deserializer);\n      case 3:\n        return TransactionArgumentAddress.load(deserializer);\n      case 4:\n        return TransactionArgumentU8Vector.load(deserializer);\n      case 5:\n        return TransactionArgumentBool.load(deserializer);\n      case 6:\n        return TransactionArgumentU16.load(deserializer);\n      case 7:\n        return TransactionArgumentU32.load(deserializer);\n      case 8:\n        return TransactionArgumentU256.load(deserializer);\n      default:\n        throw new Error(`Unknown variant index for TransactionArgument: ${index}`);\n    }\n  }\n}\n\nexport class TransactionArgumentU8 extends TransactionArgument {\n  constructor(public readonly value: Uint8) {\n    super();\n  }\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeU32AsUleb128(0);\n    serializer.serializeU8(this.value);\n  }\n\n  static load(deserializer: Deserializer): TransactionArgumentU8 {\n    const value = deserializer.deserializeU8();\n    return new TransactionArgumentU8(value);\n  }\n}\n\nexport class TransactionArgumentU16 extends TransactionArgument {\n  constructor(public readonly value: Uint16) {\n    super();\n  }\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeU32AsUleb128(6);\n    serializer.serializeU16(this.value);\n  }\n\n  static load(deserializer: Deserializer): TransactionArgumentU16 {\n    const value = deserializer.deserializeU16();\n    return new TransactionArgumentU16(value);\n  }\n}\n\nexport class TransactionArgumentU32 extends TransactionArgument {\n  constructor(public readonly value: Uint16) {\n    super();\n  }\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeU32AsUleb128(7);\n    serializer.serializeU32(this.value);\n  }\n\n  static load(deserializer: Deserializer): TransactionArgumentU32 {\n    const value = deserializer.deserializeU32();\n    return new TransactionArgumentU32(value);\n  }\n}\n\nexport class TransactionArgumentU64 extends TransactionArgument {\n  constructor(public readonly value: Uint64) {\n    super();\n  }\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeU32AsUleb128(1);\n    serializer.serializeU64(this.value);\n  }\n\n  static load(deserializer: Deserializer): TransactionArgumentU64 {\n    const value = deserializer.deserializeU64();\n    return new TransactionArgumentU64(value);\n  }\n}\n\nexport class TransactionArgumentU128 extends TransactionArgument {\n  constructor(public readonly value: Uint128) {\n    super();\n  }\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeU32AsUleb128(2);\n    serializer.serializeU128(this.value);\n  }\n\n  static load(deserializer: Deserializer): TransactionArgumentU128 {\n    const value = deserializer.deserializeU128();\n    return new TransactionArgumentU128(value);\n  }\n}\n\nexport class TransactionArgumentU256 extends TransactionArgument {\n  constructor(public readonly value: Uint256) {\n    super();\n  }\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeU32AsUleb128(8);\n    serializer.serializeU256(this.value);\n  }\n\n  static load(deserializer: Deserializer): TransactionArgumentU256 {\n    const value = deserializer.deserializeU256();\n    return new TransactionArgumentU256(value);\n  }\n}\n\nexport class TransactionArgumentAddress extends TransactionArgument {\n  constructor(public readonly value: AccountAddress) {\n    super();\n  }\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeU32AsUleb128(3);\n    this.value.serialize(serializer);\n  }\n\n  static load(deserializer: Deserializer): TransactionArgumentAddress {\n    const value = AccountAddress.deserialize(deserializer);\n    return new TransactionArgumentAddress(value);\n  }\n}\n\nexport class TransactionArgumentU8Vector extends TransactionArgument {\n  constructor(public readonly value: Bytes) {\n    super();\n  }\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeU32AsUleb128(4);\n    serializer.serializeBytes(this.value);\n  }\n\n  static load(deserializer: Deserializer): TransactionArgumentU8Vector {\n    const value = deserializer.deserializeBytes();\n    return new TransactionArgumentU8Vector(value);\n  }\n}\n\nexport class TransactionArgumentBool extends TransactionArgument {\n  constructor(public readonly value: boolean) {\n    super();\n  }\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeU32AsUleb128(5);\n    serializer.serializeBool(this.value);\n  }\n\n  static load(deserializer: Deserializer): TransactionArgumentBool {\n    const value = deserializer.deserializeBool();\n    return new TransactionArgumentBool(value);\n  }\n}\n\nexport abstract class Transaction {\n  abstract serialize(serializer: Serializer): void;\n\n  abstract hash(): Bytes;\n\n  getHashSalt(): Bytes {\n    const hash = sha3Hash.create();\n    hash.update(\"APTOS::Transaction\");\n    return hash.digest();\n  }\n\n  static deserialize(deserializer: Deserializer): Transaction {\n    const index = deserializer.deserializeUleb128AsU32();\n    switch (index) {\n      case 0:\n        return UserTransaction.load(deserializer);\n      default:\n        throw new Error(`Unknown variant index for Transaction: ${index}`);\n    }\n  }\n}\n\nexport class UserTransaction extends Transaction {\n  constructor(public readonly value: SignedTransaction) {\n    super();\n  }\n\n  hash(): Bytes {\n    const hash = sha3Hash.create();\n    hash.update(this.getHashSalt());\n    hash.update(bcsToBytes(this));\n    return hash.digest();\n  }\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeU32AsUleb128(0);\n    this.value.serialize(serializer);\n  }\n\n  static load(deserializer: Deserializer): UserTransaction {\n    return new UserTransaction(SignedTransaction.deserialize(deserializer));\n  }\n}\n","// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\nimport { HexString, MaybeHexString } from \"../utils\";\nimport { Serializer, Deserializer, Bytes } from \"../bcs\";\n\n/**\n * Exported as TransactionBuilderTypes.AccountAddress\n */\nexport class AccountAddress {\n  static readonly LENGTH: number = 32;\n\n  readonly address: Bytes;\n\n  static CORE_CODE_ADDRESS: AccountAddress = AccountAddress.fromHex(\"0x1\");\n\n  constructor(address: Bytes) {\n    if (address.length !== AccountAddress.LENGTH) {\n      throw new Error(\"Expected address of length 32\");\n    }\n    this.address = address;\n  }\n\n  /**\n   * Creates AccountAddress from a hex string.\n   * @param addr Hex string can be with a prefix or without a prefix,\n   *   e.g. '0x1aa' or '1aa'. Hex string will be left padded with 0s if too short.\n   */\n  static fromHex(addr: MaybeHexString): AccountAddress {\n    let address = HexString.ensure(addr);\n\n    // If an address hex has odd number of digits, padd the hex string with 0\n    // e.g. '1aa' would become '01aa'.\n    if (address.noPrefix().length % 2 !== 0) {\n      address = new HexString(`0${address.noPrefix()}`);\n    }\n\n    const addressBytes = address.toUint8Array();\n\n    if (addressBytes.length > AccountAddress.LENGTH) {\n      // eslint-disable-next-line quotes\n      throw new Error(\"Hex string is too long. Address's length is 32 bytes.\");\n    } else if (addressBytes.length === AccountAddress.LENGTH) {\n      return new AccountAddress(addressBytes);\n    }\n\n    const res: Bytes = new Uint8Array(AccountAddress.LENGTH);\n    res.set(addressBytes, AccountAddress.LENGTH - addressBytes.length);\n\n    return new AccountAddress(res);\n  }\n\n  /**\n   * Checks if the string is a valid AccountAddress\n   * @param addr Hex string can be with a prefix or without a prefix,\n   *   e.g. '0x1aa' or '1aa'. Hex string will be left padded with 0s if too short.\n   */\n  static isValid(addr: MaybeHexString): boolean {\n    // At least one zero is required\n    if (addr === \"\") {\n      return false;\n    }\n\n    let address = HexString.ensure(addr);\n\n    // If an address hex has odd number of digits, padd the hex string with 0\n    // e.g. '1aa' would become '01aa'.\n    if (address.noPrefix().length % 2 !== 0) {\n      address = new HexString(`0${address.noPrefix()}`);\n    }\n\n    const addressBytes = address.toUint8Array();\n\n    return addressBytes.length <= AccountAddress.LENGTH;\n  }\n\n  /**\n   * Return a hex string from account Address.\n   */\n  toHexString(): MaybeHexString {\n    return HexString.fromUint8Array(this.address).hex();\n  }\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeFixedBytes(this.address);\n  }\n\n  static deserialize(deserializer: Deserializer): AccountAddress {\n    return new AccountAddress(deserializer.deserializeFixedBytes(AccountAddress.LENGTH));\n  }\n\n  /**\n   * Standardizes an address to the format \"0x\" followed by 64 lowercase hexadecimal digits.\n   */\n  static standardizeAddress(address: string): string {\n    // Convert the address to lowercase\n    const lowercaseAddress = address.toLowerCase();\n    // Remove the \"0x\" prefix if present\n    const addressWithoutPrefix = lowercaseAddress.startsWith(\"0x\") ? lowercaseAddress.slice(2) : lowercaseAddress;\n    // Pad the address with leading zeros if necessary\n    // to ensure it has exactly 64 characters (excluding the \"0x\" prefix)\n    const addressWithPadding = addressWithoutPrefix.padStart(64, \"0\");\n    // Return the standardized address with the \"0x\" prefix\n    return `0x${addressWithPadding}`;\n  }\n}\n","// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\nimport { Bytes, Deserializer, Serializer } from \"../bcs\";\n\nexport class Ed25519PublicKey {\n  static readonly LENGTH: number = 32;\n\n  readonly value: Bytes;\n\n  constructor(value: Bytes) {\n    if (value.length !== Ed25519PublicKey.LENGTH) {\n      throw new Error(`Ed25519PublicKey length should be ${Ed25519PublicKey.LENGTH}`);\n    }\n    this.value = value;\n  }\n\n  toBytes(): Bytes {\n    return this.value;\n  }\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeBytes(this.value);\n  }\n\n  static deserialize(deserializer: Deserializer): Ed25519PublicKey {\n    const value = deserializer.deserializeBytes();\n    return new Ed25519PublicKey(value);\n  }\n}\n\nexport class Ed25519Signature {\n  static readonly LENGTH = 64;\n\n  constructor(public readonly value: Bytes) {\n    if (value.length !== Ed25519Signature.LENGTH) {\n      throw new Error(`Ed25519Signature length should be ${Ed25519Signature.LENGTH}`);\n    }\n  }\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeBytes(this.value);\n  }\n\n  static deserialize(deserializer: Deserializer): Ed25519Signature {\n    const value = deserializer.deserializeBytes();\n    return new Ed25519Signature(value);\n  }\n}\n","// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\n/* eslint-disable no-bitwise */\nimport { Bytes, Deserializer, Seq, Serializer, Uint8 } from \"../bcs\";\nimport { Ed25519PublicKey, Ed25519Signature } from \"./ed25519\";\n\n/**\n * MultiEd25519 currently supports at most 32 signatures.\n */\nconst MAX_SIGNATURES_SUPPORTED = 32;\n\nexport class MultiEd25519PublicKey {\n  /**\n   * Public key for a K-of-N multisig transaction. A K-of-N multisig transaction means that for such a\n   * transaction to be executed, at least K out of the N authorized signers have signed the transaction\n   * and passed the check conducted by the chain.\n   *\n   * @see {@link\n   * https://aptos.dev/guides/creating-a-signed-transaction#multisignature-transactions | Creating a Signed Transaction}\n   *\n   * @param public_keys A list of public keys\n   * @param threshold At least \"threshold\" signatures must be valid\n   */\n  constructor(public readonly public_keys: Seq<Ed25519PublicKey>, public readonly threshold: Uint8) {\n    if (threshold > MAX_SIGNATURES_SUPPORTED) {\n      throw new Error(`\"threshold\" cannot be larger than ${MAX_SIGNATURES_SUPPORTED}`);\n    }\n  }\n\n  /**\n   * Converts a MultiEd25519PublicKey into bytes with: bytes = p1_bytes | ... | pn_bytes | threshold\n   */\n  toBytes(): Bytes {\n    const bytes = new Uint8Array(this.public_keys.length * Ed25519PublicKey.LENGTH + 1);\n    this.public_keys.forEach((k: Ed25519PublicKey, i: number) => {\n      bytes.set(k.value, i * Ed25519PublicKey.LENGTH);\n    });\n\n    bytes[this.public_keys.length * Ed25519PublicKey.LENGTH] = this.threshold;\n\n    return bytes;\n  }\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeBytes(this.toBytes());\n  }\n\n  static deserialize(deserializer: Deserializer): MultiEd25519PublicKey {\n    const bytes = deserializer.deserializeBytes();\n    const threshold = bytes[bytes.length - 1];\n\n    const keys: Seq<Ed25519PublicKey> = [];\n\n    for (let i = 0; i < bytes.length - 1; i += Ed25519PublicKey.LENGTH) {\n      const begin = i;\n      keys.push(new Ed25519PublicKey(bytes.subarray(begin, begin + Ed25519PublicKey.LENGTH)));\n    }\n    return new MultiEd25519PublicKey(keys, threshold);\n  }\n}\n\nexport class MultiEd25519Signature {\n  static BITMAP_LEN: Uint8 = 4;\n\n  /**\n   * Signature for a K-of-N multisig transaction.\n   *\n   * @see {@link\n   * https://aptos.dev/guides/creating-a-signed-transaction#multisignature-transactions | Creating a Signed Transaction}\n   *\n   * @param signatures A list of ed25519 signatures\n   * @param bitmap 4 bytes, at most 32 signatures are supported. If Nth bit value is `1`, the Nth\n   * signature should be provided in `signatures`. Bits are read from left to right\n   */\n  constructor(public readonly signatures: Seq<Ed25519Signature>, public readonly bitmap: Uint8Array) {\n    if (bitmap.length !== MultiEd25519Signature.BITMAP_LEN) {\n      throw new Error(`\"bitmap\" length should be ${MultiEd25519Signature.BITMAP_LEN}`);\n    }\n  }\n\n  /**\n   * Converts a MultiEd25519Signature into bytes with `bytes = s1_bytes | ... | sn_bytes | bitmap`\n   */\n  toBytes(): Bytes {\n    const bytes = new Uint8Array(this.signatures.length * Ed25519Signature.LENGTH + MultiEd25519Signature.BITMAP_LEN);\n    this.signatures.forEach((k: Ed25519Signature, i: number) => {\n      bytes.set(k.value, i * Ed25519Signature.LENGTH);\n    });\n\n    bytes.set(this.bitmap, this.signatures.length * Ed25519Signature.LENGTH);\n\n    return bytes;\n  }\n\n  /**\n   * Helper method to create a bitmap out of the specified bit positions\n   * @param bits The bitmap positions that should be set. A position starts at index 0.\n   * Valid position should range between 0 and 31.\n   * @example\n   * Here's an example of valid `bits`\n   * ```\n   * [0, 2, 31]\n   * ```\n   * `[0, 2, 31]` means the 1st, 3rd and 32nd bits should be set in the bitmap.\n   * The result bitmap should be 0b1010000000000000000000000000001\n   *\n   * @returns bitmap that is 32bit long\n   */\n  static createBitmap(bits: Seq<Uint8>): Uint8Array {\n    // Bits are read from left to right. e.g. 0b10000000 represents the first bit is set in one byte.\n    // The decimal value of 0b10000000 is 128.\n    const firstBitInByte = 128;\n    const bitmap = new Uint8Array([0, 0, 0, 0]);\n\n    // Check if duplicates exist in bits\n    const dupCheckSet = new Set();\n\n    bits.forEach((bit: number) => {\n      if (bit >= MAX_SIGNATURES_SUPPORTED) {\n        throw new Error(`Invalid bit value ${bit}.`);\n      }\n\n      if (dupCheckSet.has(bit)) {\n        throw new Error(\"Duplicated bits detected.\");\n      }\n\n      dupCheckSet.add(bit);\n\n      const byteOffset = Math.floor(bit / 8);\n\n      let byte = bitmap[byteOffset];\n\n      byte |= firstBitInByte >> bit % 8;\n\n      bitmap[byteOffset] = byte;\n    });\n\n    return bitmap;\n  }\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeBytes(this.toBytes());\n  }\n\n  static deserialize(deserializer: Deserializer): MultiEd25519Signature {\n    const bytes = deserializer.deserializeBytes();\n    const bitmap = bytes.subarray(bytes.length - 4);\n\n    const sigs: Seq<Ed25519Signature> = [];\n\n    for (let i = 0; i < bytes.length - bitmap.length; i += Ed25519Signature.LENGTH) {\n      const begin = i;\n      sigs.push(new Ed25519Signature(bytes.subarray(begin, begin + Ed25519Signature.LENGTH)));\n    }\n    return new MultiEd25519Signature(sigs, bitmap);\n  }\n}\n","// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\n/* eslint-disable @typescript-eslint/naming-convention */\nimport { AccountAddress } from \"./account_address\";\nimport { Serializer, Deserializer, Seq, deserializeVector, serializeVector } from \"../bcs\";\nimport { Ed25519PublicKey, Ed25519Signature } from \"./ed25519\";\nimport { MultiEd25519PublicKey, MultiEd25519Signature } from \"./multi_ed25519\";\n\nexport abstract class TransactionAuthenticator {\n  abstract serialize(serializer: Serializer): void;\n\n  static deserialize(deserializer: Deserializer): TransactionAuthenticator {\n    const index = deserializer.deserializeUleb128AsU32();\n    switch (index) {\n      case 0:\n        return TransactionAuthenticatorEd25519.load(deserializer);\n      case 1:\n        return TransactionAuthenticatorMultiEd25519.load(deserializer);\n      case 2:\n        return TransactionAuthenticatorMultiAgent.load(deserializer);\n      case 3:\n        return TransactionAuthenticatorFeePayer.load(deserializer);\n      default:\n        throw new Error(`Unknown variant index for TransactionAuthenticator: ${index}`);\n    }\n  }\n}\n\nexport class TransactionAuthenticatorEd25519 extends TransactionAuthenticator {\n  /**\n   * An authenticator for single signature.\n   *\n   * @param public_key Client's public key.\n   * @param signature Signature of a raw transaction.\n   * @see {@link https://aptos.dev/guides/creating-a-signed-transaction/ | Creating a Signed Transaction}\n   * for details about generating a signature.\n   */\n  constructor(public readonly public_key: Ed25519PublicKey, public readonly signature: Ed25519Signature) {\n    super();\n  }\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeU32AsUleb128(0);\n    this.public_key.serialize(serializer);\n    this.signature.serialize(serializer);\n  }\n\n  static load(deserializer: Deserializer): TransactionAuthenticatorEd25519 {\n    const public_key = Ed25519PublicKey.deserialize(deserializer);\n    const signature = Ed25519Signature.deserialize(deserializer);\n    return new TransactionAuthenticatorEd25519(public_key, signature);\n  }\n}\n\nexport class TransactionAuthenticatorMultiEd25519 extends TransactionAuthenticator {\n  /**\n   * An authenticator for multiple signatures.\n   *\n   * @param public_key\n   * @param signature\n   *\n   */\n  constructor(public readonly public_key: MultiEd25519PublicKey, public readonly signature: MultiEd25519Signature) {\n    super();\n  }\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeU32AsUleb128(1);\n    this.public_key.serialize(serializer);\n    this.signature.serialize(serializer);\n  }\n\n  static load(deserializer: Deserializer): TransactionAuthenticatorMultiEd25519 {\n    const public_key = MultiEd25519PublicKey.deserialize(deserializer);\n    const signature = MultiEd25519Signature.deserialize(deserializer);\n    return new TransactionAuthenticatorMultiEd25519(public_key, signature);\n  }\n}\n\nexport class TransactionAuthenticatorMultiAgent extends TransactionAuthenticator {\n  constructor(\n    public readonly sender: AccountAuthenticator,\n    public readonly secondary_signer_addresses: Seq<AccountAddress>,\n    public readonly secondary_signers: Seq<AccountAuthenticator>,\n  ) {\n    super();\n  }\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeU32AsUleb128(2);\n    this.sender.serialize(serializer);\n    serializeVector<AccountAddress>(this.secondary_signer_addresses, serializer);\n    serializeVector<AccountAuthenticator>(this.secondary_signers, serializer);\n  }\n\n  static load(deserializer: Deserializer): TransactionAuthenticatorMultiAgent {\n    const sender = AccountAuthenticator.deserialize(deserializer);\n    const secondary_signer_addresses = deserializeVector(deserializer, AccountAddress);\n    const secondary_signers = deserializeVector(deserializer, AccountAuthenticator);\n    return new TransactionAuthenticatorMultiAgent(sender, secondary_signer_addresses, secondary_signers);\n  }\n}\n\nexport class TransactionAuthenticatorFeePayer extends TransactionAuthenticator {\n  constructor(\n    public readonly sender: AccountAuthenticator,\n    public readonly secondary_signer_addresses: Seq<AccountAddress>,\n    public readonly secondary_signers: Seq<AccountAuthenticator>,\n    public readonly fee_payer: { address: AccountAddress; authenticator: AccountAuthenticator },\n  ) {\n    super();\n  }\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeU32AsUleb128(3);\n    this.sender.serialize(serializer);\n    serializeVector<AccountAddress>(this.secondary_signer_addresses, serializer);\n    serializeVector<AccountAuthenticator>(this.secondary_signers, serializer);\n    this.fee_payer.address.serialize(serializer);\n    this.fee_payer.authenticator.serialize(serializer);\n  }\n\n  static load(deserializer: Deserializer): TransactionAuthenticatorMultiAgent {\n    const sender = AccountAuthenticator.deserialize(deserializer);\n    const secondary_signer_addresses = deserializeVector(deserializer, AccountAddress);\n    const secondary_signers = deserializeVector(deserializer, AccountAuthenticator);\n    const address = AccountAddress.deserialize(deserializer);\n    const authenticator = AccountAuthenticator.deserialize(deserializer);\n    const fee_payer = { address, authenticator };\n    return new TransactionAuthenticatorFeePayer(sender, secondary_signer_addresses, secondary_signers, fee_payer);\n  }\n}\n\nexport abstract class AccountAuthenticator {\n  abstract serialize(serializer: Serializer): void;\n\n  static deserialize(deserializer: Deserializer): AccountAuthenticator {\n    const index = deserializer.deserializeUleb128AsU32();\n    switch (index) {\n      case 0:\n        return AccountAuthenticatorEd25519.load(deserializer);\n      case 1:\n        return AccountAuthenticatorMultiEd25519.load(deserializer);\n      default:\n        throw new Error(`Unknown variant index for AccountAuthenticator: ${index}`);\n    }\n  }\n}\n\nexport class AccountAuthenticatorEd25519 extends AccountAuthenticator {\n  constructor(public readonly public_key: Ed25519PublicKey, public readonly signature: Ed25519Signature) {\n    super();\n  }\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeU32AsUleb128(0);\n    this.public_key.serialize(serializer);\n    this.signature.serialize(serializer);\n  }\n\n  static load(deserializer: Deserializer): AccountAuthenticatorEd25519 {\n    const public_key = Ed25519PublicKey.deserialize(deserializer);\n    const signature = Ed25519Signature.deserialize(deserializer);\n    return new AccountAuthenticatorEd25519(public_key, signature);\n  }\n}\n\nexport class AccountAuthenticatorMultiEd25519 extends AccountAuthenticator {\n  constructor(public readonly public_key: MultiEd25519PublicKey, public readonly signature: MultiEd25519Signature) {\n    super();\n  }\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeU32AsUleb128(1);\n    this.public_key.serialize(serializer);\n    this.signature.serialize(serializer);\n  }\n\n  static load(deserializer: Deserializer): AccountAuthenticatorMultiEd25519 {\n    const public_key = MultiEd25519PublicKey.deserialize(deserializer);\n    const signature = MultiEd25519Signature.deserialize(deserializer);\n    return new AccountAuthenticatorMultiEd25519(public_key, signature);\n  }\n}\n","// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\nimport { Deserializer, Serializer } from \"../bcs\";\n\nexport class Identifier {\n  constructor(public value: string) {}\n\n  public serialize(serializer: Serializer): void {\n    serializer.serializeStr(this.value);\n  }\n\n  static deserialize(deserializer: Deserializer): Identifier {\n    const value = deserializer.deserializeStr();\n    return new Identifier(value);\n  }\n}\n","// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable class-methods-use-this */\n/* eslint-disable max-classes-per-file */\nimport { AccountAddress } from \"./account_address\";\nimport { Deserializer, Seq, Serializer, deserializeVector, serializeVector } from \"../bcs\";\nimport { Identifier } from \"./identifier\";\n\nexport abstract class TypeTag {\n  abstract serialize(serializer: Serializer): void;\n\n  static deserialize(deserializer: Deserializer): TypeTag {\n    const index = deserializer.deserializeUleb128AsU32();\n    switch (index) {\n      case 0:\n        return TypeTagBool.load(deserializer);\n      case 1:\n        return TypeTagU8.load(deserializer);\n      case 2:\n        return TypeTagU64.load(deserializer);\n      case 3:\n        return TypeTagU128.load(deserializer);\n      case 4:\n        return TypeTagAddress.load(deserializer);\n      case 5:\n        return TypeTagSigner.load(deserializer);\n      case 6:\n        return TypeTagVector.load(deserializer);\n      case 7:\n        return TypeTagStruct.load(deserializer);\n      case 8:\n        return TypeTagU16.load(deserializer);\n      case 9:\n        return TypeTagU32.load(deserializer);\n      case 10:\n        return TypeTagU256.load(deserializer);\n      default:\n        throw new Error(`Unknown variant index for TypeTag: ${index}`);\n    }\n  }\n}\n\nexport class TypeTagBool extends TypeTag {\n  serialize(serializer: Serializer): void {\n    serializer.serializeU32AsUleb128(0);\n  }\n\n  static load(_deserializer: Deserializer): TypeTagBool {\n    return new TypeTagBool();\n  }\n}\n\nexport class TypeTagU8 extends TypeTag {\n  serialize(serializer: Serializer): void {\n    serializer.serializeU32AsUleb128(1);\n  }\n\n  static load(_deserializer: Deserializer): TypeTagU8 {\n    return new TypeTagU8();\n  }\n}\n\nexport class TypeTagU16 extends TypeTag {\n  serialize(serializer: Serializer): void {\n    serializer.serializeU32AsUleb128(8);\n  }\n\n  static load(_deserializer: Deserializer): TypeTagU16 {\n    return new TypeTagU16();\n  }\n}\n\nexport class TypeTagU32 extends TypeTag {\n  serialize(serializer: Serializer): void {\n    serializer.serializeU32AsUleb128(9);\n  }\n\n  static load(_deserializer: Deserializer): TypeTagU32 {\n    return new TypeTagU32();\n  }\n}\n\nexport class TypeTagU64 extends TypeTag {\n  serialize(serializer: Serializer): void {\n    serializer.serializeU32AsUleb128(2);\n  }\n\n  static load(_deserializer: Deserializer): TypeTagU64 {\n    return new TypeTagU64();\n  }\n}\n\nexport class TypeTagU128 extends TypeTag {\n  serialize(serializer: Serializer): void {\n    serializer.serializeU32AsUleb128(3);\n  }\n\n  static load(_deserializer: Deserializer): TypeTagU128 {\n    return new TypeTagU128();\n  }\n}\n\nexport class TypeTagU256 extends TypeTag {\n  serialize(serializer: Serializer): void {\n    serializer.serializeU32AsUleb128(10);\n  }\n\n  static load(_deserializer: Deserializer): TypeTagU256 {\n    return new TypeTagU256();\n  }\n}\n\nexport class TypeTagAddress extends TypeTag {\n  serialize(serializer: Serializer): void {\n    serializer.serializeU32AsUleb128(4);\n  }\n\n  static load(_deserializer: Deserializer): TypeTagAddress {\n    return new TypeTagAddress();\n  }\n}\n\nexport class TypeTagSigner extends TypeTag {\n  serialize(serializer: Serializer): void {\n    serializer.serializeU32AsUleb128(5);\n  }\n\n  static load(_deserializer: Deserializer): TypeTagSigner {\n    return new TypeTagSigner();\n  }\n}\n\nexport class TypeTagVector extends TypeTag {\n  constructor(public readonly value: TypeTag) {\n    super();\n  }\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeU32AsUleb128(6);\n    this.value.serialize(serializer);\n  }\n\n  static load(deserializer: Deserializer): TypeTagVector {\n    const value = TypeTag.deserialize(deserializer);\n    return new TypeTagVector(value);\n  }\n}\n\nexport class TypeTagStruct extends TypeTag {\n  constructor(public readonly value: StructTag) {\n    super();\n  }\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeU32AsUleb128(7);\n    this.value.serialize(serializer);\n  }\n\n  static load(deserializer: Deserializer): TypeTagStruct {\n    const value = StructTag.deserialize(deserializer);\n    return new TypeTagStruct(value);\n  }\n\n  isStringTypeTag(): boolean {\n    if (\n      this.value.module_name.value === \"string\" &&\n      this.value.name.value === \"String\" &&\n      this.value.address.toHexString() === AccountAddress.CORE_CODE_ADDRESS.toHexString()\n    ) {\n      return true;\n    }\n    return false;\n  }\n}\n\nexport class StructTag {\n  constructor(\n    public readonly address: AccountAddress,\n    public readonly module_name: Identifier,\n    public readonly name: Identifier,\n    public readonly type_args: Seq<TypeTag>,\n  ) {}\n\n  /**\n   * Converts a string literal to a StructTag\n   * @param structTag String literal in format \"AcountAddress::module_name::ResourceName\",\n   *   e.g. \"0x1::aptos_coin::AptosCoin\"\n   * @returns\n   */\n  static fromString(structTag: string): StructTag {\n    // Use the TypeTagParser to parse the string literal into a TypeTagStruct\n    const typeTagStruct = new TypeTagParser(structTag).parseTypeTag() as TypeTagStruct;\n\n    // Convert and return as a StructTag\n    return new StructTag(\n      typeTagStruct.value.address,\n      typeTagStruct.value.module_name,\n      typeTagStruct.value.name,\n      typeTagStruct.value.type_args,\n    );\n  }\n\n  serialize(serializer: Serializer): void {\n    this.address.serialize(serializer);\n    this.module_name.serialize(serializer);\n    this.name.serialize(serializer);\n    serializeVector<TypeTag>(this.type_args, serializer);\n  }\n\n  static deserialize(deserializer: Deserializer): StructTag {\n    const address = AccountAddress.deserialize(deserializer);\n    const moduleName = Identifier.deserialize(deserializer);\n    const name = Identifier.deserialize(deserializer);\n    const typeArgs = deserializeVector(deserializer, TypeTag);\n    return new StructTag(address, moduleName, name, typeArgs);\n  }\n}\n\nexport const stringStructTag = new StructTag(\n  AccountAddress.fromHex(\"0x1\"),\n  new Identifier(\"string\"),\n  new Identifier(\"String\"),\n  [],\n);\n\nexport function optionStructTag(typeArg: TypeTag): StructTag {\n  return new StructTag(AccountAddress.fromHex(\"0x1\"), new Identifier(\"option\"), new Identifier(\"Option\"), [typeArg]);\n}\n\nexport function objectStructTag(typeArg: TypeTag): StructTag {\n  return new StructTag(AccountAddress.fromHex(\"0x1\"), new Identifier(\"object\"), new Identifier(\"Object\"), [typeArg]);\n}\n\nfunction bail(message: string) {\n  throw new TypeTagParserError(message);\n}\n\nfunction isWhiteSpace(c: string): boolean {\n  if (c.match(/\\s/)) {\n    return true;\n  }\n  return false;\n}\n\nfunction isValidAlphabetic(c: string): boolean {\n  if (c.match(/[_A-Za-z0-9]/g)) {\n    return true;\n  }\n  return false;\n}\n\n// Generic format is T<digits> - for example T1, T2, T10\nfunction isGeneric(c: string): boolean {\n  if (c.match(/T\\d+/g)) {\n    return true;\n  }\n  return false;\n}\n\ntype TokenType = string;\ntype TokenValue = string;\ntype Token = [TokenType, TokenValue];\n\n// Returns Token and Token byte size\nfunction nextToken(tagStr: string, pos: number): [Token, number] {\n  const c = tagStr[pos];\n  if (c === \":\") {\n    if (tagStr.slice(pos, pos + 2) === \"::\") {\n      return [[\"COLON\", \"::\"], 2];\n    }\n    bail(\"Unrecognized token.\");\n  } else if (c === \"<\") {\n    return [[\"LT\", \"<\"], 1];\n  } else if (c === \">\") {\n    return [[\"GT\", \">\"], 1];\n  } else if (c === \",\") {\n    return [[\"COMMA\", \",\"], 1];\n  } else if (isWhiteSpace(c)) {\n    let res = \"\";\n    for (let i = pos; i < tagStr.length; i += 1) {\n      const char = tagStr[i];\n      if (isWhiteSpace(char)) {\n        res = `${res}${char}`;\n      } else {\n        break;\n      }\n    }\n    return [[\"SPACE\", res], res.length];\n  } else if (isValidAlphabetic(c)) {\n    let res = \"\";\n    for (let i = pos; i < tagStr.length; i += 1) {\n      const char = tagStr[i];\n      if (isValidAlphabetic(char)) {\n        res = `${res}${char}`;\n      } else {\n        break;\n      }\n    }\n    if (isGeneric(res)) {\n      return [[\"GENERIC\", res], res.length];\n    }\n    return [[\"IDENT\", res], res.length];\n  }\n  throw new Error(\"Unrecognized token.\");\n}\n\nfunction tokenize(tagStr: string): Token[] {\n  let pos = 0;\n  const tokens = [];\n  while (pos < tagStr.length) {\n    const [token, size] = nextToken(tagStr, pos);\n    if (token[0] !== \"SPACE\") {\n      tokens.push(token);\n    }\n    pos += size;\n  }\n  return tokens;\n}\n\n/**\n * Parser to parse a type tag string\n */\nexport class TypeTagParser {\n  private readonly tokens: Token[];\n\n  private readonly typeTags: string[] = [];\n\n  constructor(tagStr: string, typeTags?: string[]) {\n    this.tokens = tokenize(tagStr);\n    this.typeTags = typeTags || [];\n  }\n\n  private consume(targetToken: string) {\n    const token = this.tokens.shift();\n    if (!token || token[1] !== targetToken) {\n      bail(\"Invalid type tag.\");\n    }\n  }\n\n  /**\n   * Consumes all of an unused generic field, mostly applicable to object\n   *\n   * Note: This is recursive.  it can be problematic if there's bad input\n   * @private\n   */\n  private consumeWholeGeneric() {\n    this.consume(\"<\");\n    while (this.tokens[0][1] !== \">\") {\n      // If it is nested, we have to consume another nested generic\n      if (this.tokens[0][1] === \"<\") {\n        this.consumeWholeGeneric();\n      }\n      this.tokens.shift();\n    }\n    this.consume(\">\");\n  }\n\n  private parseCommaList(endToken: TokenValue, allowTraillingComma: boolean): TypeTag[] {\n    const res: TypeTag[] = [];\n    if (this.tokens.length <= 0) {\n      bail(\"Invalid type tag.\");\n    }\n\n    while (this.tokens[0][1] !== endToken) {\n      res.push(this.parseTypeTag());\n\n      if (this.tokens.length > 0 && this.tokens[0][1] === endToken) {\n        break;\n      }\n\n      this.consume(\",\");\n      if (this.tokens.length > 0 && this.tokens[0][1] === endToken && allowTraillingComma) {\n        break;\n      }\n\n      if (this.tokens.length <= 0) {\n        bail(\"Invalid type tag.\");\n      }\n    }\n    return res;\n  }\n\n  parseTypeTag(): TypeTag {\n    if (this.tokens.length === 0) {\n      bail(\"Invalid type tag.\");\n    }\n\n    // Pop left most element out\n    const [tokenTy, tokenVal] = this.tokens.shift()!;\n\n    if (tokenVal === \"u8\") {\n      return new TypeTagU8();\n    }\n    if (tokenVal === \"u16\") {\n      return new TypeTagU16();\n    }\n    if (tokenVal === \"u32\") {\n      return new TypeTagU32();\n    }\n    if (tokenVal === \"u64\") {\n      return new TypeTagU64();\n    }\n    if (tokenVal === \"u128\") {\n      return new TypeTagU128();\n    }\n    if (tokenVal === \"u256\") {\n      return new TypeTagU256();\n    }\n    if (tokenVal === \"bool\") {\n      return new TypeTagBool();\n    }\n    if (tokenVal === \"address\") {\n      return new TypeTagAddress();\n    }\n    if (tokenVal === \"vector\") {\n      this.consume(\"<\");\n      const res = this.parseTypeTag();\n      this.consume(\">\");\n      return new TypeTagVector(res);\n    }\n    if (tokenVal === \"string\") {\n      return new TypeTagStruct(stringStructTag);\n    }\n    if (tokenTy === \"IDENT\" && (tokenVal.startsWith(\"0x\") || tokenVal.startsWith(\"0X\"))) {\n      const address = AccountAddress.fromHex(tokenVal);\n      this.consume(\"::\");\n      const [moduleTokenTy, module] = this.tokens.shift()!;\n      if (moduleTokenTy !== \"IDENT\") {\n        bail(\"Invalid type tag.\");\n      }\n      this.consume(\"::\");\n      const [nameTokenTy, name] = this.tokens.shift()!;\n      if (nameTokenTy !== \"IDENT\") {\n        bail(\"Invalid type tag.\");\n      }\n\n      // Objects can contain either concrete types e.g. 0x1::object::ObjectCore or generics e.g. T\n      // Neither matter as we can't do type checks, so just the address applies and we consume the entire generic.\n      // TODO: Support parsing structs that don't come from core code address\n      if (\n        AccountAddress.CORE_CODE_ADDRESS.toHexString() === address.toHexString() &&\n        module === \"object\" &&\n        name === \"Object\"\n      ) {\n        this.consumeWholeGeneric();\n        return new TypeTagAddress();\n      }\n\n      let tyTags: TypeTag[] = [];\n      // Check if the struct has ty args\n      if (this.tokens.length > 0 && this.tokens[0][1] === \"<\") {\n        this.consume(\"<\");\n        tyTags = this.parseCommaList(\">\", true);\n        this.consume(\">\");\n      }\n\n      const structTag = new StructTag(address, new Identifier(module), new Identifier(name), tyTags);\n      return new TypeTagStruct(structTag);\n    }\n    if (tokenTy === \"GENERIC\") {\n      if (this.typeTags.length === 0) {\n        bail(\"Can't convert generic type since no typeTags were specified.\");\n      }\n      // a generic tokenVal has the format of `T<digit>`, for example `T1`.\n      // The digit (i.e 1) indicates the the index of this type in the typeTags array.\n      // For a tokenVal == T1, should be parsed as the type in typeTags[1]\n      const idx = parseInt(tokenVal.substring(1), 10);\n      return new TypeTagParser(this.typeTags[idx]).parseTypeTag();\n    }\n\n    throw new Error(\"Invalid type tag.\");\n  }\n}\n\nexport class TypeTagParserError extends Error {\n  constructor(message: string) {\n    super(message);\n    this.name = \"TypeTagParserError\";\n  }\n}\n","// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\nimport { Deserializer, Serializer, Bytes, Seq, deserializeVector, serializeVector } from \"../bcs\";\n\nimport { ModuleId } from \"./transaction\";\n\nimport { TypeTag } from \"./type_tag\";\n\nexport class TypeArgumentABI {\n  /**\n   * Constructs a TypeArgumentABI instance.\n   * @param name\n   */\n  constructor(public readonly name: string) {}\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeStr(this.name);\n  }\n\n  static deserialize(deserializer: Deserializer): TypeArgumentABI {\n    const name = deserializer.deserializeStr();\n    return new TypeArgumentABI(name);\n  }\n}\n\nexport class ArgumentABI {\n  /**\n   * Constructs an ArgumentABI instance.\n   * @param name\n   * @param type_tag\n   */\n  constructor(public readonly name: string, public readonly type_tag: TypeTag) {}\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeStr(this.name);\n    this.type_tag.serialize(serializer);\n  }\n\n  static deserialize(deserializer: Deserializer): ArgumentABI {\n    const name = deserializer.deserializeStr();\n    const typeTag = TypeTag.deserialize(deserializer);\n    return new ArgumentABI(name, typeTag);\n  }\n}\n\nexport abstract class ScriptABI {\n  abstract serialize(serializer: Serializer): void;\n\n  static deserialize(deserializer: Deserializer): ScriptABI {\n    const index = deserializer.deserializeUleb128AsU32();\n    switch (index) {\n      case 0:\n        return TransactionScriptABI.load(deserializer);\n      case 1:\n        return EntryFunctionABI.load(deserializer);\n      default:\n        throw new Error(`Unknown variant index for TransactionPayload: ${index}`);\n    }\n  }\n}\n\nexport class TransactionScriptABI extends ScriptABI {\n  /**\n   * Constructs a TransactionScriptABI instance.\n   * @param name Entry function name\n   * @param doc\n   * @param code\n   * @param ty_args\n   * @param args\n   */\n  constructor(\n    public readonly name: string,\n    public readonly doc: string,\n    public readonly code: Bytes,\n    public readonly ty_args: Seq<TypeArgumentABI>,\n    public readonly args: Seq<ArgumentABI>,\n  ) {\n    super();\n  }\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeU32AsUleb128(0);\n    serializer.serializeStr(this.name);\n    serializer.serializeStr(this.doc);\n    serializer.serializeBytes(this.code);\n    serializeVector<TypeArgumentABI>(this.ty_args, serializer);\n    serializeVector<ArgumentABI>(this.args, serializer);\n  }\n\n  static load(deserializer: Deserializer): TransactionScriptABI {\n    const name = deserializer.deserializeStr();\n    const doc = deserializer.deserializeStr();\n    const code = deserializer.deserializeBytes();\n    const tyArgs = deserializeVector(deserializer, TypeArgumentABI);\n    const args = deserializeVector(deserializer, ArgumentABI);\n    return new TransactionScriptABI(name, doc, code, tyArgs, args);\n  }\n}\n\nexport class EntryFunctionABI extends ScriptABI {\n  /**\n   * Constructs a EntryFunctionABI instance\n   * @param name\n   * @param module_name Fully qualified module id\n   * @param doc\n   * @param ty_args\n   * @param args\n   */\n  constructor(\n    public readonly name: string,\n    public readonly module_name: ModuleId,\n    public readonly doc: string,\n    public readonly ty_args: Seq<TypeArgumentABI>,\n    public readonly args: Seq<ArgumentABI>,\n  ) {\n    super();\n  }\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeU32AsUleb128(1);\n    serializer.serializeStr(this.name);\n    this.module_name.serialize(serializer);\n    serializer.serializeStr(this.doc);\n    serializeVector<TypeArgumentABI>(this.ty_args, serializer);\n    serializeVector<ArgumentABI>(this.args, serializer);\n  }\n\n  static load(deserializer: Deserializer): EntryFunctionABI {\n    const name = deserializer.deserializeStr();\n    const moduleName = ModuleId.deserialize(deserializer);\n    const doc = deserializer.deserializeStr();\n    const tyArgs = deserializeVector(deserializer, TypeArgumentABI);\n    const args = deserializeVector(deserializer, ArgumentABI);\n    return new EntryFunctionABI(name, moduleName, doc, tyArgs, args);\n  }\n}\n","// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\nimport { sha3_256 as sha3Hash } from \"@noble/hashes/sha3\";\nimport { HexString } from \"../utils\";\nimport { Bytes } from \"../bcs\";\nimport { MultiEd25519PublicKey } from \"./multi_ed25519\";\nimport { Ed25519PublicKey } from \"./ed25519\";\n\n/**\n * Each account stores an authentication key. Authentication key enables account owners to rotate\n * their private key(s) associated with the account without changing the address that hosts their account.\n * @see {@link * https://aptos.dev/concepts/accounts | Account Basics}\n *\n * Account addresses can be derived from AuthenticationKey\n */\nexport class AuthenticationKey {\n  static readonly LENGTH: number = 32;\n\n  static readonly MULTI_ED25519_SCHEME: number = 1;\n\n  static readonly ED25519_SCHEME: number = 0;\n\n  static readonly DERIVE_RESOURCE_ACCOUNT_SCHEME: number = 255;\n\n  readonly bytes: Bytes;\n\n  constructor(bytes: Bytes) {\n    if (bytes.length !== AuthenticationKey.LENGTH) {\n      throw new Error(\"Expected a byte array of length 32\");\n    }\n    this.bytes = bytes;\n  }\n\n  /**\n   * Converts a K-of-N MultiEd25519PublicKey to AuthenticationKey with:\n   * `auth_key = sha3-256(p_1 | … | p_n | K | 0x01)`. `K` represents the K-of-N required for\n   * authenticating the transaction. `0x01` is the 1-byte scheme for multisig.\n   */\n  static fromMultiEd25519PublicKey(publicKey: MultiEd25519PublicKey): AuthenticationKey {\n    const pubKeyBytes = publicKey.toBytes();\n\n    const bytes = new Uint8Array(pubKeyBytes.length + 1);\n    bytes.set(pubKeyBytes);\n    bytes.set([AuthenticationKey.MULTI_ED25519_SCHEME], pubKeyBytes.length);\n\n    const hash = sha3Hash.create();\n    hash.update(bytes);\n\n    return new AuthenticationKey(hash.digest());\n  }\n\n  static fromEd25519PublicKey(publicKey: Ed25519PublicKey): AuthenticationKey {\n    const pubKeyBytes = publicKey.value;\n\n    const bytes = new Uint8Array(pubKeyBytes.length + 1);\n    bytes.set(pubKeyBytes);\n    bytes.set([AuthenticationKey.ED25519_SCHEME], pubKeyBytes.length);\n\n    const hash = sha3Hash.create();\n    hash.update(bytes);\n\n    return new AuthenticationKey(hash.digest());\n  }\n\n  /**\n   * Derives an account address from AuthenticationKey. Since current AccountAddress is 32 bytes,\n   * AuthenticationKey bytes are directly translated to AccountAddress.\n   */\n  derivedAddress(): HexString {\n    return HexString.fromUint8Array(this.bytes);\n  }\n}\n","// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\nimport { AccountAddress } from \"./account_address\";\nimport { AnyNumber, Serializer } from \"../bcs\";\n\nexport class RotationProofChallenge {\n  constructor(\n    public readonly accountAddress: AccountAddress,\n    public readonly moduleName: string,\n    public readonly structName: string,\n    public readonly sequenceNumber: AnyNumber,\n    public readonly originator: AccountAddress,\n    public readonly currentAuthKey: AccountAddress,\n    public readonly newPublicKey: Uint8Array,\n  ) {}\n\n  serialize(serializer: Serializer): void {\n    this.accountAddress.serialize(serializer);\n    serializer.serializeStr(this.moduleName);\n    serializer.serializeStr(this.structName);\n    serializer.serializeU64(this.sequenceNumber);\n    this.originator.serialize(serializer);\n    this.currentAuthKey.serialize(serializer);\n    serializer.serializeBytes(this.newPublicKey);\n  }\n}\n","import * as Types from './operations';\n\nimport { GraphQLClient } from 'graphql-request';\nimport * as Dom from 'graphql-request/dist/types.dom';\nexport const CurrentTokenOwnershipFieldsFragmentDoc = `\n    fragment CurrentTokenOwnershipFields on current_token_ownerships_v2 {\n  token_standard\n  token_properties_mutated_v1\n  token_data_id\n  table_type_v1\n  storage_id\n  property_version_v1\n  owner_address\n  last_transaction_version\n  last_transaction_timestamp\n  is_soulbound_v2\n  is_fungible_v2\n  amount\n  current_token_data {\n    collection_id\n    description\n    is_fungible_v2\n    largest_property_version_v1\n    last_transaction_timestamp\n    last_transaction_version\n    maximum\n    supply\n    token_data_id\n    token_name\n    token_properties\n    token_standard\n    token_uri\n    current_collection {\n      collection_id\n      collection_name\n      creator_address\n      current_supply\n      description\n      last_transaction_timestamp\n      last_transaction_version\n      max_supply\n      mutable_description\n      mutable_uri\n      table_handle_v1\n      token_standard\n      total_minted_v2\n      uri\n    }\n  }\n}\n    `;\nexport const TokenDataFieldsFragmentDoc = `\n    fragment TokenDataFields on current_token_datas {\n  creator_address\n  collection_name\n  description\n  metadata_uri\n  name\n  token_data_id_hash\n  collection_data_id_hash\n}\n    `;\nexport const CollectionDataFieldsFragmentDoc = `\n    fragment CollectionDataFields on current_collection_datas {\n  metadata_uri\n  supply\n  description\n  collection_name\n  collection_data_id_hash\n  table_handle\n  creator_address\n}\n    `;\nexport const TokenActivitiesFieldsFragmentDoc = `\n    fragment TokenActivitiesFields on token_activities_v2 {\n  after_value\n  before_value\n  entry_function_id_str\n  event_account_address\n  event_index\n  from_address\n  is_fungible_v2\n  property_version_v1\n  to_address\n  token_amount\n  token_data_id\n  token_standard\n  transaction_timestamp\n  transaction_version\n  type\n}\n    `;\nexport const GetAccountCoinsDataCount = `\n    query getAccountCoinsDataCount($address: String) {\n  current_fungible_asset_balances_aggregate(\n    where: {owner_address: {_eq: $address}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n    `;\nexport const GetAccountCoinsData = `\n    query getAccountCoinsData($where_condition: current_fungible_asset_balances_bool_exp!, $offset: Int, $limit: Int, $order_by: [current_fungible_asset_balances_order_by!]) {\n  current_fungible_asset_balances(\n    where: $where_condition\n    offset: $offset\n    limit: $limit\n    order_by: $order_by\n  ) {\n    amount\n    asset_type\n    is_frozen\n    is_primary\n    last_transaction_timestamp\n    last_transaction_version\n    owner_address\n    storage_id\n    token_standard\n    metadata {\n      token_standard\n      symbol\n      supply_aggregator_table_key_v1\n      supply_aggregator_table_handle_v1\n      project_uri\n      name\n      last_transaction_version\n      last_transaction_timestamp\n      icon_uri\n      decimals\n      creator_address\n      asset_type\n    }\n  }\n}\n    `;\nexport const GetAccountCurrentTokens = `\n    query getAccountCurrentTokens($address: String!, $offset: Int, $limit: Int) {\n  current_token_ownerships(\n    where: {owner_address: {_eq: $address}, amount: {_gt: 0}}\n    order_by: [{last_transaction_version: desc}, {creator_address: asc}, {collection_name: asc}, {name: asc}]\n    offset: $offset\n    limit: $limit\n  ) {\n    amount\n    current_token_data {\n      ...TokenDataFields\n    }\n    current_collection_data {\n      ...CollectionDataFields\n    }\n    last_transaction_version\n    property_version\n  }\n}\n    ${TokenDataFieldsFragmentDoc}\n${CollectionDataFieldsFragmentDoc}`;\nexport const GetAccountTokensCount = `\n    query getAccountTokensCount($where_condition: current_token_ownerships_v2_bool_exp, $offset: Int, $limit: Int) {\n  current_token_ownerships_v2_aggregate(\n    where: $where_condition\n    offset: $offset\n    limit: $limit\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n    `;\nexport const GetAccountTransactionsCount = `\n    query getAccountTransactionsCount($address: String) {\n  account_transactions_aggregate(where: {account_address: {_eq: $address}}) {\n    aggregate {\n      count\n    }\n  }\n}\n    `;\nexport const GetAccountTransactionsData = `\n    query getAccountTransactionsData($where_condition: account_transactions_bool_exp!, $offset: Int, $limit: Int, $order_by: [account_transactions_order_by!]) {\n  account_transactions(\n    where: $where_condition\n    order_by: $order_by\n    limit: $limit\n    offset: $offset\n  ) {\n    token_activities_v2 {\n      ...TokenActivitiesFields\n    }\n    transaction_version\n    account_address\n  }\n}\n    ${TokenActivitiesFieldsFragmentDoc}`;\nexport const GetCollectionData = `\n    query getCollectionData($where_condition: current_collections_v2_bool_exp!, $offset: Int, $limit: Int, $order_by: [current_collections_v2_order_by!]) {\n  current_collections_v2(\n    where: $where_condition\n    offset: $offset\n    limit: $limit\n    order_by: $order_by\n  ) {\n    collection_id\n    collection_name\n    creator_address\n    current_supply\n    description\n    last_transaction_timestamp\n    last_transaction_version\n    max_supply\n    mutable_description\n    mutable_uri\n    table_handle_v1\n    token_standard\n    total_minted_v2\n    uri\n  }\n}\n    `;\nexport const GetCollectionsWithOwnedTokens = `\n    query getCollectionsWithOwnedTokens($where_condition: current_collection_ownership_v2_view_bool_exp!, $offset: Int, $limit: Int, $order_by: [current_collection_ownership_v2_view_order_by!]) {\n  current_collection_ownership_v2_view(\n    where: $where_condition\n    offset: $offset\n    limit: $limit\n    order_by: $order_by\n  ) {\n    current_collection {\n      collection_id\n      collection_name\n      creator_address\n      current_supply\n      description\n      last_transaction_timestamp\n      last_transaction_version\n      mutable_description\n      max_supply\n      mutable_uri\n      table_handle_v1\n      token_standard\n      total_minted_v2\n      uri\n    }\n    collection_id\n    collection_name\n    collection_uri\n    creator_address\n    distinct_tokens\n    last_transaction_version\n    owner_address\n    single_token_uri\n  }\n}\n    `;\nexport const GetCurrentObjects = `\n    query getCurrentObjects($where_condition: current_objects_bool_exp, $offset: Int, $limit: Int, $order_by: [current_objects_order_by!]) {\n  current_objects(\n    where: $where_condition\n    offset: $offset\n    limit: $limit\n    order_by: $order_by\n  ) {\n    allow_ungated_transfer\n    state_key_hash\n    owner_address\n    object_address\n    last_transaction_version\n    last_guid_creation_num\n    is_deleted\n  }\n}\n    `;\nexport const GetDelegatedStakingActivities = `\n    query getDelegatedStakingActivities($delegatorAddress: String, $poolAddress: String) {\n  delegated_staking_activities(\n    where: {delegator_address: {_eq: $delegatorAddress}, pool_address: {_eq: $poolAddress}}\n  ) {\n    amount\n    delegator_address\n    event_index\n    event_type\n    pool_address\n    transaction_version\n  }\n}\n    `;\nexport const GetIndexerLedgerInfo = `\n    query getIndexerLedgerInfo {\n  ledger_infos {\n    chain_id\n  }\n}\n    `;\nexport const GetNumberOfDelegators = `\n    query getNumberOfDelegators($poolAddress: String) {\n  num_active_delegator_per_pool(\n    where: {pool_address: {_eq: $poolAddress}, num_active_delegator: {_gt: \"0\"}}\n    distinct_on: pool_address\n  ) {\n    num_active_delegator\n    pool_address\n  }\n}\n    `;\nexport const GetOwnedTokens = `\n    query getOwnedTokens($where_condition: current_token_ownerships_v2_bool_exp!, $offset: Int, $limit: Int, $order_by: [current_token_ownerships_v2_order_by!]) {\n  current_token_ownerships_v2(\n    where: $where_condition\n    offset: $offset\n    limit: $limit\n    order_by: $order_by\n  ) {\n    ...CurrentTokenOwnershipFields\n  }\n}\n    ${CurrentTokenOwnershipFieldsFragmentDoc}`;\nexport const GetOwnedTokensByTokenData = `\n    query getOwnedTokensByTokenData($where_condition: current_token_ownerships_v2_bool_exp!, $offset: Int, $limit: Int, $order_by: [current_token_ownerships_v2_order_by!]) {\n  current_token_ownerships_v2(\n    where: $where_condition\n    offset: $offset\n    limit: $limit\n    order_by: $order_by\n  ) {\n    ...CurrentTokenOwnershipFields\n  }\n}\n    ${CurrentTokenOwnershipFieldsFragmentDoc}`;\nexport const GetTokenActivities = `\n    query getTokenActivities($where_condition: token_activities_v2_bool_exp!, $offset: Int, $limit: Int, $order_by: [token_activities_v2_order_by!]) {\n  token_activities_v2(\n    where: $where_condition\n    order_by: $order_by\n    offset: $offset\n    limit: $limit\n  ) {\n    ...TokenActivitiesFields\n  }\n}\n    ${TokenActivitiesFieldsFragmentDoc}`;\nexport const GetTokenActivitiesCount = `\n    query getTokenActivitiesCount($token_id: String) {\n  token_activities_v2_aggregate(where: {token_data_id: {_eq: $token_id}}) {\n    aggregate {\n      count\n    }\n  }\n}\n    `;\nexport const GetTokenCurrentOwnerData = `\n    query getTokenCurrentOwnerData($where_condition: current_token_ownerships_v2_bool_exp!, $offset: Int, $limit: Int, $order_by: [current_token_ownerships_v2_order_by!]) {\n  current_token_ownerships_v2(\n    where: $where_condition\n    offset: $offset\n    limit: $limit\n    order_by: $order_by\n  ) {\n    ...CurrentTokenOwnershipFields\n  }\n}\n    ${CurrentTokenOwnershipFieldsFragmentDoc}`;\nexport const GetTokenData = `\n    query getTokenData($where_condition: current_token_datas_v2_bool_exp, $offset: Int, $limit: Int, $order_by: [current_token_datas_v2_order_by!]) {\n  current_token_datas_v2(\n    where: $where_condition\n    offset: $offset\n    limit: $limit\n    order_by: $order_by\n  ) {\n    collection_id\n    description\n    is_fungible_v2\n    largest_property_version_v1\n    last_transaction_timestamp\n    last_transaction_version\n    maximum\n    supply\n    token_data_id\n    token_name\n    token_properties\n    token_standard\n    token_uri\n    current_collection {\n      collection_id\n      collection_name\n      creator_address\n      current_supply\n      description\n      last_transaction_timestamp\n      last_transaction_version\n      max_supply\n      mutable_description\n      mutable_uri\n      table_handle_v1\n      token_standard\n      total_minted_v2\n      uri\n    }\n  }\n}\n    `;\nexport const GetTokenOwnedFromCollection = `\n    query getTokenOwnedFromCollection($where_condition: current_token_ownerships_v2_bool_exp!, $offset: Int, $limit: Int, $order_by: [current_token_ownerships_v2_order_by!]) {\n  current_token_ownerships_v2(\n    where: $where_condition\n    offset: $offset\n    limit: $limit\n    order_by: $order_by\n  ) {\n    ...CurrentTokenOwnershipFields\n  }\n}\n    ${CurrentTokenOwnershipFieldsFragmentDoc}`;\nexport const GetTokenOwnersData = `\n    query getTokenOwnersData($where_condition: current_token_ownerships_v2_bool_exp!, $offset: Int, $limit: Int, $order_by: [current_token_ownerships_v2_order_by!]) {\n  current_token_ownerships_v2(\n    where: $where_condition\n    offset: $offset\n    limit: $limit\n    order_by: $order_by\n  ) {\n    ...CurrentTokenOwnershipFields\n  }\n}\n    ${CurrentTokenOwnershipFieldsFragmentDoc}`;\nexport const GetTopUserTransactions = `\n    query getTopUserTransactions($limit: Int) {\n  user_transactions(limit: $limit, order_by: {version: desc}) {\n    version\n  }\n}\n    `;\nexport const GetUserTransactions = `\n    query getUserTransactions($where_condition: user_transactions_bool_exp!, $offset: Int, $limit: Int, $order_by: [user_transactions_order_by!]) {\n  user_transactions(\n    order_by: $order_by\n    where: $where_condition\n    limit: $limit\n    offset: $offset\n  ) {\n    version\n  }\n}\n    `;\n\nexport type SdkFunctionWrapper = <T>(action: (requestHeaders?:Record<string, string>) => Promise<T>, operationName: string, operationType?: string) => Promise<T>;\n\n\nconst defaultWrapper: SdkFunctionWrapper = (action, _operationName, _operationType) => action();\n\nexport function getSdk(client: GraphQLClient, withWrapper: SdkFunctionWrapper = defaultWrapper) {\n  return {\n    getAccountCoinsDataCount(variables?: Types.GetAccountCoinsDataCountQueryVariables, requestHeaders?: Dom.RequestInit[\"headers\"]): Promise<Types.GetAccountCoinsDataCountQuery> {\n      return withWrapper((wrappedRequestHeaders) => client.request<Types.GetAccountCoinsDataCountQuery>(GetAccountCoinsDataCount, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'getAccountCoinsDataCount', 'query');\n    },\n    getAccountCoinsData(variables: Types.GetAccountCoinsDataQueryVariables, requestHeaders?: Dom.RequestInit[\"headers\"]): Promise<Types.GetAccountCoinsDataQuery> {\n      return withWrapper((wrappedRequestHeaders) => client.request<Types.GetAccountCoinsDataQuery>(GetAccountCoinsData, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'getAccountCoinsData', 'query');\n    },\n    getAccountCurrentTokens(variables: Types.GetAccountCurrentTokensQueryVariables, requestHeaders?: Dom.RequestInit[\"headers\"]): Promise<Types.GetAccountCurrentTokensQuery> {\n      return withWrapper((wrappedRequestHeaders) => client.request<Types.GetAccountCurrentTokensQuery>(GetAccountCurrentTokens, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'getAccountCurrentTokens', 'query');\n    },\n    getAccountTokensCount(variables?: Types.GetAccountTokensCountQueryVariables, requestHeaders?: Dom.RequestInit[\"headers\"]): Promise<Types.GetAccountTokensCountQuery> {\n      return withWrapper((wrappedRequestHeaders) => client.request<Types.GetAccountTokensCountQuery>(GetAccountTokensCount, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'getAccountTokensCount', 'query');\n    },\n    getAccountTransactionsCount(variables?: Types.GetAccountTransactionsCountQueryVariables, requestHeaders?: Dom.RequestInit[\"headers\"]): Promise<Types.GetAccountTransactionsCountQuery> {\n      return withWrapper((wrappedRequestHeaders) => client.request<Types.GetAccountTransactionsCountQuery>(GetAccountTransactionsCount, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'getAccountTransactionsCount', 'query');\n    },\n    getAccountTransactionsData(variables: Types.GetAccountTransactionsDataQueryVariables, requestHeaders?: Dom.RequestInit[\"headers\"]): Promise<Types.GetAccountTransactionsDataQuery> {\n      return withWrapper((wrappedRequestHeaders) => client.request<Types.GetAccountTransactionsDataQuery>(GetAccountTransactionsData, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'getAccountTransactionsData', 'query');\n    },\n    getCollectionData(variables: Types.GetCollectionDataQueryVariables, requestHeaders?: Dom.RequestInit[\"headers\"]): Promise<Types.GetCollectionDataQuery> {\n      return withWrapper((wrappedRequestHeaders) => client.request<Types.GetCollectionDataQuery>(GetCollectionData, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'getCollectionData', 'query');\n    },\n    getCollectionsWithOwnedTokens(variables: Types.GetCollectionsWithOwnedTokensQueryVariables, requestHeaders?: Dom.RequestInit[\"headers\"]): Promise<Types.GetCollectionsWithOwnedTokensQuery> {\n      return withWrapper((wrappedRequestHeaders) => client.request<Types.GetCollectionsWithOwnedTokensQuery>(GetCollectionsWithOwnedTokens, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'getCollectionsWithOwnedTokens', 'query');\n    },\n    getCurrentObjects(variables?: Types.GetCurrentObjectsQueryVariables, requestHeaders?: Dom.RequestInit[\"headers\"]): Promise<Types.GetCurrentObjectsQuery> {\n      return withWrapper((wrappedRequestHeaders) => client.request<Types.GetCurrentObjectsQuery>(GetCurrentObjects, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'getCurrentObjects', 'query');\n    },\n    getDelegatedStakingActivities(variables?: Types.GetDelegatedStakingActivitiesQueryVariables, requestHeaders?: Dom.RequestInit[\"headers\"]): Promise<Types.GetDelegatedStakingActivitiesQuery> {\n      return withWrapper((wrappedRequestHeaders) => client.request<Types.GetDelegatedStakingActivitiesQuery>(GetDelegatedStakingActivities, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'getDelegatedStakingActivities', 'query');\n    },\n    getIndexerLedgerInfo(variables?: Types.GetIndexerLedgerInfoQueryVariables, requestHeaders?: Dom.RequestInit[\"headers\"]): Promise<Types.GetIndexerLedgerInfoQuery> {\n      return withWrapper((wrappedRequestHeaders) => client.request<Types.GetIndexerLedgerInfoQuery>(GetIndexerLedgerInfo, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'getIndexerLedgerInfo', 'query');\n    },\n    getNumberOfDelegators(variables?: Types.GetNumberOfDelegatorsQueryVariables, requestHeaders?: Dom.RequestInit[\"headers\"]): Promise<Types.GetNumberOfDelegatorsQuery> {\n      return withWrapper((wrappedRequestHeaders) => client.request<Types.GetNumberOfDelegatorsQuery>(GetNumberOfDelegators, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'getNumberOfDelegators', 'query');\n    },\n    getOwnedTokens(variables: Types.GetOwnedTokensQueryVariables, requestHeaders?: Dom.RequestInit[\"headers\"]): Promise<Types.GetOwnedTokensQuery> {\n      return withWrapper((wrappedRequestHeaders) => client.request<Types.GetOwnedTokensQuery>(GetOwnedTokens, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'getOwnedTokens', 'query');\n    },\n    getOwnedTokensByTokenData(variables: Types.GetOwnedTokensByTokenDataQueryVariables, requestHeaders?: Dom.RequestInit[\"headers\"]): Promise<Types.GetOwnedTokensByTokenDataQuery> {\n      return withWrapper((wrappedRequestHeaders) => client.request<Types.GetOwnedTokensByTokenDataQuery>(GetOwnedTokensByTokenData, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'getOwnedTokensByTokenData', 'query');\n    },\n    getTokenActivities(variables: Types.GetTokenActivitiesQueryVariables, requestHeaders?: Dom.RequestInit[\"headers\"]): Promise<Types.GetTokenActivitiesQuery> {\n      return withWrapper((wrappedRequestHeaders) => client.request<Types.GetTokenActivitiesQuery>(GetTokenActivities, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'getTokenActivities', 'query');\n    },\n    getTokenActivitiesCount(variables?: Types.GetTokenActivitiesCountQueryVariables, requestHeaders?: Dom.RequestInit[\"headers\"]): Promise<Types.GetTokenActivitiesCountQuery> {\n      return withWrapper((wrappedRequestHeaders) => client.request<Types.GetTokenActivitiesCountQuery>(GetTokenActivitiesCount, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'getTokenActivitiesCount', 'query');\n    },\n    getTokenCurrentOwnerData(variables: Types.GetTokenCurrentOwnerDataQueryVariables, requestHeaders?: Dom.RequestInit[\"headers\"]): Promise<Types.GetTokenCurrentOwnerDataQuery> {\n      return withWrapper((wrappedRequestHeaders) => client.request<Types.GetTokenCurrentOwnerDataQuery>(GetTokenCurrentOwnerData, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'getTokenCurrentOwnerData', 'query');\n    },\n    getTokenData(variables?: Types.GetTokenDataQueryVariables, requestHeaders?: Dom.RequestInit[\"headers\"]): Promise<Types.GetTokenDataQuery> {\n      return withWrapper((wrappedRequestHeaders) => client.request<Types.GetTokenDataQuery>(GetTokenData, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'getTokenData', 'query');\n    },\n    getTokenOwnedFromCollection(variables: Types.GetTokenOwnedFromCollectionQueryVariables, requestHeaders?: Dom.RequestInit[\"headers\"]): Promise<Types.GetTokenOwnedFromCollectionQuery> {\n      return withWrapper((wrappedRequestHeaders) => client.request<Types.GetTokenOwnedFromCollectionQuery>(GetTokenOwnedFromCollection, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'getTokenOwnedFromCollection', 'query');\n    },\n    getTokenOwnersData(variables: Types.GetTokenOwnersDataQueryVariables, requestHeaders?: Dom.RequestInit[\"headers\"]): Promise<Types.GetTokenOwnersDataQuery> {\n      return withWrapper((wrappedRequestHeaders) => client.request<Types.GetTokenOwnersDataQuery>(GetTokenOwnersData, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'getTokenOwnersData', 'query');\n    },\n    getTopUserTransactions(variables?: Types.GetTopUserTransactionsQueryVariables, requestHeaders?: Dom.RequestInit[\"headers\"]): Promise<Types.GetTopUserTransactionsQuery> {\n      return withWrapper((wrappedRequestHeaders) => client.request<Types.GetTopUserTransactionsQuery>(GetTopUserTransactions, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'getTopUserTransactions', 'query');\n    },\n    getUserTransactions(variables: Types.GetUserTransactionsQueryVariables, requestHeaders?: Dom.RequestInit[\"headers\"]): Promise<Types.GetUserTransactionsQuery> {\n      return withWrapper((wrappedRequestHeaders) => client.request<Types.GetUserTransactionsQuery>(GetUserTransactions, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'getUserTransactions', 'query');\n    }\n  };\n}\nexport type Sdk = ReturnType<typeof getSdk>;","// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\nimport { sha3_256 as sha3Hash } from \"@noble/hashes/sha3\";\nimport {\n  Ed25519PublicKey,\n  Ed25519Signature,\n  MultiEd25519PublicKey,\n  MultiEd25519Signature,\n  RawTransaction,\n  SignedTransaction,\n  TransactionAuthenticatorEd25519,\n  TransactionAuthenticatorMultiEd25519,\n  SigningMessage,\n  MultiAgentRawTransaction,\n  FeePayerRawTransaction,\n  AccountAddress,\n  EntryFunction,\n  Identifier,\n  ChainId,\n  Script,\n  TransactionPayload,\n  TransactionArgument,\n  TransactionPayloadEntryFunction,\n  TransactionPayloadScript,\n  ModuleId,\n  TypeTagParser,\n} from \"../aptos_types\";\nimport { bcsToBytes, Bytes, Deserializer, Serializer, Uint64, Uint8 } from \"../bcs\";\nimport { ArgumentABI, EntryFunctionABI, ScriptABI, TransactionScriptABI, TypeArgumentABI } from \"../aptos_types/abi\";\nimport { argToTransactionArgument, serializeArg } from \"./builder_utils\";\nimport * as Gen from \"../generated/index\";\nimport {\n  DEFAULT_TXN_EXP_SEC_FROM_NOW,\n  DEFAULT_MAX_GAS_AMOUNT,\n  HexString,\n  MaybeHexString,\n  MemoizeExpiring,\n} from \"../utils\";\n\nexport { TypeTagParser } from \"../aptos_types\";\n\nconst RAW_TRANSACTION_SALT = \"APTOS::RawTransaction\";\nconst RAW_TRANSACTION_WITH_DATA_SALT = \"APTOS::RawTransactionWithData\";\n\nexport type AnyRawTransaction = RawTransaction | MultiAgentRawTransaction | FeePayerRawTransaction;\n\n/**\n * Function that takes in a Signing Message (serialized raw transaction)\n *  and returns a signature\n */\nexport type SigningFn = (txn: SigningMessage) => Ed25519Signature | MultiEd25519Signature;\n\nexport class TransactionBuilder<F extends SigningFn> {\n  protected readonly signingFunction: F;\n\n  constructor(signingFunction: F, public readonly rawTxnBuilder?: TransactionBuilderABI) {\n    this.signingFunction = signingFunction;\n  }\n\n  /**\n   * Builds a RawTransaction. Relays the call to TransactionBuilderABI.build\n   * @param func\n   * @param ty_tags\n   * @param args\n   */\n  build(func: string, ty_tags: string[], args: any[]): RawTransaction {\n    if (!this.rawTxnBuilder) {\n      throw new Error(\"this.rawTxnBuilder doesn't exist.\");\n    }\n\n    return this.rawTxnBuilder.build(func, ty_tags, args);\n  }\n\n  /** Generates a Signing Message out of a raw transaction. */\n  static getSigningMessage(rawTxn: AnyRawTransaction): SigningMessage {\n    const hash = sha3Hash.create();\n    if (rawTxn instanceof RawTransaction) {\n      hash.update(RAW_TRANSACTION_SALT);\n    } else if (rawTxn instanceof MultiAgentRawTransaction) {\n      hash.update(RAW_TRANSACTION_WITH_DATA_SALT);\n    } else if (rawTxn instanceof FeePayerRawTransaction) {\n      hash.update(RAW_TRANSACTION_WITH_DATA_SALT);\n    } else {\n      throw new Error(\"Unknown transaction type.\");\n    }\n\n    const prefix = hash.digest();\n\n    const body = bcsToBytes(rawTxn);\n\n    const mergedArray = new Uint8Array(prefix.length + body.length);\n    mergedArray.set(prefix);\n    mergedArray.set(body, prefix.length);\n\n    return mergedArray;\n  }\n}\n\n/**\n * Provides signing method for signing a raw transaction with single public key.\n */\nexport class TransactionBuilderEd25519 extends TransactionBuilder<SigningFn> {\n  private readonly publicKey: Uint8Array;\n\n  constructor(signingFunction: SigningFn, publicKey: Uint8Array, rawTxnBuilder?: TransactionBuilderABI) {\n    super(signingFunction, rawTxnBuilder);\n    this.publicKey = publicKey;\n  }\n\n  rawToSigned(rawTxn: RawTransaction): SignedTransaction {\n    const signingMessage = TransactionBuilder.getSigningMessage(rawTxn);\n    const signature = this.signingFunction(signingMessage);\n\n    const authenticator = new TransactionAuthenticatorEd25519(\n      new Ed25519PublicKey(this.publicKey),\n      signature as Ed25519Signature,\n    );\n\n    return new SignedTransaction(rawTxn, authenticator);\n  }\n\n  /** Signs a raw transaction and returns a bcs serialized transaction. */\n  sign(rawTxn: RawTransaction): Bytes {\n    return bcsToBytes(this.rawToSigned(rawTxn));\n  }\n}\n\n/**\n * Provides signing method for signing a raw transaction with multisig public key.\n */\nexport class TransactionBuilderMultiEd25519 extends TransactionBuilder<SigningFn> {\n  private readonly publicKey: MultiEd25519PublicKey;\n\n  constructor(signingFunction: SigningFn, publicKey: MultiEd25519PublicKey) {\n    super(signingFunction);\n    this.publicKey = publicKey;\n  }\n\n  rawToSigned(rawTxn: RawTransaction): SignedTransaction {\n    const signingMessage = TransactionBuilder.getSigningMessage(rawTxn);\n    const signature = this.signingFunction(signingMessage);\n\n    const authenticator = new TransactionAuthenticatorMultiEd25519(this.publicKey, signature as MultiEd25519Signature);\n\n    return new SignedTransaction(rawTxn, authenticator);\n  }\n\n  /** Signs a raw transaction and returns a bcs serialized transaction. */\n  sign(rawTxn: RawTransaction): Bytes {\n    return bcsToBytes(this.rawToSigned(rawTxn));\n  }\n}\n\n/**\n * Config for creating raw transactions.\n */\nexport interface ABIBuilderConfig {\n  sender: MaybeHexString | AccountAddress;\n  sequenceNumber: Uint64 | string;\n  gasUnitPrice: Uint64 | string;\n  maxGasAmount?: Uint64 | string;\n  expSecFromNow?: number | string;\n  chainId: Uint8 | string;\n}\n\n/**\n * Builds raw transactions based on ABI\n */\nexport class TransactionBuilderABI {\n  private readonly abiMap: Map<string, ScriptABI>;\n\n  private readonly builderConfig: Partial<ABIBuilderConfig>;\n\n  /**\n   * Constructs a TransactionBuilderABI instance\n   * @param abis List of binary ABIs.\n   * @param builderConfig Configs for creating a raw transaction.\n   */\n  constructor(abis: Bytes[], builderConfig?: ABIBuilderConfig) {\n    this.abiMap = new Map<string, ScriptABI>();\n\n    abis.forEach((abi) => {\n      const deserializer = new Deserializer(abi);\n      const scriptABI = ScriptABI.deserialize(deserializer);\n      let k: string;\n      if (scriptABI instanceof EntryFunctionABI) {\n        const funcABI = scriptABI as EntryFunctionABI;\n        const { address: addr, name: moduleName } = funcABI.module_name;\n        k = `${HexString.fromUint8Array(addr.address).toShortString()}::${moduleName.value}::${funcABI.name}`;\n      } else {\n        const funcABI = scriptABI as TransactionScriptABI;\n        k = funcABI.name;\n      }\n\n      if (this.abiMap.has(k)) {\n        throw new Error(\"Found conflicting ABI interfaces\");\n      }\n\n      this.abiMap.set(k, scriptABI);\n    });\n\n    this.builderConfig = {\n      maxGasAmount: BigInt(DEFAULT_MAX_GAS_AMOUNT),\n      expSecFromNow: DEFAULT_TXN_EXP_SEC_FROM_NOW,\n      ...builderConfig,\n    };\n  }\n\n  private static toBCSArgs(abiArgs: any[], args: any[]): Bytes[] {\n    if (abiArgs.length !== args.length) {\n      throw new Error(\"Wrong number of args provided.\");\n    }\n\n    return args.map((arg, i) => {\n      const serializer = new Serializer();\n      serializeArg(arg, abiArgs[i].type_tag, serializer);\n      return serializer.getBytes();\n    });\n  }\n\n  private static toTransactionArguments(abiArgs: any[], args: any[]): TransactionArgument[] {\n    if (abiArgs.length !== args.length) {\n      throw new Error(\"Wrong number of args provided.\");\n    }\n\n    return args.map((arg, i) => argToTransactionArgument(arg, abiArgs[i].type_tag));\n  }\n\n  setSequenceNumber(seqNumber: Uint64 | string) {\n    this.builderConfig.sequenceNumber = BigInt(seqNumber);\n  }\n\n  /**\n   * Builds a TransactionPayload. For dApps, chain ID and account sequence numbers are only known to the wallet.\n   * Instead of building a RawTransaction (requires chainID and sequenceNumber), dApps can build a TransactionPayload\n   * and pass the payload to the wallet for signing and sending.\n   * @param func Fully qualified func names, e.g. 0x1::aptos_account::transfer\n   * @param ty_tags TypeTag strings\n   * @param args Function arguments\n   * @returns TransactionPayload\n   */\n  buildTransactionPayload(func: string, ty_tags: string[], args: any[]): TransactionPayload {\n    const typeTags = ty_tags.map((ty_arg) => new TypeTagParser(ty_arg).parseTypeTag());\n\n    let payload: TransactionPayload;\n\n    if (!this.abiMap.has(func)) {\n      throw new Error(`Cannot find function: ${func}`);\n    }\n\n    const scriptABI = this.abiMap.get(func);\n\n    if (scriptABI instanceof EntryFunctionABI) {\n      const funcABI = scriptABI as EntryFunctionABI;\n      const bcsArgs = TransactionBuilderABI.toBCSArgs(funcABI.args, args);\n      payload = new TransactionPayloadEntryFunction(\n        new EntryFunction(funcABI.module_name, new Identifier(funcABI.name), typeTags, bcsArgs),\n      );\n    } else if (scriptABI instanceof TransactionScriptABI) {\n      const funcABI = scriptABI as TransactionScriptABI;\n      const scriptArgs = TransactionBuilderABI.toTransactionArguments(funcABI.args, args);\n\n      payload = new TransactionPayloadScript(new Script(funcABI.code, typeTags, scriptArgs));\n    } else {\n      /* istanbul ignore next */\n      throw new Error(\"Unknown ABI format.\");\n    }\n\n    return payload;\n  }\n\n  /**\n   * Builds a RawTransaction\n   * @param func Fully qualified func names, e.g. 0x1::aptos_account::transfer\n   * @param ty_tags TypeTag strings.\n   * @example Below are valid value examples\n   * ```\n   * // Structs are in format `AccountAddress::ModuleName::StructName`\n   * 0x1::aptos_coin::AptosCoin\n   * // Vectors are in format `vector<other_tag_string>`\n   * vector<0x1::aptos_coin::AptosCoin>\n   * bool\n   * u8\n   * u16\n   * u32\n   * u64\n   * u128\n   * u256\n   * address\n   * ```\n   * @param args Function arguments\n   * @returns RawTransaction\n   */\n  build(func: string, ty_tags: string[], args: any[]): RawTransaction {\n    const { sender, sequenceNumber, gasUnitPrice, maxGasAmount, expSecFromNow, chainId } = this.builderConfig;\n\n    if (!gasUnitPrice) {\n      throw new Error(\"No gasUnitPrice provided.\");\n    }\n\n    const senderAccount = sender instanceof AccountAddress ? sender : AccountAddress.fromHex(sender!);\n    const expTimestampSec = BigInt(Math.floor(Date.now() / 1000) + Number(expSecFromNow));\n    const payload = this.buildTransactionPayload(func, ty_tags, args);\n\n    if (payload) {\n      return new RawTransaction(\n        senderAccount,\n        BigInt(sequenceNumber!),\n        payload,\n        BigInt(maxGasAmount!),\n        BigInt(gasUnitPrice!),\n        expTimestampSec,\n        new ChainId(Number(chainId)),\n      );\n    }\n\n    throw new Error(\"Invalid ABI.\");\n  }\n}\n\nexport type RemoteABIBuilderConfig = Partial<Omit<ABIBuilderConfig, \"sender\">> & {\n  sender: MaybeHexString | AccountAddress;\n};\n\nexport interface AptosClientInterface {\n  getAccountModules: (accountAddress: MaybeHexString) => Promise<Gen.MoveModuleBytecode[]>;\n  getAccount: (accountAddress: MaybeHexString) => Promise<Gen.AccountData>;\n  getChainId: () => Promise<number>;\n  estimateGasPrice: () => Promise<Gen.GasEstimation>;\n}\n\n/**\n * This transaction builder downloads JSON ABIs from the fullnodes.\n * It then translates the JSON ABIs to the format that is accepted by TransactionBuilderABI\n */\nexport class TransactionBuilderRemoteABI {\n  // We don't want the builder to depend on the actual AptosClient. There might be circular dependencies.\n  constructor(\n    private readonly aptosClient: AptosClientInterface,\n    private readonly builderConfig: RemoteABIBuilderConfig,\n  ) {}\n\n  // Cache for 10 minutes\n  @MemoizeExpiring(10 * 60 * 1000)\n  async fetchABI(addr: string) {\n    const modules = await this.aptosClient.getAccountModules(addr);\n    const abis = modules\n      .map((module) => module.abi)\n      .flatMap((abi) =>\n        abi!.exposed_functions\n          .filter((ef) => ef.is_entry)\n          .map(\n            (ef) =>\n              ({\n                fullName: `${abi!.address}::${abi!.name}::${ef.name}`,\n                ...ef,\n              } as Gen.MoveFunction & { fullName: string }),\n          ),\n      );\n\n    const abiMap = new Map<string, Gen.MoveFunction & { fullName: string }>();\n    abis.forEach((abi) => {\n      abiMap.set(abi.fullName, abi);\n    });\n\n    return abiMap;\n  }\n\n  /**\n   * Builds a raw transaction. Only support script function a.k.a entry function payloads\n   *\n   * @param func fully qualified function name in format <address>::<module>::<function>, e.g. 0x1::coin::transfer\n   * @param ty_tags\n   * @param args\n   * @returns RawTransaction\n   */\n  async build(func: Gen.EntryFunctionId, ty_tags: Gen.MoveType[], args: any[]): Promise<RawTransaction> {\n    /* eslint no-param-reassign: [\"off\"] */\n    const normlize = (s: string) => s.replace(/^0[xX]0*/g, \"0x\");\n    func = normlize(func);\n    const funcNameParts = func.split(\"::\");\n    if (funcNameParts.length !== 3) {\n      throw new Error(\n        // eslint-disable-next-line max-len\n        \"'func' needs to be a fully qualified function name in format <address>::<module>::<function>, e.g. 0x1::coin::transfer\",\n      );\n    }\n\n    const [addr, module] = func.split(\"::\");\n\n    // Downloads the JSON abi\n    const abiMap = await this.fetchABI(addr);\n    if (!abiMap.has(func)) {\n      throw new Error(`${func} doesn't exist.`);\n    }\n\n    const funcAbi = abiMap.get(func);\n\n    // Remove all `signer` and `&signer` from argument list because the Move VM injects those arguments. Clients do not\n    // need to care about those args. `signer` and `&signer` are required be in the front of the argument list. But we\n    // just loop through all arguments and filter out `signer` and `&signer`.\n    const abiArgs = funcAbi!.params.filter((param) => param !== \"signer\" && param !== \"&signer\");\n\n    // Convert abi string arguments to TypeArgumentABI\n    const typeArgABIs = abiArgs.map(\n      (abiArg, i) => new ArgumentABI(`var${i}`, new TypeTagParser(abiArg, ty_tags).parseTypeTag()),\n    );\n\n    const entryFunctionABI = new EntryFunctionABI(\n      funcAbi!.name,\n      ModuleId.fromStr(`${addr}::${module}`),\n      \"\", // Doc string\n      funcAbi!.generic_type_params.map((_, i) => new TypeArgumentABI(`${i}`)),\n      typeArgABIs,\n    );\n\n    const { sender, ...rest } = this.builderConfig;\n\n    const senderAddress = sender instanceof AccountAddress ? HexString.fromUint8Array(sender.address) : sender;\n\n    const [{ sequence_number: sequenceNumber }, chainId, { gas_estimate: gasUnitPrice }] = await Promise.all([\n      rest?.sequenceNumber\n        ? Promise.resolve({ sequence_number: rest?.sequenceNumber })\n        : this.aptosClient.getAccount(senderAddress),\n      rest?.chainId ? Promise.resolve(rest?.chainId) : this.aptosClient.getChainId(),\n      rest?.gasUnitPrice ? Promise.resolve({ gas_estimate: rest?.gasUnitPrice }) : this.aptosClient.estimateGasPrice(),\n    ]);\n\n    const builderABI = new TransactionBuilderABI([bcsToBytes(entryFunctionABI)], {\n      sender,\n      sequenceNumber,\n      chainId,\n      gasUnitPrice: BigInt(gasUnitPrice),\n      ...rest,\n    });\n\n    return builderABI.build(func, ty_tags, args);\n  }\n}\n","// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\nimport { HexString } from \"../utils\";\nimport {\n  TypeTag,\n  TypeTagBool,\n  TypeTagU8,\n  TypeTagU16,\n  TypeTagU32,\n  TypeTagU64,\n  TypeTagU128,\n  TypeTagU256,\n  TypeTagAddress,\n  AccountAddress,\n  TypeTagVector,\n  TypeTagStruct,\n  TransactionArgument,\n  TransactionArgumentBool,\n  TransactionArgumentU16,\n  TransactionArgumentU32,\n  TransactionArgumentU64,\n  TransactionArgumentU128,\n  TransactionArgumentU256,\n  TransactionArgumentAddress,\n  TransactionArgumentU8,\n  TransactionArgumentU8Vector,\n} from \"../aptos_types\";\nimport { Serializer } from \"../bcs\";\n\nfunction assertType(val: any, types: string[] | string, message?: string) {\n  if (!types?.includes(typeof val)) {\n    throw new Error(\n      message || `Invalid arg: ${val} type should be ${types instanceof Array ? types.join(\" or \") : types}`,\n    );\n  }\n}\n\nexport function ensureBoolean(val: boolean | string): boolean {\n  assertType(val, [\"boolean\", \"string\"]);\n  if (typeof val === \"boolean\") {\n    return val;\n  }\n\n  if (val === \"true\") {\n    return true;\n  }\n  if (val === \"false\") {\n    return false;\n  }\n\n  throw new Error(\"Invalid boolean string.\");\n}\n\nexport function ensureNumber(val: number | string): number {\n  assertType(val, [\"number\", \"string\"]);\n  if (typeof val === \"number\") {\n    return val;\n  }\n\n  const res = Number.parseInt(val, 10);\n  if (Number.isNaN(res)) {\n    throw new Error(\"Invalid number string.\");\n  }\n\n  return res;\n}\n\nexport function ensureBigInt(val: number | bigint | string): bigint {\n  assertType(val, [\"number\", \"bigint\", \"string\"]);\n  return BigInt(val);\n}\n\nexport function serializeArg(argVal: any, argType: TypeTag, serializer: Serializer) {\n  serializeArgInner(argVal, argType, serializer, 0);\n}\n\nfunction serializeArgInner(argVal: any, argType: TypeTag, serializer: Serializer, depth: number) {\n  if (argType instanceof TypeTagBool) {\n    serializer.serializeBool(ensureBoolean(argVal));\n  } else if (argType instanceof TypeTagU8) {\n    serializer.serializeU8(ensureNumber(argVal));\n  } else if (argType instanceof TypeTagU16) {\n    serializer.serializeU16(ensureNumber(argVal));\n  } else if (argType instanceof TypeTagU32) {\n    serializer.serializeU32(ensureNumber(argVal));\n  } else if (argType instanceof TypeTagU64) {\n    serializer.serializeU64(ensureBigInt(argVal));\n  } else if (argType instanceof TypeTagU128) {\n    serializer.serializeU128(ensureBigInt(argVal));\n  } else if (argType instanceof TypeTagU256) {\n    serializer.serializeU256(ensureBigInt(argVal));\n  } else if (argType instanceof TypeTagAddress) {\n    serializeAddress(argVal, serializer);\n  } else if (argType instanceof TypeTagVector) {\n    serializeVector(argVal, argType, serializer, depth);\n  } else if (argType instanceof TypeTagStruct) {\n    serializeStruct(argVal, argType, serializer, depth);\n  } else {\n    throw new Error(\"Unsupported arg type.\");\n  }\n}\n\nfunction serializeAddress(argVal: any, serializer: Serializer) {\n  let addr: AccountAddress;\n  if (typeof argVal === \"string\" || argVal instanceof HexString) {\n    addr = AccountAddress.fromHex(argVal);\n  } else if (argVal instanceof AccountAddress) {\n    addr = argVal;\n  } else {\n    throw new Error(\"Invalid account address.\");\n  }\n  addr.serialize(serializer);\n}\n\nfunction serializeVector(argVal: any, argType: TypeTagVector, serializer: Serializer, depth: number) {\n  // We are serializing a vector<u8>\n  if (argType.value instanceof TypeTagU8) {\n    if (argVal instanceof Uint8Array) {\n      serializer.serializeBytes(argVal);\n      return;\n    }\n    if (argVal instanceof HexString) {\n      serializer.serializeBytes(argVal.toUint8Array());\n      return;\n    }\n    if (typeof argVal === \"string\") {\n      serializer.serializeStr(argVal);\n      return;\n    }\n    // If it isn't any of those types, then it must just be an actual array of numbers\n  }\n\n  if (!Array.isArray(argVal)) {\n    throw new Error(\"Invalid vector args.\");\n  }\n\n  serializer.serializeU32AsUleb128(argVal.length);\n\n  argVal.forEach((arg) => serializeArgInner(arg, argType.value, serializer, depth + 1));\n}\n\nfunction serializeStruct(argVal: any, argType: TypeTag, serializer: Serializer, depth: number) {\n  const { address, module_name: moduleName, name, type_args: typeArgs } = (argType as TypeTagStruct).value;\n  const structType = `${HexString.fromUint8Array(address.address).toShortString()}::${moduleName.value}::${name.value}`;\n  if (structType === \"0x1::string::String\") {\n    assertType(argVal, [\"string\"]);\n    serializer.serializeStr(argVal);\n  } else if (structType === \"0x1::object::Object\") {\n    serializeAddress(argVal, serializer);\n  } else if (structType === \"0x1::option::Option\") {\n    if (typeArgs.length !== 1) {\n      throw new Error(`Option has the wrong number of type arguments ${typeArgs.length}`);\n    }\n    serializeOption(argVal, typeArgs[0], serializer, depth);\n  } else {\n    throw new Error(\"Unsupported struct type in function argument\");\n  }\n}\n\nfunction serializeOption(argVal: any, argType: TypeTag, serializer: Serializer, depth: number) {\n  // For option, we determine if it's empty or not empty first\n  // empty option is nothing, we specifically check for undefined to prevent fuzzy matching\n  if (argVal === undefined || argVal === null) {\n    serializer.serializeU32AsUleb128(0);\n  } else {\n    // Something means we need an array of 1\n    serializer.serializeU32AsUleb128(1);\n\n    // Serialize the inner type arg, ensuring that depth is tracked\n    serializeArgInner(argVal, argType, serializer, depth + 1);\n  }\n}\n\nexport function argToTransactionArgument(argVal: any, argType: TypeTag): TransactionArgument {\n  if (argType instanceof TypeTagBool) {\n    return new TransactionArgumentBool(ensureBoolean(argVal));\n  }\n  if (argType instanceof TypeTagU8) {\n    return new TransactionArgumentU8(ensureNumber(argVal));\n  }\n  if (argType instanceof TypeTagU16) {\n    return new TransactionArgumentU16(ensureNumber(argVal));\n  }\n  if (argType instanceof TypeTagU32) {\n    return new TransactionArgumentU32(ensureNumber(argVal));\n  }\n  if (argType instanceof TypeTagU64) {\n    return new TransactionArgumentU64(ensureBigInt(argVal));\n  }\n  if (argType instanceof TypeTagU128) {\n    return new TransactionArgumentU128(ensureBigInt(argVal));\n  }\n  if (argType instanceof TypeTagU256) {\n    return new TransactionArgumentU256(ensureBigInt(argVal));\n  }\n  if (argType instanceof TypeTagAddress) {\n    let addr: AccountAddress;\n    if (typeof argVal === \"string\" || argVal instanceof HexString) {\n      addr = AccountAddress.fromHex(argVal);\n    } else if (argVal instanceof AccountAddress) {\n      addr = argVal;\n    } else {\n      throw new Error(\"Invalid account address.\");\n    }\n    return new TransactionArgumentAddress(addr);\n  }\n  if (argType instanceof TypeTagVector && argType.value instanceof TypeTagU8) {\n    if (!(argVal instanceof Uint8Array)) {\n      throw new Error(`${argVal} should be an instance of Uint8Array`);\n    }\n    return new TransactionArgumentU8Vector(argVal);\n  }\n\n  throw new Error(\"Unknown type for TransactionArgument.\");\n}\n","// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\nimport {\n  clear,\n  DEFAULT_TXN_EXP_SEC_FROM_NOW,\n  DEFAULT_MAX_GAS_AMOUNT,\n  DEFAULT_TXN_TIMEOUT_SEC,\n  fixNodeUrl,\n  HexString,\n  paginateWithCursor,\n  MaybeHexString,\n  Memoize,\n  sleep,\n  APTOS_COIN,\n  MemoizeExpiring,\n} from \"../utils\";\nimport { AptosAccount } from \"../account/aptos_account\";\nimport * as Gen from \"../generated/index\";\nimport {\n  TxnBuilderTypes,\n  TransactionBuilderEd25519,\n  TransactionBuilderRemoteABI,\n  RemoteABIBuilderConfig,\n  TransactionBuilderMultiEd25519,\n  TransactionBuilder,\n} from \"../transaction_builder\";\nimport {\n  bcsSerializeBytes,\n  bcsSerializeU8,\n  bcsToBytes,\n  Bytes,\n  Seq,\n  Serializer,\n  serializeVector,\n  Uint64,\n  AnyNumber,\n} from \"../bcs\";\nimport {\n  AccountAddress,\n  Ed25519PublicKey,\n  FeePayerRawTransaction,\n  MultiAgentRawTransaction,\n  MultiEd25519PublicKey,\n  RawTransaction,\n} from \"../aptos_types\";\nimport { get, post, ClientConfig, AptosApiError } from \"../client\";\n\nexport interface OptionalTransactionArgs {\n  maxGasAmount?: Uint64;\n  gasUnitPrice?: Uint64;\n  expireTimestamp?: Uint64;\n  providedSequenceNumber?: string | bigint;\n}\n\nexport interface PaginationArgs {\n  start?: AnyNumber;\n  limit?: number;\n}\n\n/**\n * Provides methods for retrieving data from Aptos node.\n * For more detailed API specification see {@link https://fullnode.devnet.aptoslabs.com/v1/spec}\n */\nexport class AptosClient {\n  readonly nodeUrl: string;\n\n  readonly config: ClientConfig | undefined;\n\n  /**\n   * Build a client configured to connect to an Aptos node at the given URL.\n   *\n   * Note: If you forget to append `/v1` to the URL, the client constructor\n   * will automatically append it. If you don't want this URL processing to\n   * take place, set doNotFixNodeUrl to true.\n   *\n   * @param nodeUrl URL of the Aptos Node API endpoint.\n   * @param config Additional configuration options for the generated Axios client.\n   */\n  constructor(nodeUrl: string, config?: ClientConfig, doNotFixNodeUrl: boolean = false) {\n    if (!nodeUrl) {\n      throw new Error(\"Node URL cannot be empty.\");\n    }\n    if (doNotFixNodeUrl) {\n      this.nodeUrl = nodeUrl;\n    } else {\n      this.nodeUrl = fixNodeUrl(nodeUrl);\n    }\n    this.config = config === undefined || config === null ? {} : { ...config };\n  }\n\n  /**\n   * Queries an Aptos account by address\n   * @param accountAddress Hex-encoded 32 byte Aptos account address\n   * @returns Core account resource, used for identifying account and transaction execution\n   * @example An example of the returned account\n   * ```\n   * {\n   *    sequence_number: \"1\",\n   *    authentication_key: \"0x5307b5f4bc67829097a8ba9b43dba3b88261eeccd1f709d9bde240fc100fbb69\"\n   * }\n   * ```\n   */\n  @parseApiError\n  async getAccount(accountAddress: MaybeHexString): Promise<Gen.AccountData> {\n    const { data } = await get<{}, Gen.AccountData>({\n      url: this.nodeUrl,\n      endpoint: `accounts/${HexString.ensure(accountAddress).hex()}`,\n      originMethod: \"getAccount\",\n      overrides: { ...this.config },\n    });\n    return data;\n  }\n\n  /**\n   * Queries transactions sent by given account\n   * @param accountAddress Hex-encoded 32 byte Aptos account address\n   * @param query Optional pagination object\n   * @param query.start The sequence number of the start transaction of the page. Default is 0.\n   * @param query.limit The max number of transactions should be returned for the page. Default is 25.\n   * @returns An array of on-chain transactions, sent by account\n   */\n  @parseApiError\n  async getAccountTransactions(accountAddress: MaybeHexString, query?: PaginationArgs): Promise<Gen.Transaction[]> {\n    const { data } = await get<{}, Gen.Transaction[]>({\n      url: this.nodeUrl,\n      endpoint: `accounts/${HexString.ensure(accountAddress).hex()}/transactions`,\n      originMethod: \"getAccountTransactions\",\n      params: { start: query?.start, limit: query?.limit },\n      overrides: { ...this.config },\n    });\n    return data;\n  }\n\n  /**\n   * Queries modules associated with given account\n   *\n   * Note: In order to get all account modules, this function may call the API\n   * multiple times as it paginates.\n   *\n   * @param accountAddress Hex-encoded 32 byte Aptos account address\n   * @param query.ledgerVersion Specifies ledger version of transactions. By default latest version will be used\n   * @returns Account modules array for a specific ledger version.\n   * Module is represented by MoveModule interface. It contains module `bytecode` and `abi`,\n   * which is JSON representation of a module. Account modules are cached by account address for 10 minutes\n   * to prevent unnecessary API calls when fetching the same account modules\n   */\n  @parseApiError\n  @MemoizeExpiring(10 * 60 * 1000)\n  async getAccountModules(\n    accountAddress: MaybeHexString,\n    query?: { ledgerVersion?: AnyNumber },\n  ): Promise<Gen.MoveModuleBytecode[]> {\n    // Note: This function does not expose a `limit` parameter because it might\n    // be ambiguous how this is being used. Is it being passed to getAccountModules\n    // to limit the number of items per response, or does it limit the total output\n    // of this function? We avoid this confusion by not exposing the parameter at all.\n    const out = await paginateWithCursor<{}, Gen.MoveModuleBytecode[]>({\n      url: this.nodeUrl,\n      endpoint: `accounts/${accountAddress}/modules`,\n      params: { ledger_version: query?.ledgerVersion, limit: 1000 },\n      originMethod: \"getAccountModules\",\n      overrides: { ...this.config },\n    });\n    return out;\n  }\n\n  /**\n   * Queries module associated with given account by module name\n   *\n   * Note: In order to get all account resources, this function may call the API\n   * multiple times as it paginates.\n   *\n   * @param accountAddress Hex-encoded 32 byte Aptos account address\n   * @param moduleName The name of the module\n   * @param query.ledgerVersion Specifies ledger version of transactions. By default latest version will be used\n   * @returns Specified module.\n   * Module is represented by MoveModule interface. It contains module `bytecode` and `abi`,\n   * which JSON representation of a module\n   */\n  @parseApiError\n  async getAccountModule(\n    accountAddress: MaybeHexString,\n    moduleName: string,\n    query?: { ledgerVersion?: AnyNumber },\n  ): Promise<Gen.MoveModuleBytecode> {\n    const { data } = await get<{}, Gen.MoveModuleBytecode>({\n      url: this.nodeUrl,\n      endpoint: `accounts/${HexString.ensure(accountAddress).hex()}/module/${moduleName}`,\n      originMethod: \"getAccountModule\",\n      params: { ledger_version: query?.ledgerVersion },\n      overrides: { ...this.config },\n    });\n    return data;\n  }\n\n  /**\n   * Queries all resources associated with given account\n   * @param accountAddress Hex-encoded 32 byte Aptos account address\n   * @param query.ledgerVersion Specifies ledger version of transactions. By default latest version will be used\n   * @returns Account resources for a specific ledger version\n   */\n  @parseApiError\n  async getAccountResources(\n    accountAddress: MaybeHexString,\n    query?: { ledgerVersion?: AnyNumber },\n  ): Promise<Gen.MoveResource[]> {\n    const out = await paginateWithCursor<{}, Gen.MoveResource[]>({\n      url: this.nodeUrl,\n      endpoint: `accounts/${accountAddress}/resources`,\n      params: { ledger_version: query?.ledgerVersion, limit: 9999 },\n      originMethod: \"getAccountResources\",\n      overrides: { ...this.config },\n    });\n    return out;\n  }\n\n  /**\n   * Queries resource associated with given account by resource type\n   * @param accountAddress Hex-encoded 32 byte Aptos account address\n   * @param resourceType String representation of an on-chain Move struct type\n   * @param query.ledgerVersion Specifies ledger version of transactions. By default latest version will be used\n   * @returns Account resource of specified type and ledger version\n   * @example An example of an account resource\n   * ```\n   * {\n   *    type: \"0x1::aptos_coin::AptosCoin\",\n   *    data: { value: 6 }\n   * }\n   * ```\n   */\n  @parseApiError\n  async getAccountResource(\n    accountAddress: MaybeHexString,\n    resourceType: Gen.MoveStructTag,\n    query?: { ledgerVersion?: AnyNumber },\n  ): Promise<Gen.MoveResource> {\n    const { data } = await get<{}, Gen.MoveResource>({\n      url: this.nodeUrl,\n      endpoint: `accounts/${HexString.ensure(accountAddress).hex()}/resource/${resourceType}`,\n      originMethod: \"getAccountResource\",\n      params: { ledger_version: query?.ledgerVersion },\n      overrides: { ...this.config },\n    });\n    return data;\n  }\n\n  /** Generates a signed transaction that can be submitted to the chain for execution. */\n  static generateBCSTransaction(accountFrom: AptosAccount, rawTxn: TxnBuilderTypes.RawTransaction): Uint8Array {\n    const txnBuilder = new TransactionBuilderEd25519((signingMessage: TxnBuilderTypes.SigningMessage) => {\n      // @ts-ignore\n      const sigHexStr = accountFrom.signBuffer(signingMessage);\n      return new TxnBuilderTypes.Ed25519Signature(sigHexStr.toUint8Array());\n    }, accountFrom.pubKey().toUint8Array());\n\n    return txnBuilder.sign(rawTxn);\n  }\n\n  /**\n   * Note: Unless you have a specific reason for using this, it'll probably be simpler\n   * to use `simulateTransaction`.\n   *\n   * Generates a BCS transaction that can be submitted to the chain for simulation.\n   *\n   * @param accountFrom The account that will be used to send the transaction\n   * for simulation.\n   * @param rawTxn The raw transaction to be simulated, likely created by calling\n   * the `generateTransaction` function.\n   * @returns The BCS encoded signed transaction, which you should then pass into\n   * the `submitBCSSimulation` function.\n   */\n  static generateBCSSimulation(accountFrom: AptosAccount, rawTxn: TxnBuilderTypes.RawTransaction): Uint8Array {\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const txnBuilder = new TransactionBuilderEd25519((_signingMessage: TxnBuilderTypes.SigningMessage) => {\n      // @ts-ignore\n      const invalidSigBytes = new Uint8Array(64);\n      return new TxnBuilderTypes.Ed25519Signature(invalidSigBytes);\n    }, accountFrom.pubKey().toUint8Array());\n\n    return txnBuilder.sign(rawTxn);\n  }\n\n  /** Generates an entry function transaction request that can be submitted to produce a raw transaction that\n   * can be signed, which upon being signed can be submitted to the blockchain\n   * This function fetches the remote ABI and uses it to serialized the data, therefore\n   * users don't need to handle serialization by themselves.\n   * @param sender Hex-encoded 32 byte Aptos account address of transaction sender\n   * @param payload Entry function transaction payload type\n   * @param options Options allow to overwrite default transaction options.\n   * @returns A raw transaction object\n   */\n  async generateTransaction(\n    sender: MaybeHexString,\n    payload: Gen.EntryFunctionPayload,\n    options?: Partial<Gen.SubmitTransactionRequest>,\n  ): Promise<TxnBuilderTypes.RawTransaction> {\n    const config: RemoteABIBuilderConfig = { sender };\n    if (options?.sequence_number) {\n      config.sequenceNumber = options.sequence_number;\n    }\n\n    if (options?.gas_unit_price) {\n      config.gasUnitPrice = options.gas_unit_price;\n    }\n\n    if (options?.max_gas_amount) {\n      config.maxGasAmount = options.max_gas_amount;\n    }\n\n    if (options?.expiration_timestamp_secs) {\n      const timestamp = Number.parseInt(options.expiration_timestamp_secs, 10);\n      config.expSecFromNow = timestamp - Math.floor(Date.now() / 1000);\n    }\n\n    const builder = new TransactionBuilderRemoteABI(this, config);\n    return builder.build(payload.function, payload.type_arguments, payload.arguments);\n  }\n\n  /**\n   * Generates a fee payer transaction that can be signed and submitted to chain\n   *\n   * @param sender the sender's account address\n   * @param payload the transaction payload\n   * @param fee_payer the fee payer account\n   * @param secondarySignerAccounts an optional array of the secondary signers accounts\n   * @returns a fee payer raw transaction that can be signed and submitted to chain\n   */\n  async generateFeePayerTransaction(\n    sender: MaybeHexString,\n    payload: Gen.EntryFunctionPayload,\n    feePayer: MaybeHexString,\n    secondarySignerAccounts: Array<MaybeHexString> = [],\n    options?: Partial<Gen.SubmitTransactionRequest>,\n  ): Promise<TxnBuilderTypes.FeePayerRawTransaction> {\n    const rawTxn = await this.generateTransaction(sender, payload, options);\n\n    const signers: Array<AccountAddress> = secondarySignerAccounts.map((signer) => AccountAddress.fromHex(signer));\n\n    const feePayerTxn = new TxnBuilderTypes.FeePayerRawTransaction(rawTxn, signers, AccountAddress.fromHex(feePayer));\n    return feePayerTxn;\n  }\n\n  /**\n   * Submits fee payer transaction to chain\n   *\n   * @param feePayerTransaction the raw transaction to be submitted, of type FeePayerRawTransaction\n   * @param senderAuthenticator the sender account authenticator (can get from signMultiTransaction() method)\n   * @param feePayerAuthenticator the feepayer account authenticator (can get from signMultiTransaction() method)\n   * @param signersAuthenticators an optional array of the signer account authenticators\n   * @returns The pending transaction\n   */\n  async submitFeePayerTransaction(\n    feePayerTransaction: TxnBuilderTypes.FeePayerRawTransaction,\n    senderAuthenticator: TxnBuilderTypes.AccountAuthenticatorEd25519,\n    feePayerAuthenticator: TxnBuilderTypes.AccountAuthenticatorEd25519,\n    additionalSignersAuthenticators: Array<TxnBuilderTypes.AccountAuthenticatorEd25519> = [],\n  ): Promise<Gen.PendingTransaction> {\n    const txAuthenticatorFeePayer = new TxnBuilderTypes.TransactionAuthenticatorFeePayer(\n      senderAuthenticator,\n      feePayerTransaction.secondary_signer_addresses,\n      additionalSignersAuthenticators,\n      { address: feePayerTransaction.fee_payer_address, authenticator: feePayerAuthenticator },\n    );\n\n    const bcsTxn = bcsToBytes(\n      new TxnBuilderTypes.SignedTransaction(feePayerTransaction.raw_txn, txAuthenticatorFeePayer),\n    );\n    const transactionRes = await this.submitSignedBCSTransaction(bcsTxn);\n\n    return transactionRes;\n  }\n\n  /**\n   * Signs a multi transaction type (multi agent / fee payer) and returns the\n   * signer authenticator to be used to submit the transaction.\n   *\n   * @param signer the account to sign on the transaction\n   * @param rawTxn a MultiAgentRawTransaction or FeePayerRawTransaction\n   * @returns signer authenticator\n   */\n  // eslint-disable-next-line class-methods-use-this\n  async signMultiTransaction(\n    signer: AptosAccount,\n    rawTxn: MultiAgentRawTransaction | FeePayerRawTransaction,\n  ): Promise<TxnBuilderTypes.AccountAuthenticatorEd25519> {\n    const signerSignature = new TxnBuilderTypes.Ed25519Signature(\n      signer.signBuffer(TransactionBuilder.getSigningMessage(rawTxn)).toUint8Array(),\n    );\n\n    const signerAuthenticator = new TxnBuilderTypes.AccountAuthenticatorEd25519(\n      new TxnBuilderTypes.Ed25519PublicKey(signer.signingKey.publicKey),\n      signerSignature,\n    );\n\n    return Promise.resolve(signerAuthenticator);\n  }\n\n  /** Converts a transaction request produced by `generateTransaction` into a properly\n   * signed transaction, which can then be submitted to the blockchain\n   * @param accountFrom AptosAccount of transaction sender\n   * @param rawTransaction A raw transaction generated by `generateTransaction` method\n   * @returns A transaction, signed with sender account\n   */\n  // eslint-disable-next-line class-methods-use-this\n  async signTransaction(\n    accountFrom: AptosAccount,\n    rawTransaction: TxnBuilderTypes.RawTransaction,\n  ): Promise<Uint8Array> {\n    return Promise.resolve(AptosClient.generateBCSTransaction(accountFrom, rawTransaction));\n  }\n\n  /**\n   * Event types are globally identifiable by an account `address` and\n   * monotonically increasing `creation_number`, one per event type emitted\n   * to the given account. This API returns events corresponding to that\n   * that event type.\n   * @param address Hex-encoded 32 byte Aptos account, with or without a `0x` prefix,\n   * for which events are queried. This refers to the account that events were emitted\n   * to, not the account hosting the move module that emits that event type.\n   * @param creationNumber Creation number corresponding to the event type.\n   * @returns Array of events assotiated with the given account and creation number.\n   */\n  @parseApiError\n  async getEventsByCreationNumber(\n    address: MaybeHexString,\n    creationNumber: AnyNumber | string,\n    query?: PaginationArgs,\n  ): Promise<Gen.Event[]> {\n    const { data } = await get<{}, Gen.Event[]>({\n      url: this.nodeUrl,\n      endpoint: `accounts/${HexString.ensure(address).hex()}/events/${creationNumber}`,\n      originMethod: \"getEventsByCreationNumber\",\n      params: { start: query?.start, limit: query?.limit },\n      overrides: { ...this.config },\n    });\n    return data;\n  }\n\n  /**\n   * This API uses the given account `address`, `eventHandle`, and `fieldName`\n   * to build a key that can globally identify an event types. It then uses this\n   * key to return events emitted to the given account matching that event type.\n   * @param address Hex-encoded 32 byte Aptos account, with or without a `0x` prefix,\n   * for which events are queried. This refers to the account that events were emitted\n   * to, not the account hosting the move module that emits that event type.\n   * @param eventHandleStruct String representation of an on-chain Move struct type.\n   * (e.g. `0x1::coin::CoinStore<0x1::aptos_coin::AptosCoin>`)\n   * @param fieldName The field name of the EventHandle in the struct\n   * @param query Optional query object\n   * @param query.start The start sequence number in the EVENT STREAM, defaulting to the latest event.\n   * The events are returned in the reverse order of sequence number\n   * @param query.limit The number of events to be returned. The default is 25.\n   * @returns Array of events\n   */\n  @parseApiError\n  async getEventsByEventHandle(\n    address: MaybeHexString,\n    eventHandleStruct: Gen.MoveStructTag,\n    fieldName: string,\n    query?: PaginationArgs,\n  ): Promise<Gen.Event[]> {\n    const { data } = await get<{}, Gen.Event[]>({\n      url: this.nodeUrl,\n      endpoint: `accounts/${HexString.ensure(address).hex()}/events/${eventHandleStruct}/${fieldName}`,\n      originMethod: \"getEventsByEventHandle\",\n      params: { start: query?.start, limit: query?.limit },\n      overrides: { ...this.config },\n    });\n    return data;\n  }\n\n  /**\n   * Submits a signed transaction to the transaction endpoint.\n   * @param signedTxn A transaction, signed by `signTransaction` method\n   * @returns Transaction that is accepted and submitted to mempool\n   */\n  async submitTransaction(signedTxn: Uint8Array): Promise<Gen.PendingTransaction> {\n    return this.submitSignedBCSTransaction(signedTxn);\n  }\n\n  /**\n   * Generates and submits a transaction to the transaction simulation\n   * endpoint. For this we generate a transaction with a fake signature.\n   *\n   * @param accountOrPubkey The sender or sender's public key. When private key is available, `AptosAccount` instance\n   * can be used to send the transaction for simulation. If private key is not available, sender's public key can be\n   * used to send the transaction for simulation.\n   * @param rawTransaction The raw transaction to be simulated, likely created\n   * by calling the `generateTransaction` function.\n   * @param query.estimateGasUnitPrice If set to true, the gas unit price in the\n   * transaction will be ignored and the estimated value will be used.\n   * @param query.estimateMaxGasAmount If set to true, the max gas value in the\n   * transaction will be ignored and the maximum possible gas will be used.\n   * @param query.estimatePrioritizedGasUnitPrice If set to true, the transaction will use a higher price than the\n   * original estimate.\n   * @returns The BCS encoded signed transaction, which you should then provide\n   *\n   */\n  async simulateTransaction(\n    accountOrPubkey: AptosAccount | Ed25519PublicKey | MultiEd25519PublicKey,\n    rawTransaction: TxnBuilderTypes.RawTransaction,\n    query?: {\n      estimateGasUnitPrice?: boolean;\n      estimateMaxGasAmount?: boolean;\n      estimatePrioritizedGasUnitPrice: boolean;\n    },\n  ): Promise<Gen.UserTransaction[]> {\n    let signedTxn: Uint8Array;\n\n    if (accountOrPubkey instanceof AptosAccount) {\n      signedTxn = AptosClient.generateBCSSimulation(accountOrPubkey, rawTransaction);\n    } else if (accountOrPubkey instanceof MultiEd25519PublicKey) {\n      const txnBuilder = new TransactionBuilderMultiEd25519(() => {\n        const { threshold } = accountOrPubkey;\n        const bits: Seq<number> = [];\n        const signatures: TxnBuilderTypes.Ed25519Signature[] = [];\n        for (let i = 0; i < threshold; i += 1) {\n          bits.push(i);\n          signatures.push(new TxnBuilderTypes.Ed25519Signature(new Uint8Array(64)));\n        }\n        const bitmap = TxnBuilderTypes.MultiEd25519Signature.createBitmap(bits);\n        return new TxnBuilderTypes.MultiEd25519Signature(signatures, bitmap);\n      }, accountOrPubkey);\n\n      signedTxn = txnBuilder.sign(rawTransaction);\n    } else {\n      const txnBuilder = new TransactionBuilderEd25519(() => {\n        const invalidSigBytes = new Uint8Array(64);\n        return new TxnBuilderTypes.Ed25519Signature(invalidSigBytes);\n      }, accountOrPubkey.toBytes());\n\n      signedTxn = txnBuilder.sign(rawTransaction);\n    }\n    return this.submitBCSSimulation(signedTxn, query);\n  }\n\n  /**\n   * Submits a signed transaction to the endpoint that takes BCS payload\n   *\n   * @param signedTxn A BCS transaction representation\n   * @returns Transaction that is accepted and submitted to mempool\n   */\n  @parseApiError\n  async submitSignedBCSTransaction(signedTxn: Uint8Array): Promise<Gen.PendingTransaction> {\n    // Need to construct a customized post request for transactions in BCS payload\n    const { data } = await post<Uint8Array, Gen.PendingTransaction>({\n      url: this.nodeUrl,\n      body: signedTxn,\n      endpoint: \"transactions\",\n      originMethod: \"submitSignedBCSTransaction\",\n      contentType: \"application/x.aptos.signed_transaction+bcs\",\n      overrides: { ...this.config },\n    });\n    return data;\n  }\n\n  /**\n   * Submits the BCS serialization of a signed transaction to the simulation endpoint.\n   *\n   * @param bcsBody The output of `generateBCSSimulation`.\n   * @param query?.estimateGasUnitPrice If set to true, the gas unit price in the\n   * transaction will be ignored and the estimated value will be used.\n   * @param query?.estimateMaxGasAmount If set to true, the max gas value in the\n   * transaction will be ignored and the maximum possible gas will be used.\n   * @param query?.estimatePrioritizedGasUnitPrice If set to true, the transaction will use a higher price than the\n   * original estimate.\n   * @returns Simulation result in the form of UserTransaction.\n   */\n  @parseApiError\n  async submitBCSSimulation(\n    bcsBody: Uint8Array,\n    query?: {\n      estimateGasUnitPrice?: boolean;\n      estimateMaxGasAmount?: boolean;\n      estimatePrioritizedGasUnitPrice?: boolean;\n    },\n  ): Promise<Gen.UserTransaction[]> {\n    // Need to construct a customized post request for transactions in BCS payload.\n    const queryParams = {\n      estimate_gas_unit_price: query?.estimateGasUnitPrice ?? false,\n      estimate_max_gas_amount: query?.estimateMaxGasAmount ?? false,\n      estimate_prioritized_gas_unit_price: query?.estimatePrioritizedGasUnitPrice ?? false,\n    };\n    const { data } = await post<Uint8Array, Gen.UserTransaction[]>({\n      url: this.nodeUrl,\n      body: bcsBody,\n      endpoint: \"transactions/simulate\",\n      params: queryParams,\n      originMethod: \"submitBCSSimulation\",\n      contentType: \"application/x.aptos.signed_transaction+bcs\",\n      overrides: { ...this.config },\n    });\n    return data;\n  }\n\n  /**\n   * Queries on-chain transactions. This function will not return pending\n   * transactions. For that, use `getTransactionsByHash`.\n   *\n   * @param query Optional pagination object\n   * @param query.start The start transaction version of the page. Default is the latest ledger version\n   * @param query.limit The max number of transactions should be returned for the page. Default is 25\n   * @returns Array of on-chain transactions\n   */\n  @parseApiError\n  async getTransactions(query?: PaginationArgs): Promise<Gen.Transaction[]> {\n    const { data } = await get<{}, Gen.Transaction[]>({\n      url: this.nodeUrl,\n      endpoint: \"transactions\",\n      originMethod: \"getTransactions\",\n      params: { start: query?.start?.toString(), limit: query?.limit },\n      overrides: { ...this.config },\n    });\n    return data;\n  }\n\n  /**\n   * @param txnHash - Transaction hash should be hex-encoded bytes string with 0x prefix.\n   * @returns Transaction from mempool (pending) or on-chain (committed) transaction\n   */\n  @parseApiError\n  async getTransactionByHash(txnHash: string): Promise<Gen.Transaction> {\n    const { data } = await get<{}, Gen.Transaction>({\n      url: this.nodeUrl,\n      endpoint: `transactions/by_hash/${txnHash}`,\n      originMethod: \"getTransactionByHash\",\n      overrides: { ...this.config },\n    });\n\n    return data;\n  }\n\n  /**\n   * @param txnVersion - Transaction version is an uint64 number.\n   * @returns On-chain transaction. Only on-chain transactions have versions, so this\n   * function cannot be used to query pending transactions.\n   */\n  @parseApiError\n  async getTransactionByVersion(txnVersion: AnyNumber): Promise<Gen.Transaction> {\n    const { data } = await get<{}, Gen.Transaction>({\n      url: this.nodeUrl,\n      endpoint: `transactions/by_version/${txnVersion}`,\n      originMethod: \"getTransactionByVersion\",\n      overrides: { ...this.config },\n    });\n    return data;\n  }\n\n  /**\n   * Defines if specified transaction is currently in pending state\n   * @param txnHash A hash of transaction\n   *\n   * To create a transaction hash:\n   *\n   * 1. Create hash message bytes: \"Aptos::Transaction\" bytes + BCS bytes of Transaction.\n   * 2. Apply hash algorithm SHA3-256 to the hash message bytes.\n   * 3. Hex-encode the hash bytes with 0x prefix.\n   *\n   * @returns `true` if transaction is in pending state and `false` otherwise\n   */\n  async transactionPending(txnHash: string): Promise<boolean> {\n    try {\n      const response = await this.getTransactionByHash(txnHash);\n      return response.type === \"pending_transaction\";\n    } catch (e: any) {\n      if (e?.status === 404) {\n        return true;\n      }\n      throw e;\n    }\n  }\n\n  /**\n   * Wait for a transaction to move past pending state.\n   *\n   * There are 4 possible outcomes:\n   * 1. Transaction is processed and successfully committed to the blockchain.\n   * 2. Transaction is rejected for some reason, and is therefore not committed\n   *    to the blockchain.\n   * 3. Transaction is committed but execution failed, meaning no changes were\n   *    written to the blockchain state.\n   * 4. Transaction is not processed within the specified timeout.\n   *\n   * In case 1, this function resolves with the transaction response returned\n   * by the API.\n   *\n   * In case 2, the function will throw an ApiError, likely with an HTTP status\n   * code indicating some problem with the request (e.g. 400).\n   *\n   * In case 3, if `checkSuccess` is false (the default), this function returns\n   * the transaction response just like in case 1, in which the `success` field\n   * will be false. If `checkSuccess` is true, it will instead throw a\n   * FailedTransactionError.\n   *\n   * In case 4, this function throws a WaitForTransactionError.\n   *\n   * @param txnHash The hash of a transaction previously submitted to the blockchain.\n   * @param extraArgs.timeoutSecs Timeout in seconds. Defaults to 20 seconds.\n   * @param extraArgs.checkSuccess See above. Defaults to false.\n   * @returns See above.\n   *\n   * @example\n   * ```\n   * const rawTransaction = await this.generateRawTransaction(sender.address(), payload, extraArgs);\n   * const bcsTxn = AptosClient.generateBCSTransaction(sender, rawTransaction);\n   * const pendingTransaction = await this.submitSignedBCSTransaction(bcsTxn);\n   * const transasction = await this.aptosClient.waitForTransactionWithResult(pendingTransaction.hash);\n   * ```\n   */\n  async waitForTransactionWithResult(\n    txnHash: string,\n    extraArgs?: { timeoutSecs?: number; checkSuccess?: boolean },\n  ): Promise<Gen.Transaction> {\n    const timeoutSecs = extraArgs?.timeoutSecs ?? DEFAULT_TXN_TIMEOUT_SEC;\n    const checkSuccess = extraArgs?.checkSuccess ?? false;\n\n    let isPending = true;\n    let count = 0;\n    let lastTxn: Gen.Transaction | undefined;\n\n    while (isPending) {\n      if (count >= timeoutSecs) {\n        break;\n      }\n      try {\n        // eslint-disable-next-line no-await-in-loop\n        lastTxn = await this.getTransactionByHash(txnHash);\n\n        isPending = lastTxn.type === \"pending_transaction\";\n        if (!isPending) {\n          break;\n        }\n      } catch (e) {\n        // In short, this means we will retry if it was an ApiError and the code was 404 or 5xx.\n        const isApiError = e instanceof ApiError;\n        const isRequestError = isApiError && e.status !== 404 && e.status >= 400 && e.status < 500;\n        if (!isApiError || isRequestError) {\n          throw e;\n        }\n      }\n      // eslint-disable-next-line no-await-in-loop\n      await sleep(1000);\n      count += 1;\n    }\n\n    // There is a chance that lastTxn is still undefined. Let's throw some error here\n    if (lastTxn === undefined) {\n      throw new Error(`Waiting for transaction ${txnHash} failed`);\n    }\n\n    if (isPending) {\n      throw new WaitForTransactionError(\n        `Waiting for transaction ${txnHash} timed out after ${timeoutSecs} seconds`,\n        lastTxn,\n      );\n    }\n    if (!checkSuccess) {\n      return lastTxn;\n    }\n    if (!(lastTxn as any)?.success) {\n      throw new FailedTransactionError(\n        `Transaction ${txnHash} failed with an error: ${(lastTxn as any).vm_status}`,\n        lastTxn,\n      );\n    }\n    return lastTxn;\n  }\n\n  /**\n   * This function works the same as `waitForTransactionWithResult` except it\n   * doesn't return the transaction in those cases, it returns nothing. For\n   * more information, see the documentation for `waitForTransactionWithResult`.\n   */\n  async waitForTransaction(\n    txnHash: string,\n    extraArgs?: { timeoutSecs?: number; checkSuccess?: boolean },\n  ): Promise<void> {\n    await this.waitForTransactionWithResult(txnHash, extraArgs);\n  }\n\n  /**\n   * Queries the latest ledger information\n   * @returns Latest ledger information\n   * @example Example of returned data\n   * ```\n   * {\n   *   chain_id: 15,\n   *   epoch: 6,\n   *   ledgerVersion: \"2235883\",\n   *   ledger_timestamp:\"1654580922321826\"\n   * }\n   * ```\n   */\n  @parseApiError\n  async getLedgerInfo(): Promise<Gen.IndexResponse> {\n    const { data } = await get<{}, Gen.IndexResponse>({\n      url: this.nodeUrl,\n      originMethod: \"getLedgerInfo\",\n      overrides: { ...this.config },\n    });\n    return data;\n  }\n\n  /**\n   * @returns Current chain id\n   */\n  @Memoize()\n  async getChainId(): Promise<number> {\n    const result = await this.getLedgerInfo();\n    return result.chain_id;\n  }\n\n  /**\n   * Gets a table item for a table identified by the handle and the key for the item.\n   * Key and value types need to be passed in to help with key serialization and value deserialization.\n   * @param handle A pointer to where that table is stored\n   * @param data Object, that describes table item\n   * @param data.key_type Move type of table key (e.g. `vector<u8>`)\n   * @param data.value_type Move type of table value (e.g. `u64`)\n   * @param data.key Value of table key\n   * @returns Table item value rendered in JSON\n   */\n  @parseApiError\n  async getTableItem(handle: string, data: Gen.TableItemRequest, query?: { ledgerVersion?: AnyNumber }): Promise<any> {\n    const response = await post<Gen.TableItemRequest, any>({\n      url: this.nodeUrl,\n      body: data,\n      endpoint: `tables/${handle}/item`,\n      originMethod: \"getTableItem\",\n      params: { ledger_version: query?.ledgerVersion?.toString() },\n      overrides: { ...this.config },\n    });\n    return response.data;\n  }\n\n  /**\n   * Generates a raw transaction out of a transaction payload\n   * @param accountFrom\n   * @param payload\n   * @param extraArgs\n   * @returns A raw transaction object\n   */\n  async generateRawTransaction(\n    accountFrom: HexString,\n    payload: TxnBuilderTypes.TransactionPayload,\n    extraArgs?: OptionalTransactionArgs,\n  ): Promise<TxnBuilderTypes.RawTransaction> {\n    const [{ sequence_number: sequenceNumber }, chainId, { gas_estimate: gasEstimate }] = await Promise.all([\n      extraArgs?.providedSequenceNumber\n        ? Promise.resolve({ sequence_number: extraArgs.providedSequenceNumber })\n        : this.getAccount(accountFrom),\n      this.getChainId(),\n      extraArgs?.gasUnitPrice ? Promise.resolve({ gas_estimate: extraArgs.gasUnitPrice }) : this.estimateGasPrice(),\n    ]);\n\n    const { maxGasAmount, gasUnitPrice, expireTimestamp } = {\n      maxGasAmount: BigInt(DEFAULT_MAX_GAS_AMOUNT),\n      gasUnitPrice: BigInt(gasEstimate),\n      expireTimestamp: BigInt(Math.floor(Date.now() / 1000) + DEFAULT_TXN_EXP_SEC_FROM_NOW),\n      ...extraArgs,\n    };\n\n    return new TxnBuilderTypes.RawTransaction(\n      TxnBuilderTypes.AccountAddress.fromHex(accountFrom),\n      BigInt(sequenceNumber),\n      payload,\n      maxGasAmount,\n      gasUnitPrice,\n      expireTimestamp,\n      new TxnBuilderTypes.ChainId(chainId),\n    );\n  }\n\n  /**\n   * Helper for generating, signing, and submitting a transaction.\n   *\n   * @param sender AptosAccount of transaction sender.\n   * @param payload Transaction payload.\n   * @param extraArgs Extra args for building the transaction payload.\n   * @returns The transaction response from the API.\n   */\n  async generateSignSubmitTransaction(\n    sender: AptosAccount,\n    payload: TxnBuilderTypes.TransactionPayload,\n    extraArgs?: OptionalTransactionArgs,\n  ): Promise<string> {\n    // :!:>generateSignSubmitTransactionInner\n    const rawTransaction = await this.generateRawTransaction(sender.address(), payload, extraArgs);\n    const bcsTxn = AptosClient.generateBCSTransaction(sender, rawTransaction);\n    const pendingTransaction = await this.submitSignedBCSTransaction(bcsTxn);\n    return pendingTransaction.hash;\n    // <:!:generateSignSubmitTransactionInner\n  }\n\n  /**\n   * Helper for signing and submitting a transaction.\n   *\n   * @param sender AptosAccount of transaction sender.\n   * @param transaction A generated Raw transaction payload.\n   * @returns The transaction response from the API.\n   */\n  async signAndSubmitTransaction(sender: AptosAccount, transaction: RawTransaction): Promise<string> {\n    const bcsTxn = AptosClient.generateBCSTransaction(sender, transaction);\n    const pendingTransaction = await this.submitSignedBCSTransaction(bcsTxn);\n    return pendingTransaction.hash;\n  }\n\n  /**\n   * Publishes a move package. `packageMetadata` and `modules` can be generated with command\n   * `aptos move compile --save-metadata [ --included-artifacts=<...> ]`.\n   * @param sender\n   * @param packageMetadata package metadata bytes\n   * @param modules bytecodes of modules\n   * @param extraArgs\n   * @returns Transaction hash\n   */\n  async publishPackage(\n    sender: AptosAccount,\n    packageMetadata: Bytes,\n    modules: Seq<TxnBuilderTypes.Module>,\n    extraArgs?: OptionalTransactionArgs,\n  ): Promise<string> {\n    const codeSerializer = new Serializer();\n    serializeVector(modules, codeSerializer);\n\n    const payload = new TxnBuilderTypes.TransactionPayloadEntryFunction(\n      TxnBuilderTypes.EntryFunction.natural(\n        \"0x1::code\",\n        \"publish_package_txn\",\n        [],\n        [bcsSerializeBytes(packageMetadata), codeSerializer.getBytes()],\n      ),\n    );\n\n    return this.generateSignSubmitTransaction(sender, payload, extraArgs);\n  }\n\n  /**\n   * Publishes a move packages by creating a resource account.\n   * The package cannot be upgraded since it is deployed by resource account\n   * `packageMetadata` and `modules` can be generated with command\n   * `aptos move compile --save-metadata [ --included-artifacts=<...> ]`.\n   * @param sender\n   * @param seed seeds for creation of resource address\n   * @param packageMetadata package metadata bytes\n   * @param modules bytecodes of modules\n   * @param extraArgs\n   * @returns Transaction hash\n   */\n  async createResourceAccountAndPublishPackage(\n    sender: AptosAccount,\n    seed: Bytes,\n    packageMetadata: Bytes,\n    modules: Seq<TxnBuilderTypes.Module>,\n    extraArgs?: OptionalTransactionArgs,\n  ): Promise<string> {\n    const codeSerializer = new Serializer();\n    serializeVector(modules, codeSerializer);\n\n    const payload = new TxnBuilderTypes.TransactionPayloadEntryFunction(\n      TxnBuilderTypes.EntryFunction.natural(\n        \"0x1::resource_account\",\n        \"create_resource_account_and_publish_package\",\n        [],\n        [bcsSerializeBytes(seed), bcsSerializeBytes(packageMetadata), codeSerializer.getBytes()],\n      ),\n    );\n\n    return this.generateSignSubmitTransaction(sender, payload, extraArgs);\n  }\n\n  /**\n   * Helper for generating, submitting, and waiting for a transaction, and then\n   * checking whether it was committed successfully. Under the hood this is just\n   * `generateSignSubmitTransaction` and then `waitForTransactionWithResult`, see\n   * those for information about the return / error semantics of this function.\n   */\n  async generateSignSubmitWaitForTransaction(\n    sender: AptosAccount,\n    payload: TxnBuilderTypes.TransactionPayload,\n    extraArgs?: OptionalTransactionArgs & {\n      checkSuccess?: boolean;\n      timeoutSecs?: number;\n    },\n  ): Promise<Gen.Transaction> {\n    const txnHash = await this.generateSignSubmitTransaction(sender, payload, extraArgs);\n    return this.waitForTransactionWithResult(txnHash, extraArgs);\n  }\n\n  @parseApiError\n  @Memoize({\n    ttlMs: 5 * 60 * 1000, // cache result for 5min\n    tags: [\"gas_estimates\"],\n  })\n  async estimateGasPrice(): Promise<Gen.GasEstimation> {\n    const { data } = await get<{}, Gen.GasEstimation>({\n      url: this.nodeUrl,\n      endpoint: \"estimate_gas_price\",\n      originMethod: \"estimateGasPrice\",\n      overrides: { ...this.config },\n    });\n    return data;\n  }\n\n  @parseApiError\n  async estimateMaxGasAmount(forAccount: MaybeHexString): Promise<Uint64> {\n    // Only Aptos utility coin is accepted as gas\n    const typeTag = `0x1::coin::CoinStore<${APTOS_COIN}>`;\n\n    const [{ gas_estimate: gasUnitPrice }, resources] = await Promise.all([\n      this.estimateGasPrice(),\n      this.getAccountResources(forAccount),\n    ]);\n\n    const accountResource = resources.find((r) => r.type === typeTag);\n    const balance = BigInt((accountResource!.data as any).coin.value);\n    return balance / BigInt(gasUnitPrice);\n  }\n\n  /**\n   * Rotate an account's auth key. After rotation, only the new private key can be used to sign txns for\n   * the account.\n   * WARNING: You must create a new instance of AptosAccount after using this function.\n   * @param forAccount Account of which the auth key will be rotated\n   * @param toPrivateKeyBytes New private key\n   * @param extraArgs Extra args for building the transaction payload.\n   * @returns PendingTransaction\n   */\n  async rotateAuthKeyEd25519(\n    forAccount: AptosAccount,\n    toPrivateKeyBytes: Uint8Array,\n    extraArgs?: OptionalTransactionArgs,\n  ): Promise<Gen.PendingTransaction> {\n    const { sequence_number: sequenceNumber, authentication_key: authKey } = await this.getAccount(\n      forAccount.address(),\n    );\n\n    const helperAccount = new AptosAccount(toPrivateKeyBytes);\n\n    const challenge = new TxnBuilderTypes.RotationProofChallenge(\n      TxnBuilderTypes.AccountAddress.CORE_CODE_ADDRESS,\n      \"account\",\n      \"RotationProofChallenge\",\n      BigInt(sequenceNumber),\n      TxnBuilderTypes.AccountAddress.fromHex(forAccount.address()),\n      new TxnBuilderTypes.AccountAddress(new HexString(authKey).toUint8Array()),\n      helperAccount.pubKey().toUint8Array(),\n    );\n\n    const challengeHex = HexString.fromUint8Array(bcsToBytes(challenge));\n\n    const proofSignedByCurrentPrivateKey = forAccount.signHexString(challengeHex);\n\n    const proofSignedByNewPrivateKey = helperAccount.signHexString(challengeHex);\n\n    const payload = new TxnBuilderTypes.TransactionPayloadEntryFunction(\n      TxnBuilderTypes.EntryFunction.natural(\n        \"0x1::account\",\n        \"rotate_authentication_key\",\n        [],\n        [\n          bcsSerializeU8(0), // ed25519 scheme\n          bcsSerializeBytes(forAccount.pubKey().toUint8Array()),\n          bcsSerializeU8(0), // ed25519 scheme\n          bcsSerializeBytes(helperAccount.pubKey().toUint8Array()),\n          bcsSerializeBytes(proofSignedByCurrentPrivateKey.toUint8Array()),\n          bcsSerializeBytes(proofSignedByNewPrivateKey.toUint8Array()),\n        ],\n      ),\n    );\n\n    const rawTransaction = await this.generateRawTransaction(forAccount.address(), payload, extraArgs);\n    const bcsTxn = AptosClient.generateBCSTransaction(forAccount, rawTransaction);\n    return this.submitSignedBCSTransaction(bcsTxn);\n  }\n\n  /**\n   * Lookup the original address by the current derived address\n   * @param addressOrAuthKey\n   * @returns original address\n   */\n  async lookupOriginalAddress(addressOrAuthKey: MaybeHexString): Promise<HexString> {\n    const resource = await this.getAccountResource(\"0x1\", \"0x1::account::OriginatingAddress\");\n\n    const {\n      address_map: { handle },\n    } = resource.data as any;\n\n    const origAddress = await this.getTableItem(handle, {\n      key_type: \"address\",\n      value_type: \"address\",\n      key: HexString.ensure(addressOrAuthKey).hex(),\n    });\n\n    return new HexString(origAddress);\n  }\n\n  /**\n   * Get block by height\n   *\n   * @param blockHeight Block height to lookup.  Starts at 0\n   * @param withTransactions If set to true, include all transactions in the block\n   *\n   * @returns Block\n   */\n  @parseApiError\n  async getBlockByHeight(blockHeight: number, withTransactions?: boolean): Promise<Gen.Block> {\n    const { data } = await get<{}, Gen.Block>({\n      url: this.nodeUrl,\n      endpoint: `blocks/by_height/${blockHeight}`,\n      originMethod: \"getBlockByHeight\",\n      params: { with_transactions: withTransactions },\n      overrides: { ...this.config },\n    });\n    return data;\n  }\n\n  /**\n   * Get block by block transaction version\n   *\n   * @param version Ledger version to lookup block information for\n   * @param withTransactions If set to true, include all transactions in the block\n   *\n   * @returns Block\n   */\n  @parseApiError\n  async getBlockByVersion(version: number, withTransactions?: boolean): Promise<Gen.Block> {\n    const { data } = await get<{}, Gen.Block>({\n      url: this.nodeUrl,\n      endpoint: `blocks/by_version/${version}`,\n      originMethod: \"getBlockByVersion\",\n      params: { with_transactions: withTransactions },\n      overrides: { ...this.config },\n    });\n    return data;\n  }\n\n  /**\n   * Call for a move view function\n   *\n   * @param payload Transaction payload\n   * @param version (optional) Ledger version to lookup block information for\n   *\n   * @returns MoveValue[]\n   */\n  @parseApiError\n  async view(payload: Gen.ViewRequest, ledger_version?: string): Promise<Gen.MoveValue[]> {\n    const { data } = await post<Gen.ViewRequest, Gen.MoveValue[]>({\n      url: this.nodeUrl,\n      body: payload,\n      endpoint: \"view\",\n      originMethod: \"getTableItem\",\n      params: { ledger_version },\n      overrides: { ...this.config },\n    });\n    return data;\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  clearCache(tags: string[]) {\n    clear(tags);\n  }\n}\n/**\n * This error is used by `waitForTransactionWithResult` when waiting for a\n * transaction times out.\n */\nexport class WaitForTransactionError extends Error {\n  public readonly lastSubmittedTransaction: Gen.Transaction | undefined;\n\n  constructor(message: string, lastSubmittedTransaction: Gen.Transaction | undefined) {\n    super(message);\n    this.lastSubmittedTransaction = lastSubmittedTransaction;\n  }\n}\n\n/**\n * This error is used by `waitForTransactionWithResult` if `checkSuccess` is true.\n * See that function for more information.\n */\nexport class FailedTransactionError extends Error {\n  public readonly transaction: Gen.Transaction;\n\n  constructor(message: string, transaction: Gen.Transaction) {\n    super(message);\n    this.transaction = transaction;\n  }\n}\n\nexport class ApiError extends Error {\n  constructor(\n    public readonly status: number,\n    public readonly message: string,\n    public readonly errorCode?: string,\n    public readonly vmErrorCode?: string,\n  ) {\n    super(message);\n  }\n}\n\nfunction parseApiError(target: unknown, propertyKey: string, descriptor: PropertyDescriptor) {\n  const childFunction = descriptor.value;\n  // eslint-disable-next-line no-param-reassign\n  descriptor.value = async function wrapper(...args: any[]) {\n    try {\n      // We need to explicitly await here so that the function is called and\n      // potentially throws an error. If we just return without awaiting, the\n      // promise is returned directly and the catch block cannot trigger.\n      const res = await childFunction.apply(this, [...args]);\n      return res;\n    } catch (e) {\n      if (e instanceof AptosApiError) {\n        throw new ApiError(\n          e.status,\n          JSON.stringify({ message: e.message, ...e.data }),\n          e.data?.error_code,\n          e.data?.vm_error_code,\n        );\n      }\n      throw e;\n    }\n  };\n  return descriptor;\n}\n","import { AnyNumber } from \"../bcs/types\";\nimport { HexString, MaybeHexString } from \"../utils\";\nimport {\n  GetAccountTokensCountQuery,\n  GetAccountCoinsDataQuery,\n  GetAccountCurrentTokensQuery,\n  GetAccountTransactionsCountQuery,\n  GetAccountTransactionsDataQuery,\n  GetNumberOfDelegatorsQuery,\n  GetDelegatedStakingActivitiesQuery,\n  GetIndexerLedgerInfoQuery,\n  GetTokenActivitiesCountQuery,\n  GetTokenActivitiesQuery,\n  GetTokenDataQuery,\n  GetTokenOwnersDataQuery,\n  GetTopUserTransactionsQuery,\n  GetUserTransactionsQuery,\n  GetOwnedTokensQuery,\n  GetTokenOwnedFromCollectionQuery,\n  GetCollectionDataQuery,\n  GetCollectionsWithOwnedTokensQuery,\n  GetTokenCurrentOwnerDataQuery,\n  GetOwnedTokensByTokenDataQuery,\n  GetAccountCoinsDataCountQuery,\n  GetCurrentObjectsQuery,\n} from \"../indexer/generated/operations\";\nimport {\n  GetAccountTokensCount,\n  GetAccountCoinsData,\n  GetAccountCurrentTokens,\n  GetAccountTransactionsCount,\n  GetAccountTransactionsData,\n  GetNumberOfDelegators,\n  GetDelegatedStakingActivities,\n  GetIndexerLedgerInfo,\n  GetTokenActivities,\n  GetTokenActivitiesCount,\n  GetTokenData,\n  GetTokenOwnersData,\n  GetTopUserTransactions,\n  GetUserTransactions,\n  GetOwnedTokens,\n  GetTokenOwnedFromCollection,\n  GetCollectionData,\n  GetCollectionsWithOwnedTokens,\n  GetTokenCurrentOwnerData,\n  GetOwnedTokensByTokenData,\n  GetAccountCoinsDataCount,\n  GetCurrentObjects,\n} from \"../indexer/generated/queries\";\nimport { ClientConfig, post } from \"../client\";\nimport { ApiError } from \"./aptos_client\";\nimport {\n  Account_Transactions_Order_By,\n  Current_Collections_V2_Order_By,\n  Current_Collection_Ownership_V2_View_Order_By,\n  Current_Fungible_Asset_Balances_Order_By,\n  Current_Token_Datas_V2_Order_By,\n  Current_Token_Ownerships_V2_Order_By,\n  InputMaybe,\n  Token_Activities_V2_Order_By,\n  User_Transactions_Order_By,\n  Current_Objects_Order_By,\n} from \"../indexer/generated/types\";\n\n/**\n * Controls the number of results that are returned and the starting position of those results.\n * limit specifies the maximum number of items or records to return in a query result.\n * offset parameter specifies the starting position of the query result within the set of data.\n * For example, if you want to retrieve records 11-20,\n * you would set the offset parameter to 10 (i.e., the index of the first record to retrieve is 10)\n * and the limit parameter to 10 (i.e., the number of records to retrieve is 10))\n */\nexport interface IndexerPaginationArgs {\n  offset?: AnyNumber;\n  limit?: number;\n}\n\n/**\n * Holds a generic type that being passed by each function and holds an\n * array of properties we can sort the query by\n */\nexport type IndexerSortBy<T> = IndexerSortingOptions<T>;\n\nexport type IndexerSortingOptions<T> = {\n  [K in keyof T]?: T[K] extends InputMaybe<infer U>\n    ? IndexerSortingOptions<U> | U | IndexerOrderBy\n    : T[K] | IndexerOrderBy;\n};\n\nexport type IndexerOrderBy = \"asc\" | \"desc\";\n\n/**\n * Refers to the token standard we want to query for\n */\nexport type TokenStandard = \"v1\" | \"v2\";\n\n/**\n * The graphql query type to pass into the `queryIndexer` function\n */\nexport type GraphqlQuery = {\n  query: string;\n  variables?: {};\n};\n\n/**\n * Provides methods for retrieving data from Aptos Indexer.\n * For more detailed Queries specification see\n * {@link https://cloud.hasura.io/public/graphiql?endpoint=https://indexer.mainnet.aptoslabs.com/v1/graphql}\n *\n * Some methods support optional extra arguments, such as - TokenStandard, IndexerSortBy, IndexerPaginationArgs\n *\n * @param TokenStandard is of type `v1` or `v2` and it refers to the token standard we want to query for.\n * @example An example of how to pass a specific token standard\n * ```\n * {\n *    tokenStandard:\"v2\"\n * }\n * ```\n *\n * @param IndexerSortBy has a generic type that being passed by each function and holds an\n * array of properties we can sort the query by\n * @example An example of how to sort by a specific field\n * ```\n * {\n *  orderBy: [{ token_standard: \"desc\" }]\n * }\n * ```\n *\n * @param IndexerPaginationArgs Controls the number of results that are returned and the starting position\n * of those results.\n * limit specifies the maximum number of items or records to return in a query result.\n * offset parameter specifies the starting position of the query result within the set of data.\n * For example, if you want to retrieve records 11-20,\n * you would set the offset parameter to 10 (i.e., the index of the first record to retrieve is 10)\n * and the limit parameter to 10 (i.e., the number of records to retrieve is 10))\n *\n * @example An example of how to set the `limit` and `offset`\n * ```\n * {\n *  { offset: 2, limit: 4 }\n * }\n * ```\n */\nexport class IndexerClient {\n  readonly endpoint: string;\n\n  readonly config: ClientConfig | undefined;\n\n  /**\n   * @param endpoint URL of the Aptos Indexer API endpoint.\n   */\n  constructor(endpoint: string, config?: ClientConfig) {\n    this.endpoint = endpoint;\n    this.config = config;\n  }\n\n  /**\n   * Indexer only accepts address in the long format, i.e a 66 chars long -> 0x<64 chars>\n   * This method makes sure address is 66 chars long.\n   * @param address\n   */\n  static validateAddress(address: string): void {\n    if (address.length < 66) {\n      throw new Error(`${address} is less than 66 chars long.`);\n    }\n  }\n\n  /**\n   * Makes axios client call to fetch data from Aptos Indexer.\n   *\n   * @param graphqlQuery A GraphQL query to pass in the `data` axios call.\n   */\n  async queryIndexer<T>(graphqlQuery: GraphqlQuery): Promise<T> {\n    const response = await post<GraphqlQuery, any>({\n      url: this.endpoint,\n      body: graphqlQuery,\n      overrides: { WITH_CREDENTIALS: false, ...this.config },\n    });\n    if (response.data.errors) {\n      throw new ApiError(\n        response.data.errors[0].extensions.code,\n        JSON.stringify({\n          message: response.data.errors[0].message,\n          error_code: response.data.errors[0].extensions.code,\n        }),\n      );\n    }\n    return response.data.data;\n  }\n\n  /**\n   * Queries Indexer Ledger Info\n   *\n   * @returns GetLedgerInfoQuery response type\n   */\n  async getIndexerLedgerInfo(): Promise<GetIndexerLedgerInfoQuery> {\n    const graphqlQuery = {\n      query: GetIndexerLedgerInfo,\n    };\n    return this.queryIndexer(graphqlQuery);\n  }\n\n  // TOKENS //\n\n  /**\n   * @deprecated please use `getOwnedTokens` query\n   *\n   * Queries an Aptos account's NFTs by owner address\n   *\n   * @param ownerAddress Hex-encoded 32 byte Aptos account address\n   * @returns GetAccountCurrentTokensQuery response type\n   */\n  async getAccountNFTs(\n    ownerAddress: MaybeHexString,\n    options?: IndexerPaginationArgs,\n  ): Promise<GetAccountCurrentTokensQuery> {\n    const address = HexString.ensure(ownerAddress).hex();\n    IndexerClient.validateAddress(address);\n    const graphqlQuery = {\n      query: GetAccountCurrentTokens,\n      variables: { address, offset: options?.offset, limit: options?.limit },\n    };\n\n    return this.queryIndexer<GetAccountCurrentTokensQuery>(graphqlQuery);\n  }\n\n  /**\n   * Queries a token activities by token address (v2) or token data id (v1)\n   *\n   * @param idHash token address (v2) or token data id (v1)\n   * @returns GetTokenActivitiesQuery response type\n   */\n  async getTokenActivities(\n    token: MaybeHexString,\n    extraArgs?: {\n      tokenStandard?: TokenStandard;\n      options?: IndexerPaginationArgs;\n      orderBy?: IndexerSortBy<Token_Activities_V2_Order_By>[];\n    },\n  ): Promise<GetTokenActivitiesQuery> {\n    const tokenAddress = HexString.ensure(token).hex();\n    IndexerClient.validateAddress(tokenAddress);\n\n    const whereCondition: any = {\n      token_data_id: { _eq: tokenAddress },\n    };\n\n    if (extraArgs?.tokenStandard) {\n      whereCondition.token_standard = { _eq: extraArgs?.tokenStandard };\n    }\n    const graphqlQuery = {\n      query: GetTokenActivities,\n      variables: {\n        where_condition: whereCondition,\n        offset: extraArgs?.options?.offset,\n        limit: extraArgs?.options?.limit,\n        order_by: extraArgs?.orderBy,\n      },\n    };\n\n    return this.queryIndexer(graphqlQuery);\n  }\n\n  /**\n   * Gets the count of token's activities by token address (v2) or token data id (v1)\n   *\n   * @param token token address (v2) or token data id (v1)\n   * @returns GetTokenActivitiesCountQuery response type\n   */\n  async getTokenActivitiesCount(token: string): Promise<GetTokenActivitiesCountQuery> {\n    const graphqlQuery = {\n      query: GetTokenActivitiesCount,\n      variables: { token_id: token },\n    };\n    return this.queryIndexer(graphqlQuery);\n  }\n\n  /**\n   * Gets the count of tokens owned by an account\n   *\n   * @param ownerAddress Owner address\n   * @returns AccountTokensCountQuery response type\n   */\n  async getAccountTokensCount(\n    ownerAddress: MaybeHexString,\n    extraArgs?: {\n      tokenStandard?: TokenStandard;\n      options?: IndexerPaginationArgs;\n    },\n  ): Promise<GetAccountTokensCountQuery> {\n    const whereCondition: any = {\n      owner_address: { _eq: ownerAddress },\n      amount: { _gt: \"0\" },\n    };\n\n    if (extraArgs?.tokenStandard) {\n      whereCondition.token_standard = { _eq: extraArgs?.tokenStandard };\n    }\n\n    const address = HexString.ensure(ownerAddress).hex();\n    IndexerClient.validateAddress(address);\n    const graphqlQuery = {\n      query: GetAccountTokensCount,\n      variables: {\n        where_condition: whereCondition,\n        offset: extraArgs?.options?.offset,\n        limit: extraArgs?.options?.limit,\n      },\n    };\n    return this.queryIndexer(graphqlQuery);\n  }\n\n  /**\n   * Queries token data by token address (v2) or token data id (v1)\n   *\n   * @param token token address (v2) or token data id (v1)\n   * @returns GetTokenDataQuery response type\n   */\n  async getTokenData(\n    token: string,\n    extraArgs?: {\n      tokenStandard?: TokenStandard;\n      options?: IndexerPaginationArgs;\n      orderBy?: IndexerSortBy<Current_Token_Datas_V2_Order_By>[];\n    },\n  ): Promise<GetTokenDataQuery> {\n    const tokenAddress = HexString.ensure(token).hex();\n    IndexerClient.validateAddress(tokenAddress);\n\n    const whereCondition: any = {\n      token_data_id: { _eq: tokenAddress },\n    };\n\n    if (extraArgs?.tokenStandard) {\n      whereCondition.token_standard = { _eq: extraArgs?.tokenStandard };\n    }\n    const graphqlQuery = {\n      query: GetTokenData,\n      variables: {\n        where_condition: whereCondition,\n        offset: extraArgs?.options?.offset,\n        limit: extraArgs?.options?.limit,\n        order_by: extraArgs?.orderBy,\n      },\n    };\n    return this.queryIndexer(graphqlQuery);\n  }\n\n  /**\n   * Queries token owners data by token address (v2) or token data id (v1).\n   * This query returns historical owners data.\n   *\n   * To fetch token v2 standard, pass in the optional `tokenStandard` parameter and\n   * dont pass `propertyVersion` parameter (as propertyVersion only compatible with v1 standard)\n   *\n   * @param token token address (v2) or token data id (v1)\n   * @param propertyVersion Property version (optional) - only compatible with token v1 standard\n   * @returns GetTokenOwnersDataQuery response type\n   */\n  async getTokenOwnersData(\n    token: string,\n    propertyVersion?: number,\n    extraArgs?: {\n      tokenStandard?: TokenStandard;\n      options?: IndexerPaginationArgs;\n      orderBy?: IndexerSortBy<Current_Token_Ownerships_V2_Order_By>[];\n    },\n  ): Promise<GetTokenOwnersDataQuery> {\n    const tokenAddress = HexString.ensure(token).hex();\n    IndexerClient.validateAddress(tokenAddress);\n\n    const whereCondition: any = {\n      token_data_id: { _eq: tokenAddress },\n      amount: { _gt: \"0\" },\n    };\n\n    if (propertyVersion) {\n      whereCondition.property_version_v1 = { _eq: propertyVersion };\n    }\n\n    if (extraArgs?.tokenStandard) {\n      whereCondition.token_standard = { _eq: extraArgs?.tokenStandard };\n    }\n\n    const graphqlQuery = {\n      query: GetTokenOwnersData,\n      variables: {\n        where_condition: whereCondition,\n        offset: extraArgs?.options?.offset,\n        limit: extraArgs?.options?.limit,\n        order_by: extraArgs?.orderBy,\n      },\n    };\n    return this.queryIndexer(graphqlQuery);\n  }\n\n  /**\n   * Queries current token owner data by token address (v2) or token data id (v1).\n   * This query returns the current token owner data.\n   *\n   * To fetch token v2 standard, pass in the optional `tokenStandard` parameter and\n   * dont pass `propertyVersion` parameter (as propertyVersion only compatible with v1 standard)\n   *\n   * @param token token address (v2) or token data id (v1)\n   * @param propertyVersion Property version (optional) - only compatible with token v1 standard\n   * @returns GetTokenCurrentOwnerDataQuery response type\n   */\n  async getTokenCurrentOwnerData(\n    token: string,\n    propertyVersion?: number,\n    extraArgs?: {\n      tokenStandard?: TokenStandard;\n      options?: IndexerPaginationArgs;\n      orderBy?: IndexerSortBy<Current_Token_Ownerships_V2_Order_By>[];\n    },\n  ): Promise<GetTokenCurrentOwnerDataQuery> {\n    const tokenAddress = HexString.ensure(token).hex();\n    IndexerClient.validateAddress(tokenAddress);\n\n    const whereCondition: any = {\n      token_data_id: { _eq: tokenAddress },\n      amount: { _gt: \"0\" },\n    };\n\n    if (propertyVersion) {\n      whereCondition.property_version_v1 = { _eq: propertyVersion };\n    }\n\n    if (extraArgs?.tokenStandard) {\n      whereCondition.token_standard = { _eq: extraArgs?.tokenStandard };\n    }\n\n    const graphqlQuery = {\n      query: GetTokenCurrentOwnerData,\n      variables: {\n        where_condition: whereCondition,\n        offset: extraArgs?.options?.offset,\n        limit: extraArgs?.options?.limit,\n        order_by: extraArgs?.orderBy,\n      },\n    };\n    return this.queryIndexer(graphqlQuery);\n  }\n\n  /**\n   * Queries account's current owned tokens.\n   * This query returns all tokens (v1 and v2 standards) an account owns, including NFTs, fungible, soulbound, etc.\n   * If you want to get only the token from a specific standrd, you can pass an optional tokenStandard param\n   *\n   * @param ownerAddress The token owner address we want to get the tokens for\n   * @returns GetOwnedTokensQuery response type\n   */\n  async getOwnedTokens(\n    ownerAddress: MaybeHexString,\n    extraArgs?: {\n      tokenStandard?: TokenStandard;\n      options?: IndexerPaginationArgs;\n      orderBy?: IndexerSortBy<Current_Token_Ownerships_V2_Order_By>[];\n    },\n  ): Promise<GetOwnedTokensQuery> {\n    const address = HexString.ensure(ownerAddress).hex();\n    IndexerClient.validateAddress(address);\n\n    const whereCondition: any = {\n      owner_address: { _eq: address },\n      amount: { _gt: 0 },\n    };\n\n    if (extraArgs?.tokenStandard) {\n      whereCondition.token_standard = { _eq: extraArgs?.tokenStandard };\n    }\n\n    const graphqlQuery = {\n      query: GetOwnedTokens,\n      variables: {\n        where_condition: whereCondition,\n        offset: extraArgs?.options?.offset,\n        limit: extraArgs?.options?.limit,\n        order_by: extraArgs?.orderBy,\n      },\n    };\n    return this.queryIndexer(graphqlQuery);\n  }\n\n  /**\n   * Queries account's current owned tokens by token address (v2) or token data id (v1).\n   *\n   * @param token token address (v2) or token data id (v1)\n   * @returns GetOwnedTokensByTokenDataQuery response type\n   */\n  async getOwnedTokensByTokenData(\n    token: MaybeHexString,\n    extraArgs?: {\n      tokenStandard?: TokenStandard;\n      options?: IndexerPaginationArgs;\n      orderBy?: IndexerSortBy<Current_Token_Ownerships_V2_Order_By>[];\n    },\n  ): Promise<GetOwnedTokensByTokenDataQuery> {\n    const address = HexString.ensure(token).hex();\n    IndexerClient.validateAddress(address);\n\n    const whereCondition: any = {\n      token_data_id: { _eq: address },\n      amount: { _gt: 0 },\n    };\n\n    if (extraArgs?.tokenStandard) {\n      whereCondition.token_standard = { _eq: extraArgs?.tokenStandard };\n    }\n\n    const graphqlQuery = {\n      query: GetOwnedTokensByTokenData,\n      variables: {\n        where_condition: whereCondition,\n        offset: extraArgs?.options?.offset,\n        limit: extraArgs?.options?.limit,\n        order_by: extraArgs?.orderBy,\n      },\n    };\n    return this.queryIndexer(graphqlQuery);\n  }\n\n  /**\n   * Queries all tokens of a specific collection that an account owns by the collection address\n   *\n   * @param ownerAddress owner address that owns the tokens\n   * @param collectionAddress the collection address\n   * @returns GetTokenOwnedFromCollectionQuery response type\n   */\n  async getTokenOwnedFromCollectionAddress(\n    ownerAddress: MaybeHexString,\n    collectionAddress: string,\n    extraArgs?: {\n      tokenStandard?: TokenStandard;\n      options?: IndexerPaginationArgs;\n      orderBy?: IndexerSortBy<Current_Token_Ownerships_V2_Order_By>[];\n    },\n  ): Promise<GetTokenOwnedFromCollectionQuery> {\n    const ownerHexAddress = HexString.ensure(ownerAddress).hex();\n    IndexerClient.validateAddress(ownerHexAddress);\n\n    const collectionHexAddress = HexString.ensure(collectionAddress).hex();\n    IndexerClient.validateAddress(collectionHexAddress);\n\n    const whereCondition: any = {\n      owner_address: { _eq: ownerHexAddress },\n      current_token_data: { collection_id: { _eq: collectionHexAddress } },\n      amount: { _gt: 0 },\n    };\n\n    if (extraArgs?.tokenStandard) {\n      whereCondition.token_standard = { _eq: extraArgs?.tokenStandard };\n    }\n\n    const graphqlQuery = {\n      query: GetTokenOwnedFromCollection,\n      variables: {\n        where_condition: whereCondition,\n        offset: extraArgs?.options?.offset,\n        limit: extraArgs?.options?.limit,\n        order_by: extraArgs?.orderBy,\n      },\n    };\n    return this.queryIndexer(graphqlQuery);\n  }\n\n  /**\n   * Queries all tokens of a specific collection that an account owns by the collection name and collection\n   * creator address\n   *\n   * @param ownerAddress owner address that owns the tokens\n   * @param collectionName the collection name\n   * @param creatorAddress the collection creator address\n   * @returns GetTokenOwnedFromCollectionQuery response type\n   */\n  async getTokenOwnedFromCollectionNameAndCreatorAddress(\n    ownerAddress: MaybeHexString,\n    collectionName: string,\n    creatorAddress: MaybeHexString,\n    extraArgs?: {\n      tokenStandard?: TokenStandard;\n      options?: IndexerPaginationArgs;\n    },\n  ): Promise<GetTokenOwnedFromCollectionQuery> {\n    const collectionAddress = await this.getCollectionAddress(creatorAddress, collectionName, extraArgs);\n    const tokens = await this.getTokenOwnedFromCollectionAddress(ownerAddress, collectionAddress, extraArgs);\n    return tokens;\n  }\n\n  /**\n   * Queries data of a specific collection by the collection creator address and the collection name.\n   *\n   * if, for some reason, a creator account has 2 collections with the same name in v1 and v2,\n   * can pass an optional `tokenStandard` parameter to query a specific standard\n   *\n   * @param creatorAddress the collection creator address\n   * @param collectionName the collection name\n   * @returns GetCollectionDataQuery response type\n   */\n  async getCollectionData(\n    creatorAddress: MaybeHexString,\n    collectionName: string,\n    extraArgs?: {\n      tokenStandard?: TokenStandard;\n      options?: IndexerPaginationArgs;\n      orderBy?: IndexerSortBy<Current_Collections_V2_Order_By>[];\n    },\n  ): Promise<GetCollectionDataQuery> {\n    const address = HexString.ensure(creatorAddress).hex();\n    IndexerClient.validateAddress(address);\n\n    const whereCondition: any = {\n      collection_name: { _eq: collectionName },\n      creator_address: { _eq: address },\n    };\n\n    if (extraArgs?.tokenStandard) {\n      whereCondition.token_standard = { _eq: extraArgs?.tokenStandard };\n    }\n\n    const graphqlQuery = {\n      query: GetCollectionData,\n      variables: {\n        where_condition: whereCondition,\n        offset: extraArgs?.options?.offset,\n        limit: extraArgs?.options?.limit,\n        order_by: extraArgs?.orderBy,\n      },\n    };\n    return this.queryIndexer(graphqlQuery);\n  }\n\n  /**\n   * Queries a collection address.\n   *\n   * @param creatorAddress the collection creator address\n   * @param collectionName the collection name\n   * @returns the collection address\n   */\n  async getCollectionAddress(\n    creatorAddress: MaybeHexString,\n    collectionName: string,\n    extraArgs?: {\n      tokenStandard?: TokenStandard;\n      orderBy?: IndexerSortBy<Current_Collections_V2_Order_By>[];\n    },\n  ): Promise<string> {\n    return (await this.getCollectionData(creatorAddress, collectionName, extraArgs)).current_collections_v2[0]\n      .collection_id;\n  }\n\n  /**\n   * Queries for all collections that an account has tokens for.\n   *\n   * @param ownerAddress the account address that owns the tokens\n   * @returns GetCollectionsWithOwnedTokensQuery response type\n   */\n  async getCollectionsWithOwnedTokens(\n    ownerAddress: MaybeHexString,\n    extraArgs?: {\n      tokenStandard?: TokenStandard;\n      options?: IndexerPaginationArgs;\n      orderBy?: IndexerSortBy<Current_Collection_Ownership_V2_View_Order_By>[];\n    },\n  ): Promise<GetCollectionsWithOwnedTokensQuery> {\n    const ownerHexAddress = HexString.ensure(ownerAddress).hex();\n    IndexerClient.validateAddress(ownerHexAddress);\n\n    const whereCondition: any = {\n      owner_address: { _eq: ownerHexAddress },\n    };\n\n    if (extraArgs?.tokenStandard) {\n      whereCondition.current_collection = { token_standard: { _eq: extraArgs?.tokenStandard } };\n    }\n\n    const graphqlQuery = {\n      query: GetCollectionsWithOwnedTokens,\n      variables: {\n        where_condition: whereCondition,\n        offset: extraArgs?.options?.offset,\n        limit: extraArgs?.options?.limit,\n        order_by: extraArgs?.orderBy,\n      },\n    };\n    return this.queryIndexer(graphqlQuery);\n  }\n\n  // TRANSACTIONS //\n\n  /**\n   * Gets the count of transactions submitted by an account\n   *\n   * @param address Account address\n   * @returns GetAccountTransactionsCountQuery response type\n   */\n  async getAccountTransactionsCount(accountAddress: MaybeHexString): Promise<GetAccountTransactionsCountQuery> {\n    const address = HexString.ensure(accountAddress).hex();\n    IndexerClient.validateAddress(address);\n    const graphqlQuery = {\n      query: GetAccountTransactionsCount,\n      variables: { address },\n    };\n    return this.queryIndexer(graphqlQuery);\n  }\n\n  /**\n   * Queries an account transactions data\n   *\n   * @param address Account address\n   * @returns GetAccountTransactionsDataQuery response type\n   */\n  async getAccountTransactionsData(\n    accountAddress: MaybeHexString,\n    extraArgs?: {\n      options?: IndexerPaginationArgs;\n      orderBy?: IndexerSortBy<Account_Transactions_Order_By>[];\n    },\n  ): Promise<GetAccountTransactionsDataQuery> {\n    const address = HexString.ensure(accountAddress).hex();\n    IndexerClient.validateAddress(address);\n\n    const whereCondition: any = {\n      account_address: { _eq: address },\n    };\n\n    const graphqlQuery = {\n      query: GetAccountTransactionsData,\n      variables: {\n        where_condition: whereCondition,\n        offset: extraArgs?.options?.offset,\n        limit: extraArgs?.options?.limit,\n        order_by: extraArgs?.orderBy,\n      },\n    };\n    return this.queryIndexer(graphqlQuery);\n  }\n\n  /**\n   * Queries top user transactions\n   *\n   * @param limit\n   * @returns GetTopUserTransactionsQuery response type\n   */\n  async getTopUserTransactions(limit: number): Promise<GetTopUserTransactionsQuery> {\n    const graphqlQuery = {\n      query: GetTopUserTransactions,\n      variables: { limit },\n    };\n    return this.queryIndexer(graphqlQuery);\n  }\n\n  /**\n   * Queries top user transactions\n   *\n   * @param startVersion optional - can be set to tell indexer what version to start from\n   * @returns GetUserTransactionsQuery response type\n   */\n  async getUserTransactions(extraArgs?: {\n    startVersion?: number;\n    options?: IndexerPaginationArgs;\n    orderBy?: IndexerSortBy<User_Transactions_Order_By>[];\n  }): Promise<GetUserTransactionsQuery> {\n    const whereCondition: any = {\n      version: { _lte: extraArgs?.startVersion },\n    };\n\n    const graphqlQuery = {\n      query: GetUserTransactions,\n      variables: {\n        where_condition: whereCondition,\n        offset: extraArgs?.options?.offset,\n        limit: extraArgs?.options?.limit,\n        order_by: extraArgs?.orderBy,\n      },\n    };\n    return this.queryIndexer(graphqlQuery);\n  }\n\n  // STAKING //\n\n  /**\n   * Queries delegated staking activities\n   *\n   * @param delegatorAddress Delegator address\n   * @param poolAddress Pool address\n   * @returns GetDelegatedStakingActivitiesQuery response type\n   */\n  async getDelegatedStakingActivities(\n    delegatorAddress: MaybeHexString,\n    poolAddress: MaybeHexString,\n  ): Promise<GetDelegatedStakingActivitiesQuery> {\n    const delegator = HexString.ensure(delegatorAddress).hex();\n    const pool = HexString.ensure(poolAddress).hex();\n    IndexerClient.validateAddress(delegator);\n    IndexerClient.validateAddress(pool);\n    const graphqlQuery = {\n      query: GetDelegatedStakingActivities,\n      variables: {\n        delegatorAddress: delegator,\n        poolAddress: pool,\n      },\n    };\n    return this.queryIndexer(graphqlQuery);\n  }\n\n  /**\n   * Queries current number of delegators in a pool\n   *\n   * @returns GetNumberOfDelegatorsQuery response type\n   */\n  async getNumberOfDelegators(poolAddress: MaybeHexString): Promise<GetNumberOfDelegatorsQuery> {\n    const address = HexString.ensure(poolAddress).hex();\n    IndexerClient.validateAddress(address);\n    const graphqlQuery = {\n      query: GetNumberOfDelegators,\n      variables: { poolAddress: address },\n    };\n    return this.queryIndexer(graphqlQuery);\n  }\n\n  // ACCOUNT //\n\n  /**\n   * Queries an account coin data\n   *\n   * @param ownerAddress Owner address\n   * @returns GetAccountCoinsDataQuery response type\n   */\n  async getAccountCoinsData(\n    ownerAddress: MaybeHexString,\n    extraArgs?: {\n      options?: IndexerPaginationArgs;\n      orderBy?: IndexerSortBy<Current_Fungible_Asset_Balances_Order_By>[];\n    },\n  ): Promise<GetAccountCoinsDataQuery> {\n    const address = HexString.ensure(ownerAddress).hex();\n    IndexerClient.validateAddress(address);\n\n    const whereCondition: any = {\n      owner_address: { _eq: address },\n    };\n\n    const graphqlQuery = {\n      query: GetAccountCoinsData,\n      variables: {\n        where_condition: whereCondition,\n        offset: extraArgs?.options?.offset,\n        limit: extraArgs?.options?.limit,\n        order_by: extraArgs?.orderBy,\n      },\n    };\n\n    return this.queryIndexer(graphqlQuery);\n  }\n\n  /**\n   * Queries an account coin data count\n   *\n   * @param ownerAddress Owner address\n   * @returns GetAccountCoinsDataCountQuery response type\n   */\n  async getAccountCoinsDataCount(ownerAddress: MaybeHexString): Promise<GetAccountCoinsDataCountQuery> {\n    const address = HexString.ensure(ownerAddress).hex();\n    IndexerClient.validateAddress(address);\n\n    const graphqlQuery = {\n      query: GetAccountCoinsDataCount,\n      variables: {\n        address,\n      },\n    };\n\n    return this.queryIndexer(graphqlQuery);\n  }\n\n  /**\n   * Queries an account owned objects\n   *\n   * @param ownerAddress Owner address\n   * @returns GetCurrentObjectsQuery response type\n   */\n  async getAccountOwnedObjects(\n    ownerAddress: MaybeHexString,\n    extraArgs?: {\n      options?: IndexerPaginationArgs;\n      orderBy?: IndexerSortBy<Current_Objects_Order_By>[];\n    },\n  ): Promise<GetCurrentObjectsQuery> {\n    const address = HexString.ensure(ownerAddress).hex();\n    IndexerClient.validateAddress(address);\n\n    const whereCondition: any = {\n      owner_address: { _eq: address },\n    };\n\n    const graphqlQuery = {\n      query: GetCurrentObjects,\n      variables: {\n        where_condition: whereCondition,\n        offset: extraArgs?.options?.offset,\n        limit: extraArgs?.options?.limit,\n        order_by: extraArgs?.orderBy,\n      },\n    };\n    return this.queryIndexer(graphqlQuery);\n  }\n}\n","import { AptosClient } from \"./aptos_client\";\nimport { IndexerClient } from \"./indexer\";\n\nimport { CustomEndpoints, Network, NetworkToIndexerAPI, NetworkToNodeAPI } from \"../utils\";\nimport { ClientConfig } from \"../client\";\n\ntype NetworkWithCustom = Network | \"CUSTOM\";\n/**\n * Builds a Provider class with an aptos client configured to connect to an Aptos node\n * and indexer client configured to connect to Aptos Indexer.\n *\n * It creates AptosClient and IndexerClient instances based on the network or custom endpoints provided.\n *\n * This class holds both AptosClient and IndexerClient classes's methods and properties so we\n * can instantiate the Provider class and use it to query full node and/or Indexer.\n *\n * NOTE: Indexer client can be undefined/not set when we use Network.LOCAL (since Indexer\n * does not support local environment) or when we use a CUSTOM network to support applications\n * that only use custom fullnode and not Indexer\n *\n * @example An example of how to use this class with a live network\n * ```\n * const provider = new Provider(Network.DEVNET)\n * const account = await provider.getAccount(\"0x123\");\n * const accountTokens = await provider.getOwnedTokens(\"0x123\");\n * ```\n *\n * @example An example of how to use this class with a local network. Indexer\n * doesn't support local network.\n * ```\n * const provider = new Provider(Network.LOCAL)\n * const account = await provider.getAccount(\"0x123\");\n * ```\n *\n * @example An example of how to use this class with a custom network.\n * ```\n * const provider = new Provider({fullnodeUrl:\"my-fullnode-url\",indexerUrl:\"my-indexer-url\"})\n * const account = await provider.getAccount(\"0x123\");\n * const accountTokens = await provider.getOwnedTokens(\"0x123\");\n * ```\n *\n * @param network enum of type Network - MAINNET | TESTNET | DEVNET | LOCAL or custom endpoints of type CustomEndpoints\n * @param config optional ClientConfig config arg - additional configuration we can pass with the request to the server.\n */\nexport class Provider {\n  aptosClient: AptosClient;\n\n  indexerClient?: IndexerClient;\n\n  network: NetworkWithCustom;\n\n  constructor(network: Network | CustomEndpoints, config?: ClientConfig, doNotFixNodeUrl: boolean = false) {\n    let fullNodeUrl = null;\n    let indexerUrl = null;\n\n    if (typeof network === \"object\" && isCustomEndpoints(network)) {\n      fullNodeUrl = network.fullnodeUrl;\n      indexerUrl = network.indexerUrl;\n      this.network = \"CUSTOM\";\n    } else {\n      fullNodeUrl = NetworkToNodeAPI[network];\n      indexerUrl = NetworkToIndexerAPI[network];\n      this.network = network;\n    }\n\n    if (this.network === \"CUSTOM\" && !fullNodeUrl) {\n      throw new Error(\"fullnode url is not provided\");\n    }\n\n    if (indexerUrl) {\n      this.indexerClient = new IndexerClient(indexerUrl, config);\n    }\n    this.aptosClient = new AptosClient(fullNodeUrl, config, doNotFixNodeUrl);\n  }\n}\n\nexport interface Provider extends AptosClient, IndexerClient {}\n\n/**\nIn TypeScript, we can’t inherit or extend from more than one class,\nMixins helps us to get around that by creating a partial classes \nthat we can combine to form a single class that contains all the methods and properties from the partial classes.\n{@link https://www.typescriptlang.org/docs/handbook/mixins.html#alternative-pattern}\n\nHere, we combine AptosClient and IndexerClient classes into one Provider class that holds all \nmethods and properties from both classes.\n*/\nfunction applyMixin(targetClass: any, baseClass: any, baseClassProp: string) {\n  // Mixin instance methods\n  Object.getOwnPropertyNames(baseClass.prototype).forEach((propertyName) => {\n    const propertyDescriptor = Object.getOwnPropertyDescriptor(baseClass.prototype, propertyName);\n    if (!propertyDescriptor) return;\n    // eslint-disable-next-line func-names\n    propertyDescriptor.value = function (...args: any) {\n      return (this as any)[baseClassProp][propertyName](...args);\n    };\n    Object.defineProperty(targetClass.prototype, propertyName, propertyDescriptor);\n  });\n  // Mixin static methods\n  Object.getOwnPropertyNames(baseClass).forEach((propertyName) => {\n    const propertyDescriptor = Object.getOwnPropertyDescriptor(baseClass, propertyName);\n    if (!propertyDescriptor) return;\n    // eslint-disable-next-line func-names\n    propertyDescriptor.value = function (...args: any) {\n      return (this as any)[baseClassProp][propertyName](...args);\n    };\n    if (targetClass.hasOwnProperty.call(targetClass, propertyName)) {\n      // The mixin has already been applied, so skip applying it again\n      return;\n    }\n    Object.defineProperty(targetClass, propertyName, propertyDescriptor);\n  });\n}\n\napplyMixin(Provider, AptosClient, \"aptosClient\");\napplyMixin(Provider, IndexerClient, \"indexerClient\");\n\n// use exhaustive type predicates\nfunction isCustomEndpoints(network: CustomEndpoints): network is CustomEndpoints {\n  return network.fullnodeUrl !== undefined && typeof network.fullnodeUrl === \"string\";\n}\n","import { Bytes, Deserializer, Serializer } from \"../bcs\";\nimport { serializeArg } from \"../transaction_builder/builder_utils\";\nimport {\n  stringStructTag,\n  TypeTag,\n  TypeTagAddress,\n  TypeTagBool,\n  TypeTagParser,\n  TypeTagStruct,\n  TypeTagU128,\n  TypeTagU64,\n  TypeTagU8,\n} from \"../aptos_types\";\nimport { HexString } from \"./hex_string\";\n\nexport class PropertyValue {\n  type: string;\n\n  value: any;\n\n  constructor(type: string, value: string) {\n    this.type = type;\n    this.value = value;\n  }\n}\n\nexport class PropertyMap {\n  data: { [key: string]: PropertyValue };\n\n  constructor() {\n    this.data = {};\n  }\n\n  setProperty(key: string, value: PropertyValue) {\n    this.data[key] = value;\n  }\n}\n\nexport function getPropertyType(typ: string): TypeTag {\n  let typeTag: TypeTag;\n  if (typ === \"string\" || typ === \"String\") {\n    typeTag = new TypeTagStruct(stringStructTag);\n  } else {\n    typeTag = new TypeTagParser(typ).parseTypeTag();\n  }\n  return typeTag;\n}\n\nexport function getPropertyValueRaw(values: Array<string>, types: Array<string>): Array<Bytes> {\n  if (values.length !== types.length) {\n    throw new Error(\"Length of property values and types not match\");\n  }\n\n  const results = new Array<Bytes>();\n  types.forEach((typ, index) => {\n    try {\n      const typeTag = getPropertyType(typ);\n      const serializer = new Serializer();\n      serializeArg(values[index], typeTag, serializer);\n      results.push(serializer.getBytes());\n    } catch (error) {\n      // if not support type, just use the raw string bytes\n      results.push(new TextEncoder().encode(values[index]));\n    }\n  });\n  return results;\n}\n\nexport function getSinglePropertyValueRaw(value: string, type: string): Uint8Array {\n  if (!value || !type) {\n    throw new Error(\"value or type can not be empty\");\n  }\n\n  try {\n    const typeTag = getPropertyType(type);\n    const serializer = new Serializer();\n    serializeArg(value, typeTag, serializer);\n    return serializer.getBytes();\n  } catch (error) {\n    // if not support type, just use the raw string bytes\n    return new TextEncoder().encode(value);\n  }\n}\n\nexport function deserializePropertyMap(rawPropertyMap: any): PropertyMap {\n  const entries = rawPropertyMap.map.data;\n  const pm = new PropertyMap();\n  entries.forEach((prop: any) => {\n    const { key } = prop;\n    const val: string = prop.value.value;\n    const typ: string = prop.value.type;\n    const typeTag = getPropertyType(typ);\n    const newValue = deserializeValueBasedOnTypeTag(typeTag, val);\n    const pv = new PropertyValue(typ, newValue);\n    pm.setProperty(key, pv);\n  });\n  return pm;\n}\n\nexport function deserializeValueBasedOnTypeTag(tag: TypeTag, val: string): string {\n  const de = new Deserializer(new HexString(val).toUint8Array());\n  let res: string = \"\";\n  if (tag instanceof TypeTagU8) {\n    res = de.deserializeU8().toString();\n  } else if (tag instanceof TypeTagU64) {\n    res = de.deserializeU64().toString();\n  } else if (tag instanceof TypeTagU128) {\n    res = de.deserializeU128().toString();\n  } else if (tag instanceof TypeTagBool) {\n    res = de.deserializeBool() ? \"true\" : \"false\";\n  } else if (tag instanceof TypeTagAddress) {\n    res = HexString.fromUint8Array(de.deserializeFixedBytes(32)).hex();\n  } else if (tag instanceof TypeTagStruct && (tag as TypeTagStruct).isStringTypeTag()) {\n    res = de.deserializeStr();\n  } else {\n    res = val;\n  }\n  return res;\n}\n","// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\nimport { deserializePropertyMap, PropertyMap, PropertyValue } from \"../utils/property_map_serde\";\n\nexport { PropertyMap, PropertyValue };\nexport class TokenData {\n  /** Unique name within this creator's account for this Token's collection */\n  collection: string;\n\n  /** Description of Token */\n  description: string;\n\n  /** Name of Token */\n  name: string;\n\n  /** Optional maximum number of this Token */\n  maximum?: number;\n\n  /** Total number of this type of Token */\n  supply: number;\n\n  /** URL for additional information / media */\n  uri: string;\n\n  /** default properties of token data */\n  default_properties: PropertyMap;\n\n  /** mutability config of tokendata fields */\n  mutability_config: boolean[];\n\n  constructor(\n    collection: string,\n    description: string,\n    name: string,\n    maximum: number,\n    supply: number,\n    uri: string,\n    default_properties: any,\n    mutability_config: boolean[],\n  ) {\n    this.collection = collection;\n    this.description = description;\n    this.name = name;\n    this.maximum = maximum;\n    this.supply = supply;\n    this.uri = uri;\n    this.default_properties = deserializePropertyMap(default_properties);\n    this.mutability_config = mutability_config;\n  }\n}\n\nexport interface TokenDataId {\n  /** Token creator address */\n  creator: string;\n\n  /** Unique name within this creator's account for this Token's collection */\n  collection: string;\n\n  /** Name of Token */\n  name: string;\n}\n\nexport interface TokenId {\n  token_data_id: TokenDataId;\n\n  /** version number of the property map */\n  property_version: string;\n}\n\n/** server will return string for u64 */\ntype U64 = string;\n\nexport class Token {\n  id: TokenId;\n\n  /** server will return string for u64 */\n  amount: U64;\n\n  /** the property map of the token */\n  token_properties: PropertyMap;\n\n  constructor(id: TokenId, amount: U64, token_properties: any) {\n    this.id = id;\n    this.amount = amount;\n    this.token_properties = deserializePropertyMap(token_properties);\n  }\n}\n","// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\n/* eslint-disable max-len */\n\nimport { AptosAccount } from \"../account/aptos_account\";\nimport { AptosClient, OptionalTransactionArgs } from \"../providers/aptos_client\";\nimport * as TokenTypes from \"../aptos_types/token_types\";\nimport * as Gen from \"../generated/index\";\nimport { HexString, MaybeHexString } from \"../utils\";\nimport { TransactionBuilder, TransactionBuilderRemoteABI, TxnBuilderTypes } from \"../transaction_builder\";\nimport { MAX_U64_BIG_INT } from \"../bcs/consts\";\nimport { AnyNumber, bcsToBytes, Bytes } from \"../bcs\";\nimport { getPropertyValueRaw, PropertyMap } from \"../utils/property_map_serde\";\nimport { Token, TokenData } from \"../aptos_types/token_types\";\n\n/**\n * Class for creating, minting and managing minting NFT collections and tokens\n */\nexport class TokenClient {\n  aptosClient: AptosClient;\n\n  /**\n   * Creates new TokenClient instance\n   *\n   * @param aptosClient AptosClient instance\n   */\n  constructor(aptosClient: AptosClient) {\n    this.aptosClient = aptosClient;\n  }\n\n  /**\n   * Creates a new NFT collection within the specified account\n   *\n   * @param account AptosAccount where collection will be created\n   * @param name Collection name\n   * @param description Collection description\n   * @param uri URL to additional info about collection\n   * @param maxAmount Maximum number of `token_data` allowed within this collection\n   * @returns The hash of the transaction submitted to the API\n   */\n  // :!:>createCollection\n  async createCollection(\n    account: AptosAccount,\n    name: string,\n    description: string,\n    uri: string,\n    maxAmount: AnyNumber = MAX_U64_BIG_INT,\n    extraArgs?: OptionalTransactionArgs,\n  ): Promise<string> {\n    // <:!:createCollection\n\n    const builder = new TransactionBuilderRemoteABI(this.aptosClient, { sender: account.address(), ...extraArgs });\n    const rawTxn = await builder.build(\n      \"0x3::token::create_collection_script\",\n      [],\n      [name, description, uri, maxAmount, [false, false, false]],\n    );\n\n    const bcsTxn = AptosClient.generateBCSTransaction(account, rawTxn);\n    const pendingTransaction = await this.aptosClient.submitSignedBCSTransaction(bcsTxn);\n    return pendingTransaction.hash;\n  }\n\n  /**\n   * Creates a new NFT within the specified account\n   *\n   * @param account AptosAccount where token will be created\n   * @param collectionName Name of collection, that token belongs to\n   * @param name Token name\n   * @param description Token description\n   * @param supply Token supply\n   * @param uri URL to additional info about token\n   * @param max The maxium of tokens can be minted from this token\n   * @param royalty_payee_address the address to receive the royalty, the address can be a shared account address.\n   * @param royalty_points_denominator the denominator for calculating royalty\n   * @param royalty_points_numerator the numerator for calculating royalty\n   * @param property_keys the property keys for storing on-chain properties\n   * @param property_values the property values to be stored on-chain\n   * @param property_types the type of property values\n   * @returns The hash of the transaction submitted to the API\n   */\n  // :!:>createToken\n  async createToken(\n    account: AptosAccount,\n    collectionName: string,\n    name: string,\n    description: string,\n    supply: number,\n    uri: string,\n    max: AnyNumber = MAX_U64_BIG_INT,\n    royalty_payee_address: MaybeHexString = account.address(),\n    royalty_points_denominator: number = 0,\n    royalty_points_numerator: number = 0,\n    property_keys: Array<string> = [],\n    property_values: Array<string> = [],\n    property_types: Array<string> = [],\n    extraArgs?: OptionalTransactionArgs,\n  ): Promise<string> {\n    // <:!:createToken\n    const builder = new TransactionBuilderRemoteABI(this.aptosClient, { sender: account.address(), ...extraArgs });\n\n    const rawTxn = await builder.build(\n      \"0x3::token::create_token_script\",\n      [],\n      [\n        collectionName,\n        name,\n        description,\n        supply,\n        max,\n        uri,\n        royalty_payee_address,\n        royalty_points_denominator,\n        royalty_points_numerator,\n        [false, false, false, false, false],\n        property_keys,\n        getPropertyValueRaw(property_values, property_types),\n        property_types,\n      ],\n    );\n\n    const bcsTxn = AptosClient.generateBCSTransaction(account, rawTxn);\n    const pendingTransaction = await this.aptosClient.submitSignedBCSTransaction(bcsTxn);\n    return pendingTransaction.hash;\n  }\n\n  /**\n   * Creates a new NFT within the specified account\n   *\n   * @param account AptosAccount where token will be created\n   * @param collectionName Name of collection, that token belongs to\n   * @param name Token name\n   * @param description Token description\n   * @param supply Token supply\n   * @param uri URL to additional info about token\n   * @param max The maxium of tokens can be minted from this token\n   * @param royalty_payee_address the address to receive the royalty, the address can be a shared account address.\n   * @param royalty_points_denominator the denominator for calculating royalty\n   * @param royalty_points_numerator the numerator for calculating royalty\n   * @param property_keys the property keys for storing on-chain properties\n   * @param property_values the property values to be stored on-chain\n   * @param property_types the type of property values\n   * @param mutability_config configs which field is mutable\n   * @returns The hash of the transaction submitted to the API\n   */\n  // :!:>createToken\n  async createTokenWithMutabilityConfig(\n    account: AptosAccount,\n    collectionName: string,\n    name: string,\n    description: string,\n    supply: AnyNumber,\n    uri: string,\n    max: AnyNumber = MAX_U64_BIG_INT,\n    royalty_payee_address: MaybeHexString = account.address(),\n    royalty_points_denominator: AnyNumber = 0,\n    royalty_points_numerator: AnyNumber = 0,\n    property_keys: Array<string> = [],\n    property_values: Array<Bytes> = [],\n    property_types: Array<string> = [],\n    mutability_config: Array<boolean> = [false, false, false, false, false],\n    extraArgs?: OptionalTransactionArgs,\n  ): Promise<string> {\n    // <:!:createToken\n    const builder = new TransactionBuilderRemoteABI(this.aptosClient, { sender: account.address(), ...extraArgs });\n    const rawTxn = await builder.build(\n      \"0x3::token::create_token_script\",\n      [],\n      [\n        collectionName,\n        name,\n        description,\n        supply,\n        max,\n        uri,\n        royalty_payee_address,\n        royalty_points_denominator,\n        royalty_points_numerator,\n        mutability_config,\n        property_keys,\n        property_values,\n        property_types,\n      ],\n    );\n\n    const bcsTxn = AptosClient.generateBCSTransaction(account, rawTxn);\n    const pendingTransaction = await this.aptosClient.submitSignedBCSTransaction(bcsTxn);\n    return pendingTransaction.hash;\n  }\n\n  /**\n   * Transfers specified amount of tokens from account to receiver\n   *\n   * @param account AptosAccount where token from which tokens will be transfered\n   * @param receiver  Hex-encoded 32 byte Aptos account address to which tokens will be transfered\n   * @param creator Hex-encoded 32 byte Aptos account address to which created tokens\n   * @param collectionName Name of collection where token is stored\n   * @param name Token name\n   * @param amount Amount of tokens which will be transfered\n   * @param property_version the version of token PropertyMap with a default value 0.\n   * @returns The hash of the transaction submitted to the API\n   */\n  async offerToken(\n    account: AptosAccount,\n    receiver: MaybeHexString,\n    creator: MaybeHexString,\n    collectionName: string,\n    name: string,\n    amount: number,\n    property_version: number = 0,\n    extraArgs?: OptionalTransactionArgs,\n  ): Promise<string> {\n    const builder = new TransactionBuilderRemoteABI(this.aptosClient, { sender: account.address(), ...extraArgs });\n    const rawTxn = await builder.build(\n      \"0x3::token_transfers::offer_script\",\n      [],\n      [receiver, creator, collectionName, name, property_version, amount],\n    );\n\n    const bcsTxn = AptosClient.generateBCSTransaction(account, rawTxn);\n    const pendingTransaction = await this.aptosClient.submitSignedBCSTransaction(bcsTxn);\n    return pendingTransaction.hash;\n  }\n\n  /**\n   * Claims a token on specified account\n   *\n   * @param account AptosAccount which will claim token\n   * @param sender Hex-encoded 32 byte Aptos account address which holds a token\n   * @param creator Hex-encoded 32 byte Aptos account address which created a token\n   * @param collectionName Name of collection where token is stored\n   * @param name Token name\n   * @param property_version the version of token PropertyMap with a default value 0.\n   * @returns The hash of the transaction submitted to the API\n   */\n  async claimToken(\n    account: AptosAccount,\n    sender: MaybeHexString,\n    creator: MaybeHexString,\n    collectionName: string,\n    name: string,\n    property_version: number = 0,\n    extraArgs?: OptionalTransactionArgs,\n  ): Promise<string> {\n    const builder = new TransactionBuilderRemoteABI(this.aptosClient, { sender: account.address(), ...extraArgs });\n    const rawTxn = await builder.build(\n      \"0x3::token_transfers::claim_script\",\n      [],\n      [sender, creator, collectionName, name, property_version],\n    );\n\n    const bcsTxn = AptosClient.generateBCSTransaction(account, rawTxn);\n    const pendingTransaction = await this.aptosClient.submitSignedBCSTransaction(bcsTxn);\n    return pendingTransaction.hash;\n  }\n\n  /**\n   * Removes a token from pending claims list\n   *\n   * @param account AptosAccount which will remove token from pending list\n   * @param receiver Hex-encoded 32 byte Aptos account address which had to claim token\n   * @param creator Hex-encoded 32 byte Aptos account address which created a token\n   * @param collectionName Name of collection where token is strored\n   * @param name Token name\n   * @param property_version the version of token PropertyMap with a default value 0.\n   * @returns The hash of the transaction submitted to the API\n   */\n  async cancelTokenOffer(\n    account: AptosAccount,\n    receiver: MaybeHexString,\n    creator: MaybeHexString,\n    collectionName: string,\n    name: string,\n    property_version: number = 0,\n    extraArgs?: OptionalTransactionArgs,\n  ): Promise<string> {\n    const builder = new TransactionBuilderRemoteABI(this.aptosClient, { sender: account.address(), ...extraArgs });\n    const rawTxn = await builder.build(\n      \"0x3::token_transfers::cancel_offer_script\",\n      [],\n      [receiver, creator, collectionName, name, property_version],\n    );\n\n    const bcsTxn = AptosClient.generateBCSTransaction(account, rawTxn);\n    const pendingTransaction = await this.aptosClient.submitSignedBCSTransaction(bcsTxn);\n    return pendingTransaction.hash;\n  }\n\n  /**\n   * Directly transfer the specified amount of tokens from account to receiver\n   * using a single multi signature transaction.\n   *\n   * @param sender AptosAccount where token from which tokens will be transferred\n   * @param receiver Hex-encoded 32 byte Aptos account address to which tokens will be transferred\n   * @param creator Hex-encoded 32 byte Aptos account address to which created tokens\n   * @param collectionName Name of collection where token is stored\n   * @param name Token name\n   * @param amount Amount of tokens which will be transferred\n   * @param property_version the version of token PropertyMap with a default value 0.\n   * @returns The hash of the transaction submitted to the API\n   */\n  async directTransferToken(\n    sender: AptosAccount,\n    receiver: AptosAccount,\n    creator: MaybeHexString,\n    collectionName: string,\n    name: string,\n    amount: AnyNumber,\n    propertyVersion: AnyNumber = 0,\n    extraArgs?: OptionalTransactionArgs,\n  ): Promise<string> {\n    const builder = new TransactionBuilderRemoteABI(this.aptosClient, { sender: sender.address(), ...extraArgs });\n    const rawTxn = await builder.build(\n      \"0x3::token::direct_transfer_script\",\n      [],\n      [creator, collectionName, name, propertyVersion, amount],\n    );\n\n    const multiAgentTxn = new TxnBuilderTypes.MultiAgentRawTransaction(rawTxn, [\n      TxnBuilderTypes.AccountAddress.fromHex(receiver.address()),\n    ]);\n\n    const senderSignature = new TxnBuilderTypes.Ed25519Signature(\n      sender.signBuffer(TransactionBuilder.getSigningMessage(multiAgentTxn)).toUint8Array(),\n    );\n\n    const senderAuthenticator = new TxnBuilderTypes.AccountAuthenticatorEd25519(\n      new TxnBuilderTypes.Ed25519PublicKey(sender.signingKey.publicKey),\n      senderSignature,\n    );\n\n    const receiverSignature = new TxnBuilderTypes.Ed25519Signature(\n      receiver.signBuffer(TransactionBuilder.getSigningMessage(multiAgentTxn)).toUint8Array(),\n    );\n\n    const receiverAuthenticator = new TxnBuilderTypes.AccountAuthenticatorEd25519(\n      new TxnBuilderTypes.Ed25519PublicKey(receiver.signingKey.publicKey),\n      receiverSignature,\n    );\n\n    const multiAgentAuthenticator = new TxnBuilderTypes.TransactionAuthenticatorMultiAgent(\n      senderAuthenticator,\n      [TxnBuilderTypes.AccountAddress.fromHex(receiver.address())], // Secondary signer addresses\n      [receiverAuthenticator], // Secondary signer authenticators\n    );\n\n    const bcsTxn = bcsToBytes(new TxnBuilderTypes.SignedTransaction(rawTxn, multiAgentAuthenticator));\n\n    const transactionRes = await this.aptosClient.submitSignedBCSTransaction(bcsTxn);\n\n    return transactionRes.hash;\n  }\n\n  /**\n   * Directly transfer the specified amount of tokens from account to receiver\n   * using a single multi signature transaction.\n   *\n   * @param sender AptosAccount where token from which tokens will be transferred\n   * @param receiver Hex-encoded 32 byte Aptos account address to which tokens will be transferred\n   * @param creator Hex-encoded 32 byte Aptos account address to which created tokens\n   * @param collectionName Name of collection where token is stored\n   * @param name Token name\n   * @param amount Amount of tokens which will be transferred\n   * @param fee_payer AptosAccount which will pay fee for transaction\n   * @param property_version the version of token PropertyMap with a default value 0.\n   * @returns The hash of the transaction submitted to the API\n   */\n  async directTransferTokenWithFeePayer(\n    sender: AptosAccount,\n    receiver: AptosAccount,\n    creator: MaybeHexString,\n    collectionName: string,\n    name: string,\n    amount: AnyNumber,\n    fee_payer: AptosAccount,\n    propertyVersion: AnyNumber = 0,\n    extraArgs?: OptionalTransactionArgs,\n  ): Promise<string> {\n    const builder = new TransactionBuilderRemoteABI(this.aptosClient, { sender: sender.address(), ...extraArgs });\n    const rawTxn = await builder.build(\n      \"0x3::token::direct_transfer_script\",\n      [],\n      [creator, collectionName, name, propertyVersion, amount],\n    );\n\n    const feePayerTxn = new TxnBuilderTypes.FeePayerRawTransaction(\n      rawTxn,\n      [TxnBuilderTypes.AccountAddress.fromHex(receiver.address())],\n      TxnBuilderTypes.AccountAddress.fromHex(fee_payer.address()),\n    );\n\n    const senderSignature = new TxnBuilderTypes.Ed25519Signature(\n      sender.signBuffer(TransactionBuilder.getSigningMessage(feePayerTxn)).toUint8Array(),\n    );\n\n    const senderAuthenticator = new TxnBuilderTypes.AccountAuthenticatorEd25519(\n      new TxnBuilderTypes.Ed25519PublicKey(sender.signingKey.publicKey),\n      senderSignature,\n    );\n\n    const receiverSignature = new TxnBuilderTypes.Ed25519Signature(\n      receiver.signBuffer(TransactionBuilder.getSigningMessage(feePayerTxn)).toUint8Array(),\n    );\n\n    const receiverAuthenticator = new TxnBuilderTypes.AccountAuthenticatorEd25519(\n      new TxnBuilderTypes.Ed25519PublicKey(receiver.signingKey.publicKey),\n      receiverSignature,\n    );\n\n    const feePayerSignature = new TxnBuilderTypes.Ed25519Signature(\n      fee_payer.signBuffer(TransactionBuilder.getSigningMessage(feePayerTxn)).toUint8Array(),\n    );\n\n    const feePayerAuthenticator = new TxnBuilderTypes.AccountAuthenticatorEd25519(\n      new TxnBuilderTypes.Ed25519PublicKey(fee_payer.signingKey.publicKey),\n      feePayerSignature,\n    );\n\n    const txAuthenticatorFeePayer = new TxnBuilderTypes.TransactionAuthenticatorFeePayer(\n      senderAuthenticator,\n      [TxnBuilderTypes.AccountAddress.fromHex(receiver.address())],\n      [receiverAuthenticator],\n      { address: TxnBuilderTypes.AccountAddress.fromHex(fee_payer.address()), authenticator: feePayerAuthenticator },\n    );\n\n    const bcsTxn = bcsToBytes(new TxnBuilderTypes.SignedTransaction(rawTxn, txAuthenticatorFeePayer));\n\n    const transactionRes = await this.aptosClient.submitSignedBCSTransaction(bcsTxn);\n\n    return transactionRes.hash;\n  }\n\n  /**\n   * User opt-in or out direct transfer through a boolean flag\n   *\n   * @param sender AptosAccount where the token will be transferred\n   * @param optIn boolean value indicates user want to opt-in or out of direct transfer\n   * @returns The hash of the transaction submitted to the API\n   */\n  async optInTokenTransfer(sender: AptosAccount, optIn: boolean, extraArgs?: OptionalTransactionArgs): Promise<string> {\n    const builder = new TransactionBuilderRemoteABI(this.aptosClient, { sender: sender.address(), ...extraArgs });\n    const rawTxn = await builder.build(\"0x3::token::opt_in_direct_transfer\", [], [optIn]);\n    const bcsTxn = AptosClient.generateBCSTransaction(sender, rawTxn);\n    const pendingTransaction = await this.aptosClient.submitSignedBCSTransaction(bcsTxn);\n    return pendingTransaction.hash;\n  }\n\n  /**\n   * Directly transfer token to a receiver. The receiver should have opted in to direct transfer\n   *\n   * @param sender AptosAccount where the token will be transferred\n   * @param creator  address of the token creator\n   * @param collectionName Name of collection where token is stored\n   * @param name Token name\n   * @param property_version the version of token PropertyMap\n   * @param amount Amount of tokens which will be transfered\n   * @returns The hash of the transaction submitted to the API\n   */\n  async transferWithOptIn(\n    sender: AptosAccount,\n    creator: MaybeHexString,\n    collectionName: string,\n    tokenName: string,\n    propertyVersion: AnyNumber,\n    receiver: MaybeHexString,\n    amount: AnyNumber,\n    extraArgs?: OptionalTransactionArgs,\n  ): Promise<string> {\n    const builder = new TransactionBuilderRemoteABI(this.aptosClient, { sender: sender.address(), ...extraArgs });\n    const rawTxn = await builder.build(\n      \"0x3::token::transfer_with_opt_in\",\n      [],\n      [creator, collectionName, tokenName, propertyVersion, receiver, amount],\n    );\n    const bcsTxn = AptosClient.generateBCSTransaction(sender, rawTxn);\n    const pendingTransaction = await this.aptosClient.submitSignedBCSTransaction(bcsTxn);\n    return pendingTransaction.hash;\n  }\n\n  /**\n   * BurnToken by Creator\n   *\n   * @param creator creator of the token\n   * @param ownerAddress address of the token owner\n   * @param collectionName Name of collection where token is stored\n   * @param name Token name\n   * @param amount Amount of tokens which will be transfered\n   * @param property_version the version of token PropertyMap\n   * @returns The hash of the transaction submitted to the API\n   */\n  async burnByCreator(\n    creator: AptosAccount,\n    ownerAddress: MaybeHexString,\n    collection: String,\n    name: String,\n    PropertyVersion: AnyNumber,\n    amount: AnyNumber,\n    extraArgs?: OptionalTransactionArgs,\n  ): Promise<string> {\n    const builder = new TransactionBuilderRemoteABI(this.aptosClient, { sender: creator.address(), ...extraArgs });\n    const rawTxn = await builder.build(\n      \"0x3::token::burn_by_creator\",\n      [],\n      [ownerAddress, collection, name, PropertyVersion, amount],\n    );\n\n    const bcsTxn = AptosClient.generateBCSTransaction(creator, rawTxn);\n    const pendingTransaction = await this.aptosClient.submitSignedBCSTransaction(bcsTxn);\n    return pendingTransaction.hash;\n  }\n\n  /**\n   * BurnToken by Owner\n   *\n   * @param owner creator of the token\n   * @param creatorAddress address of the token creator\n   * @param collectionName Name of collection where token is stored\n   * @param name Token name\n   * @param amount Amount of tokens which will be transfered\n   * @param property_version the version of token PropertyMap\n   * @returns The hash of the transaction submitted to the API\n   */\n  async burnByOwner(\n    owner: AptosAccount,\n    creatorAddress: MaybeHexString,\n    collection: String,\n    name: String,\n    PropertyVersion: AnyNumber,\n    amount: AnyNumber,\n    extraArgs?: OptionalTransactionArgs,\n  ): Promise<string> {\n    const builder = new TransactionBuilderRemoteABI(this.aptosClient, { sender: owner.address(), ...extraArgs });\n    const rawTxn = await builder.build(\n      \"0x3::token::burn\",\n      [],\n      [creatorAddress, collection, name, PropertyVersion, amount],\n    );\n\n    const bcsTxn = AptosClient.generateBCSTransaction(owner, rawTxn);\n    const pendingTransaction = await this.aptosClient.submitSignedBCSTransaction(bcsTxn);\n    return pendingTransaction.hash;\n  }\n\n  /**\n   * creator mutates the properties of the tokens\n   *\n   * @param account AptosAccount who modifies the token properties\n   * @param tokenOwner the address of account owning the token\n   * @param creator the creator of the token\n   * @param collection_name the name of the token collection\n   * @param tokenName the name of created token\n   * @param propertyVersion the property_version of the token to be modified\n   * @param amount the number of tokens to be modified\n   *\n   * @returns The hash of the transaction submitted to the API\n   */\n  async mutateTokenProperties(\n    account: AptosAccount,\n    tokenOwner: HexString,\n    creator: HexString,\n    collection_name: string,\n    tokenName: string,\n    propertyVersion: AnyNumber,\n    amount: AnyNumber,\n    keys: Array<string>,\n    values: Array<Bytes>,\n    types: Array<string>,\n    extraArgs?: OptionalTransactionArgs,\n  ): Promise<string> {\n    const builder = new TransactionBuilderRemoteABI(this.aptosClient, { sender: account.address(), ...extraArgs });\n    const rawTxn = await builder.build(\n      \"0x3::token::mutate_token_properties\",\n      [],\n      [tokenOwner, creator, collection_name, tokenName, propertyVersion, amount, keys, values, types],\n    );\n\n    const bcsTxn = AptosClient.generateBCSTransaction(account, rawTxn);\n    const pendingTransaction = await this.aptosClient.submitSignedBCSTransaction(bcsTxn);\n    return pendingTransaction.hash;\n  }\n\n  /**\n   * Queries collection data\n   * @param creator Hex-encoded 32 byte Aptos account address which created a collection\n   * @param collectionName Collection name\n   * @returns Collection data in below format\n   * ```\n   *  Collection {\n   *    // Describes the collection\n   *    description: string,\n   *    // Unique name within this creators account for this collection\n   *    name: string,\n   *    // URL for additional information/media\n   *    uri: string,\n   *    // Total number of distinct Tokens tracked by the collection\n   *    count: number,\n   *    // Optional maximum number of tokens allowed within this collections\n   *    maximum: number\n   *  }\n   * ```\n   */\n  async getCollectionData(creator: MaybeHexString, collectionName: string): Promise<any> {\n    const resources = await this.aptosClient.getAccountResources(creator);\n    const accountResource: { type: Gen.MoveStructTag; data: any } = resources.find(\n      (r) => r.type === \"0x3::token::Collections\",\n    )!;\n    const { handle }: { handle: string } = accountResource.data.collection_data;\n    const getCollectionTableItemRequest: Gen.TableItemRequest = {\n      key_type: \"0x1::string::String\",\n      value_type: \"0x3::token::CollectionData\",\n      key: collectionName,\n    };\n\n    const collectionTable = await this.aptosClient.getTableItem(handle, getCollectionTableItemRequest);\n    return collectionTable;\n  }\n\n  /**\n   * Queries token data from collection\n   *\n   * @param creator Hex-encoded 32 byte Aptos account address which created a token\n   * @param collectionName Name of collection, which holds a token\n   * @param tokenName Token name\n   * @returns Token data in below format\n   * ```\n   * TokenData {\n   *     // Unique name within this creators account for this Token's collection\n   *     collection: string;\n   *     // Describes this Token\n   *     description: string;\n   *     // The name of this Token\n   *     name: string;\n   *     // Optional maximum number of this type of Token.\n   *     maximum: number;\n   *     // Total number of this type of Token\n   *     supply: number;\n   *     /// URL for additional information / media\n   *     uri: string;\n   *   }\n   * ```\n   */\n  // :!:>getTokenData\n  async getTokenData(\n    creator: MaybeHexString,\n    collectionName: string,\n    tokenName: string,\n  ): Promise<TokenTypes.TokenData> {\n    const creatorHex = creator instanceof HexString ? creator.hex() : creator;\n    const collection: { type: Gen.MoveStructTag; data: any } = await this.aptosClient.getAccountResource(\n      creatorHex,\n      \"0x3::token::Collections\",\n    );\n    const { handle } = collection.data.token_data;\n    const tokenDataId = {\n      creator: creatorHex,\n      collection: collectionName,\n      name: tokenName,\n    };\n\n    const getTokenTableItemRequest: Gen.TableItemRequest = {\n      key_type: \"0x3::token::TokenDataId\",\n      value_type: \"0x3::token::TokenData\",\n      key: tokenDataId,\n    };\n\n    // We know the response will be a struct containing TokenData, hence the\n    // implicit cast.\n    const rawTokenData = await this.aptosClient.getTableItem(handle, getTokenTableItemRequest);\n    return new TokenData(\n      rawTokenData.collection,\n      rawTokenData.description,\n      rawTokenData.name,\n      rawTokenData.maximum,\n      rawTokenData.supply,\n      rawTokenData.uri,\n      rawTokenData.default_properties,\n      rawTokenData.mutability_config,\n    );\n  } // <:!:getTokenData\n\n  /**\n   * Queries token balance for the token creator\n   */\n  async getToken(\n    creator: MaybeHexString,\n    collectionName: string,\n    tokenName: string,\n    property_version: string = \"0\",\n  ): Promise<TokenTypes.Token> {\n    const tokenDataId: TokenTypes.TokenDataId = {\n      creator: creator instanceof HexString ? creator.hex() : creator,\n      collection: collectionName,\n      name: tokenName,\n    };\n    return this.getTokenForAccount(creator, {\n      token_data_id: tokenDataId,\n      property_version,\n    });\n  }\n\n  /**\n   * Queries token balance for a token account\n   * @param account Hex-encoded 32 byte Aptos account address which created a token\n   * @param tokenId token id\n   *\n   * TODO: Update this:\n   * @example\n   * ```\n   * {\n   *   creator: '0x1',\n   *   collection: 'Some collection',\n   *   name: 'Awesome token'\n   * }\n   * ```\n   * @returns Token object in below format\n   * ```\n   * Token {\n   *   id: TokenId;\n   *   value: number;\n   * }\n   * ```\n   */\n  async getTokenForAccount(account: MaybeHexString, tokenId: TokenTypes.TokenId): Promise<TokenTypes.Token> {\n    const tokenStore: { type: Gen.MoveStructTag; data: any } = await this.aptosClient.getAccountResource(\n      account instanceof HexString ? account.hex() : account,\n      \"0x3::token::TokenStore\",\n    );\n    const { handle } = tokenStore.data.tokens;\n\n    const getTokenTableItemRequest: Gen.TableItemRequest = {\n      key_type: \"0x3::token::TokenId\",\n      value_type: \"0x3::token::Token\",\n      key: tokenId,\n    };\n\n    try {\n      const rawToken = await this.aptosClient.getTableItem(handle, getTokenTableItemRequest);\n      return new Token(rawToken.id, rawToken.amount, rawToken.token_properties);\n    } catch (error: any) {\n      if (error?.status === 404) {\n        return {\n          id: tokenId,\n          amount: \"0\",\n          token_properties: new PropertyMap(),\n        };\n      }\n      return error;\n    }\n  }\n}\n","import { AptosAccount } from \"../account\";\nimport { RawTransaction } from \"../aptos_types\";\nimport * as Gen from \"../generated/index\";\nimport { OptionalTransactionArgs, Provider } from \"../providers\";\nimport { TransactionBuilderRemoteABI } from \"../transaction_builder\";\nimport { MaybeHexString, HexString } from \"../utils\";\nimport { AnyNumber } from \"../bcs\";\n\nexport class FungibleAssetClient {\n  provider: Provider;\n\n  readonly assetType: string = \"0x1::fungible_asset::Metadata\";\n\n  /**\n   * Creates new FungibleAssetClient instance\n   *\n   * @param provider Provider instance\n   */\n  constructor(provider: Provider) {\n    this.provider = provider;\n  }\n\n  /**\n   *  Transfer `amount` of fungible asset from sender's primary store to recipient's primary store.\n   *\n   * Use this method to transfer any fungible asset including fungible token.\n   *\n   * @param sender The sender account\n   * @param fungibleAssetMetadataAddress The fungible asset address.\n   * For example if you’re transferring USDT this would be the USDT address\n   * @param recipient Recipient address\n   * @param amount Number of assets to transfer\n   * @returns The hash of the transaction submitted to the API\n   */\n  async transfer(\n    sender: AptosAccount,\n    fungibleAssetMetadataAddress: MaybeHexString,\n    recipient: MaybeHexString,\n    amount: number | bigint,\n    extraArgs?: OptionalTransactionArgs,\n  ): Promise<string> {\n    const rawTransaction = await this.generateTransfer(\n      sender,\n      fungibleAssetMetadataAddress,\n      recipient,\n      amount,\n      extraArgs,\n    );\n    const txnHash = await this.provider.signAndSubmitTransaction(sender, rawTransaction);\n    return txnHash;\n  }\n\n  /**\n   * Get the balance of a fungible asset from the account's primary fungible store.\n   *\n   * @param account Account that you want to get the balance of.\n   * @param fungibleAssetMetadataAddress The fungible asset address you want to check the balance of\n   * @returns Promise that resolves to the balance\n   */\n  async getPrimaryBalance(account: MaybeHexString, fungibleAssetMetadataAddress: MaybeHexString): Promise<bigint> {\n    const payload: Gen.ViewRequest = {\n      function: \"0x1::primary_fungible_store::balance\",\n      type_arguments: [this.assetType],\n      arguments: [HexString.ensure(account).hex(), HexString.ensure(fungibleAssetMetadataAddress).hex()],\n    };\n    const response = await this.provider.view(payload);\n    return BigInt((response as any)[0]);\n  }\n\n  /**\n   *\n   * Generate a transfer transaction that can be used to sign and submit to transfer an asset amount\n   * from the sender primary fungible store to the recipient primary fungible store.\n   *\n   * This method can be used if you want/need to get the raw transaction so you can\n   * first simulate the transaction and then sign and submit it.\n   *\n   * @param sender The sender account\n   * @param fungibleAssetMetadataAddress The fungible asset address.\n   * For example if you’re transferring USDT this would be the USDT address\n   * @param recipient Recipient address\n   * @param amount Number of assets to transfer\n   * @returns Raw Transaction\n   */\n  async generateTransfer(\n    sender: AptosAccount,\n    fungibleAssetMetadataAddress: MaybeHexString,\n    recipient: MaybeHexString,\n    amount: AnyNumber,\n    extraArgs?: OptionalTransactionArgs,\n  ): Promise<RawTransaction> {\n    const builder = new TransactionBuilderRemoteABI(this.provider, {\n      sender: sender.address(),\n      ...extraArgs,\n    });\n    const rawTxn = await builder.build(\n      \"0x1::primary_fungible_store::transfer\",\n      [this.assetType],\n      [HexString.ensure(fungibleAssetMetadataAddress).hex(), HexString.ensure(recipient).hex(), amount],\n    );\n    return rawTxn;\n  }\n}\n","// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\n/* eslint-disable max-len */\n\nimport { AptosAccount } from \"../account/aptos_account\";\nimport { AnyNumber } from \"../bcs\";\nimport { MAX_U64_BIG_INT } from \"../bcs/consts\";\nimport { Provider } from \"../providers\";\nimport { AptosClient, OptionalTransactionArgs } from \"../providers/aptos_client\";\nimport { TransactionBuilderRemoteABI } from \"../transaction_builder\";\nimport { HexString, MaybeHexString } from \"../utils\";\nimport { getPropertyValueRaw, getSinglePropertyValueRaw } from \"../utils/property_map_serde\";\nimport { FungibleAssetClient } from \"./fungible_asset_client\";\n\nexport interface CreateCollectionOptions {\n  royaltyNumerator?: number;\n  royaltyDenominator?: number;\n  mutableDescription?: boolean;\n  mutableRoyalty?: boolean;\n  mutableURI?: boolean;\n  mutableTokenDescription?: boolean;\n  mutableTokenName?: boolean;\n  mutableTokenProperties?: boolean;\n  mutableTokenURI?: boolean;\n  tokensBurnableByCreator?: boolean;\n  tokensFreezableByCreator?: boolean;\n}\n\nconst PropertyTypeMap = {\n  BOOLEAN: \"bool\",\n  U8: \"u8\",\n  U16: \"u16\",\n  U32: \"u32\",\n  U64: \"u64\",\n  U128: \"u128\",\n  U256: \"u256\",\n  ADDRESS: \"address\",\n  VECTOR: \"vector<u8>\",\n  STRING: \"string\",\n};\n\nexport type PropertyType = keyof typeof PropertyTypeMap;\n\nexport type FungibleTokenParameters = {\n  owner: AptosAccount;\n  tokenAddress: MaybeHexString;\n  recipient: MaybeHexString;\n  amount: number | bigint;\n  extraArgs?: OptionalTransactionArgs;\n};\n\nexport type NonFungibleTokenParameters = {\n  owner: AptosAccount;\n  tokenAddress: MaybeHexString;\n  recipient: MaybeHexString;\n  tokenType?: string;\n  extraArgs?: OptionalTransactionArgs;\n};\n\n/**\n * Class for managing aptos_token\n */\nexport class AptosToken {\n  readonly provider: Provider;\n\n  private readonly tokenType: string = \"0x4::token::Token\";\n\n  /**\n   * Creates new AptosToken instance\n   *\n   * @param provider Provider instance\n   */\n  constructor(provider: Provider) {\n    this.provider = provider;\n  }\n\n  private async submitTransaction(\n    account: AptosAccount,\n    funcName: string,\n    typeArgs: string[],\n    args: any[],\n    extraArgs?: OptionalTransactionArgs,\n  ) {\n    const builder = new TransactionBuilderRemoteABI(this.provider, {\n      sender: account.address(),\n      ...extraArgs,\n    });\n    const rawTxn = await builder.build(`0x4::aptos_token::${funcName}`, typeArgs, args);\n    const bcsTxn = AptosClient.generateBCSTransaction(account, rawTxn);\n    const pendingTransaction = await this.provider.submitSignedBCSTransaction(bcsTxn);\n    return pendingTransaction.hash;\n  }\n\n  /**\n   * Creates a new collection within the specified account\n   *\n   * @param creator AptosAccount where collection will be created\n   * @param description Collection description\n   * @param name Collection name\n   * @param uri URL to additional info about collection\n   * @param options CreateCollectionOptions type. By default all values set to `true` or `0`\n   * @returns The hash of the transaction submitted to the API\n   */\n  async createCollection(\n    creator: AptosAccount,\n    description: string,\n    name: string,\n    uri: string,\n    maxSupply: AnyNumber = MAX_U64_BIG_INT,\n    options?: CreateCollectionOptions,\n    extraArgs?: OptionalTransactionArgs,\n  ): Promise<string> {\n    return this.submitTransaction(\n      creator,\n      \"create_collection\",\n      [],\n      [\n        description,\n        maxSupply,\n        name,\n        uri,\n        options?.mutableDescription ?? true,\n        options?.mutableRoyalty ?? true,\n        options?.mutableURI ?? true,\n        options?.mutableTokenDescription ?? true,\n        options?.mutableTokenName ?? true,\n        options?.mutableTokenProperties ?? true,\n        options?.mutableTokenURI ?? true,\n        options?.tokensBurnableByCreator ?? true,\n        options?.tokensFreezableByCreator ?? true,\n        options?.royaltyNumerator ?? 0,\n        options?.royaltyDenominator ?? 1,\n      ],\n      extraArgs,\n    );\n  }\n\n  /**\n   * Mint a new token within the specified account\n   *\n   * @param account AptosAccount where token will be created\n   * @param collection Name of collection, that token belongs to\n   * @param description Token description\n   * @param name Token name\n   * @param uri URL to additional info about token\n   * @param propertyKeys the property keys for storing on-chain properties\n   * @param propertyTypes the type of property values\n   * @param propertyValues the property values to be stored on-chain\n   * @returns The hash of the transaction submitted to the API\n   */\n  async mint(\n    account: AptosAccount,\n    collection: string,\n    description: string,\n    name: string,\n    uri: string,\n    propertyKeys: Array<string> = [],\n    propertyTypes: Array<string> = [],\n    propertyValues: Array<string> = [],\n    extraArgs?: OptionalTransactionArgs,\n  ): Promise<string> {\n    return this.submitTransaction(\n      account,\n      \"mint\",\n      [],\n      [\n        collection,\n        description,\n        name,\n        uri,\n        propertyKeys,\n        propertyTypes,\n        getPropertyValueRaw(propertyValues, propertyTypes),\n      ],\n      extraArgs,\n    );\n  }\n\n  /**\n   * Mint a soul bound token into a recipient's account\n   *\n   * @param account AptosAccount that mints the token\n   * @param collection Name of collection, that token belongs to\n   * @param description Token description\n   * @param name Token name\n   * @param uri URL to additional info about token\n   * @param recipient AptosAccount where token will be created\n   * @param propertyKeys the property keys for storing on-chain properties\n   * @param propertyTypes the type of property values\n   * @param propertyValues the property values to be stored on-chain\n   * @returns The hash of the transaction submitted to the API\n   */\n  async mintSoulBound(\n    account: AptosAccount,\n    collection: string,\n    description: string,\n    name: string,\n    uri: string,\n    recipient: AptosAccount,\n    propertyKeys: Array<string> = [],\n    propertyTypes: Array<string> = [],\n    propertyValues: Array<string> = [],\n    extraArgs?: OptionalTransactionArgs,\n  ): Promise<string> {\n    return this.submitTransaction(\n      account,\n      \"mint_soul_bound\",\n      [],\n      [\n        collection,\n        description,\n        name,\n        uri,\n        propertyKeys,\n        propertyTypes,\n        getPropertyValueRaw(propertyValues, propertyTypes),\n        recipient.address().hex(),\n      ],\n      extraArgs,\n    );\n  }\n\n  /**\n   * Burn a token by its creator\n   * @param creator Creator account\n   * @param token Token address\n   * @returns The hash of the transaction submitted to the API\n   */\n  async burnToken(\n    creator: AptosAccount,\n    token: MaybeHexString,\n    tokenType?: string,\n    extraArgs?: OptionalTransactionArgs,\n  ): Promise<string> {\n    return this.submitTransaction(\n      creator,\n      \"burn\",\n      [tokenType || this.tokenType],\n      [HexString.ensure(token).hex()],\n      extraArgs,\n    );\n  }\n\n  /**\n   * Freeze token transfer ability\n   * @param creator Creator account\n   * @param token Token address\n   * @returns The hash of the transaction submitted to the API\n   */\n  async freezeTokenTransafer(\n    creator: AptosAccount,\n    token: MaybeHexString,\n    tokenType?: string,\n    extraArgs?: OptionalTransactionArgs,\n  ): Promise<string> {\n    return this.submitTransaction(\n      creator,\n      \"freeze_transfer\",\n      [tokenType || this.tokenType],\n      [HexString.ensure(token).hex()],\n      extraArgs,\n    );\n  }\n\n  /**\n   * Unfreeze token transfer ability\n   * @param creator Creator account\n   * @param token Token address\n   * @returns The hash of the transaction submitted to the API\n   */\n  async unfreezeTokenTransafer(\n    creator: AptosAccount,\n    token: MaybeHexString,\n    tokenType?: string,\n    extraArgs?: OptionalTransactionArgs,\n  ): Promise<string> {\n    return this.submitTransaction(\n      creator,\n      \"unfreeze_transfer\",\n      [tokenType || this.tokenType],\n      [HexString.ensure(token).hex()],\n      extraArgs,\n    );\n  }\n\n  /**\n   * Set token description\n   * @param creator Creator account\n   * @param token Token address\n   * @param description Token description\n   * @returns The hash of the transaction submitted to the API\n   */\n  async setTokenDescription(\n    creator: AptosAccount,\n    token: MaybeHexString,\n    description: string,\n    tokenType?: string,\n    extraArgs?: OptionalTransactionArgs,\n  ): Promise<string> {\n    return this.submitTransaction(\n      creator,\n      \"set_description\",\n      [tokenType || this.tokenType],\n      [HexString.ensure(token).hex(), description],\n      extraArgs,\n    );\n  }\n\n  /**\n   * Set token name\n   * @param creator Creator account\n   * @param token Token address\n   * @param name Token name\n   * @returns The hash of the transaction submitted to the API\n   */\n  async setTokenName(\n    creator: AptosAccount,\n    token: MaybeHexString,\n    name: string,\n    tokenType?: string,\n    extraArgs?: OptionalTransactionArgs,\n  ): Promise<string> {\n    return this.submitTransaction(\n      creator,\n      \"set_name\",\n      [tokenType || this.tokenType],\n      [HexString.ensure(token).hex(), name],\n      extraArgs,\n    );\n  }\n\n  /**\n   * Set token URI\n   * @param creator Creator account\n   * @param token Token address\n   * @param uri Token uri\n   * @returns The hash of the transaction submitted to the API\n   */\n  async setTokenURI(\n    creator: AptosAccount,\n    token: MaybeHexString,\n    uri: string,\n    tokenType?: string,\n    extraArgs?: OptionalTransactionArgs,\n  ): Promise<string> {\n    return this.submitTransaction(\n      creator,\n      \"set_uri\",\n      [tokenType || this.tokenType],\n      [HexString.ensure(token).hex(), uri],\n      extraArgs,\n    );\n  }\n\n  /**\n   * Add token property\n   * @param creator Creator account\n   * @param token Token address\n   * @param key the property key for storing on-chain property\n   * @param type the type of property value\n   * @param value the property value to be stored on-chain\n   * @returns The hash of the transaction submitted to the API\n   */\n  async addTokenProperty(\n    creator: AptosAccount,\n    token: MaybeHexString,\n    propertyKey: string,\n    propertyType: PropertyType,\n    propertyValue: string,\n    tokenType?: string,\n    extraArgs?: OptionalTransactionArgs,\n  ): Promise<string> {\n    return this.submitTransaction(\n      creator,\n      \"add_property\",\n      [tokenType || this.tokenType],\n      [\n        HexString.ensure(token).hex(),\n        propertyKey,\n        PropertyTypeMap[propertyType],\n        getSinglePropertyValueRaw(propertyValue, PropertyTypeMap[propertyType]),\n      ],\n      extraArgs,\n    );\n  }\n\n  /**\n   * Remove token property\n   * @param creator Creator account\n   * @param token Token address\n   * @param key the property key stored on-chain\n   * @returns The hash of the transaction submitted to the API\n   */\n  async removeTokenProperty(\n    creator: AptosAccount,\n    token: MaybeHexString,\n    propertyKey: string,\n    tokenType?: string,\n    extraArgs?: OptionalTransactionArgs,\n  ): Promise<string> {\n    return this.submitTransaction(\n      creator,\n      \"remove_property\",\n      [tokenType || this.tokenType],\n      [HexString.ensure(token).hex(), propertyKey],\n      extraArgs,\n    );\n  }\n\n  /**\n   * Update token property\n   * @param creator Creator account\n   * @param token Token address\n   * @param key the property key stored on-chain\n   * @param type the property typed stored on-chain\n   * @param value the property value to be stored on-chain\n   * @returns The hash of the transaction submitted to the API\n   */\n  async updateTokenProperty(\n    creator: AptosAccount,\n    token: MaybeHexString,\n    propertyKey: string,\n    propertyType: PropertyType,\n    propertyValue: string,\n    tokenType?: string,\n    extraArgs?: OptionalTransactionArgs,\n  ): Promise<string> {\n    return this.submitTransaction(\n      creator,\n      \"update_property\",\n      [tokenType || this.tokenType],\n      [\n        HexString.ensure(token).hex(),\n        propertyKey,\n        PropertyTypeMap[propertyType],\n        getSinglePropertyValueRaw(propertyValue, PropertyTypeMap[propertyType]),\n      ],\n      extraArgs,\n    );\n  }\n\n  async addTypedProperty(\n    creator: AptosAccount,\n    token: MaybeHexString,\n    propertyKey: string,\n    propertyType: PropertyType,\n    propertyValue: string,\n    tokenType?: string,\n    extraArgs?: OptionalTransactionArgs,\n  ) {\n    return this.submitTransaction(\n      creator,\n      \"add_typed_property\",\n      [tokenType || this.tokenType, PropertyTypeMap[propertyType]],\n      [HexString.ensure(token).hex(), propertyKey, propertyValue],\n      extraArgs,\n    );\n  }\n\n  async updateTypedProperty(\n    creator: AptosAccount,\n    token: MaybeHexString,\n    propertyKey: string,\n    propertyType: PropertyType,\n    propertyValue: string,\n    tokenType?: string,\n    extraArgs?: OptionalTransactionArgs,\n  ) {\n    return this.submitTransaction(\n      creator,\n      \"update_typed_property\",\n      [tokenType || this.tokenType, PropertyTypeMap[propertyType]],\n      [HexString.ensure(token).hex(), propertyKey, propertyValue],\n      extraArgs,\n    );\n  }\n\n  /**\n   * Transfer a non fungible token ownership.\n   * We can transfer a token only when the token is not frozen (i.e. owner transfer is not disabled such as for soul bound tokens)\n   * @param owner The account of the current token owner\n   * @param token Token address\n   * @param recipient Recipient address\n   * @returns The hash of the transaction submitted to the API\n   */\n  async transferTokenOwnership(\n    owner: AptosAccount,\n    token: MaybeHexString,\n    recipient: MaybeHexString,\n    tokenType?: string,\n    extraArgs?: OptionalTransactionArgs,\n  ): Promise<string> {\n    const builder = new TransactionBuilderRemoteABI(this.provider, {\n      sender: owner.address(),\n      ...extraArgs,\n    });\n    const rawTxn = await builder.build(\n      \"0x1::object::transfer\",\n      [tokenType || this.tokenType],\n      [HexString.ensure(token).hex(), HexString.ensure(recipient).hex()],\n    );\n    const bcsTxn = AptosClient.generateBCSTransaction(owner, rawTxn);\n    const pendingTransaction = await this.provider.submitSignedBCSTransaction(bcsTxn);\n    return pendingTransaction.hash;\n  }\n\n  /**\n   * Transfer a token. This function supports transfer non-fungible token and fungible token.\n   *\n   * To set the token type, set isFungibleToken param to true or false.\n   * If isFungibleToken param is not set, the function would query Indexer\n   * for the token data and check whether it is a non-fungible or a fungible token.\n   *\n   * Note: this function supports only token v2 standard (it does not support the token v1 standard)\n   *\n   * @param data NonFungibleTokenParameters | FungibleTokenParameters type\n   * @param isFungibleToken (optional) The token type, non-fungible or fungible token.\n   * @returns The hash of the transaction submitted to the API\n   */\n  async transfer(\n    data: NonFungibleTokenParameters | FungibleTokenParameters,\n    isFungibleToken?: boolean | null,\n  ): Promise<string> {\n    let isFungible = isFungibleToken;\n    if (isFungible === undefined || isFungible === null) {\n      const tokenData = await this.provider.getTokenData(HexString.ensure(data.tokenAddress).hex());\n      isFungible = tokenData.current_token_datas_v2[0].is_fungible_v2;\n    }\n    if (isFungible) {\n      const token = data as FungibleTokenParameters;\n      const fungibleAsset = new FungibleAssetClient(this.provider);\n      const txnHash = await fungibleAsset.transfer(\n        token.owner,\n        token.tokenAddress,\n        token.recipient,\n        token.amount,\n        token.extraArgs,\n      );\n      return txnHash;\n    }\n    const token = data as NonFungibleTokenParameters;\n    const txnHash = await this.transferTokenOwnership(\n      token.owner,\n      token.tokenAddress,\n      token.recipient,\n      token.tokenType,\n      token.extraArgs,\n    );\n    return txnHash;\n  }\n\n  /**\n   * Burn an object by the object owner\n   * @param owner The object owner account\n   * @param objectId The object address\n   * @optional objectType. The object type, default to \"0x1::object::ObjectCore\"\n   * @returns The hash of the transaction submitted to the API\n   */\n  async burnObject(\n    owner: AptosAccount,\n    objectId: MaybeHexString,\n    objectType?: string,\n    extraArgs?: OptionalTransactionArgs,\n  ): Promise<string> {\n    const builder = new TransactionBuilderRemoteABI(this.provider, {\n      sender: owner.address(),\n      ...extraArgs,\n    });\n    const rawTxn = await builder.build(\n      \"0x1::object::burn\",\n      [objectType || \"0x1::object::ObjectCore\"],\n      [HexString.ensure(objectId).hex()],\n    );\n    const bcsTxn = AptosClient.generateBCSTransaction(owner, rawTxn);\n    const pendingTransaction = await this.provider.submitSignedBCSTransaction(bcsTxn);\n    return pendingTransaction.hash;\n  }\n}\n","// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\nimport { AptosAccount, getAddressFromAccountOrAddress } from \"../account/aptos_account\";\nimport { AptosClient, OptionalTransactionArgs } from \"../providers/aptos_client\";\nimport { MaybeHexString, APTOS_COIN, NetworkToIndexerAPI, NodeAPIToNetwork } from \"../utils\";\nimport { TransactionBuilderRemoteABI } from \"../transaction_builder\";\nimport { FungibleAssetClient } from \"./fungible_asset_client\";\nimport { Provider } from \"../providers\";\nimport { AccountAddress } from \"../aptos_types\";\n\nexport const TRANSFER_COINS = \"0x1::aptos_account::transfer_coins\";\nexport const COIN_TRANSFER = \"0x1::coin::transfer\";\n/**\n * Class for working with the coin module, such as transferring coins and\n * checking balances.\n */\nexport class CoinClient {\n  aptosClient: AptosClient;\n\n  /**\n   * Creates new CoinClient instance\n   * @param aptosClient AptosClient instance\n   */\n  constructor(aptosClient: AptosClient) {\n    this.aptosClient = aptosClient;\n  }\n\n  /**\n   * Generate, sign, and submit a transaction to the Aptos blockchain API to\n   * transfer coins from one account to another. By default it transfers\n   * 0x1::aptos_coin::AptosCoin, but you can specify a different coin type\n   * with the `coinType` argument.\n   *\n   * You may set `createReceiverIfMissing` to true if you want to create the\n   * receiver account if it does not exist on chain yet. If you do not set\n   * this to true, the transaction will fail if the receiver account does not\n   * exist on-chain.\n   *\n   * The TS SDK supports fungible assets operations. If you want to use CoinClient\n   * with this feature, set the `coinType` to be the fungible asset metadata address.\n   * This option uses the `FungibleAssetClient` class and queries the\n   * fungible asset primary store.\n   *\n   * @param from Account sending the coins\n   * @param to Account to receive the coins\n   * @param amount Number of coins to transfer\n   * @param extraArgs Extra args for building the transaction or configuring how\n   * the client should submit and wait for the transaction\n   * @returns The hash of the transaction submitted to the API\n   */\n  // :!:>transfer\n  async transfer(\n    from: AptosAccount,\n    to: AptosAccount | MaybeHexString,\n    amount: number | bigint,\n    extraArgs?: OptionalTransactionArgs & {\n      // The coin type to use, defaults to 0x1::aptos_coin::AptosCoin.\n      // If you want to transfer a fungible asset, set this param to be the\n      // fungible asset address\n      coinType?: string | MaybeHexString;\n      // If set, create the `receiver` account if it doesn't exist on-chain.\n      // This is done by calling `0x1::aptos_account::transfer` instead, which\n      // will create the account on-chain first if it doesn't exist before\n      // transferring the coins to it.\n      // If this is the first time an account has received the specified coinType,\n      // and this is set to false, the transaction would fail.\n      createReceiverIfMissing?: boolean;\n    },\n  ): Promise<string> {\n    // Since we can receive either a fully qualified type tag like \"0x1::coin_type::CoinType\"\n    // or a fungible object address \"0x1234...6789\" we first check to see if the raw string value includes \"::\"\n    // This is to make sure it's not supposed to be a fungible asset object address.\n    const isTypeTag = (extraArgs?.coinType ?? \"\").toString().includes(\"::\");\n\n    // If the coin type exists, definitely isn't a type tag, and is a valid account address,\n    // then we enter this if block under the assumption that it's a fungible asset object address.\n    if (extraArgs?.coinType && !isTypeTag && AccountAddress.isValid(extraArgs.coinType)) {\n      /* eslint-disable no-console */\n      console.warn(\"to transfer a fungible asset, use `FungibleAssetClient()` class for better support\");\n      const provider = new Provider({\n        fullnodeUrl: this.aptosClient.nodeUrl,\n        indexerUrl: NetworkToIndexerAPI[NodeAPIToNetwork[this.aptosClient.nodeUrl]] ?? this.aptosClient.nodeUrl,\n      });\n      const fungibleAsset = new FungibleAssetClient(provider);\n      const txnHash = await fungibleAsset.transfer(\n        from,\n        extraArgs?.coinType,\n        getAddressFromAccountOrAddress(to),\n        amount,\n      );\n      return txnHash;\n    }\n\n    // If none is explicitly given, use 0x1::aptos_coin::AptosCoin as the coin type.\n    const coinTypeToTransfer = extraArgs?.coinType ?? APTOS_COIN;\n\n    // If we should create the receiver account if it doesn't exist on-chain,\n    // use the `0x1::aptos_account::transfer_coins` function.\n    let func: string;\n    if (extraArgs?.createReceiverIfMissing === undefined) {\n      func = TRANSFER_COINS;\n    } else {\n      func = extraArgs?.createReceiverIfMissing ? TRANSFER_COINS : COIN_TRANSFER;\n    }\n\n    // Get the receiver address from the AptosAccount or MaybeHexString.\n    const toAddress = getAddressFromAccountOrAddress(to);\n\n    const builder = new TransactionBuilderRemoteABI(this.aptosClient, { sender: from.address(), ...extraArgs });\n    const rawTxn = await builder.build(func, [coinTypeToTransfer as string], [toAddress, amount]);\n\n    const bcsTxn = AptosClient.generateBCSTransaction(from, rawTxn);\n    const pendingTransaction = await this.aptosClient.submitSignedBCSTransaction(bcsTxn);\n    return pendingTransaction.hash;\n  } // <:!:transfer\n\n  /**\n   * Get the balance of the account. By default it checks the balance of\n   * 0x1::aptos_coin::AptosCoin, but you can specify a different coin type.\n   *\n   * to use a different type, set the `coinType` to be the fungible asset type.\n   *\n   * The TS SDK supports fungible assets operations. If you want to use CoinClient\n   * with this feature, set the `coinType` to be the fungible asset metadata address.\n   * This option uses the FungibleAssetClient class and queries the\n   * fungible asset primary store.\n   *\n   * @param account Account that you want to get the balance of.\n   * @param extraArgs Extra args for checking the balance.\n   * @returns Promise that resolves to the balance as a bigint.\n   */\n  // :!:>checkBalance\n  async checkBalance(\n    account: AptosAccount | MaybeHexString,\n    extraArgs?: {\n      // The coin type to use, defaults to 0x1::aptos_coin::AptosCoin.\n      // If you want to check the balance of a fungible asset, set this param to be the\n      // fungible asset address\n      coinType?: string | MaybeHexString;\n    },\n  ): Promise<bigint> {\n    // Since we can receive either a fully qualified type tag like \"0x1::coin_type::CoinType\"\n    // or a fungible object address \"0x1234...6789\" we first check to see if the raw string value includes \"::\"\n    // This is to make sure it's not supposed to be a fungible asset object address.\n    const isTypeTag = (extraArgs?.coinType ?? \"\").toString().includes(\"::\");\n\n    // If the coin type exists, definitely isn't a type tag, and is a valid account address,\n    // then we enter this if block under the assumption that it's a fungible asset object address.\n    if (extraArgs?.coinType && !isTypeTag && AccountAddress.isValid(extraArgs.coinType)) {\n      /* eslint-disable no-console */\n      console.warn(\"to check balance of a fungible asset, use `FungibleAssetClient()` class for better support\");\n      const provider = new Provider({\n        fullnodeUrl: this.aptosClient.nodeUrl,\n        indexerUrl: NetworkToIndexerAPI[NodeAPIToNetwork[this.aptosClient.nodeUrl]] ?? this.aptosClient.nodeUrl,\n      });\n      const fungibleAsset = new FungibleAssetClient(provider);\n      const balance = await fungibleAsset.getPrimaryBalance(\n        getAddressFromAccountOrAddress(account),\n        extraArgs?.coinType,\n      );\n      return balance;\n    }\n\n    const coinType = extraArgs?.coinType ?? APTOS_COIN;\n    const typeTag = `0x1::coin::CoinStore<${coinType}>`;\n    const address = getAddressFromAccountOrAddress(account);\n    const accountResource = await this.aptosClient.getAccountResource(address, typeTag);\n    return BigInt((accountResource.data as any).coin.value);\n  } // <:!:checkBalance\n}\n","// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\n/** Faucet creates and funds accounts. This is a thin wrapper around that. */\nimport { AptosClient } from \"../providers/aptos_client\";\nimport { HexString, MaybeHexString, DEFAULT_TXN_TIMEOUT_SEC } from \"../utils\";\nimport { post, ClientConfig } from \"../client\";\n\n/**\n * Class for requsting tokens from faucet\n */\nexport class FaucetClient extends AptosClient {\n  readonly faucetUrl: string;\n\n  readonly config: ClientConfig | undefined;\n\n  /**\n   * Establishes a connection to Aptos node\n   * @param nodeUrl A url of the Aptos Node API endpoint\n   * @param faucetUrl A faucet url\n   * @param config An optional config for inner axios instance\n   * Detailed config description: {@link https://github.com/axios/axios#request-config}\n   */\n  constructor(nodeUrl: string, faucetUrl: string, config?: ClientConfig) {\n    super(nodeUrl, config);\n\n    if (!faucetUrl) {\n      throw new Error(\"Faucet URL cannot be empty.\");\n    }\n    this.faucetUrl = faucetUrl;\n    this.config = config;\n  }\n\n  /**\n   * This creates an account if it does not exist and mints the specified amount of\n   * coins into that account\n   * @param address Hex-encoded 16 bytes Aptos account address wich mints tokens\n   * @param amount Amount of tokens to mint\n   * @param timeoutSecs\n   * @returns Hashes of submitted transactions\n   */\n  async fundAccount(address: MaybeHexString, amount: number, timeoutSecs = DEFAULT_TXN_TIMEOUT_SEC): Promise<string[]> {\n    const { data } = await post<any, Array<string>>({\n      url: this.faucetUrl,\n      endpoint: \"mint\",\n      body: null,\n      params: {\n        address: HexString.ensure(address).noPrefix(),\n        amount,\n      },\n      overrides: { ...this.config },\n      originMethod: \"fundAccount\",\n    });\n\n    const promises: Promise<void>[] = [];\n    for (let i = 0; i < data.length; i += 1) {\n      const tnxHash = data[i];\n      promises.push(this.waitForTransaction(tnxHash, { timeoutSecs }));\n    }\n    await Promise.all(promises);\n    return data;\n  }\n}\n","import { AptosClient, Provider, OptionalTransactionArgs, ApiError } from \"../providers\";\nimport * as Gen from \"../generated/index\";\nimport { AptosAccount } from \"../account\";\nimport { AccountAddress } from \"../aptos_types\";\nimport { TransactionBuilderRemoteABI } from \"../transaction_builder\";\n\nexport const ansContractsMap: Record<string, string> = {\n  testnet: \"0x5f8fd2347449685cf41d4db97926ec3a096eaf381332be4f1318ad4d16a8497c\",\n  mainnet: \"0x867ed1f6bf916171b1de3ee92849b8978b7d1b9e0a8cc982a3d19d535dfd9c0c\",\n};\n\n// Each name component can only have lowercase letters, number or hyphens, and cannot start or end with a hyphen.\nexport const nameComponentPattern = /^[a-z\\d][a-z\\d-]{1,61}[a-z\\d]$/;\n\nexport const namePattern = new RegExp(\n  \"^\" +\n    // Optional subdomain (cannot be followed by .apt)\n    \"(?:(?<subdomain>[^.]+)\\\\.(?!apt$))?\" +\n    // Domain\n    \"(?<domain>[^.]+)\" +\n    // Optional .apt suffix\n    \"(?:\\\\.apt)?\" +\n    \"$\",\n);\n\nexport type ReverseLookupRegistryV1 = {\n  registry: {\n    handle: string;\n  };\n};\n\nexport type NameRegistryV1 = {\n  registry: {\n    handle: string;\n  };\n};\n\nexport type AnsRegistry = {\n  expirationTimestampSeconds: number;\n  target: string | null;\n};\n\nexport class AnsClient {\n  contractAddress: string;\n\n  provider: Provider;\n\n  /**\n   * Creates new AnsClient instance\n   * @param provider Provider instance\n   * @param contractAddress An optional contract address.\n   * If there is no contract address matching to the provided network\n   * then the AnsClient class expects a contract address -\n   * this is to support both mainnet/testnet networks and local development.\n   */\n  constructor(provider: Provider, contractAddress?: string) {\n    this.provider = provider;\n    if (!ansContractsMap[this.provider.network] && !contractAddress) {\n      throw new Error(\"Error: For custom providers, you must pass in a contract address\");\n    }\n    this.contractAddress = ansContractsMap[this.provider.network] ?? contractAddress;\n  }\n\n  /**\n   * Returns the primary name for the given account address\n   * @param address An account address\n   * @returns Account's primary name | null if there is no primary name defined\n   */\n  async getPrimaryNameByAddress(address: string): Promise<string | null> {\n    const ansResource: Gen.MoveResource = await this.provider.getAccountResource(\n      this.contractAddress,\n      `${this.contractAddress}::domains::ReverseLookupRegistryV1`,\n    );\n    const data = ansResource.data as ReverseLookupRegistryV1;\n    const { handle } = data.registry;\n    const domainsTableItemRequest = {\n      key_type: \"address\",\n      value_type: `${this.contractAddress}::domains::NameRecordKeyV1`,\n      key: address,\n    };\n    try {\n      const item = await this.provider.getTableItem(handle, domainsTableItemRequest);\n      return item.subdomain_name.vec[0] ? `${item.subdomain_name.vec[0]}.${item.domain_name}` : item.domain_name;\n    } catch (error: any) {\n      // if item not found, response is 404 error - meaning item not found\n      if (error.status === 404) {\n        return null;\n      }\n      throw new Error(error);\n    }\n  }\n\n  /**\n   * Returns the target account address for the given name\n   * @param name ANS name\n   * @returns Account address | null\n   */\n  async getAddressByName(name: string): Promise<string | null> {\n    const { domain, subdomain } = name.match(namePattern)?.groups ?? {};\n    if (!domain) return null;\n    const registration = subdomain\n      ? await this.getRegistrationForSubdomainName(domain, subdomain)\n      : await this.getRegistrationForDomainName(domain);\n    return registration === null ? null : registration.target;\n  }\n\n  /**\n   * Mint a new Aptos name\n   *\n   * @param account AptosAccount where collection will be created\n   * @param domainName Aptos domain name to mint\n   * @param years year duration of the domain name\n   * @returns The hash of the pending transaction submitted to the API\n   */\n  async mintAptosName(\n    account: AptosAccount,\n    domainName: string,\n    years: number = 1,\n    extraArgs?: OptionalTransactionArgs,\n  ): Promise<Gen.HashValue> {\n    // check if the name is valid\n    if (domainName.match(nameComponentPattern) === null) {\n      throw new ApiError(400, `Name ${domainName} is not valid`);\n    }\n    // check if the name is available\n    const registration = await this.getRegistrationForDomainName(domainName);\n    if (registration) {\n      const now = Math.ceil(Date.now() / 1000);\n      if (now < registration.expirationTimestampSeconds) {\n        throw new ApiError(400, `Name ${domainName} is not available`);\n      }\n    }\n\n    const builder = new TransactionBuilderRemoteABI(this.provider.aptosClient, {\n      sender: account.address(),\n      ...extraArgs,\n    });\n    const rawTxn = await builder.build(`${this.contractAddress}::domains::register_domain`, [], [domainName, years]);\n\n    const bcsTxn = AptosClient.generateBCSTransaction(account, rawTxn);\n    const pendingTransaction = await this.provider.submitSignedBCSTransaction(bcsTxn);\n\n    return pendingTransaction.hash;\n  }\n\n  /**\n   * Mint a new Aptos Subdomain\n   *\n   * @param account AptosAccount the owner of the domain name\n   * @param subdomainName subdomain name to mint\n   * @param domainName Aptos domain name to mint under\n   * @param expirationTimestampSeconds must be set between the domains expiration and the current time\n   * @returns The hash of the pending transaction submitted to the API\n   */\n  async mintAptosSubdomain(\n    account: AptosAccount,\n    subdomainName: string,\n    domainName: string,\n    expirationTimestampSeconds?: number,\n    extraArgs?: OptionalTransactionArgs,\n  ): Promise<Gen.HashValue> {\n    // check if the name is valid\n    if (domainName.match(nameComponentPattern) === null) {\n      throw new ApiError(400, `Domain name ${domainName} is not valid`);\n    }\n    // check if the name is valid\n    if (subdomainName.match(nameComponentPattern) === null) {\n      throw new ApiError(400, `Subdomain name ${subdomainName} is not valid`);\n    }\n    // check if the name is available\n    const subdomainRegistration = await this.getRegistrationForSubdomainName(domainName, subdomainName);\n    if (subdomainRegistration) {\n      const now = Math.ceil(Date.now() / 1000);\n      if (now < subdomainRegistration.expirationTimestampSeconds) {\n        throw new ApiError(400, `Name ${subdomainName}.${domainName} is not available`);\n      }\n    }\n\n    const domainRegistration = await this.getRegistrationForDomainName(domainName);\n    if (domainRegistration === null) {\n      throw new ApiError(400, `Domain name ${domainName} does not exist`);\n    }\n    const now = Math.ceil(Date.now() / 1000);\n    if (domainRegistration.expirationTimestampSeconds < now) {\n      throw new ApiError(400, `Domain name ${domainName} expired`);\n    }\n\n    const actualExpirationTimestampSeconds =\n      expirationTimestampSeconds || domainRegistration.expirationTimestampSeconds;\n    if (actualExpirationTimestampSeconds < now) {\n      throw new ApiError(400, `Expiration for ${subdomainName}.${domainName} is before now`);\n    }\n\n    const builder = new TransactionBuilderRemoteABI(this.provider.aptosClient, {\n      sender: account.address(),\n      ...extraArgs,\n    });\n    const rawTxn = await builder.build(\n      `${this.contractAddress}::domains::register_subdomain`,\n      [],\n      [subdomainName, domainName, actualExpirationTimestampSeconds],\n    );\n\n    const bcsTxn = AptosClient.generateBCSTransaction(account, rawTxn);\n    const pendingTransaction = await this.provider.submitSignedBCSTransaction(bcsTxn);\n\n    return pendingTransaction.hash;\n  }\n\n  /**\n   * @param account AptosAccount the owner of the domain name\n   * @param subdomainName subdomain name to mint\n   * @param domainName Aptos domain name to mint\n   * @param target the target address for the subdomain\n   * @returns The hash of the pending transaction submitted to the API\n   */\n  async setSubdomainAddress(\n    account: AptosAccount,\n    subdomainName: string,\n    domainName: string,\n    target: string,\n    extraArgs?: OptionalTransactionArgs,\n  ): Promise<Gen.HashValue> {\n    const standardizeAddress = AccountAddress.standardizeAddress(target);\n\n    // check if the name is valid\n    if (domainName.match(nameComponentPattern) === null) {\n      throw new ApiError(400, `Name ${domainName} is not valid`);\n    }\n    // check if the name is valid\n    if (subdomainName.match(nameComponentPattern) === null) {\n      throw new ApiError(400, `Name ${subdomainName} is not valid`);\n    }\n\n    const builder = new TransactionBuilderRemoteABI(this.provider.aptosClient, {\n      sender: account.address(),\n      ...extraArgs,\n    });\n    const rawTxn = await builder.build(\n      `${this.contractAddress}::domains::set_subdomain_address`,\n      [],\n      [subdomainName, domainName, standardizeAddress],\n    );\n\n    const bcsTxn = AptosClient.generateBCSTransaction(account, rawTxn);\n    const pendingTransaction = await this.provider.submitSignedBCSTransaction(bcsTxn);\n\n    return pendingTransaction.hash;\n  }\n\n  /**\n   * Initialize reverse lookup for contract owner\n   *\n   * @param owner the `aptos_names` AptosAccount\n   * @returns The hash of the pending transaction submitted to the API\n   */\n  async initReverseLookupRegistry(owner: AptosAccount, extraArgs?: OptionalTransactionArgs): Promise<Gen.HashValue> {\n    const builder = new TransactionBuilderRemoteABI(this.provider.aptosClient, {\n      sender: owner.address(),\n      ...extraArgs,\n    });\n    const rawTxn = await builder.build(`${this.contractAddress}::domains::init_reverse_lookup_registry_v1`, [], []);\n\n    const bcsTxn = AptosClient.generateBCSTransaction(owner, rawTxn);\n    const pendingTransaction = await this.provider.submitSignedBCSTransaction(bcsTxn);\n\n    return pendingTransaction.hash;\n  }\n\n  /**\n   * Returns the AnsRegistry for the given domain name\n   * @param domain domain name\n   * @example\n   * if name is `aptos.apt`\n   * domain = aptos\n   *\n   * @returns AnsRegistry | null\n   */\n  private async getRegistrationForDomainName(domain: string): Promise<AnsRegistry | null> {\n    if (domain.match(nameComponentPattern) === null) return null;\n    const ansResource: { type: Gen.MoveStructTag; data: any } = await this.provider.getAccountResource(\n      this.contractAddress,\n      `${this.contractAddress}::domains::NameRegistryV1`,\n    );\n    const data = ansResource.data as NameRegistryV1;\n    const { handle } = data.registry;\n    const domainsTableItemRequest = {\n      key_type: `${this.contractAddress}::domains::NameRecordKeyV1`,\n      value_type: `${this.contractAddress}::domains::NameRecordV1`,\n      key: {\n        subdomain_name: { vec: [] },\n        domain_name: domain,\n      },\n    };\n\n    try {\n      const item = await this.provider.getTableItem(handle, domainsTableItemRequest);\n      return {\n        target: item.target_address.vec.length === 1 ? item.target_address.vec[0] : null,\n        expirationTimestampSeconds: item.expiration_time_sec,\n      };\n    } catch (error: any) {\n      // if item not found, response is 404 error - meaning item not found\n      if (error.status === 404) {\n        return null;\n      }\n      throw new Error(error);\n    }\n  }\n\n  /**\n   * Returns the AnsRegistry for the given subdomain_name\n   * @param domain domain name\n   * @param subdomain subdomain name\n   * @example\n   * if name is `dev.aptos.apt`\n   * domain = aptos\n   * subdomain = dev\n   *\n   * @returns AnsRegistry | null\n   */\n  private async getRegistrationForSubdomainName(domain: string, subdomain: string): Promise<AnsRegistry | null> {\n    if (domain.match(nameComponentPattern) === null) return null;\n    if (subdomain.match(nameComponentPattern) === null) return null;\n    const ansResource: { type: Gen.MoveStructTag; data: any } = await this.provider.getAccountResource(\n      this.contractAddress,\n      `${this.contractAddress}::domains::NameRegistryV1`,\n    );\n    const data = ansResource.data as NameRegistryV1;\n    const { handle } = data.registry;\n    const domainsTableItemRequest = {\n      key_type: `${this.contractAddress}::domains::NameRecordKeyV1`,\n      value_type: `${this.contractAddress}::domains::NameRecordV1`,\n      key: {\n        subdomain_name: { vec: [subdomain] },\n        domain_name: domain,\n      },\n    };\n\n    try {\n      const item = await this.provider.getTableItem(handle, domainsTableItemRequest);\n      return {\n        target: item.target_address.vec.length === 1 ? item.target_address.vec[0] : null,\n        expirationTimestampSeconds: item.expiration_time_sec,\n      };\n    } catch (error: any) {\n      // if item not found, response is 404 error - meaning item not found\n      if (error.status === 404) {\n        return null;\n      }\n      throw new Error(error);\n    }\n  }\n}\n","/**\n * A wrapper that handles and manages an account sequence number.\n *\n * Submit up to `maximumInFlight` transactions per account in parallel with a timeout of `sleepTime`\n * If local assumes `maximumInFlight` are in flight, determine the actual committed state from the network\n * If there are less than `maximumInFlight` due to some being committed, adjust the window\n * If `maximumInFlight` are in flight, wait `sleepTime` seconds before re-evaluating\n * If ever waiting more than `maxWaitTime` restart the sequence number to the current on-chain state\n *\n * Assumptions:\n * Accounts are expected to be managed by a single AccountSequenceNumber and not used otherwise.\n * They are initialized to the current on-chain state, so if there are already transactions in\n * flight, they may take some time to reset.\n * Accounts are automatically initialized if not explicitly\n *\n * Notes:\n * This is co-routine safe, that is many async tasks can be reading from this concurrently.\n * The state of an account cannot be used across multiple AccountSequenceNumber services.\n * The synchronize method will create a barrier that prevents additional nextSequenceNumber\n * calls until it is complete.\n * This only manages the distribution of sequence numbers it does not help handle transaction\n * failures.\n * If a transaction fails, you should call synchronize and wait for timeouts.\n */\n\nimport { AptosAccount } from \"../account\";\nimport { Provider } from \"../providers\";\nimport { sleep } from \"../utils\";\n\n// returns `now` time in seconds\nconst now = () => Math.floor(Date.now() / 1000);\n\nexport class AccountSequenceNumber {\n  readonly provider: Provider;\n\n  readonly account: AptosAccount;\n\n  // sequence number on chain\n  lastUncommintedNumber: bigint | null = null;\n\n  // local sequence number\n  currentNumber: bigint | null = null;\n\n  /**\n   * We want to guarantee that we preserve ordering of workers to requests.\n   *\n   * `lock` is used to try to prevent multiple coroutines from accessing a shared resource at the same time,\n   * which can result in race conditions and data inconsistency.\n   * This code actually doesn't do it though, since we aren't giving out a slot, it is still somewhat a race condition.\n   *\n   * The ideal solution is likely that each thread grabs the next number from a incremental integer.\n   * When they complete, they increment that number and that entity is able to enter the `lock`.\n   * That would guarantee ordering.\n   */\n  lock = false;\n\n  maxWaitTime: number;\n\n  maximumInFlight: number;\n\n  sleepTime: number;\n\n  constructor(\n    provider: Provider,\n    account: AptosAccount,\n    maxWaitTime: number,\n    maximumInFlight: number,\n    sleepTime: number,\n  ) {\n    this.provider = provider;\n    this.account = account;\n    this.maxWaitTime = maxWaitTime;\n    this.maximumInFlight = maximumInFlight;\n    this.sleepTime = sleepTime;\n  }\n\n  /**\n   * Returns the next available sequence number for this account\n   *\n   * @returns next available sequence number\n   */\n  async nextSequenceNumber(): Promise<bigint | null> {\n    /* eslint-disable no-await-in-loop */\n    while (this.lock) {\n      await sleep(this.sleepTime);\n    }\n\n    this.lock = true;\n    let nextNumber = BigInt(0);\n    try {\n      if (this.lastUncommintedNumber === null || this.currentNumber === null) {\n        await this.initialize();\n      }\n\n      if (this.currentNumber! - this.lastUncommintedNumber! >= this.maximumInFlight) {\n        await this.update();\n\n        const startTime = now();\n        while (this.currentNumber! - this.lastUncommintedNumber! >= this.maximumInFlight) {\n          await sleep(this.sleepTime);\n          if (now() - startTime > this.maxWaitTime) {\n            /* eslint-disable no-console */\n            console.warn(`Waited over 30 seconds for a transaction to commit, resyncing ${this.account.address()}`);\n            await this.initialize();\n          } else {\n            await this.update();\n          }\n        }\n      }\n      nextNumber = this.currentNumber!;\n      this.currentNumber! += BigInt(1);\n    } catch (e) {\n      console.error(\"error in getting next sequence number for this account\", e);\n    } finally {\n      this.lock = false;\n    }\n    return nextNumber;\n  }\n\n  /**\n   * Initializes this account with the sequence number on chain\n   */\n  async initialize(): Promise<void> {\n    const { sequence_number: sequenceNumber } = await this.provider.getAccount(this.account.address());\n    this.currentNumber = BigInt(sequenceNumber);\n    this.lastUncommintedNumber = BigInt(sequenceNumber);\n  }\n\n  /**\n   * Updates this account sequence number with the one on-chain\n   *\n   * @returns on-chain sequence number for this account\n   */\n  async update(): Promise<bigint> {\n    const { sequence_number: sequenceNumber } = await this.provider.getAccount(this.account.address());\n    this.lastUncommintedNumber = BigInt(sequenceNumber);\n    return this.lastUncommintedNumber;\n  }\n\n  /**\n   * Synchronizes local sequence number with the seqeunce number on chain for this account.\n   *\n   * Poll the network until all submitted transactions have either been committed or until\n   * the maximum wait time has elapsed\n   */\n  async synchronize(): Promise<void> {\n    if (this.lastUncommintedNumber === this.currentNumber) return;\n\n    /* eslint-disable no-await-in-loop */\n    while (this.lock) {\n      await sleep(this.sleepTime);\n    }\n\n    this.lock = true;\n\n    try {\n      await this.update();\n      const startTime = now();\n      while (this.lastUncommintedNumber !== this.currentNumber) {\n        if (now() - startTime > this.maxWaitTime) {\n          /* eslint-disable no-console */\n          console.warn(`Waited over 30 seconds for a transaction to commit, resyncing ${this.account.address()}`);\n          await this.initialize();\n        } else {\n          await sleep(this.sleepTime);\n          await this.update();\n        }\n      }\n    } catch (e) {\n      console.error(\"error in synchronizing this account sequence number with the one on chain\", e);\n    } finally {\n      this.lock = false;\n    }\n  }\n}\n","/* eslint-disable no-await-in-loop */\n\n/**\n * TransactionWorker provides a simple framework for receiving payloads to be processed.\n *\n * Once one `start()` the process and pushes a new transaction, the worker acquires\n * the current account's next sequence number (by using the AccountSequenceNumber class),\n * generates a signed transaction and pushes an async submission process into the `outstandingTransactions` queue.\n * At the same time, the worker processes transactions by reading the `outstandingTransactions` queue\n * and submits the next transaction to chain, it\n * 1) waits for resolution of the submission process or get pre-execution validation error\n * and 2) waits for the resolution of the execution process or get an execution error.\n * The worker fires events for any submission and/or execution success and/or failure.\n */\n\nimport EventEmitter from \"eventemitter3\";\nimport { AptosAccount } from \"../account\";\nimport { PendingTransaction, Transaction } from \"../generated\";\nimport { AptosClient, Provider } from \"../providers\";\nimport { TxnBuilderTypes } from \"../transaction_builder\";\nimport { AccountSequenceNumber } from \"./account_sequence_number\";\nimport { AsyncQueue, AsyncQueueCancelledError } from \"./async_queue\";\n\nconst promiseFulfilledStatus = \"fulfilled\";\n\nexport enum TransactionWorkerEvents {\n  TransactionSent = \"transactionSent\",\n  TransactionSendFailed = \"transactionsendFailed\",\n  TransactionExecuted = \"transactionExecuted\",\n  TransactionExecutionFailed = \"transactionexecutionFailed\",\n}\n\nexport class TransactionWorker extends EventEmitter<TransactionWorkerEvents> {\n  readonly provider: Provider;\n\n  readonly account: AptosAccount;\n\n  // current account sequence number\n  readonly accountSequnceNumber: AccountSequenceNumber;\n\n  readonly taskQueue: AsyncQueue<() => Promise<void>> = new AsyncQueue<() => Promise<void>>();\n\n  // process has started\n  started: boolean;\n\n  /**\n   * transactions payloads waiting to be generated and signed\n   *\n   * TODO support entry function payload from ABI builder\n   */\n  transactionsQueue = new AsyncQueue<TxnBuilderTypes.TransactionPayload>();\n\n  /**\n   * signed transactions waiting to be submitted\n   */\n  outstandingTransactions = new AsyncQueue<[Promise<PendingTransaction>, bigint]>();\n\n  /**\n   * transactions that have been submitted to chain\n   */\n  sentTransactions: Array<[string, bigint, any]> = [];\n\n  /**\n   * transactions that have been committed to chain\n   */\n  executedTransactions: Array<[string, bigint, any]> = [];\n\n  /**\n   * Provides a simple framework for receiving payloads to be processed.\n   *\n   * @param provider - a client provider\n   * @param sender - a sender as AptosAccount\n   * @param maxWaitTime - the max wait time to wait before resyncing the sequence number\n   * to the current on-chain state, default to 30\n   * @param maximumInFlight - submit up to `maximumInFlight` transactions per account.\n   * Mempool limits the number of transactions per account to 100, hence why we default to 100.\n   * @param sleepTime - If `maximumInFlight` are in flight, wait `sleepTime` seconds before re-evaluating, default to 10\n   */\n  constructor(\n    provider: Provider,\n    account: AptosAccount,\n    maxWaitTime: number = 30,\n    maximumInFlight: number = 100,\n    sleepTime: number = 10,\n  ) {\n    super();\n    this.provider = provider;\n    this.account = account;\n    this.started = false;\n    this.accountSequnceNumber = new AccountSequenceNumber(provider, account, maxWaitTime, maximumInFlight, sleepTime);\n  }\n\n  /**\n   * Gets the current account sequence number,\n   * generates the transaction with the account sequence number,\n   * adds the transaction to the outstanding transaction queue\n   * to be processed later.\n   */\n  async submitNextTransaction() {\n    try {\n      /* eslint-disable no-constant-condition */\n      while (true) {\n        if (this.transactionsQueue.isEmpty()) return;\n        const sequenceNumber = await this.accountSequnceNumber.nextSequenceNumber();\n        if (sequenceNumber === null) return;\n        const transaction = await this.generateNextTransaction(this.account, sequenceNumber);\n        if (!transaction) return;\n        const pendingTransaction = this.provider.submitSignedBCSTransaction(transaction);\n        await this.outstandingTransactions.enqueue([pendingTransaction, sequenceNumber]);\n      }\n    } catch (error: any) {\n      if (error instanceof AsyncQueueCancelledError) {\n        return;\n      }\n      // TODO use future log service\n      /* eslint-disable no-console */\n      console.log(error);\n    }\n  }\n\n  /**\n   * Reads the outstanding transaction queue and submits the transaction to chain.\n   *\n   * If the transaction has fulfilled, it pushes the transaction to the processed\n   * transactions queue and fires a transactionsFulfilled event.\n   *\n   * If the transaction has failed, it pushes the transaction to the processed\n   * transactions queue with the failure reason and fires a transactionsFailed event.\n   */\n  async processTransactions() {\n    try {\n      /* eslint-disable no-constant-condition */\n      while (true) {\n        const awaitingTransactions = [];\n        const sequenceNumbers = [];\n        let [pendingTransaction, sequenceNumber] = await this.outstandingTransactions.dequeue();\n\n        awaitingTransactions.push(pendingTransaction);\n        sequenceNumbers.push(sequenceNumber);\n\n        while (!this.outstandingTransactions.isEmpty()) {\n          [pendingTransaction, sequenceNumber] = await this.outstandingTransactions.dequeue();\n\n          awaitingTransactions.push(pendingTransaction);\n          sequenceNumbers.push(sequenceNumber);\n        }\n        // send awaiting transactions to chain\n        const sentTransactions = await Promise.allSettled(awaitingTransactions);\n        for (let i = 0; i < sentTransactions.length && i < sequenceNumbers.length; i += 1) {\n          // check sent transaction status\n          const sentTransaction = sentTransactions[i];\n          sequenceNumber = sequenceNumbers[i];\n          if (sentTransaction.status === promiseFulfilledStatus) {\n            // transaction sent to chain\n            this.sentTransactions.push([sentTransaction.value.hash, sequenceNumber, null]);\n            this.emit(TransactionWorkerEvents.TransactionSent, [\n              this.sentTransactions.length,\n              sentTransaction.value.hash,\n            ]);\n            // check sent transaction execution\n            await this.checkTransaction(sentTransaction, sequenceNumber);\n          } else {\n            // send transaction failed\n            this.sentTransactions.push([sentTransaction.status, sequenceNumber, sentTransaction.reason]);\n            this.emit(TransactionWorkerEvents.TransactionSendFailed, [\n              this.sentTransactions.length,\n              sentTransaction.reason,\n            ]);\n          }\n        }\n      }\n    } catch (error: any) {\n      if (error instanceof AsyncQueueCancelledError) {\n        return;\n      }\n      // TODO use future log service\n      /* eslint-disable no-console */\n      console.log(error);\n    }\n  }\n\n  /**\n   * Once transaction has been sent to chain, we check for its execution status.\n   * @param sentTransaction transactions that were sent to chain and are now waiting to be executed\n   * @param sequenceNumber the account's sequence number that was sent with the transaction\n   */\n  async checkTransaction(sentTransaction: PromiseFulfilledResult<PendingTransaction>, sequenceNumber: bigint) {\n    const waitFor: Array<Promise<Transaction>> = [];\n    waitFor.push(this.provider.waitForTransactionWithResult(sentTransaction.value.hash, { checkSuccess: true }));\n    const sentTransactions = await Promise.allSettled(waitFor);\n\n    for (let i = 0; i < sentTransactions.length; i += 1) {\n      const executedTransaction = sentTransactions[i];\n      if (executedTransaction.status === promiseFulfilledStatus) {\n        // transaction executed to chain\n        this.executedTransactions.push([executedTransaction.value.hash, sequenceNumber, null]);\n        this.emit(TransactionWorkerEvents.TransactionExecuted, [\n          this.executedTransactions.length,\n          executedTransaction.value.hash,\n        ]);\n      } else {\n        // transaction execution failed\n        this.executedTransactions.push([executedTransaction.status, sequenceNumber, executedTransaction.reason]);\n        this.emit(TransactionWorkerEvents.TransactionExecutionFailed, [\n          this.executedTransactions.length,\n          executedTransaction.reason,\n        ]);\n      }\n    }\n  }\n\n  /**\n   * Push transaction to the transactions queue\n   * @param payload Transaction payload\n   */\n  async push(payload: TxnBuilderTypes.TransactionPayload): Promise<void> {\n    await this.transactionsQueue.enqueue(payload);\n  }\n\n  /**\n   * Generates a signed transaction that can be submitted to chain\n   * @param account an Aptos account\n   * @param sequenceNumber a sequence number the transaction will be generated with\n   * @returns\n   */\n  async generateNextTransaction(account: AptosAccount, sequenceNumber: bigint): Promise<Uint8Array | undefined> {\n    if (this.transactionsQueue.isEmpty()) return undefined;\n    const payload = await this.transactionsQueue.dequeue();\n    const rawTransaction = await this.provider.generateRawTransaction(account.address(), payload, {\n      providedSequenceNumber: sequenceNumber,\n    });\n    const signedTransaction = AptosClient.generateBCSTransaction(account, rawTransaction);\n    return signedTransaction;\n  }\n\n  /**\n   * Starts transaction submission and transaction processing.\n   */\n  async run() {\n    try {\n      while (!this.taskQueue.isCancelled()) {\n        const task = await this.taskQueue.dequeue();\n        await task();\n      }\n    } catch (error: any) {\n      throw new Error(error);\n    }\n  }\n\n  /**\n   * Starts the transaction management process.\n   */\n  start() {\n    if (this.started) {\n      throw new Error(\"worker has already started\");\n    }\n    this.started = true;\n    this.taskQueue.enqueue(() => this.submitNextTransaction());\n    this.taskQueue.enqueue(() => this.processTransactions());\n    this.run();\n  }\n\n  /**\n   * Stops the the transaction management process.\n   */\n  stop() {\n    if (this.taskQueue.isCancelled()) {\n      throw new Error(\"worker has already stopped\");\n    }\n    this.started = false;\n    this.taskQueue.cancel();\n  }\n}\n","/**\n * The AsyncQueue class is an async-aware data structure that provides a queue-like\n * behavior for managing asynchronous tasks or operations.\n * It allows to enqueue items and dequeue them asynchronously.\n * This is not thread-safe but it is async concurrency safe and\n * it does not guarantee ordering for those that call into and await on enqueue.\n */\n\nexport class AsyncQueue<T> {\n  readonly queue: T[] = [];\n\n  // The resolveMap is used to handle the resolution of promises when items are enqueued and dequeued.\n  private resolveMap: Map<number, (value: T) => void> = new Map();\n\n  private counter: number = 0;\n\n  private cancelled: boolean = false;\n\n  /**\n   * The enqueue method adds an item to the queue. If there are pending dequeued promises,\n   * in the resolveMap, it resolves the oldest promise with the enqueued item immediately.\n   * Otherwise, it adds the item to the queue.\n   *\n   * @param item T\n   */\n  enqueue(item: T): void {\n    if (this.resolveMap.size > 0) {\n      const resolve = this.resolveMap.get(0);\n      if (resolve) {\n        this.resolveMap.delete(0);\n        resolve(item);\n        return;\n      }\n    }\n    this.queue.push(item);\n  }\n\n  /**\n   * The dequeue method returns a promise that resolves to the next item in the queue.\n   * If the queue is not empty, it resolves the promise immediately with the next item.\n   * Otherwise, it creates a new promise. The promise's resolve function is stored\n   * in the resolveMap with a unique counter value as the key.\n   * The newly created promise is then returned, and it will be resolved later when an item is enqueued.\n   *\n   * @returns Promise<T>\n   */\n  async dequeue(): Promise<T> {\n    if (this.queue.length > 0) {\n      return Promise.resolve(this.queue.shift()!);\n    }\n    const promise = new Promise<T>((resolve) => {\n      this.counter += 1;\n      this.resolveMap.set(this.counter, resolve);\n    });\n    return promise;\n  }\n\n  /**\n   * The isEmpty method returns whether the queue is empty or not.\n   *\n   * @returns boolean\n   */\n  isEmpty(): boolean {\n    return this.queue.length === 0;\n  }\n\n  /**\n   * The cancel method cancels all pending promises in the queue.\n   * It rejects the promises with a AsyncQueueCancelledError error,\n   * ensuring that any awaiting code can handle the cancellation appropriately.\n   */\n  cancel(): void {\n    this.cancelled = true;\n    this.resolveMap.forEach(async (resolve) => {\n      resolve(await Promise.reject(new AsyncQueueCancelledError(\"Task cancelled\")));\n    });\n    this.resolveMap.clear();\n    this.queue.length = 0;\n  }\n\n  /**\n   * The isCancelled method returns whether the queue is cancelled or not.\n   *\n   * @returns boolean\n   */\n  isCancelled(): boolean {\n    return this.cancelled;\n  }\n}\n\nexport class AsyncQueueCancelledError extends Error {\n  /* eslint-disable @typescript-eslint/no-useless-constructor */\n  constructor(message: string) {\n    super(message);\n  }\n}\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\n\nexport type { AccountData } from './models/AccountData';\nexport type { AccountSignature } from './models/AccountSignature';\nexport type { AccountSignature_Ed25519Signature } from './models/AccountSignature_Ed25519Signature';\nexport type { AccountSignature_MultiEd25519Signature } from './models/AccountSignature_MultiEd25519Signature';\nexport type { Address } from './models/Address';\nexport type { AptosError } from './models/AptosError';\nexport { AptosErrorCode } from './models/AptosErrorCode';\nexport type { Block } from './models/Block';\nexport type { BlockMetadataTransaction } from './models/BlockMetadataTransaction';\nexport type { DecodedTableData } from './models/DecodedTableData';\nexport type { DeletedTableData } from './models/DeletedTableData';\nexport type { DeleteModule } from './models/DeleteModule';\nexport type { DeleteResource } from './models/DeleteResource';\nexport type { DeleteTableItem } from './models/DeleteTableItem';\nexport type { DirectWriteSet } from './models/DirectWriteSet';\nexport type { Ed25519Signature } from './models/Ed25519Signature';\nexport type { EncodeSubmissionRequest } from './models/EncodeSubmissionRequest';\nexport type { EntryFunctionId } from './models/EntryFunctionId';\nexport type { EntryFunctionPayload } from './models/EntryFunctionPayload';\nexport type { Event } from './models/Event';\nexport type { EventGuid } from './models/EventGuid';\nexport type { FeePayerSignature } from './models/FeePayerSignature';\nexport type { GasEstimation } from './models/GasEstimation';\nexport type { GenesisPayload } from './models/GenesisPayload';\nexport type { GenesisPayload_WriteSetPayload } from './models/GenesisPayload_WriteSetPayload';\nexport type { GenesisTransaction } from './models/GenesisTransaction';\nexport type { HashValue } from './models/HashValue';\nexport type { HealthCheckSuccess } from './models/HealthCheckSuccess';\nexport type { HexEncodedBytes } from './models/HexEncodedBytes';\nexport type { IdentifierWrapper } from './models/IdentifierWrapper';\nexport type { IndexResponse } from './models/IndexResponse';\nexport type { ModuleBundlePayload } from './models/ModuleBundlePayload';\nexport type { MoveAbility } from './models/MoveAbility';\nexport type { MoveFunction } from './models/MoveFunction';\nexport type { MoveFunctionGenericTypeParam } from './models/MoveFunctionGenericTypeParam';\nexport { MoveFunctionVisibility } from './models/MoveFunctionVisibility';\nexport type { MoveModule } from './models/MoveModule';\nexport type { MoveModuleBytecode } from './models/MoveModuleBytecode';\nexport type { MoveModuleId } from './models/MoveModuleId';\nexport type { MoveResource } from './models/MoveResource';\nexport type { MoveScriptBytecode } from './models/MoveScriptBytecode';\nexport type { MoveStruct } from './models/MoveStruct';\nexport type { MoveStructField } from './models/MoveStructField';\nexport type { MoveStructGenericTypeParam } from './models/MoveStructGenericTypeParam';\nexport type { MoveStructTag } from './models/MoveStructTag';\nexport type { MoveStructValue } from './models/MoveStructValue';\nexport type { MoveType } from './models/MoveType';\nexport type { MoveValue } from './models/MoveValue';\nexport type { MultiAgentSignature } from './models/MultiAgentSignature';\nexport type { MultiEd25519Signature } from './models/MultiEd25519Signature';\nexport type { MultisigPayload } from './models/MultisigPayload';\nexport type { MultisigTransactionPayload } from './models/MultisigTransactionPayload';\nexport type { PendingTransaction } from './models/PendingTransaction';\nexport type { RawTableItemRequest } from './models/RawTableItemRequest';\nexport { RoleType } from './models/RoleType';\nexport type { ScriptPayload } from './models/ScriptPayload';\nexport type { ScriptWriteSet } from './models/ScriptWriteSet';\nexport type { StateCheckpointTransaction } from './models/StateCheckpointTransaction';\nexport type { StateKeyWrapper } from './models/StateKeyWrapper';\nexport type { SubmitTransactionRequest } from './models/SubmitTransactionRequest';\nexport type { TableItemRequest } from './models/TableItemRequest';\nexport type { Transaction } from './models/Transaction';\nexport type { Transaction_BlockMetadataTransaction } from './models/Transaction_BlockMetadataTransaction';\nexport type { Transaction_GenesisTransaction } from './models/Transaction_GenesisTransaction';\nexport type { Transaction_PendingTransaction } from './models/Transaction_PendingTransaction';\nexport type { Transaction_StateCheckpointTransaction } from './models/Transaction_StateCheckpointTransaction';\nexport type { Transaction_UserTransaction } from './models/Transaction_UserTransaction';\nexport type { TransactionPayload } from './models/TransactionPayload';\nexport type { TransactionPayload_EntryFunctionPayload } from './models/TransactionPayload_EntryFunctionPayload';\nexport type { TransactionPayload_ModuleBundlePayload } from './models/TransactionPayload_ModuleBundlePayload';\nexport type { TransactionPayload_MultisigPayload } from './models/TransactionPayload_MultisigPayload';\nexport type { TransactionPayload_ScriptPayload } from './models/TransactionPayload_ScriptPayload';\nexport type { TransactionsBatchSingleSubmissionFailure } from './models/TransactionsBatchSingleSubmissionFailure';\nexport type { TransactionsBatchSubmissionResult } from './models/TransactionsBatchSubmissionResult';\nexport type { TransactionSignature } from './models/TransactionSignature';\nexport type { TransactionSignature_Ed25519Signature } from './models/TransactionSignature_Ed25519Signature';\nexport type { TransactionSignature_FeePayerSignature } from './models/TransactionSignature_FeePayerSignature';\nexport type { TransactionSignature_MultiAgentSignature } from './models/TransactionSignature_MultiAgentSignature';\nexport type { TransactionSignature_MultiEd25519Signature } from './models/TransactionSignature_MultiEd25519Signature';\nexport type { U128 } from './models/U128';\nexport type { U256 } from './models/U256';\nexport type { U64 } from './models/U64';\nexport type { UserTransaction } from './models/UserTransaction';\nexport type { VersionedEvent } from './models/VersionedEvent';\nexport type { ViewRequest } from './models/ViewRequest';\nexport type { WriteModule } from './models/WriteModule';\nexport type { WriteResource } from './models/WriteResource';\nexport type { WriteSet } from './models/WriteSet';\nexport type { WriteSet_DirectWriteSet } from './models/WriteSet_DirectWriteSet';\nexport type { WriteSet_ScriptWriteSet } from './models/WriteSet_ScriptWriteSet';\nexport type { WriteSetChange } from './models/WriteSetChange';\nexport type { WriteSetChange_DeleteModule } from './models/WriteSetChange_DeleteModule';\nexport type { WriteSetChange_DeleteResource } from './models/WriteSetChange_DeleteResource';\nexport type { WriteSetChange_DeleteTableItem } from './models/WriteSetChange_DeleteTableItem';\nexport type { WriteSetChange_WriteModule } from './models/WriteSetChange_WriteModule';\nexport type { WriteSetChange_WriteResource } from './models/WriteSetChange_WriteResource';\nexport type { WriteSetChange_WriteTableItem } from './models/WriteSetChange_WriteTableItem';\nexport type { WriteSetPayload } from './models/WriteSetPayload';\nexport type { WriteTableItem } from './models/WriteTableItem';\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\n\n/**\n * These codes provide more granular error information beyond just the HTTP\n * status code of the response.\n */\nexport enum AptosErrorCode {\n    ACCOUNT_NOT_FOUND = 'account_not_found',\n    RESOURCE_NOT_FOUND = 'resource_not_found',\n    MODULE_NOT_FOUND = 'module_not_found',\n    STRUCT_FIELD_NOT_FOUND = 'struct_field_not_found',\n    VERSION_NOT_FOUND = 'version_not_found',\n    TRANSACTION_NOT_FOUND = 'transaction_not_found',\n    TABLE_ITEM_NOT_FOUND = 'table_item_not_found',\n    BLOCK_NOT_FOUND = 'block_not_found',\n    STATE_VALUE_NOT_FOUND = 'state_value_not_found',\n    VERSION_PRUNED = 'version_pruned',\n    BLOCK_PRUNED = 'block_pruned',\n    INVALID_INPUT = 'invalid_input',\n    INVALID_TRANSACTION_UPDATE = 'invalid_transaction_update',\n    SEQUENCE_NUMBER_TOO_OLD = 'sequence_number_too_old',\n    VM_ERROR = 'vm_error',\n    HEALTH_CHECK_FAILED = 'health_check_failed',\n    MEMPOOL_IS_FULL = 'mempool_is_full',\n    INTERNAL_ERROR = 'internal_error',\n    WEB_FRAMEWORK_ERROR = 'web_framework_error',\n    BCS_NOT_SUPPORTED = 'bcs_not_supported',\n    API_DISABLED = 'api_disabled',\n}\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\n\n/**\n * Move function visibility\n */\nexport enum MoveFunctionVisibility {\n    PRIVATE = 'private',\n    PUBLIC = 'public',\n    FRIEND = 'friend',\n}\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\n\nexport enum RoleType {\n    VALIDATOR = 'validator',\n    FULL_NODE = 'full_node',\n}\n","export type Maybe<T> = T | null;\nexport type InputMaybe<T> = Maybe<T>;\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\nexport type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };\nexport type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n  bigint: any;\n  jsonb: any;\n  numeric: any;\n  timestamp: any;\n  timestamptz: any;\n};\n\n/** Boolean expression to compare columns of type \"Boolean\". All fields are combined with logical 'AND'. */\nexport type Boolean_Comparison_Exp = {\n  _eq?: InputMaybe<Scalars['Boolean']>;\n  _gt?: InputMaybe<Scalars['Boolean']>;\n  _gte?: InputMaybe<Scalars['Boolean']>;\n  _in?: InputMaybe<Array<Scalars['Boolean']>>;\n  _is_null?: InputMaybe<Scalars['Boolean']>;\n  _lt?: InputMaybe<Scalars['Boolean']>;\n  _lte?: InputMaybe<Scalars['Boolean']>;\n  _neq?: InputMaybe<Scalars['Boolean']>;\n  _nin?: InputMaybe<Array<Scalars['Boolean']>>;\n};\n\n/** Boolean expression to compare columns of type \"Int\". All fields are combined with logical 'AND'. */\nexport type Int_Comparison_Exp = {\n  _eq?: InputMaybe<Scalars['Int']>;\n  _gt?: InputMaybe<Scalars['Int']>;\n  _gte?: InputMaybe<Scalars['Int']>;\n  _in?: InputMaybe<Array<Scalars['Int']>>;\n  _is_null?: InputMaybe<Scalars['Boolean']>;\n  _lt?: InputMaybe<Scalars['Int']>;\n  _lte?: InputMaybe<Scalars['Int']>;\n  _neq?: InputMaybe<Scalars['Int']>;\n  _nin?: InputMaybe<Array<Scalars['Int']>>;\n};\n\n/** Boolean expression to compare columns of type \"String\". All fields are combined with logical 'AND'. */\nexport type String_Comparison_Exp = {\n  _eq?: InputMaybe<Scalars['String']>;\n  _gt?: InputMaybe<Scalars['String']>;\n  _gte?: InputMaybe<Scalars['String']>;\n  /** does the column match the given case-insensitive pattern */\n  _ilike?: InputMaybe<Scalars['String']>;\n  _in?: InputMaybe<Array<Scalars['String']>>;\n  /** does the column match the given POSIX regular expression, case insensitive */\n  _iregex?: InputMaybe<Scalars['String']>;\n  _is_null?: InputMaybe<Scalars['Boolean']>;\n  /** does the column match the given pattern */\n  _like?: InputMaybe<Scalars['String']>;\n  _lt?: InputMaybe<Scalars['String']>;\n  _lte?: InputMaybe<Scalars['String']>;\n  _neq?: InputMaybe<Scalars['String']>;\n  /** does the column NOT match the given case-insensitive pattern */\n  _nilike?: InputMaybe<Scalars['String']>;\n  _nin?: InputMaybe<Array<Scalars['String']>>;\n  /** does the column NOT match the given POSIX regular expression, case insensitive */\n  _niregex?: InputMaybe<Scalars['String']>;\n  /** does the column NOT match the given pattern */\n  _nlike?: InputMaybe<Scalars['String']>;\n  /** does the column NOT match the given POSIX regular expression, case sensitive */\n  _nregex?: InputMaybe<Scalars['String']>;\n  /** does the column NOT match the given SQL regular expression */\n  _nsimilar?: InputMaybe<Scalars['String']>;\n  /** does the column match the given POSIX regular expression, case sensitive */\n  _regex?: InputMaybe<Scalars['String']>;\n  /** does the column match the given SQL regular expression */\n  _similar?: InputMaybe<Scalars['String']>;\n};\n\n/** columns and relationships of \"account_transactions\" */\nexport type Account_Transactions = {\n  __typename?: 'account_transactions';\n  account_address: Scalars['String'];\n  /** An array relationship */\n  coin_activities: Array<Coin_Activities>;\n  /** An aggregate relationship */\n  coin_activities_aggregate: Coin_Activities_Aggregate;\n  /** An array relationship */\n  delegated_staking_activities: Array<Delegated_Staking_Activities>;\n  /** An array relationship */\n  fungible_asset_activities: Array<Fungible_Asset_Activities>;\n  /** An array relationship */\n  token_activities: Array<Token_Activities>;\n  /** An aggregate relationship */\n  token_activities_aggregate: Token_Activities_Aggregate;\n  /** An array relationship */\n  token_activities_v2: Array<Token_Activities_V2>;\n  /** An aggregate relationship */\n  token_activities_v2_aggregate: Token_Activities_V2_Aggregate;\n  transaction_version: Scalars['bigint'];\n};\n\n\n/** columns and relationships of \"account_transactions\" */\nexport type Account_TransactionsCoin_ActivitiesArgs = {\n  distinct_on?: InputMaybe<Array<Coin_Activities_Select_Column>>;\n  limit?: InputMaybe<Scalars['Int']>;\n  offset?: InputMaybe<Scalars['Int']>;\n  order_by?: InputMaybe<Array<Coin_Activities_Order_By>>;\n  where?: InputMaybe<Coin_Activities_Bool_Exp>;\n};\n\n\n/** columns and relationships of \"account_transactions\" */\nexport type Account_TransactionsCoin_Activities_AggregateArgs = {\n  distinct_on?: InputMaybe<Array<Coin_Activities_Select_Column>>;\n  limit?: InputMaybe<Scalars['Int']>;\n  offset?: InputMaybe<Scalars['Int']>;\n  order_by?: InputMaybe<Array<Coin_Activities_Order_By>>;\n  where?: InputMaybe<Coin_Activities_Bool_Exp>;\n};\n\n\n/** columns and relationships of \"account_transactions\" */\nexport type Account_TransactionsDelegated_Staking_ActivitiesArgs = {\n  distinct_on?: InputMaybe<Array<Delegated_Staking_Activities_Select_Column>>;\n  limit?: InputMaybe<Scalars['Int']>;\n  offset?: InputMaybe<Scalars['Int']>;\n  order_by?: InputMaybe<Array<Delegated_Staking_Activities_Order_By>>;\n  where?: InputMaybe<Delegated_Staking_Activities_Bool_Exp>;\n};\n\n\n/** columns and relationships of \"account_transactions\" */\nexport type Account_TransactionsFungible_Asset_ActivitiesArgs = {\n  distinct_on?: InputMaybe<Array<Fungible_Asset_Activities_Select_Column>>;\n  limit?: InputMaybe<Scalars['Int']>;\n  offset?: InputMaybe<Scalars['Int']>;\n  order_by?: InputMaybe<Array<Fungible_Asset_Activities_Order_By>>;\n  where?: InputMaybe<Fungible_Asset_Activities_Bool_Exp>;\n};\n\n\n/** columns and relationships of \"account_transactions\" */\nexport type Account_TransactionsToken_ActivitiesArgs = {\n  distinct_on?: InputMaybe<Array<Token_Activities_Select_Column>>;\n  limit?: InputMaybe<Scalars['Int']>;\n  offset?: InputMaybe<Scalars['Int']>;\n  order_by?: InputMaybe<Array<Token_Activities_Order_By>>;\n  where?: InputMaybe<Token_Activities_Bool_Exp>;\n};\n\n\n/** columns and relationships of \"account_transactions\" */\nexport type Account_TransactionsToken_Activities_AggregateArgs = {\n  distinct_on?: InputMaybe<Array<Token_Activities_Select_Column>>;\n  limit?: InputMaybe<Scalars['Int']>;\n  offset?: InputMaybe<Scalars['Int']>;\n  order_by?: InputMaybe<Array<Token_Activities_Order_By>>;\n  where?: InputMaybe<Token_Activities_Bool_Exp>;\n};\n\n\n/** columns and relationships of \"account_transactions\" */\nexport type Account_TransactionsToken_Activities_V2Args = {\n  distinct_on?: InputMaybe<Array<Token_Activities_V2_Select_Column>>;\n  limit?: InputMaybe<Scalars['Int']>;\n  offset?: InputMaybe<Scalars['Int']>;\n  order_by?: InputMaybe<Array<Token_Activities_V2_Order_By>>;\n  where?: InputMaybe<Token_Activities_V2_Bool_Exp>;\n};\n\n\n/** columns and relationships of \"account_transactions\" */\nexport type Account_TransactionsToken_Activities_V2_AggregateArgs = {\n  distinct_on?: InputMaybe<Array<Token_Activities_V2_Select_Column>>;\n  limit?: InputMaybe<Scalars['Int']>;\n  offset?: InputMaybe<Scalars['Int']>;\n  order_by?: InputMaybe<Array<Token_Activities_V2_Order_By>>;\n  where?: InputMaybe<Token_Activities_V2_Bool_Exp>;\n};\n\n/** aggregated selection of \"account_transactions\" */\nexport type Account_Transactions_Aggregate = {\n  __typename?: 'account_transactions_aggregate';\n  aggregate?: Maybe<Account_Transactions_Aggregate_Fields>;\n  nodes: Array<Account_Transactions>;\n};\n\n/** aggregate fields of \"account_transactions\" */\nexport type Account_Transactions_Aggregate_Fields = {\n  __typename?: 'account_transactions_aggregate_fields';\n  avg?: Maybe<Account_Transactions_Avg_Fields>;\n  count: Scalars['Int'];\n  max?: Maybe<Account_Transactions_Max_Fields>;\n  min?: Maybe<Account_Transactions_Min_Fields>;\n  stddev?: Maybe<Account_Transactions_Stddev_Fields>;\n  stddev_pop?: Maybe<Account_Transactions_Stddev_Pop_Fields>;\n  stddev_samp?: Maybe<Account_Transactions_Stddev_Samp_Fields>;\n  sum?: Maybe<Account_Transactions_Sum_Fields>;\n  var_pop?: Maybe<Account_Transactions_Var_Pop_Fields>;\n  var_samp?: Maybe<Account_Transactions_Var_Samp_Fields>;\n  variance?: Maybe<Account_Transactions_Variance_Fields>;\n};\n\n\n/** aggregate fields of \"account_transactions\" */\nexport type Account_Transactions_Aggregate_FieldsCountArgs = {\n  columns?: InputMaybe<Array<Account_Transactions_Select_Column>>;\n  distinct?: InputMaybe<Scalars['Boolean']>;\n};\n\n/** aggregate avg on columns */\nexport type Account_Transactions_Avg_Fields = {\n  __typename?: 'account_transactions_avg_fields';\n  transaction_version?: Maybe<Scalars['Float']>;\n};\n\n/** Boolean expression to filter rows from the table \"account_transactions\". All fields are combined with a logical 'AND'. */\nexport type Account_Transactions_Bool_Exp = {\n  _and?: InputMaybe<Array<Account_Transactions_Bool_Exp>>;\n  _not?: InputMaybe<Account_Transactions_Bool_Exp>;\n  _or?: InputMaybe<Array<Account_Transactions_Bool_Exp>>;\n  account_address?: InputMaybe<String_Comparison_Exp>;\n  coin_activities?: InputMaybe<Coin_Activities_Bool_Exp>;\n  delegated_staking_activities?: InputMaybe<Delegated_Staking_Activities_Bool_Exp>;\n  fungible_asset_activities?: InputMaybe<Fungible_Asset_Activities_Bool_Exp>;\n  token_activities?: InputMaybe<Token_Activities_Bool_Exp>;\n  token_activities_v2?: InputMaybe<Token_Activities_V2_Bool_Exp>;\n  transaction_version?: InputMaybe<Bigint_Comparison_Exp>;\n};\n\n/** aggregate max on columns */\nexport type Account_Transactions_Max_Fields = {\n  __typename?: 'account_transactions_max_fields';\n  account_address?: Maybe<Scalars['String']>;\n  transaction_version?: Maybe<Scalars['bigint']>;\n};\n\n/** aggregate min on columns */\nexport type Account_Transactions_Min_Fields = {\n  __typename?: 'account_transactions_min_fields';\n  account_address?: Maybe<Scalars['String']>;\n  transaction_version?: Maybe<Scalars['bigint']>;\n};\n\n/** Ordering options when selecting data from \"account_transactions\". */\nexport type Account_Transactions_Order_By = {\n  account_address?: InputMaybe<Order_By>;\n  coin_activities_aggregate?: InputMaybe<Coin_Activities_Aggregate_Order_By>;\n  delegated_staking_activities_aggregate?: InputMaybe<Delegated_Staking_Activities_Aggregate_Order_By>;\n  fungible_asset_activities_aggregate?: InputMaybe<Fungible_Asset_Activities_Aggregate_Order_By>;\n  token_activities_aggregate?: InputMaybe<Token_Activities_Aggregate_Order_By>;\n  token_activities_v2_aggregate?: InputMaybe<Token_Activities_V2_Aggregate_Order_By>;\n  transaction_version?: InputMaybe<Order_By>;\n};\n\n/** select columns of table \"account_transactions\" */\nexport enum Account_Transactions_Select_Column {\n  /** column name */\n  AccountAddress = 'account_address',\n  /** column name */\n  TransactionVersion = 'transaction_version'\n}\n\n/** aggregate stddev on columns */\nexport type Account_Transactions_Stddev_Fields = {\n  __typename?: 'account_transactions_stddev_fields';\n  transaction_version?: Maybe<Scalars['Float']>;\n};\n\n/** aggregate stddev_pop on columns */\nexport type Account_Transactions_Stddev_Pop_Fields = {\n  __typename?: 'account_transactions_stddev_pop_fields';\n  transaction_version?: Maybe<Scalars['Float']>;\n};\n\n/** aggregate stddev_samp on columns */\nexport type Account_Transactions_Stddev_Samp_Fields = {\n  __typename?: 'account_transactions_stddev_samp_fields';\n  transaction_version?: Maybe<Scalars['Float']>;\n};\n\n/** Streaming cursor of the table \"account_transactions\" */\nexport type Account_Transactions_Stream_Cursor_Input = {\n  /** Stream column input with initial value */\n  initial_value: Account_Transactions_Stream_Cursor_Value_Input;\n  /** cursor ordering */\n  ordering?: InputMaybe<Cursor_Ordering>;\n};\n\n/** Initial value of the column from where the streaming should start */\nexport type Account_Transactions_Stream_Cursor_Value_Input = {\n  account_address?: InputMaybe<Scalars['String']>;\n  transaction_version?: InputMaybe<Scalars['bigint']>;\n};\n\n/** aggregate sum on columns */\nexport type Account_Transactions_Sum_Fields = {\n  __typename?: 'account_transactions_sum_fields';\n  transaction_version?: Maybe<Scalars['bigint']>;\n};\n\n/** aggregate var_pop on columns */\nexport type Account_Transactions_Var_Pop_Fields = {\n  __typename?: 'account_transactions_var_pop_fields';\n  transaction_version?: Maybe<Scalars['Float']>;\n};\n\n/** aggregate var_samp on columns */\nexport type Account_Transactions_Var_Samp_Fields = {\n  __typename?: 'account_transactions_var_samp_fields';\n  transaction_version?: Maybe<Scalars['Float']>;\n};\n\n/** aggregate variance on columns */\nexport type Account_Transactions_Variance_Fields = {\n  __typename?: 'account_transactions_variance_fields';\n  transaction_version?: Maybe<Scalars['Float']>;\n};\n\n/** columns and relationships of \"address_events_summary\" */\nexport type Address_Events_Summary = {\n  __typename?: 'address_events_summary';\n  account_address?: Maybe<Scalars['String']>;\n  /** An object relationship */\n  block_metadata?: Maybe<Block_Metadata_Transactions>;\n  min_block_height?: Maybe<Scalars['bigint']>;\n  num_distinct_versions?: Maybe<Scalars['bigint']>;\n};\n\n/** Boolean expression to filter rows from the table \"address_events_summary\". All fields are combined with a logical 'AND'. */\nexport type Address_Events_Summary_Bool_Exp = {\n  _and?: InputMaybe<Array<Address_Events_Summary_Bool_Exp>>;\n  _not?: InputMaybe<Address_Events_Summary_Bool_Exp>;\n  _or?: InputMaybe<Array<Address_Events_Summary_Bool_Exp>>;\n  account_address?: InputMaybe<String_Comparison_Exp>;\n  block_metadata?: InputMaybe<Block_Metadata_Transactions_Bool_Exp>;\n  min_block_height?: InputMaybe<Bigint_Comparison_Exp>;\n  num_distinct_versions?: InputMaybe<Bigint_Comparison_Exp>;\n};\n\n/** Ordering options when selecting data from \"address_events_summary\". */\nexport type Address_Events_Summary_Order_By = {\n  account_address?: InputMaybe<Order_By>;\n  block_metadata?: InputMaybe<Block_Metadata_Transactions_Order_By>;\n  min_block_height?: InputMaybe<Order_By>;\n  num_distinct_versions?: InputMaybe<Order_By>;\n};\n\n/** select columns of table \"address_events_summary\" */\nexport enum Address_Events_Summary_Select_Column {\n  /** column name */\n  AccountAddress = 'account_address',\n  /** column name */\n  MinBlockHeight = 'min_block_height',\n  /** column name */\n  NumDistinctVersions = 'num_distinct_versions'\n}\n\n/** Streaming cursor of the table \"address_events_summary\" */\nexport type Address_Events_Summary_Stream_Cursor_Input = {\n  /** Stream column input with initial value */\n  initial_value: Address_Events_Summary_Stream_Cursor_Value_Input;\n  /** cursor ordering */\n  ordering?: InputMaybe<Cursor_Ordering>;\n};\n\n/** Initial value of the column from where the streaming should start */\nexport type Address_Events_Summary_Stream_Cursor_Value_Input = {\n  account_address?: InputMaybe<Scalars['String']>;\n  min_block_height?: InputMaybe<Scalars['bigint']>;\n  num_distinct_versions?: InputMaybe<Scalars['bigint']>;\n};\n\n/** columns and relationships of \"address_version_from_events\" */\nexport type Address_Version_From_Events = {\n  __typename?: 'address_version_from_events';\n  account_address?: Maybe<Scalars['String']>;\n  /** An array relationship */\n  coin_activities: Array<Coin_Activities>;\n  /** An aggregate relationship */\n  coin_activities_aggregate: Coin_Activities_Aggregate;\n  /** An array relationship */\n  delegated_staking_activities: Array<Delegated_Staking_Activities>;\n  /** An array relationship */\n  token_activities: Array<Token_Activities>;\n  /** An aggregate relationship */\n  token_activities_aggregate: Token_Activities_Aggregate;\n  /** An array relationship */\n  token_activities_v2: Array<Token_Activities_V2>;\n  /** An aggregate relationship */\n  token_activities_v2_aggregate: Token_Activities_V2_Aggregate;\n  transaction_version?: Maybe<Scalars['bigint']>;\n};\n\n\n/** columns and relationships of \"address_version_from_events\" */\nexport type Address_Version_From_EventsCoin_ActivitiesArgs = {\n  distinct_on?: InputMaybe<Array<Coin_Activities_Select_Column>>;\n  limit?: InputMaybe<Scalars['Int']>;\n  offset?: InputMaybe<Scalars['Int']>;\n  order_by?: InputMaybe<Array<Coin_Activities_Order_By>>;\n  where?: InputMaybe<Coin_Activities_Bool_Exp>;\n};\n\n\n/** columns and relationships of \"address_version_from_events\" */\nexport type Address_Version_From_EventsCoin_Activities_AggregateArgs = {\n  distinct_on?: InputMaybe<Array<Coin_Activities_Select_Column>>;\n  limit?: InputMaybe<Scalars['Int']>;\n  offset?: InputMaybe<Scalars['Int']>;\n  order_by?: InputMaybe<Array<Coin_Activities_Order_By>>;\n  where?: InputMaybe<Coin_Activities_Bool_Exp>;\n};\n\n\n/** columns and relationships of \"address_version_from_events\" */\nexport type Address_Version_From_EventsDelegated_Staking_ActivitiesArgs = {\n  distinct_on?: InputMaybe<Array<Delegated_Staking_Activities_Select_Column>>;\n  limit?: InputMaybe<Scalars['Int']>;\n  offset?: InputMaybe<Scalars['Int']>;\n  order_by?: InputMaybe<Array<Delegated_Staking_Activities_Order_By>>;\n  where?: InputMaybe<Delegated_Staking_Activities_Bool_Exp>;\n};\n\n\n/** columns and relationships of \"address_version_from_events\" */\nexport type Address_Version_From_EventsToken_ActivitiesArgs = {\n  distinct_on?: InputMaybe<Array<Token_Activities_Select_Column>>;\n  limit?: InputMaybe<Scalars['Int']>;\n  offset?: InputMaybe<Scalars['Int']>;\n  order_by?: InputMaybe<Array<Token_Activities_Order_By>>;\n  where?: InputMaybe<Token_Activities_Bool_Exp>;\n};\n\n\n/** columns and relationships of \"address_version_from_events\" */\nexport type Address_Version_From_EventsToken_Activities_AggregateArgs = {\n  distinct_on?: InputMaybe<Array<Token_Activities_Select_Column>>;\n  limit?: InputMaybe<Scalars['Int']>;\n  offset?: InputMaybe<Scalars['Int']>;\n  order_by?: InputMaybe<Array<Token_Activities_Order_By>>;\n  where?: InputMaybe<Token_Activities_Bool_Exp>;\n};\n\n\n/** columns and relationships of \"address_version_from_events\" */\nexport type Address_Version_From_EventsToken_Activities_V2Args = {\n  distinct_on?: InputMaybe<Array<Token_Activities_V2_Select_Column>>;\n  limit?: InputMaybe<Scalars['Int']>;\n  offset?: InputMaybe<Scalars['Int']>;\n  order_by?: InputMaybe<Array<Token_Activities_V2_Order_By>>;\n  where?: InputMaybe<Token_Activities_V2_Bool_Exp>;\n};\n\n\n/** columns and relationships of \"address_version_from_events\" */\nexport type Address_Version_From_EventsToken_Activities_V2_AggregateArgs = {\n  distinct_on?: InputMaybe<Array<Token_Activities_V2_Select_Column>>;\n  limit?: InputMaybe<Scalars['Int']>;\n  offset?: InputMaybe<Scalars['Int']>;\n  order_by?: InputMaybe<Array<Token_Activities_V2_Order_By>>;\n  where?: InputMaybe<Token_Activities_V2_Bool_Exp>;\n};\n\n/** aggregated selection of \"address_version_from_events\" */\nexport type Address_Version_From_Events_Aggregate = {\n  __typename?: 'address_version_from_events_aggregate';\n  aggregate?: Maybe<Address_Version_From_Events_Aggregate_Fields>;\n  nodes: Array<Address_Version_From_Events>;\n};\n\n/** aggregate fields of \"address_version_from_events\" */\nexport type Address_Version_From_Events_Aggregate_Fields = {\n  __typename?: 'address_version_from_events_aggregate_fields';\n  avg?: Maybe<Address_Version_From_Events_Avg_Fields>;\n  count: Scalars['Int'];\n  max?: Maybe<Address_Version_From_Events_Max_Fields>;\n  min?: Maybe<Address_Version_From_Events_Min_Fields>;\n  stddev?: Maybe<Address_Version_From_Events_Stddev_Fields>;\n  stddev_pop?: Maybe<Address_Version_From_Events_Stddev_Pop_Fields>;\n  stddev_samp?: Maybe<Address_Version_From_Events_Stddev_Samp_Fields>;\n  sum?: Maybe<Address_Version_From_Events_Sum_Fields>;\n  var_pop?: Maybe<Address_Version_From_Events_Var_Pop_Fields>;\n  var_samp?: Maybe<Address_Version_From_Events_Var_Samp_Fields>;\n  variance?: Maybe<Address_Version_From_Events_Variance_Fields>;\n};\n\n\n/** aggregate fields of \"address_version_from_events\" */\nexport type Address_Version_From_Events_Aggregate_FieldsCountArgs = {\n  columns?: InputMaybe<Array<Address_Version_From_Events_Select_Column>>;\n  distinct?: InputMaybe<Scalars['Boolean']>;\n};\n\n/** aggregate avg on columns */\nexport type Address_Version_From_Events_Avg_Fields = {\n  __typename?: 'address_version_from_events_avg_fields';\n  transaction_version?: Maybe<Scalars['Float']>;\n};\n\n/** Boolean expression to filter rows from the table \"address_version_from_events\". All fields are combined with a logical 'AND'. */\nexport type Address_Version_From_Events_Bool_Exp = {\n  _and?: InputMaybe<Array<Address_Version_From_Events_Bool_Exp>>;\n  _not?: InputMaybe<Address_Version_From_Events_Bool_Exp>;\n  _or?: InputMaybe<Array<Address_Version_From_Events_Bool_Exp>>;\n  account_address?: InputMaybe<String_Comparison_Exp>;\n  coin_activities?: InputMaybe<Coin_Activities_Bool_Exp>;\n  delegated_staking_activities?: InputMaybe<Delegated_Staking_Activities_Bool_Exp>;\n  token_activities?: InputMaybe<Token_Activities_Bool_Exp>;\n  token_activities_v2?: InputMaybe<Token_Activities_V2_Bool_Exp>;\n  transaction_version?: InputMaybe<Bigint_Comparison_Exp>;\n};\n\n/** aggregate max on columns */\nexport type Address_Version_From_Events_Max_Fields = {\n  __typename?: 'address_version_from_events_max_fields';\n  account_address?: Maybe<Scalars['String']>;\n  transaction_version?: Maybe<Scalars['bigint']>;\n};\n\n/** aggregate min on columns */\nexport type Address_Version_From_Events_Min_Fields = {\n  __typename?: 'address_version_from_events_min_fields';\n  account_address?: Maybe<Scalars['String']>;\n  transaction_version?: Maybe<Scalars['bigint']>;\n};\n\n/** Ordering options when selecting data from \"address_version_from_events\". */\nexport type Address_Version_From_Events_Order_By = {\n  account_address?: InputMaybe<Order_By>;\n  coin_activities_aggregate?: InputMaybe<Coin_Activities_Aggregate_Order_By>;\n  delegated_staking_activities_aggregate?: InputMaybe<Delegated_Staking_Activities_Aggregate_Order_By>;\n  token_activities_aggregate?: InputMaybe<Token_Activities_Aggregate_Order_By>;\n  token_activities_v2_aggregate?: InputMaybe<Token_Activities_V2_Aggregate_Order_By>;\n  transaction_version?: InputMaybe<Order_By>;\n};\n\n/** select columns of table \"address_version_from_events\" */\nexport enum Address_Version_From_Events_Select_Column {\n  /** column name */\n  AccountAddress = 'account_address',\n  /** column name */\n  TransactionVersion = 'transaction_version'\n}\n\n/** aggregate stddev on columns */\nexport type Address_Version_From_Events_Stddev_Fields = {\n  __typename?: 'address_version_from_events_stddev_fields';\n  transaction_version?: Maybe<Scalars['Float']>;\n};\n\n/** aggregate stddev_pop on columns */\nexport type Address_Version_From_Events_Stddev_Pop_Fields = {\n  __typename?: 'address_version_from_events_stddev_pop_fields';\n  transaction_version?: Maybe<Scalars['Float']>;\n};\n\n/** aggregate stddev_samp on columns */\nexport type Address_Version_From_Events_Stddev_Samp_Fields = {\n  __typename?: 'address_version_from_events_stddev_samp_fields';\n  transaction_version?: Maybe<Scalars['Float']>;\n};\n\n/** Streaming cursor of the table \"address_version_from_events\" */\nexport type Address_Version_From_Events_Stream_Cursor_Input = {\n  /** Stream column input with initial value */\n  initial_value: Address_Version_From_Events_Stream_Cursor_Value_Input;\n  /** cursor ordering */\n  ordering?: InputMaybe<Cursor_Ordering>;\n};\n\n/** Initial value of the column from where the streaming should start */\nexport type Address_Version_From_Events_Stream_Cursor_Value_Input = {\n  account_address?: InputMaybe<Scalars['String']>;\n  transaction_version?: InputMaybe<Scalars['bigint']>;\n};\n\n/** aggregate sum on columns */\nexport type Address_Version_From_Events_Sum_Fields = {\n  __typename?: 'address_version_from_events_sum_fields';\n  transaction_version?: Maybe<Scalars['bigint']>;\n};\n\n/** aggregate var_pop on columns */\nexport type Address_Version_From_Events_Var_Pop_Fields = {\n  __typename?: 'address_version_from_events_var_pop_fields';\n  transaction_version?: Maybe<Scalars['Float']>;\n};\n\n/** aggregate var_samp on columns */\nexport type Address_Version_From_Events_Var_Samp_Fields = {\n  __typename?: 'address_version_from_events_var_samp_fields';\n  transaction_version?: Maybe<Scalars['Float']>;\n};\n\n/** aggregate variance on columns */\nexport type Address_Version_From_Events_Variance_Fields = {\n  __typename?: 'address_version_from_events_variance_fields';\n  transaction_version?: Maybe<Scalars['Float']>;\n};\n\n/** columns and relationships of \"address_version_from_move_resources\" */\nexport type Address_Version_From_Move_Resources = {\n  __typename?: 'address_version_from_move_resources';\n  address?: Maybe<Scalars['String']>;\n  /** An array relationship */\n  coin_activities: Array<Coin_Activities>;\n  /** An aggregate relationship */\n  coin_activities_aggregate: Coin_Activities_Aggregate;\n  /** An array relationship */\n  delegated_staking_activities: Array<Delegated_Staking_Activities>;\n  /** An array relationship */\n  token_activities: Array<Token_Activities>;\n  /** An aggregate relationship */\n  token_activities_aggregate: Token_Activities_Aggregate;\n  /** An array relationship */\n  token_activities_v2: Array<Token_Activities_V2>;\n  /** An aggregate relationship */\n  token_activities_v2_aggregate: Token_Activities_V2_Aggregate;\n  transaction_version?: Maybe<Scalars['bigint']>;\n};\n\n\n/** columns and relationships of \"address_version_from_move_resources\" */\nexport type Address_Version_From_Move_ResourcesCoin_ActivitiesArgs = {\n  distinct_on?: InputMaybe<Array<Coin_Activities_Select_Column>>;\n  limit?: InputMaybe<Scalars['Int']>;\n  offset?: InputMaybe<Scalars['Int']>;\n  order_by?: InputMaybe<Array<Coin_Activities_Order_By>>;\n  where?: InputMaybe<Coin_Activities_Bool_Exp>;\n};\n\n\n/** columns and relationships of \"address_version_from_move_resources\" */\nexport type Address_Version_From_Move_ResourcesCoin_Activities_AggregateArgs = {\n  distinct_on?: InputMaybe<Array<Coin_Activities_Select_Column>>;\n  limit?: InputMaybe<Scalars['Int']>;\n  offset?: InputMaybe<Scalars['Int']>;\n  order_by?: InputMaybe<Array<Coin_Activities_Order_By>>;\n  where?: InputMaybe<Coin_Activities_Bool_Exp>;\n};\n\n\n/** columns and relationships of \"address_version_from_move_resources\" */\nexport type Address_Version_From_Move_ResourcesDelegated_Staking_ActivitiesArgs = {\n  distinct_on?: InputMaybe<Array<Delegated_Staking_Activities_Select_Column>>;\n  limit?: InputMaybe<Scalars['Int']>;\n  offset?: InputMaybe<Scalars['Int']>;\n  order_by?: InputMaybe<Array<Delegated_Staking_Activities_Order_By>>;\n  where?: InputMaybe<Delegated_Staking_Activities_Bool_Exp>;\n};\n\n\n/** columns and relationships of \"address_version_from_move_resources\" */\nexport type Address_Version_From_Move_ResourcesToken_ActivitiesArgs = {\n  distinct_on?: InputMaybe<Array<Token_Activities_Select_Column>>;\n  limit?: InputMaybe<Scalars['Int']>;\n  offset?: InputMaybe<Scalars['Int']>;\n  order_by?: InputMaybe<Array<Token_Activities_Order_By>>;\n  where?: InputMaybe<Token_Activities_Bool_Exp>;\n};\n\n\n/** columns and relationships of \"address_version_from_move_resources\" */\nexport type Address_Version_From_Move_ResourcesToken_Activities_AggregateArgs = {\n  distinct_on?: InputMaybe<Array<Token_Activities_Select_Column>>;\n  limit?: InputMaybe<Scalars['Int']>;\n  offset?: InputMaybe<Scalars['Int']>;\n  order_by?: InputMaybe<Array<Token_Activities_Order_By>>;\n  where?: InputMaybe<Token_Activities_Bool_Exp>;\n};\n\n\n/** columns and relationships of \"address_version_from_move_resources\" */\nexport type Address_Version_From_Move_ResourcesToken_Activities_V2Args = {\n  distinct_on?: InputMaybe<Array<Token_Activities_V2_Select_Column>>;\n  limit?: InputMaybe<Scalars['Int']>;\n  offset?: InputMaybe<Scalars['Int']>;\n  order_by?: InputMaybe<Array<Token_Activities_V2_Order_By>>;\n  where?: InputMaybe<Token_Activities_V2_Bool_Exp>;\n};\n\n\n/** columns and relationships of \"address_version_from_move_resources\" */\nexport type Address_Version_From_Move_ResourcesToken_Activities_V2_AggregateArgs = {\n  distinct_on?: InputMaybe<Array<Token_Activities_V2_Select_Column>>;\n  limit?: InputMaybe<Scalars['Int']>;\n  offset?: InputMaybe<Scalars['Int']>;\n  order_by?: InputMaybe<Array<Token_Activities_V2_Order_By>>;\n  where?: InputMaybe<Token_Activities_V2_Bool_Exp>;\n};\n\n/** aggregated selection of \"address_version_from_move_resources\" */\nexport type Address_Version_From_Move_Resources_Aggregate = {\n  __typename?: 'address_version_from_move_resources_aggregate';\n  aggregate?: Maybe<Address_Version_From_Move_Resources_Aggregate_Fields>;\n  nodes: Array<Address_Version_From_Move_Resources>;\n};\n\n/** aggregate fields of \"address_version_from_move_resources\" */\nexport type Address_Version_From_Move_Resources_Aggregate_Fields = {\n  __typename?: 'address_version_from_move_resources_aggregate_fields';\n  avg?: Maybe<Address_Version_From_Move_Resources_Avg_Fields>;\n  count: Scalars['Int'];\n  max?: Maybe<Address_Version_From_Move_Resources_Max_Fields>;\n  min?: Maybe<Address_Version_From_Move_Resources_Min_Fields>;\n  stddev?: Maybe<Address_Version_From_Move_Resources_Stddev_Fields>;\n  stddev_pop?: Maybe<Address_Version_From_Move_Resources_Stddev_Pop_Fields>;\n  stddev_samp?: Maybe<Address_Version_From_Move_Resources_Stddev_Samp_Fields>;\n  sum?: Maybe<Address_Version_From_Move_Resources_Sum_Fields>;\n  var_pop?: Maybe<Address_Version_From_Move_Resources_Var_Pop_Fields>;\n  var_samp?: Maybe<Address_Version_From_Move_Resources_Var_Samp_Fields>;\n  variance?: Maybe<Address_Version_From_Move_Resources_Variance_Fields>;\n};\n\n\n/** aggregate fields of \"address_version_from_move_resources\" */\nexport type Address_Version_From_Move_Resources_Aggregate_FieldsCountArgs = {\n  columns?: InputMaybe<Array<Address_Version_From_Move_Resources_Select_Column>>;\n  distinct?: InputMaybe<Scalars['Boolean']>;\n};\n\n/** aggregate avg on columns */\nexport type Address_Version_From_Move_Resources_Avg_Fields = {\n  __typename?: 'address_version_from_move_resources_avg_fields';\n  transaction_version?: Maybe<Scalars['Float']>;\n};\n\n/** Boolean expression to filter rows from the table \"address_version_from_move_resources\". All fields are combined with a logical 'AND'. */\nexport type Address_Version_From_Move_Resources_Bool_Exp = {\n  _and?: InputMaybe<Array<Address_Version_From_Move_Resources_Bool_Exp>>;\n  _not?: InputMaybe<Address_Version_From_Move_Resources_Bool_Exp>;\n  _or?: InputMaybe<Array<Address_Version_From_Move_Resources_Bool_Exp>>;\n  address?: InputMaybe<String_Comparison_Exp>;\n  coin_activities?: InputMaybe<Coin_Activities_Bool_Exp>;\n  delegated_staking_activities?: InputMaybe<Delegated_Staking_Activities_Bool_Exp>;\n  token_activities?: InputMaybe<Token_Activities_Bool_Exp>;\n  token_activities_v2?: InputMaybe<Token_Activities_V2_Bool_Exp>;\n  transaction_version?: InputMaybe<Bigint_Comparison_Exp>;\n};\n\n/** aggregate max on columns */\nexport type Address_Version_From_Move_Resources_Max_Fields = {\n  __typename?: 'address_version_from_move_resources_max_fields';\n  address?: Maybe<Scalars['String']>;\n  transaction_version?: Maybe<Scalars['bigint']>;\n};\n\n/** aggregate min on columns */\nexport type Address_Version_From_Move_Resources_Min_Fields = {\n  __typename?: 'address_version_from_move_resources_min_fields';\n  address?: Maybe<Scalars['String']>;\n  transaction_version?: Maybe<Scalars['bigint']>;\n};\n\n/** Ordering options when selecting data from \"address_version_from_move_resources\". */\nexport type Address_Version_From_Move_Resources_Order_By = {\n  address?: InputMaybe<Order_By>;\n  coin_activities_aggregate?: InputMaybe<Coin_Activities_Aggregate_Order_By>;\n  delegated_staking_activities_aggregate?: InputMaybe<Delegated_Staking_Activities_Aggregate_Order_By>;\n  token_activities_aggregate?: InputMaybe<Token_Activities_Aggregate_Order_By>;\n  token_activities_v2_aggregate?: InputMaybe<Token_Activities_V2_Aggregate_Order_By>;\n  transaction_version?: InputMaybe<Order_By>;\n};\n\n/** select columns of table \"address_version_from_move_resources\" */\nexport enum Address_Version_From_Move_Resources_Select_Column {\n  /** column name */\n  Address = 'address',\n  /** column name */\n  TransactionVersion = 'transaction_version'\n}\n\n/** aggregate stddev on columns */\nexport type Address_Version_From_Move_Resources_Stddev_Fields = {\n  __typename?: 'address_version_from_move_resources_stddev_fields';\n  transaction_version?: Maybe<Scalars['Float']>;\n};\n\n/** aggregate stddev_pop on columns */\nexport type Address_Version_From_Move_Resources_Stddev_Pop_Fields = {\n  __typename?: 'address_version_from_move_resources_stddev_pop_fields';\n  transaction_version?: Maybe<Scalars['Float']>;\n};\n\n/** aggregate stddev_samp on columns */\nexport type Address_Version_From_Move_Resources_Stddev_Samp_Fields = {\n  __typename?: 'address_version_from_move_resources_stddev_samp_fields';\n  transaction_version?: Maybe<Scalars['Float']>;\n};\n\n/** Streaming cursor of the table \"address_version_from_move_resources\" */\nexport type Address_Version_From_Move_Resources_Stream_Cursor_Input = {\n  /** Stream column input with initial value */\n  initial_value: Address_Version_From_Move_Resources_Stream_Cursor_Value_Input;\n  /** cursor ordering */\n  ordering?: InputMaybe<Cursor_Ordering>;\n};\n\n/** Initial value of the column from where the streaming should start */\nexport type Address_Version_From_Move_Resources_Stream_Cursor_Value_Input = {\n  address?: InputMaybe<Scalars['String']>;\n  transaction_version?: InputMaybe<Scalars['bigint']>;\n};\n\n/** aggregate sum on columns */\nexport type Address_Version_From_Move_Resources_Sum_Fields = {\n  __typename?: 'address_version_from_move_resources_sum_fields';\n  transaction_version?: Maybe<Scalars['bigint']>;\n};\n\n/** aggregate var_pop on columns */\nexport type Address_Version_From_Move_Resources_Var_Pop_Fields = {\n  __typename?: 'address_version_from_move_resources_var_pop_fields';\n  transaction_version?: Maybe<Scalars['Float']>;\n};\n\n/** aggregate var_samp on columns */\nexport type Address_Version_From_Move_Resources_Var_Samp_Fields = {\n  __typename?: 'address_version_from_move_resources_var_samp_fields';\n  transaction_version?: Maybe<Scalars['Float']>;\n};\n\n/** aggregate variance on columns */\nexport type Address_Version_From_Move_Resources_Variance_Fields = {\n  __typename?: 'address_version_from_move_resources_variance_fields';\n  transaction_version?: Maybe<Scalars['Float']>;\n};\n\n/** Boolean expression to compare columns of type \"bigint\". All fields are combined with logical 'AND'. */\nexport type Bigint_Comparison_Exp = {\n  _eq?: InputMaybe<Scalars['bigint']>;\n  _gt?: InputMaybe<Scalars['bigint']>;\n  _gte?: InputMaybe<Scalars['bigint']>;\n  _in?: InputMaybe<Array<Scalars['bigint']>>;\n  _is_null?: InputMaybe<Scalars['Boolean']>;\n  _lt?: InputMaybe<Scalars['bigint']>;\n  _lte?: InputMaybe<Scalars['bigint']>;\n  _neq?: InputMaybe<Scalars['bigint']>;\n  _nin?: InputMaybe<Array<Scalars['bigint']>>;\n};\n\n/** columns and relationships of \"block_metadata_transactions\" */\nexport type Block_Metadata_Transactions = {\n  __typename?: 'block_metadata_transactions';\n  block_height: Scalars['bigint'];\n  epoch: Scalars['bigint'];\n  failed_proposer_indices: Scalars['jsonb'];\n  id: Scalars['String'];\n  previous_block_votes_bitvec: Scalars['jsonb'];\n  proposer: Scalars['String'];\n  round: Scalars['bigint'];\n  timestamp: Scalars['timestamp'];\n  version: Scalars['bigint'];\n};\n\n\n/** columns and relationships of \"block_metadata_transactions\" */\nexport type Block_Metadata_TransactionsFailed_Proposer_IndicesArgs = {\n  path?: InputMaybe<Scalars['String']>;\n};\n\n\n/** columns and relationships of \"block_metadata_transactions\" */\nexport type Block_Metadata_TransactionsPrevious_Block_Votes_BitvecArgs = {\n  path?: InputMaybe<Scalars['String']>;\n};\n\n/** Boolean expression to filter rows from the table \"block_metadata_transactions\". All fields are combined with a logical 'AND'. */\nexport type Block_Metadata_Transactions_Bool_Exp = {\n  _and?: InputMaybe<Array<Block_Metadata_Transactions_Bool_Exp>>;\n  _not?: InputMaybe<Block_Metadata_Transactions_Bool_Exp>;\n  _or?: InputMaybe<Array<Block_Metadata_Transactions_Bool_Exp>>;\n  block_height?: InputMaybe<Bigint_Comparison_Exp>;\n  epoch?: InputMaybe<Bigint_Comparison_Exp>;\n  failed_proposer_indices?: InputMaybe<Jsonb_Comparison_Exp>;\n  id?: InputMaybe<String_Comparison_Exp>;\n  previous_block_votes_bitvec?: InputMaybe<Jsonb_Comparison_Exp>;\n  proposer?: InputMaybe<String_Comparison_Exp>;\n  round?: InputMaybe<Bigint_Comparison_Exp>;\n  timestamp?: InputMaybe<Timestamp_Comparison_Exp>;\n  version?: InputMaybe<Bigint_Comparison_Exp>;\n};\n\n/** Ordering options when selecting data from \"block_metadata_transactions\". */\nexport type Block_Metadata_Transactions_Order_By = {\n  block_height?: InputMaybe<Order_By>;\n  epoch?: InputMaybe<Order_By>;\n  failed_proposer_indices?: InputMaybe<Order_By>;\n  id?: InputMaybe<Order_By>;\n  previous_block_votes_bitvec?: InputMaybe<Order_By>;\n  proposer?: InputMaybe<Order_By>;\n  round?: InputMaybe<Order_By>;\n  timestamp?: InputMaybe<Order_By>;\n  version?: InputMaybe<Order_By>;\n};\n\n/** select columns of table \"block_metadata_transactions\" */\nexport enum Block_Metadata_Transactions_Select_Column {\n  /** column name */\n  BlockHeight = 'block_height',\n  /** column name */\n  Epoch = 'epoch',\n  /** column name */\n  FailedProposerIndices = 'failed_proposer_indices',\n  /** column name */\n  Id = 'id',\n  /** column name */\n  PreviousBlockVotesBitvec = 'previous_block_votes_bitvec',\n  /** column name */\n  Proposer = 'proposer',\n  /** column name */\n  Round = 'round',\n  /** column name */\n  Timestamp = 'timestamp',\n  /** column name */\n  Version = 'version'\n}\n\n/** Streaming cursor of the table \"block_metadata_transactions\" */\nexport type Block_Metadata_Transactions_Stream_Cursor_Input = {\n  /** Stream column input with initial value */\n  initial_value: Block_Metadata_Transactions_Stream_Cursor_Value_Input;\n  /** cursor ordering */\n  ordering?: InputMaybe<Cursor_Ordering>;\n};\n\n/** Initial value of the column from where the streaming should start */\nexport type Block_Metadata_Transactions_Stream_Cursor_Value_Input = {\n  block_height?: InputMaybe<Scalars['bigint']>;\n  epoch?: InputMaybe<Scalars['bigint']>;\n  failed_proposer_indices?: InputMaybe<Scalars['jsonb']>;\n  id?: InputMaybe<Scalars['String']>;\n  previous_block_votes_bitvec?: InputMaybe<Scalars['jsonb']>;\n  proposer?: InputMaybe<Scalars['String']>;\n  round?: InputMaybe<Scalars['bigint']>;\n  timestamp?: InputMaybe<Scalars['timestamp']>;\n  version?: InputMaybe<Scalars['bigint']>;\n};\n\n/** columns and relationships of \"coin_activities\" */\nexport type Coin_Activities = {\n  __typename?: 'coin_activities';\n  activity_type: Scalars['String'];\n  amount: Scalars['numeric'];\n  /** An array relationship */\n  aptos_names: Array<Current_Aptos_Names>;\n  block_height: Scalars['bigint'];\n  /** An object relationship */\n  coin_info?: Maybe<Coin_Infos>;\n  coin_type: Scalars['String'];\n  entry_function_id_str?: Maybe<Scalars['String']>;\n  event_account_address: Scalars['String'];\n  event_creation_number: Scalars['bigint'];\n  event_index?: Maybe<Scalars['bigint']>;\n  event_sequence_number: Scalars['bigint'];\n  is_gas_fee: Scalars['Boolean'];\n  is_transaction_success: Scalars['Boolean'];\n  owner_address: Scalars['String'];\n  transaction_timestamp: Scalars['timestamp'];\n  transaction_version: Scalars['bigint'];\n};\n\n\n/** columns and relationships of \"coin_activities\" */\nexport type Coin_ActivitiesAptos_NamesArgs = {\n  distinct_on?: InputMaybe<Array<Current_Aptos_Names_Select_Column>>;\n  limit?: InputMaybe<Scalars['Int']>;\n  offset?: InputMaybe<Scalars['Int']>;\n  order_by?: InputMaybe<Array<Current_Aptos_Names_Order_By>>;\n  where?: InputMaybe<Current_Aptos_Names_Bool_Exp>;\n};\n\n/** aggregated selection of \"coin_activities\" */\nexport type Coin_Activities_Aggregate = {\n  __typename?: 'coin_activities_aggregate';\n  aggregate?: Maybe<Coin_Activities_Aggregate_Fields>;\n  nodes: Array<Coin_Activities>;\n};\n\n/** aggregate fields of \"coin_activities\" */\nexport type Coin_Activities_Aggregate_Fields = {\n  __typename?: 'coin_activities_aggregate_fields';\n  avg?: Maybe<Coin_Activities_Avg_Fields>;\n  count: Scalars['Int'];\n  max?: Maybe<Coin_Activities_Max_Fields>;\n  min?: Maybe<Coin_Activities_Min_Fields>;\n  stddev?: Maybe<Coin_Activities_Stddev_Fields>;\n  stddev_pop?: Maybe<Coin_Activities_Stddev_Pop_Fields>;\n  stddev_samp?: Maybe<Coin_Activities_Stddev_Samp_Fields>;\n  sum?: Maybe<Coin_Activities_Sum_Fields>;\n  var_pop?: Maybe<Coin_Activities_Var_Pop_Fields>;\n  var_samp?: Maybe<Coin_Activities_Var_Samp_Fields>;\n  variance?: Maybe<Coin_Activities_Variance_Fields>;\n};\n\n\n/** aggregate fields of \"coin_activities\" */\nexport type Coin_Activities_Aggregate_FieldsCountArgs = {\n  columns?: InputMaybe<Array<Coin_Activities_Select_Column>>;\n  distinct?: InputMaybe<Scalars['Boolean']>;\n};\n\n/** order by aggregate values of table \"coin_activities\" */\nexport type Coin_Activities_Aggregate_Order_By = {\n  avg?: InputMaybe<Coin_Activities_Avg_Order_By>;\n  count?: InputMaybe<Order_By>;\n  max?: InputMaybe<Coin_Activities_Max_Order_By>;\n  min?: InputMaybe<Coin_Activities_Min_Order_By>;\n  stddev?: InputMaybe<Coin_Activities_Stddev_Order_By>;\n  stddev_pop?: InputMaybe<Coin_Activities_Stddev_Pop_Order_By>;\n  stddev_samp?: InputMaybe<Coin_Activities_Stddev_Samp_Order_By>;\n  sum?: InputMaybe<Coin_Activities_Sum_Order_By>;\n  var_pop?: InputMaybe<Coin_Activities_Var_Pop_Order_By>;\n  var_samp?: InputMaybe<Coin_Activities_Var_Samp_Order_By>;\n  variance?: InputMaybe<Coin_Activities_Variance_Order_By>;\n};\n\n/** aggregate avg on columns */\nexport type Coin_Activities_Avg_Fields = {\n  __typename?: 'coin_activities_avg_fields';\n  amount?: Maybe<Scalars['Float']>;\n  block_height?: Maybe<Scalars['Float']>;\n  event_creation_number?: Maybe<Scalars['Float']>;\n  event_index?: Maybe<Scalars['Float']>;\n  event_sequence_number?: Maybe<Scalars['Float']>;\n  transaction_version?: Maybe<Scalars['Float']>;\n};\n\n/** order by avg() on columns of table \"coin_activities\" */\nexport type Coin_Activities_Avg_Order_By = {\n  amount?: InputMaybe<Order_By>;\n  block_height?: InputMaybe<Order_By>;\n  event_creation_number?: InputMaybe<Order_By>;\n  event_index?: InputMaybe<Order_By>;\n  event_sequence_number?: InputMaybe<Order_By>;\n  transaction_version?: InputMaybe<Order_By>;\n};\n\n/** Boolean expression to filter rows from the table \"coin_activities\". All fields are combined with a logical 'AND'. */\nexport type Coin_Activities_Bool_Exp = {\n  _and?: InputMaybe<Array<Coin_Activities_Bool_Exp>>;\n  _not?: InputMaybe<Coin_Activities_Bool_Exp>;\n  _or?: InputMaybe<Array<Coin_Activities_Bool_Exp>>;\n  activity_type?: InputMaybe<String_Comparison_Exp>;\n  amount?: InputMaybe<Numeric_Comparison_Exp>;\n  aptos_names?: InputMaybe<Current_Aptos_Names_Bool_Exp>;\n  block_height?: InputMaybe<Bigint_Comparison_Exp>;\n  coin_info?: InputMaybe<Coin_Infos_Bool_Exp>;\n  coin_type?: InputMaybe<String_Comparison_Exp>;\n  entry_function_id_str?: InputMaybe<String_Comparison_Exp>;\n  event_account_address?: InputMaybe<String_Comparison_Exp>;\n  event_creation_number?: InputMaybe<Bigint_Comparison_Exp>;\n  event_index?: InputMaybe<Bigint_Comparison_Exp>;\n  event_sequence_number?: InputMaybe<Bigint_Comparison_Exp>;\n  is_gas_fee?: InputMaybe<Boolean_Comparison_Exp>;\n  is_transaction_success?: InputMaybe<Boolean_Comparison_Exp>;\n  owner_address?: InputMaybe<String_Comparison_Exp>;\n  transaction_timestamp?: InputMaybe<Timestamp_Comparison_Exp>;\n  transaction_version?: InputMaybe<Bigint_Comparison_Exp>;\n};\n\n/** aggregate max on columns */\nexport type Coin_Activities_Max_Fields = {\n  __typename?: 'coin_activities_max_fields';\n  activity_type?: Maybe<Scalars['String']>;\n  amount?: Maybe<Scalars['numeric']>;\n  block_height?: Maybe<Scalars['bigint']>;\n  coin_type?: Maybe<Scalars['String']>;\n  entry_function_id_str?: Maybe<Scalars['String']>;\n  event_account_address?: Maybe<Scalars['String']>;\n  event_creation_number?: Maybe<Scalars['bigint']>;\n  event_index?: Maybe<Scalars['bigint']>;\n  event_sequence_number?: Maybe<Scalars['bigint']>;\n  owner_address?: Maybe<Scalars['String']>;\n  transaction_timestamp?: Maybe<Scalars['timestamp']>;\n  transaction_version?: Maybe<Scalars['bigint']>;\n};\n\n/** order by max() on columns of table \"coin_activities\" */\nexport type Coin_Activities_Max_Order_By = {\n  activity_type?: InputMaybe<Order_By>;\n  amount?: InputMaybe<Order_By>;\n  block_height?: InputMaybe<Order_By>;\n  coin_type?: InputMaybe<Order_By>;\n  entry_function_id_str?: InputMaybe<Order_By>;\n  event_account_address?: InputMaybe<Order_By>;\n  event_creation_number?: InputMaybe<Order_By>;\n  event_index?: InputMaybe<Order_By>;\n  event_sequence_number?: InputMaybe<Order_By>;\n  owner_address?: InputMaybe<Order_By>;\n  transaction_timestamp?: InputMaybe<Order_By>;\n  transaction_version?: InputMaybe<Order_By>;\n};\n\n/** aggregate min on columns */\nexport type Coin_Activities_Min_Fields = {\n  __typename?: 'coin_activities_min_fields';\n  activity_type?: Maybe<Scalars['String']>;\n  amount?: Maybe<Scalars['numeric']>;\n  block_height?: Maybe<Scalars['bigint']>;\n  coin_type?: Maybe<Scalars['String']>;\n  entry_function_id_str?: Maybe<Scalars['String']>;\n  event_account_address?: Maybe<Scalars['String']>;\n  event_creation_number?: Maybe<Scalars['bigint']>;\n  event_index?: Maybe<Scalars['bigint']>;\n  event_sequence_number?: Maybe<Scalars['bigint']>;\n  owner_address?: Maybe<Scalars['String']>;\n  transaction_timestamp?: Maybe<Scalars['timestamp']>;\n  transaction_version?: Maybe<Scalars['bigint']>;\n};\n\n/** order by min() on columns of table \"coin_activities\" */\nexport type Coin_Activities_Min_Order_By = {\n  activity_type?: InputMaybe<Order_By>;\n  amount?: InputMaybe<Order_By>;\n  block_height?: InputMaybe<Order_By>;\n  coin_type?: InputMaybe<Order_By>;\n  entry_function_id_str?: InputMaybe<Order_By>;\n  event_account_address?: InputMaybe<Order_By>;\n  event_creation_number?: InputMaybe<Order_By>;\n  event_index?: InputMaybe<Order_By>;\n  event_sequence_number?: InputMaybe<Order_By>;\n  owner_address?: InputMaybe<Order_By>;\n  transaction_timestamp?: InputMaybe<Order_By>;\n  transaction_version?: InputMaybe<Order_By>;\n};\n\n/** Ordering options when selecting data from \"coin_activities\". */\nexport type Coin_Activities_Order_By = {\n  activity_type?: InputMaybe<Order_By>;\n  amount?: InputMaybe<Order_By>;\n  aptos_names_aggregate?: InputMaybe<Current_Aptos_Names_Aggregate_Order_By>;\n  block_height?: InputMaybe<Order_By>;\n  coin_info?: InputMaybe<Coin_Infos_Order_By>;\n  coin_type?: InputMaybe<Order_By>;\n  entry_function_id_str?: InputMaybe<Order_By>;\n  event_account_address?: InputMaybe<Order_By>;\n  event_creation_number?: InputMaybe<Order_By>;\n  event_index?: InputMaybe<Order_By>;\n  event_sequence_number?: InputMaybe<Order_By>;\n  is_gas_fee?: InputMaybe<Order_By>;\n  is_transaction_success?: InputMaybe<Order_By>;\n  owner_address?: InputMaybe<Order_By>;\n  transaction_timestamp?: InputMaybe<Order_By>;\n  transaction_version?: InputMaybe<Order_By>;\n};\n\n/** select columns of table \"coin_activities\" */\nexport enum Coin_Activities_Select_Column {\n  /** column name */\n  ActivityType = 'activity_type',\n  /** column name */\n  Amount = 'amount',\n  /** column name */\n  BlockHeight = 'block_height',\n  /** column name */\n  CoinType = 'coin_type',\n  /** column name */\n  EntryFunctionIdStr = 'entry_function_id_str',\n  /** column name */\n  EventAccountAddress = 'event_account_address',\n  /** column name */\n  EventCreationNumber = 'event_creation_number',\n  /** column name */\n  EventIndex = 'event_index',\n  /** column name */\n  EventSequenceNumber = 'event_sequence_number',\n  /** column name */\n  IsGasFee = 'is_gas_fee',\n  /** column name */\n  IsTransactionSuccess = 'is_transaction_success',\n  /** column name */\n  OwnerAddress = 'owner_address',\n  /** column name */\n  TransactionTimestamp = 'transaction_timestamp',\n  /** column name */\n  TransactionVersion = 'transaction_version'\n}\n\n/** aggregate stddev on columns */\nexport type Coin_Activities_Stddev_Fields = {\n  __typename?: 'coin_activities_stddev_fields';\n  amount?: Maybe<Scalars['Float']>;\n  block_height?: Maybe<Scalars['Float']>;\n  event_creation_number?: Maybe<Scalars['Float']>;\n  event_index?: Maybe<Scalars['Float']>;\n  event_sequence_number?: Maybe<Scalars['Float']>;\n  transaction_version?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev() on columns of table \"coin_activities\" */\nexport type Coin_Activities_Stddev_Order_By = {\n  amount?: InputMaybe<Order_By>;\n  block_height?: InputMaybe<Order_By>;\n  event_creation_number?: InputMaybe<Order_By>;\n  event_index?: InputMaybe<Order_By>;\n  event_sequence_number?: InputMaybe<Order_By>;\n  transaction_version?: InputMaybe<Order_By>;\n};\n\n/** aggregate stddev_pop on columns */\nexport type Coin_Activities_Stddev_Pop_Fields = {\n  __typename?: 'coin_activities_stddev_pop_fields';\n  amount?: Maybe<Scalars['Float']>;\n  block_height?: Maybe<Scalars['Float']>;\n  event_creation_number?: Maybe<Scalars['Float']>;\n  event_index?: Maybe<Scalars['Float']>;\n  event_sequence_number?: Maybe<Scalars['Float']>;\n  transaction_version?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev_pop() on columns of table \"coin_activities\" */\nexport type Coin_Activities_Stddev_Pop_Order_By = {\n  amount?: InputMaybe<Order_By>;\n  block_height?: InputMaybe<Order_By>;\n  event_creation_number?: InputMaybe<Order_By>;\n  event_index?: InputMaybe<Order_By>;\n  event_sequence_number?: InputMaybe<Order_By>;\n  transaction_version?: InputMaybe<Order_By>;\n};\n\n/** aggregate stddev_samp on columns */\nexport type Coin_Activities_Stddev_Samp_Fields = {\n  __typename?: 'coin_activities_stddev_samp_fields';\n  amount?: Maybe<Scalars['Float']>;\n  block_height?: Maybe<Scalars['Float']>;\n  event_creation_number?: Maybe<Scalars['Float']>;\n  event_index?: Maybe<Scalars['Float']>;\n  event_sequence_number?: Maybe<Scalars['Float']>;\n  transaction_version?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev_samp() on columns of table \"coin_activities\" */\nexport type Coin_Activities_Stddev_Samp_Order_By = {\n  amount?: InputMaybe<Order_By>;\n  block_height?: InputMaybe<Order_By>;\n  event_creation_number?: InputMaybe<Order_By>;\n  event_index?: InputMaybe<Order_By>;\n  event_sequence_number?: InputMaybe<Order_By>;\n  transaction_version?: InputMaybe<Order_By>;\n};\n\n/** Streaming cursor of the table \"coin_activities\" */\nexport type Coin_Activities_Stream_Cursor_Input = {\n  /** Stream column input with initial value */\n  initial_value: Coin_Activities_Stream_Cursor_Value_Input;\n  /** cursor ordering */\n  ordering?: InputMaybe<Cursor_Ordering>;\n};\n\n/** Initial value of the column from where the streaming should start */\nexport type Coin_Activities_Stream_Cursor_Value_Input = {\n  activity_type?: InputMaybe<Scalars['String']>;\n  amount?: InputMaybe<Scalars['numeric']>;\n  block_height?: InputMaybe<Scalars['bigint']>;\n  coin_type?: InputMaybe<Scalars['String']>;\n  entry_function_id_str?: InputMaybe<Scalars['String']>;\n  event_account_address?: InputMaybe<Scalars['String']>;\n  event_creation_number?: InputMaybe<Scalars['bigint']>;\n  event_index?: InputMaybe<Scalars['bigint']>;\n  event_sequence_number?: InputMaybe<Scalars['bigint']>;\n  is_gas_fee?: InputMaybe<Scalars['Boolean']>;\n  is_transaction_success?: InputMaybe<Scalars['Boolean']>;\n  owner_address?: InputMaybe<Scalars['String']>;\n  transaction_timestamp?: InputMaybe<Scalars['timestamp']>;\n  transaction_version?: InputMaybe<Scalars['bigint']>;\n};\n\n/** aggregate sum on columns */\nexport type Coin_Activities_Sum_Fields = {\n  __typename?: 'coin_activities_sum_fields';\n  amount?: Maybe<Scalars['numeric']>;\n  block_height?: Maybe<Scalars['bigint']>;\n  event_creation_number?: Maybe<Scalars['bigint']>;\n  event_index?: Maybe<Scalars['bigint']>;\n  event_sequence_number?: Maybe<Scalars['bigint']>;\n  transaction_version?: Maybe<Scalars['bigint']>;\n};\n\n/** order by sum() on columns of table \"coin_activities\" */\nexport type Coin_Activities_Sum_Order_By = {\n  amount?: InputMaybe<Order_By>;\n  block_height?: InputMaybe<Order_By>;\n  event_creation_number?: InputMaybe<Order_By>;\n  event_index?: InputMaybe<Order_By>;\n  event_sequence_number?: InputMaybe<Order_By>;\n  transaction_version?: InputMaybe<Order_By>;\n};\n\n/** aggregate var_pop on columns */\nexport type Coin_Activities_Var_Pop_Fields = {\n  __typename?: 'coin_activities_var_pop_fields';\n  amount?: Maybe<Scalars['Float']>;\n  block_height?: Maybe<Scalars['Float']>;\n  event_creation_number?: Maybe<Scalars['Float']>;\n  event_index?: Maybe<Scalars['Float']>;\n  event_sequence_number?: Maybe<Scalars['Float']>;\n  transaction_version?: Maybe<Scalars['Float']>;\n};\n\n/** order by var_pop() on columns of table \"coin_activities\" */\nexport type Coin_Activities_Var_Pop_Order_By = {\n  amount?: InputMaybe<Order_By>;\n  block_height?: InputMaybe<Order_By>;\n  event_creation_number?: InputMaybe<Order_By>;\n  event_index?: InputMaybe<Order_By>;\n  event_sequence_number?: InputMaybe<Order_By>;\n  transaction_version?: InputMaybe<Order_By>;\n};\n\n/** aggregate var_samp on columns */\nexport type Coin_Activities_Var_Samp_Fields = {\n  __typename?: 'coin_activities_var_samp_fields';\n  amount?: Maybe<Scalars['Float']>;\n  block_height?: Maybe<Scalars['Float']>;\n  event_creation_number?: Maybe<Scalars['Float']>;\n  event_index?: Maybe<Scalars['Float']>;\n  event_sequence_number?: Maybe<Scalars['Float']>;\n  transaction_version?: Maybe<Scalars['Float']>;\n};\n\n/** order by var_samp() on columns of table \"coin_activities\" */\nexport type Coin_Activities_Var_Samp_Order_By = {\n  amount?: InputMaybe<Order_By>;\n  block_height?: InputMaybe<Order_By>;\n  event_creation_number?: InputMaybe<Order_By>;\n  event_index?: InputMaybe<Order_By>;\n  event_sequence_number?: InputMaybe<Order_By>;\n  transaction_version?: InputMaybe<Order_By>;\n};\n\n/** aggregate variance on columns */\nexport type Coin_Activities_Variance_Fields = {\n  __typename?: 'coin_activities_variance_fields';\n  amount?: Maybe<Scalars['Float']>;\n  block_height?: Maybe<Scalars['Float']>;\n  event_creation_number?: Maybe<Scalars['Float']>;\n  event_index?: Maybe<Scalars['Float']>;\n  event_sequence_number?: Maybe<Scalars['Float']>;\n  transaction_version?: Maybe<Scalars['Float']>;\n};\n\n/** order by variance() on columns of table \"coin_activities\" */\nexport type Coin_Activities_Variance_Order_By = {\n  amount?: InputMaybe<Order_By>;\n  block_height?: InputMaybe<Order_By>;\n  event_creation_number?: InputMaybe<Order_By>;\n  event_index?: InputMaybe<Order_By>;\n  event_sequence_number?: InputMaybe<Order_By>;\n  transaction_version?: InputMaybe<Order_By>;\n};\n\n/** columns and relationships of \"coin_balances\" */\nexport type Coin_Balances = {\n  __typename?: 'coin_balances';\n  amount: Scalars['numeric'];\n  coin_type: Scalars['String'];\n  coin_type_hash: Scalars['String'];\n  owner_address: Scalars['String'];\n  transaction_timestamp: Scalars['timestamp'];\n  transaction_version: Scalars['bigint'];\n};\n\n/** Boolean expression to filter rows from the table \"coin_balances\". All fields are combined with a logical 'AND'. */\nexport type Coin_Balances_Bool_Exp = {\n  _and?: InputMaybe<Array<Coin_Balances_Bool_Exp>>;\n  _not?: InputMaybe<Coin_Balances_Bool_Exp>;\n  _or?: InputMaybe<Array<Coin_Balances_Bool_Exp>>;\n  amount?: InputMaybe<Numeric_Comparison_Exp>;\n  coin_type?: InputMaybe<String_Comparison_Exp>;\n  coin_type_hash?: InputMaybe<String_Comparison_Exp>;\n  owner_address?: InputMaybe<String_Comparison_Exp>;\n  transaction_timestamp?: InputMaybe<Timestamp_Comparison_Exp>;\n  transaction_version?: InputMaybe<Bigint_Comparison_Exp>;\n};\n\n/** Ordering options when selecting data from \"coin_balances\". */\nexport type Coin_Balances_Order_By = {\n  amount?: InputMaybe<Order_By>;\n  coin_type?: InputMaybe<Order_By>;\n  coin_type_hash?: InputMaybe<Order_By>;\n  owner_address?: InputMaybe<Order_By>;\n  transaction_timestamp?: InputMaybe<Order_By>;\n  transaction_version?: InputMaybe<Order_By>;\n};\n\n/** select columns of table \"coin_balances\" */\nexport enum Coin_Balances_Select_Column {\n  /** column name */\n  Amount = 'amount',\n  /** column name */\n  CoinType = 'coin_type',\n  /** column name */\n  CoinTypeHash = 'coin_type_hash',\n  /** column name */\n  OwnerAddress = 'owner_address',\n  /** column name */\n  TransactionTimestamp = 'transaction_timestamp',\n  /** column name */\n  TransactionVersion = 'transaction_version'\n}\n\n/** Streaming cursor of the table \"coin_balances\" */\nexport type Coin_Balances_Stream_Cursor_Input = {\n  /** Stream column input with initial value */\n  initial_value: Coin_Balances_Stream_Cursor_Value_Input;\n  /** cursor ordering */\n  ordering?: InputMaybe<Cursor_Ordering>;\n};\n\n/** Initial value of the column from where the streaming should start */\nexport type Coin_Balances_Stream_Cursor_Value_Input = {\n  amount?: InputMaybe<Scalars['numeric']>;\n  coin_type?: InputMaybe<Scalars['String']>;\n  coin_type_hash?: InputMaybe<Scalars['String']>;\n  owner_address?: InputMaybe<Scalars['String']>;\n  transaction_timestamp?: InputMaybe<Scalars['timestamp']>;\n  transaction_version?: InputMaybe<Scalars['bigint']>;\n};\n\n/** columns and relationships of \"coin_infos\" */\nexport type Coin_Infos = {\n  __typename?: 'coin_infos';\n  coin_type: Scalars['String'];\n  coin_type_hash: Scalars['String'];\n  creator_address: Scalars['String'];\n  decimals: Scalars['Int'];\n  name: Scalars['String'];\n  supply_aggregator_table_handle?: Maybe<Scalars['String']>;\n  supply_aggregator_table_key?: Maybe<Scalars['String']>;\n  symbol: Scalars['String'];\n  transaction_created_timestamp: Scalars['timestamp'];\n  transaction_version_created: Scalars['bigint'];\n};\n\n/** Boolean expression to filter rows from the table \"coin_infos\". All fields are combined with a logical 'AND'. */\nexport type Coin_Infos_Bool_Exp = {\n  _and?: InputMaybe<Array<Coin_Infos_Bool_Exp>>;\n  _not?: InputMaybe<Coin_Infos_Bool_Exp>;\n  _or?: InputMaybe<Array<Coin_Infos_Bool_Exp>>;\n  coin_type?: InputMaybe<String_Comparison_Exp>;\n  coin_type_hash?: InputMaybe<String_Comparison_Exp>;\n  creator_address?: InputMaybe<String_Comparison_Exp>;\n  decimals?: InputMaybe<Int_Comparison_Exp>;\n  name?: InputMaybe<String_Comparison_Exp>;\n  supply_aggregator_table_handle?: InputMaybe<String_Comparison_Exp>;\n  supply_aggregator_table_key?: InputMaybe<String_Comparison_Exp>;\n  symbol?: InputMaybe<String_Comparison_Exp>;\n  transaction_created_timestamp?: InputMaybe<Timestamp_Comparison_Exp>;\n  transaction_version_created?: InputMaybe<Bigint_Comparison_Exp>;\n};\n\n/** Ordering options when selecting data from \"coin_infos\". */\nexport type Coin_Infos_Order_By = {\n  coin_type?: InputMaybe<Order_By>;\n  coin_type_hash?: InputMaybe<Order_By>;\n  creator_address?: InputMaybe<Order_By>;\n  decimals?: InputMaybe<Order_By>;\n  name?: InputMaybe<Order_By>;\n  supply_aggregator_table_handle?: InputMaybe<Order_By>;\n  supply_aggregator_table_key?: InputMaybe<Order_By>;\n  symbol?: InputMaybe<Order_By>;\n  transaction_created_timestamp?: InputMaybe<Order_By>;\n  transaction_version_created?: InputMaybe<Order_By>;\n};\n\n/** select columns of table \"coin_infos\" */\nexport enum Coin_Infos_Select_Column {\n  /** column name */\n  CoinType = 'coin_type',\n  /** column name */\n  CoinTypeHash = 'coin_type_hash',\n  /** column name */\n  CreatorAddress = 'creator_address',\n  /** column name */\n  Decimals = 'decimals',\n  /** column name */\n  Name = 'name',\n  /** column name */\n  SupplyAggregatorTableHandle = 'supply_aggregator_table_handle',\n  /** column name */\n  SupplyAggregatorTableKey = 'supply_aggregator_table_key',\n  /** column name */\n  Symbol = 'symbol',\n  /** column name */\n  TransactionCreatedTimestamp = 'transaction_created_timestamp',\n  /** column name */\n  TransactionVersionCreated = 'transaction_version_created'\n}\n\n/** Streaming cursor of the table \"coin_infos\" */\nexport type Coin_Infos_Stream_Cursor_Input = {\n  /** Stream column input with initial value */\n  initial_value: Coin_Infos_Stream_Cursor_Value_Input;\n  /** cursor ordering */\n  ordering?: InputMaybe<Cursor_Ordering>;\n};\n\n/** Initial value of the column from where the streaming should start */\nexport type Coin_Infos_Stream_Cursor_Value_Input = {\n  coin_type?: InputMaybe<Scalars['String']>;\n  coin_type_hash?: InputMaybe<Scalars['String']>;\n  creator_address?: InputMaybe<Scalars['String']>;\n  decimals?: InputMaybe<Scalars['Int']>;\n  name?: InputMaybe<Scalars['String']>;\n  supply_aggregator_table_handle?: InputMaybe<Scalars['String']>;\n  supply_aggregator_table_key?: InputMaybe<Scalars['String']>;\n  symbol?: InputMaybe<Scalars['String']>;\n  transaction_created_timestamp?: InputMaybe<Scalars['timestamp']>;\n  transaction_version_created?: InputMaybe<Scalars['bigint']>;\n};\n\n/** columns and relationships of \"coin_supply\" */\nexport type Coin_Supply = {\n  __typename?: 'coin_supply';\n  coin_type: Scalars['String'];\n  coin_type_hash: Scalars['String'];\n  supply: Scalars['numeric'];\n  transaction_epoch: Scalars['bigint'];\n  transaction_timestamp: Scalars['timestamp'];\n  transaction_version: Scalars['bigint'];\n};\n\n/** Boolean expression to filter rows from the table \"coin_supply\". All fields are combined with a logical 'AND'. */\nexport type Coin_Supply_Bool_Exp = {\n  _and?: InputMaybe<Array<Coin_Supply_Bool_Exp>>;\n  _not?: InputMaybe<Coin_Supply_Bool_Exp>;\n  _or?: InputMaybe<Array<Coin_Supply_Bool_Exp>>;\n  coin_type?: InputMaybe<String_Comparison_Exp>;\n  coin_type_hash?: InputMaybe<String_Comparison_Exp>;\n  supply?: InputMaybe<Numeric_Comparison_Exp>;\n  transaction_epoch?: InputMaybe<Bigint_Comparison_Exp>;\n  transaction_timestamp?: InputMaybe<Timestamp_Comparison_Exp>;\n  transaction_version?: InputMaybe<Bigint_Comparison_Exp>;\n};\n\n/** Ordering options when selecting data from \"coin_supply\". */\nexport type Coin_Supply_Order_By = {\n  coin_type?: InputMaybe<Order_By>;\n  coin_type_hash?: InputMaybe<Order_By>;\n  supply?: InputMaybe<Order_By>;\n  transaction_epoch?: InputMaybe<Order_By>;\n  transaction_timestamp?: InputMaybe<Order_By>;\n  transaction_version?: InputMaybe<Order_By>;\n};\n\n/** select columns of table \"coin_supply\" */\nexport enum Coin_Supply_Select_Column {\n  /** column name */\n  CoinType = 'coin_type',\n  /** column name */\n  CoinTypeHash = 'coin_type_hash',\n  /** column name */\n  Supply = 'supply',\n  /** column name */\n  TransactionEpoch = 'transaction_epoch',\n  /** column name */\n  TransactionTimestamp = 'transaction_timestamp',\n  /** column name */\n  TransactionVersion = 'transaction_version'\n}\n\n/** Streaming cursor of the table \"coin_supply\" */\nexport type Coin_Supply_Stream_Cursor_Input = {\n  /** Stream column input with initial value */\n  initial_value: Coin_Supply_Stream_Cursor_Value_Input;\n  /** cursor ordering */\n  ordering?: InputMaybe<Cursor_Ordering>;\n};\n\n/** Initial value of the column from where the streaming should start */\nexport type Coin_Supply_Stream_Cursor_Value_Input = {\n  coin_type?: InputMaybe<Scalars['String']>;\n  coin_type_hash?: InputMaybe<Scalars['String']>;\n  supply?: InputMaybe<Scalars['numeric']>;\n  transaction_epoch?: InputMaybe<Scalars['bigint']>;\n  transaction_timestamp?: InputMaybe<Scalars['timestamp']>;\n  transaction_version?: InputMaybe<Scalars['bigint']>;\n};\n\n/** columns and relationships of \"collection_datas\" */\nexport type Collection_Datas = {\n  __typename?: 'collection_datas';\n  collection_data_id_hash: Scalars['String'];\n  collection_name: Scalars['String'];\n  creator_address: Scalars['String'];\n  description: Scalars['String'];\n  description_mutable: Scalars['Boolean'];\n  maximum: Scalars['numeric'];\n  maximum_mutable: Scalars['Boolean'];\n  metadata_uri: Scalars['String'];\n  supply: Scalars['numeric'];\n  table_handle: Scalars['String'];\n  transaction_timestamp: Scalars['timestamp'];\n  transaction_version: Scalars['bigint'];\n  uri_mutable: Scalars['Boolean'];\n};\n\n/** Boolean expression to filter rows from the table \"collection_datas\". All fields are combined with a logical 'AND'. */\nexport type Collection_Datas_Bool_Exp = {\n  _and?: InputMaybe<Array<Collection_Datas_Bool_Exp>>;\n  _not?: InputMaybe<Collection_Datas_Bool_Exp>;\n  _or?: InputMaybe<Array<Collection_Datas_Bool_Exp>>;\n  collection_data_id_hash?: InputMaybe<String_Comparison_Exp>;\n  collection_name?: InputMaybe<String_Comparison_Exp>;\n  creator_address?: InputMaybe<String_Comparison_Exp>;\n  description?: InputMaybe<String_Comparison_Exp>;\n  description_mutable?: InputMaybe<Boolean_Comparison_Exp>;\n  maximum?: InputMaybe<Numeric_Comparison_Exp>;\n  maximum_mutable?: InputMaybe<Boolean_Comparison_Exp>;\n  metadata_uri?: InputMaybe<String_Comparison_Exp>;\n  supply?: InputMaybe<Numeric_Comparison_Exp>;\n  table_handle?: InputMaybe<String_Comparison_Exp>;\n  transaction_timestamp?: InputMaybe<Timestamp_Comparison_Exp>;\n  transaction_version?: InputMaybe<Bigint_Comparison_Exp>;\n  uri_mutable?: InputMaybe<Boolean_Comparison_Exp>;\n};\n\n/** Ordering options when selecting data from \"collection_datas\". */\nexport type Collection_Datas_Order_By = {\n  collection_data_id_hash?: InputMaybe<Order_By>;\n  collection_name?: InputMaybe<Order_By>;\n  creator_address?: InputMaybe<Order_By>;\n  description?: InputMaybe<Order_By>;\n  description_mutable?: InputMaybe<Order_By>;\n  maximum?: InputMaybe<Order_By>;\n  maximum_mutable?: InputMaybe<Order_By>;\n  metadata_uri?: InputMaybe<Order_By>;\n  supply?: InputMaybe<Order_By>;\n  table_handle?: InputMaybe<Order_By>;\n  transaction_timestamp?: InputMaybe<Order_By>;\n  transaction_version?: InputMaybe<Order_By>;\n  uri_mutable?: InputMaybe<Order_By>;\n};\n\n/** select columns of table \"collection_datas\" */\nexport enum Collection_Datas_Select_Column {\n  /** column name */\n  CollectionDataIdHash = 'collection_data_id_hash',\n  /** column name */\n  CollectionName = 'collection_name',\n  /** column name */\n  CreatorAddress = 'creator_address',\n  /** column name */\n  Description = 'description',\n  /** column name */\n  DescriptionMutable = 'description_mutable',\n  /** column name */\n  Maximum = 'maximum',\n  /** column name */\n  MaximumMutable = 'maximum_mutable',\n  /** column name */\n  MetadataUri = 'metadata_uri',\n  /** column name */\n  Supply = 'supply',\n  /** column name */\n  TableHandle = 'table_handle',\n  /** column name */\n  TransactionTimestamp = 'transaction_timestamp',\n  /** column name */\n  TransactionVersion = 'transaction_version',\n  /** column name */\n  UriMutable = 'uri_mutable'\n}\n\n/** Streaming cursor of the table \"collection_datas\" */\nexport type Collection_Datas_Stream_Cursor_Input = {\n  /** Stream column input with initial value */\n  initial_value: Collection_Datas_Stream_Cursor_Value_Input;\n  /** cursor ordering */\n  ordering?: InputMaybe<Cursor_Ordering>;\n};\n\n/** Initial value of the column from where the streaming should start */\nexport type Collection_Datas_Stream_Cursor_Value_Input = {\n  collection_data_id_hash?: InputMaybe<Scalars['String']>;\n  collection_name?: InputMaybe<Scalars['String']>;\n  creator_address?: InputMaybe<Scalars['String']>;\n  description?: InputMaybe<Scalars['String']>;\n  description_mutable?: InputMaybe<Scalars['Boolean']>;\n  maximum?: InputMaybe<Scalars['numeric']>;\n  maximum_mutable?: InputMaybe<Scalars['Boolean']>;\n  metadata_uri?: InputMaybe<Scalars['String']>;\n  supply?: InputMaybe<Scalars['numeric']>;\n  table_handle?: InputMaybe<Scalars['String']>;\n  transaction_timestamp?: InputMaybe<Scalars['timestamp']>;\n  transaction_version?: InputMaybe<Scalars['bigint']>;\n  uri_mutable?: InputMaybe<Scalars['Boolean']>;\n};\n\n/** columns and relationships of \"current_ans_lookup\" */\nexport type Current_Ans_Lookup = {\n  __typename?: 'current_ans_lookup';\n  /** An array relationship */\n  all_token_ownerships: Array<Current_Token_Ownerships>;\n  /** An aggregate relationship */\n  all_token_ownerships_aggregate: Current_Token_Ownerships_Aggregate;\n  domain: Scalars['String'];\n  expiration_timestamp: Scalars['timestamp'];\n  is_deleted: Scalars['Boolean'];\n  last_transaction_version: Scalars['bigint'];\n  registered_address?: Maybe<Scalars['String']>;\n  subdomain: Scalars['String'];\n  token_name: Scalars['String'];\n};\n\n\n/** columns and relationships of \"current_ans_lookup\" */\nexport type Current_Ans_LookupAll_Token_OwnershipsArgs = {\n  distinct_on?: InputMaybe<Array<Current_Token_Ownerships_Select_Column>>;\n  limit?: InputMaybe<Scalars['Int']>;\n  offset?: InputMaybe<Scalars['Int']>;\n  order_by?: InputMaybe<Array<Current_Token_Ownerships_Order_By>>;\n  where?: InputMaybe<Current_Token_Ownerships_Bool_Exp>;\n};\n\n\n/** columns and relationships of \"current_ans_lookup\" */\nexport type Current_Ans_LookupAll_Token_Ownerships_AggregateArgs = {\n  distinct_on?: InputMaybe<Array<Current_Token_Ownerships_Select_Column>>;\n  limit?: InputMaybe<Scalars['Int']>;\n  offset?: InputMaybe<Scalars['Int']>;\n  order_by?: InputMaybe<Array<Current_Token_Ownerships_Order_By>>;\n  where?: InputMaybe<Current_Token_Ownerships_Bool_Exp>;\n};\n\n/** Boolean expression to filter rows from the table \"current_ans_lookup\". All fields are combined with a logical 'AND'. */\nexport type Current_Ans_Lookup_Bool_Exp = {\n  _and?: InputMaybe<Array<Current_Ans_Lookup_Bool_Exp>>;\n  _not?: InputMaybe<Current_Ans_Lookup_Bool_Exp>;\n  _or?: InputMaybe<Array<Current_Ans_Lookup_Bool_Exp>>;\n  all_token_ownerships?: InputMaybe<Current_Token_Ownerships_Bool_Exp>;\n  domain?: InputMaybe<String_Comparison_Exp>;\n  expiration_timestamp?: InputMaybe<Timestamp_Comparison_Exp>;\n  is_deleted?: InputMaybe<Boolean_Comparison_Exp>;\n  last_transaction_version?: InputMaybe<Bigint_Comparison_Exp>;\n  registered_address?: InputMaybe<String_Comparison_Exp>;\n  subdomain?: InputMaybe<String_Comparison_Exp>;\n  token_name?: InputMaybe<String_Comparison_Exp>;\n};\n\n/** Ordering options when selecting data from \"current_ans_lookup\". */\nexport type Current_Ans_Lookup_Order_By = {\n  all_token_ownerships_aggregate?: InputMaybe<Current_Token_Ownerships_Aggregate_Order_By>;\n  domain?: InputMaybe<Order_By>;\n  expiration_timestamp?: InputMaybe<Order_By>;\n  is_deleted?: InputMaybe<Order_By>;\n  last_transaction_version?: InputMaybe<Order_By>;\n  registered_address?: InputMaybe<Order_By>;\n  subdomain?: InputMaybe<Order_By>;\n  token_name?: InputMaybe<Order_By>;\n};\n\n/** select columns of table \"current_ans_lookup\" */\nexport enum Current_Ans_Lookup_Select_Column {\n  /** column name */\n  Domain = 'domain',\n  /** column name */\n  ExpirationTimestamp = 'expiration_timestamp',\n  /** column name */\n  IsDeleted = 'is_deleted',\n  /** column name */\n  LastTransactionVersion = 'last_transaction_version',\n  /** column name */\n  RegisteredAddress = 'registered_address',\n  /** column name */\n  Subdomain = 'subdomain',\n  /** column name */\n  TokenName = 'token_name'\n}\n\n/** Streaming cursor of the table \"current_ans_lookup\" */\nexport type Current_Ans_Lookup_Stream_Cursor_Input = {\n  /** Stream column input with initial value */\n  initial_value: Current_Ans_Lookup_Stream_Cursor_Value_Input;\n  /** cursor ordering */\n  ordering?: InputMaybe<Cursor_Ordering>;\n};\n\n/** Initial value of the column from where the streaming should start */\nexport type Current_Ans_Lookup_Stream_Cursor_Value_Input = {\n  domain?: InputMaybe<Scalars['String']>;\n  expiration_timestamp?: InputMaybe<Scalars['timestamp']>;\n  is_deleted?: InputMaybe<Scalars['Boolean']>;\n  last_transaction_version?: InputMaybe<Scalars['bigint']>;\n  registered_address?: InputMaybe<Scalars['String']>;\n  subdomain?: InputMaybe<Scalars['String']>;\n  token_name?: InputMaybe<Scalars['String']>;\n};\n\n/** columns and relationships of \"current_aptos_names\" */\nexport type Current_Aptos_Names = {\n  __typename?: 'current_aptos_names';\n  domain?: Maybe<Scalars['String']>;\n  expiration_timestamp?: Maybe<Scalars['timestamp']>;\n  is_primary?: Maybe<Scalars['Boolean']>;\n  last_transaction_version?: Maybe<Scalars['bigint']>;\n  registered_address?: Maybe<Scalars['String']>;\n  subdomain?: Maybe<Scalars['String']>;\n  token_name?: Maybe<Scalars['String']>;\n};\n\n/** order by aggregate values of table \"current_aptos_names\" */\nexport type Current_Aptos_Names_Aggregate_Order_By = {\n  avg?: InputMaybe<Current_Aptos_Names_Avg_Order_By>;\n  count?: InputMaybe<Order_By>;\n  max?: InputMaybe<Current_Aptos_Names_Max_Order_By>;\n  min?: InputMaybe<Current_Aptos_Names_Min_Order_By>;\n  stddev?: InputMaybe<Current_Aptos_Names_Stddev_Order_By>;\n  stddev_pop?: InputMaybe<Current_Aptos_Names_Stddev_Pop_Order_By>;\n  stddev_samp?: InputMaybe<Current_Aptos_Names_Stddev_Samp_Order_By>;\n  sum?: InputMaybe<Current_Aptos_Names_Sum_Order_By>;\n  var_pop?: InputMaybe<Current_Aptos_Names_Var_Pop_Order_By>;\n  var_samp?: InputMaybe<Current_Aptos_Names_Var_Samp_Order_By>;\n  variance?: InputMaybe<Current_Aptos_Names_Variance_Order_By>;\n};\n\n/** order by avg() on columns of table \"current_aptos_names\" */\nexport type Current_Aptos_Names_Avg_Order_By = {\n  last_transaction_version?: InputMaybe<Order_By>;\n};\n\n/** Boolean expression to filter rows from the table \"current_aptos_names\". All fields are combined with a logical 'AND'. */\nexport type Current_Aptos_Names_Bool_Exp = {\n  _and?: InputMaybe<Array<Current_Aptos_Names_Bool_Exp>>;\n  _not?: InputMaybe<Current_Aptos_Names_Bool_Exp>;\n  _or?: InputMaybe<Array<Current_Aptos_Names_Bool_Exp>>;\n  domain?: InputMaybe<String_Comparison_Exp>;\n  expiration_timestamp?: InputMaybe<Timestamp_Comparison_Exp>;\n  is_primary?: InputMaybe<Boolean_Comparison_Exp>;\n  last_transaction_version?: InputMaybe<Bigint_Comparison_Exp>;\n  registered_address?: InputMaybe<String_Comparison_Exp>;\n  subdomain?: InputMaybe<String_Comparison_Exp>;\n  token_name?: InputMaybe<String_Comparison_Exp>;\n};\n\n/** order by max() on columns of table \"current_aptos_names\" */\nexport type Current_Aptos_Names_Max_Order_By = {\n  domain?: InputMaybe<Order_By>;\n  expiration_timestamp?: InputMaybe<Order_By>;\n  last_transaction_version?: InputMaybe<Order_By>;\n  registered_address?: InputMaybe<Order_By>;\n  subdomain?: InputMaybe<Order_By>;\n  token_name?: InputMaybe<Order_By>;\n};\n\n/** order by min() on columns of table \"current_aptos_names\" */\nexport type Current_Aptos_Names_Min_Order_By = {\n  domain?: InputMaybe<Order_By>;\n  expiration_timestamp?: InputMaybe<Order_By>;\n  last_transaction_version?: InputMaybe<Order_By>;\n  registered_address?: InputMaybe<Order_By>;\n  subdomain?: InputMaybe<Order_By>;\n  token_name?: InputMaybe<Order_By>;\n};\n\n/** Ordering options when selecting data from \"current_aptos_names\". */\nexport type Current_Aptos_Names_Order_By = {\n  domain?: InputMaybe<Order_By>;\n  expiration_timestamp?: InputMaybe<Order_By>;\n  is_primary?: InputMaybe<Order_By>;\n  last_transaction_version?: InputMaybe<Order_By>;\n  registered_address?: InputMaybe<Order_By>;\n  subdomain?: InputMaybe<Order_By>;\n  token_name?: InputMaybe<Order_By>;\n};\n\n/** select columns of table \"current_aptos_names\" */\nexport enum Current_Aptos_Names_Select_Column {\n  /** column name */\n  Domain = 'domain',\n  /** column name */\n  ExpirationTimestamp = 'expiration_timestamp',\n  /** column name */\n  IsPrimary = 'is_primary',\n  /** column name */\n  LastTransactionVersion = 'last_transaction_version',\n  /** column name */\n  RegisteredAddress = 'registered_address',\n  /** column name */\n  Subdomain = 'subdomain',\n  /** column name */\n  TokenName = 'token_name'\n}\n\n/** order by stddev() on columns of table \"current_aptos_names\" */\nexport type Current_Aptos_Names_Stddev_Order_By = {\n  last_transaction_version?: InputMaybe<Order_By>;\n};\n\n/** order by stddev_pop() on columns of table \"current_aptos_names\" */\nexport type Current_Aptos_Names_Stddev_Pop_Order_By = {\n  last_transaction_version?: InputMaybe<Order_By>;\n};\n\n/** order by stddev_samp() on columns of table \"current_aptos_names\" */\nexport type Current_Aptos_Names_Stddev_Samp_Order_By = {\n  last_transaction_version?: InputMaybe<Order_By>;\n};\n\n/** Streaming cursor of the table \"current_aptos_names\" */\nexport type Current_Aptos_Names_Stream_Cursor_Input = {\n  /** Stream column input with initial value */\n  initial_value: Current_Aptos_Names_Stream_Cursor_Value_Input;\n  /** cursor ordering */\n  ordering?: InputMaybe<Cursor_Ordering>;\n};\n\n/** Initial value of the column from where the streaming should start */\nexport type Current_Aptos_Names_Stream_Cursor_Value_Input = {\n  domain?: InputMaybe<Scalars['String']>;\n  expiration_timestamp?: InputMaybe<Scalars['timestamp']>;\n  is_primary?: InputMaybe<Scalars['Boolean']>;\n  last_transaction_version?: InputMaybe<Scalars['bigint']>;\n  registered_address?: InputMaybe<Scalars['String']>;\n  subdomain?: InputMaybe<Scalars['String']>;\n  token_name?: InputMaybe<Scalars['String']>;\n};\n\n/** order by sum() on columns of table \"current_aptos_names\" */\nexport type Current_Aptos_Names_Sum_Order_By = {\n  last_transaction_version?: InputMaybe<Order_By>;\n};\n\n/** order by var_pop() on columns of table \"current_aptos_names\" */\nexport type Current_Aptos_Names_Var_Pop_Order_By = {\n  last_transaction_version?: InputMaybe<Order_By>;\n};\n\n/** order by var_samp() on columns of table \"current_aptos_names\" */\nexport type Current_Aptos_Names_Var_Samp_Order_By = {\n  last_transaction_version?: InputMaybe<Order_By>;\n};\n\n/** order by variance() on columns of table \"current_aptos_names\" */\nexport type Current_Aptos_Names_Variance_Order_By = {\n  last_transaction_version?: InputMaybe<Order_By>;\n};\n\n/** columns and relationships of \"current_coin_balances\" */\nexport type Current_Coin_Balances = {\n  __typename?: 'current_coin_balances';\n  amount: Scalars['numeric'];\n  /** An object relationship */\n  coin_info?: Maybe<Coin_Infos>;\n  coin_type: Scalars['String'];\n  coin_type_hash: Scalars['String'];\n  last_transaction_timestamp: Scalars['timestamp'];\n  last_transaction_version: Scalars['bigint'];\n  owner_address: Scalars['String'];\n};\n\n/** Boolean expression to filter rows from the table \"current_coin_balances\". All fields are combined with a logical 'AND'. */\nexport type Current_Coin_Balances_Bool_Exp = {\n  _and?: InputMaybe<Array<Current_Coin_Balances_Bool_Exp>>;\n  _not?: InputMaybe<Current_Coin_Balances_Bool_Exp>;\n  _or?: InputMaybe<Array<Current_Coin_Balances_Bool_Exp>>;\n  amount?: InputMaybe<Numeric_Comparison_Exp>;\n  coin_info?: InputMaybe<Coin_Infos_Bool_Exp>;\n  coin_type?: InputMaybe<String_Comparison_Exp>;\n  coin_type_hash?: InputMaybe<String_Comparison_Exp>;\n  last_transaction_timestamp?: InputMaybe<Timestamp_Comparison_Exp>;\n  last_transaction_version?: InputMaybe<Bigint_Comparison_Exp>;\n  owner_address?: InputMaybe<String_Comparison_Exp>;\n};\n\n/** Ordering options when selecting data from \"current_coin_balances\". */\nexport type Current_Coin_Balances_Order_By = {\n  amount?: InputMaybe<Order_By>;\n  coin_info?: InputMaybe<Coin_Infos_Order_By>;\n  coin_type?: InputMaybe<Order_By>;\n  coin_type_hash?: InputMaybe<Order_By>;\n  last_transaction_timestamp?: InputMaybe<Order_By>;\n  last_transaction_version?: InputMaybe<Order_By>;\n  owner_address?: InputMaybe<Order_By>;\n};\n\n/** select columns of table \"current_coin_balances\" */\nexport enum Current_Coin_Balances_Select_Column {\n  /** column name */\n  Amount = 'amount',\n  /** column name */\n  CoinType = 'coin_type',\n  /** column name */\n  CoinTypeHash = 'coin_type_hash',\n  /** column name */\n  LastTransactionTimestamp = 'last_transaction_timestamp',\n  /** column name */\n  LastTransactionVersion = 'last_transaction_version',\n  /** column name */\n  OwnerAddress = 'owner_address'\n}\n\n/** Streaming cursor of the table \"current_coin_balances\" */\nexport type Current_Coin_Balances_Stream_Cursor_Input = {\n  /** Stream column input with initial value */\n  initial_value: Current_Coin_Balances_Stream_Cursor_Value_Input;\n  /** cursor ordering */\n  ordering?: InputMaybe<Cursor_Ordering>;\n};\n\n/** Initial value of the column from where the streaming should start */\nexport type Current_Coin_Balances_Stream_Cursor_Value_Input = {\n  amount?: InputMaybe<Scalars['numeric']>;\n  coin_type?: InputMaybe<Scalars['String']>;\n  coin_type_hash?: InputMaybe<Scalars['String']>;\n  last_transaction_timestamp?: InputMaybe<Scalars['timestamp']>;\n  last_transaction_version?: InputMaybe<Scalars['bigint']>;\n  owner_address?: InputMaybe<Scalars['String']>;\n};\n\n/** columns and relationships of \"current_collection_datas\" */\nexport type Current_Collection_Datas = {\n  __typename?: 'current_collection_datas';\n  collection_data_id_hash: Scalars['String'];\n  collection_name: Scalars['String'];\n  creator_address: Scalars['String'];\n  description: Scalars['String'];\n  description_mutable: Scalars['Boolean'];\n  last_transaction_timestamp: Scalars['timestamp'];\n  last_transaction_version: Scalars['bigint'];\n  maximum: Scalars['numeric'];\n  maximum_mutable: Scalars['Boolean'];\n  metadata_uri: Scalars['String'];\n  supply: Scalars['numeric'];\n  table_handle: Scalars['String'];\n  uri_mutable: Scalars['Boolean'];\n};\n\n/** Boolean expression to filter rows from the table \"current_collection_datas\". All fields are combined with a logical 'AND'. */\nexport type Current_Collection_Datas_Bool_Exp = {\n  _and?: InputMaybe<Array<Current_Collection_Datas_Bool_Exp>>;\n  _not?: InputMaybe<Current_Collection_Datas_Bool_Exp>;\n  _or?: InputMaybe<Array<Current_Collection_Datas_Bool_Exp>>;\n  collection_data_id_hash?: InputMaybe<String_Comparison_Exp>;\n  collection_name?: InputMaybe<String_Comparison_Exp>;\n  creator_address?: InputMaybe<String_Comparison_Exp>;\n  description?: InputMaybe<String_Comparison_Exp>;\n  description_mutable?: InputMaybe<Boolean_Comparison_Exp>;\n  last_transaction_timestamp?: InputMaybe<Timestamp_Comparison_Exp>;\n  last_transaction_version?: InputMaybe<Bigint_Comparison_Exp>;\n  maximum?: InputMaybe<Numeric_Comparison_Exp>;\n  maximum_mutable?: InputMaybe<Boolean_Comparison_Exp>;\n  metadata_uri?: InputMaybe<String_Comparison_Exp>;\n  supply?: InputMaybe<Numeric_Comparison_Exp>;\n  table_handle?: InputMaybe<String_Comparison_Exp>;\n  uri_mutable?: InputMaybe<Boolean_Comparison_Exp>;\n};\n\n/** Ordering options when selecting data from \"current_collection_datas\". */\nexport type Current_Collection_Datas_Order_By = {\n  collection_data_id_hash?: InputMaybe<Order_By>;\n  collection_name?: InputMaybe<Order_By>;\n  creator_address?: InputMaybe<Order_By>;\n  description?: InputMaybe<Order_By>;\n  description_mutable?: InputMaybe<Order_By>;\n  last_transaction_timestamp?: InputMaybe<Order_By>;\n  last_transaction_version?: InputMaybe<Order_By>;\n  maximum?: InputMaybe<Order_By>;\n  maximum_mutable?: InputMaybe<Order_By>;\n  metadata_uri?: InputMaybe<Order_By>;\n  supply?: InputMaybe<Order_By>;\n  table_handle?: InputMaybe<Order_By>;\n  uri_mutable?: InputMaybe<Order_By>;\n};\n\n/** select columns of table \"current_collection_datas\" */\nexport enum Current_Collection_Datas_Select_Column {\n  /** column name */\n  CollectionDataIdHash = 'collection_data_id_hash',\n  /** column name */\n  CollectionName = 'collection_name',\n  /** column name */\n  CreatorAddress = 'creator_address',\n  /** column name */\n  Description = 'description',\n  /** column name */\n  DescriptionMutable = 'description_mutable',\n  /** column name */\n  LastTransactionTimestamp = 'last_transaction_timestamp',\n  /** column name */\n  LastTransactionVersion = 'last_transaction_version',\n  /** column name */\n  Maximum = 'maximum',\n  /** column name */\n  MaximumMutable = 'maximum_mutable',\n  /** column name */\n  MetadataUri = 'metadata_uri',\n  /** column name */\n  Supply = 'supply',\n  /** column name */\n  TableHandle = 'table_handle',\n  /** column name */\n  UriMutable = 'uri_mutable'\n}\n\n/** Streaming cursor of the table \"current_collection_datas\" */\nexport type Current_Collection_Datas_Stream_Cursor_Input = {\n  /** Stream column input with initial value */\n  initial_value: Current_Collection_Datas_Stream_Cursor_Value_Input;\n  /** cursor ordering */\n  ordering?: InputMaybe<Cursor_Ordering>;\n};\n\n/** Initial value of the column from where the streaming should start */\nexport type Current_Collection_Datas_Stream_Cursor_Value_Input = {\n  collection_data_id_hash?: InputMaybe<Scalars['String']>;\n  collection_name?: InputMaybe<Scalars['String']>;\n  creator_address?: InputMaybe<Scalars['String']>;\n  description?: InputMaybe<Scalars['String']>;\n  description_mutable?: InputMaybe<Scalars['Boolean']>;\n  last_transaction_timestamp?: InputMaybe<Scalars['timestamp']>;\n  last_transaction_version?: InputMaybe<Scalars['bigint']>;\n  maximum?: InputMaybe<Scalars['numeric']>;\n  maximum_mutable?: InputMaybe<Scalars['Boolean']>;\n  metadata_uri?: InputMaybe<Scalars['String']>;\n  supply?: InputMaybe<Scalars['numeric']>;\n  table_handle?: InputMaybe<Scalars['String']>;\n  uri_mutable?: InputMaybe<Scalars['Boolean']>;\n};\n\n/** columns and relationships of \"current_collection_ownership_v2_view\" */\nexport type Current_Collection_Ownership_V2_View = {\n  __typename?: 'current_collection_ownership_v2_view';\n  collection_id?: Maybe<Scalars['String']>;\n  collection_name?: Maybe<Scalars['String']>;\n  collection_uri?: Maybe<Scalars['String']>;\n  creator_address?: Maybe<Scalars['String']>;\n  /** An object relationship */\n  current_collection?: Maybe<Current_Collections_V2>;\n  distinct_tokens?: Maybe<Scalars['bigint']>;\n  last_transaction_version?: Maybe<Scalars['bigint']>;\n  owner_address?: Maybe<Scalars['String']>;\n  single_token_uri?: Maybe<Scalars['String']>;\n};\n\n/** aggregated selection of \"current_collection_ownership_v2_view\" */\nexport type Current_Collection_Ownership_V2_View_Aggregate = {\n  __typename?: 'current_collection_ownership_v2_view_aggregate';\n  aggregate?: Maybe<Current_Collection_Ownership_V2_View_Aggregate_Fields>;\n  nodes: Array<Current_Collection_Ownership_V2_View>;\n};\n\n/** aggregate fields of \"current_collection_ownership_v2_view\" */\nexport type Current_Collection_Ownership_V2_View_Aggregate_Fields = {\n  __typename?: 'current_collection_ownership_v2_view_aggregate_fields';\n  avg?: Maybe<Current_Collection_Ownership_V2_View_Avg_Fields>;\n  count: Scalars['Int'];\n  max?: Maybe<Current_Collection_Ownership_V2_View_Max_Fields>;\n  min?: Maybe<Current_Collection_Ownership_V2_View_Min_Fields>;\n  stddev?: Maybe<Current_Collection_Ownership_V2_View_Stddev_Fields>;\n  stddev_pop?: Maybe<Current_Collection_Ownership_V2_View_Stddev_Pop_Fields>;\n  stddev_samp?: Maybe<Current_Collection_Ownership_V2_View_Stddev_Samp_Fields>;\n  sum?: Maybe<Current_Collection_Ownership_V2_View_Sum_Fields>;\n  var_pop?: Maybe<Current_Collection_Ownership_V2_View_Var_Pop_Fields>;\n  var_samp?: Maybe<Current_Collection_Ownership_V2_View_Var_Samp_Fields>;\n  variance?: Maybe<Current_Collection_Ownership_V2_View_Variance_Fields>;\n};\n\n\n/** aggregate fields of \"current_collection_ownership_v2_view\" */\nexport type Current_Collection_Ownership_V2_View_Aggregate_FieldsCountArgs = {\n  columns?: InputMaybe<Array<Current_Collection_Ownership_V2_View_Select_Column>>;\n  distinct?: InputMaybe<Scalars['Boolean']>;\n};\n\n/** aggregate avg on columns */\nexport type Current_Collection_Ownership_V2_View_Avg_Fields = {\n  __typename?: 'current_collection_ownership_v2_view_avg_fields';\n  distinct_tokens?: Maybe<Scalars['Float']>;\n  last_transaction_version?: Maybe<Scalars['Float']>;\n};\n\n/** Boolean expression to filter rows from the table \"current_collection_ownership_v2_view\". All fields are combined with a logical 'AND'. */\nexport type Current_Collection_Ownership_V2_View_Bool_Exp = {\n  _and?: InputMaybe<Array<Current_Collection_Ownership_V2_View_Bool_Exp>>;\n  _not?: InputMaybe<Current_Collection_Ownership_V2_View_Bool_Exp>;\n  _or?: InputMaybe<Array<Current_Collection_Ownership_V2_View_Bool_Exp>>;\n  collection_id?: InputMaybe<String_Comparison_Exp>;\n  collection_name?: InputMaybe<String_Comparison_Exp>;\n  collection_uri?: InputMaybe<String_Comparison_Exp>;\n  creator_address?: InputMaybe<String_Comparison_Exp>;\n  current_collection?: InputMaybe<Current_Collections_V2_Bool_Exp>;\n  distinct_tokens?: InputMaybe<Bigint_Comparison_Exp>;\n  last_transaction_version?: InputMaybe<Bigint_Comparison_Exp>;\n  owner_address?: InputMaybe<String_Comparison_Exp>;\n  single_token_uri?: InputMaybe<String_Comparison_Exp>;\n};\n\n/** aggregate max on columns */\nexport type Current_Collection_Ownership_V2_View_Max_Fields = {\n  __typename?: 'current_collection_ownership_v2_view_max_fields';\n  collection_id?: Maybe<Scalars['String']>;\n  collection_name?: Maybe<Scalars['String']>;\n  collection_uri?: Maybe<Scalars['String']>;\n  creator_address?: Maybe<Scalars['String']>;\n  distinct_tokens?: Maybe<Scalars['bigint']>;\n  last_transaction_version?: Maybe<Scalars['bigint']>;\n  owner_address?: Maybe<Scalars['String']>;\n  single_token_uri?: Maybe<Scalars['String']>;\n};\n\n/** aggregate min on columns */\nexport type Current_Collection_Ownership_V2_View_Min_Fields = {\n  __typename?: 'current_collection_ownership_v2_view_min_fields';\n  collection_id?: Maybe<Scalars['String']>;\n  collection_name?: Maybe<Scalars['String']>;\n  collection_uri?: Maybe<Scalars['String']>;\n  creator_address?: Maybe<Scalars['String']>;\n  distinct_tokens?: Maybe<Scalars['bigint']>;\n  last_transaction_version?: Maybe<Scalars['bigint']>;\n  owner_address?: Maybe<Scalars['String']>;\n  single_token_uri?: Maybe<Scalars['String']>;\n};\n\n/** Ordering options when selecting data from \"current_collection_ownership_v2_view\". */\nexport type Current_Collection_Ownership_V2_View_Order_By = {\n  collection_id?: InputMaybe<Order_By>;\n  collection_name?: InputMaybe<Order_By>;\n  collection_uri?: InputMaybe<Order_By>;\n  creator_address?: InputMaybe<Order_By>;\n  current_collection?: InputMaybe<Current_Collections_V2_Order_By>;\n  distinct_tokens?: InputMaybe<Order_By>;\n  last_transaction_version?: InputMaybe<Order_By>;\n  owner_address?: InputMaybe<Order_By>;\n  single_token_uri?: InputMaybe<Order_By>;\n};\n\n/** select columns of table \"current_collection_ownership_v2_view\" */\nexport enum Current_Collection_Ownership_V2_View_Select_Column {\n  /** column name */\n  CollectionId = 'collection_id',\n  /** column name */\n  CollectionName = 'collection_name',\n  /** column name */\n  CollectionUri = 'collection_uri',\n  /** column name */\n  CreatorAddress = 'creator_address',\n  /** column name */\n  DistinctTokens = 'distinct_tokens',\n  /** column name */\n  LastTransactionVersion = 'last_transaction_version',\n  /** column name */\n  OwnerAddress = 'owner_address',\n  /** column name */\n  SingleTokenUri = 'single_token_uri'\n}\n\n/** aggregate stddev on columns */\nexport type Current_Collection_Ownership_V2_View_Stddev_Fields = {\n  __typename?: 'current_collection_ownership_v2_view_stddev_fields';\n  distinct_tokens?: Maybe<Scalars['Float']>;\n  last_transaction_version?: Maybe<Scalars['Float']>;\n};\n\n/** aggregate stddev_pop on columns */\nexport type Current_Collection_Ownership_V2_View_Stddev_Pop_Fields = {\n  __typename?: 'current_collection_ownership_v2_view_stddev_pop_fields';\n  distinct_tokens?: Maybe<Scalars['Float']>;\n  last_transaction_version?: Maybe<Scalars['Float']>;\n};\n\n/** aggregate stddev_samp on columns */\nexport type Current_Collection_Ownership_V2_View_Stddev_Samp_Fields = {\n  __typename?: 'current_collection_ownership_v2_view_stddev_samp_fields';\n  distinct_tokens?: Maybe<Scalars['Float']>;\n  last_transaction_version?: Maybe<Scalars['Float']>;\n};\n\n/** Streaming cursor of the table \"current_collection_ownership_v2_view\" */\nexport type Current_Collection_Ownership_V2_View_Stream_Cursor_Input = {\n  /** Stream column input with initial value */\n  initial_value: Current_Collection_Ownership_V2_View_Stream_Cursor_Value_Input;\n  /** cursor ordering */\n  ordering?: InputMaybe<Cursor_Ordering>;\n};\n\n/** Initial value of the column from where the streaming should start */\nexport type Current_Collection_Ownership_V2_View_Stream_Cursor_Value_Input = {\n  collection_id?: InputMaybe<Scalars['String']>;\n  collection_name?: InputMaybe<Scalars['String']>;\n  collection_uri?: InputMaybe<Scalars['String']>;\n  creator_address?: InputMaybe<Scalars['String']>;\n  distinct_tokens?: InputMaybe<Scalars['bigint']>;\n  last_transaction_version?: InputMaybe<Scalars['bigint']>;\n  owner_address?: InputMaybe<Scalars['String']>;\n  single_token_uri?: InputMaybe<Scalars['String']>;\n};\n\n/** aggregate sum on columns */\nexport type Current_Collection_Ownership_V2_View_Sum_Fields = {\n  __typename?: 'current_collection_ownership_v2_view_sum_fields';\n  distinct_tokens?: Maybe<Scalars['bigint']>;\n  last_transaction_version?: Maybe<Scalars['bigint']>;\n};\n\n/** aggregate var_pop on columns */\nexport type Current_Collection_Ownership_V2_View_Var_Pop_Fields = {\n  __typename?: 'current_collection_ownership_v2_view_var_pop_fields';\n  distinct_tokens?: Maybe<Scalars['Float']>;\n  last_transaction_version?: Maybe<Scalars['Float']>;\n};\n\n/** aggregate var_samp on columns */\nexport type Current_Collection_Ownership_V2_View_Var_Samp_Fields = {\n  __typename?: 'current_collection_ownership_v2_view_var_samp_fields';\n  distinct_tokens?: Maybe<Scalars['Float']>;\n  last_transaction_version?: Maybe<Scalars['Float']>;\n};\n\n/** aggregate variance on columns */\nexport type Current_Collection_Ownership_V2_View_Variance_Fields = {\n  __typename?: 'current_collection_ownership_v2_view_variance_fields';\n  distinct_tokens?: Maybe<Scalars['Float']>;\n  last_transaction_version?: Maybe<Scalars['Float']>;\n};\n\n/** columns and relationships of \"current_collections_v2\" */\nexport type Current_Collections_V2 = {\n  __typename?: 'current_collections_v2';\n  collection_id: Scalars['String'];\n  collection_name: Scalars['String'];\n  creator_address: Scalars['String'];\n  current_supply: Scalars['numeric'];\n  description: Scalars['String'];\n  last_transaction_timestamp: Scalars['timestamp'];\n  last_transaction_version: Scalars['bigint'];\n  max_supply?: Maybe<Scalars['numeric']>;\n  mutable_description?: Maybe<Scalars['Boolean']>;\n  mutable_uri?: Maybe<Scalars['Boolean']>;\n  table_handle_v1?: Maybe<Scalars['String']>;\n  token_standard: Scalars['String'];\n  total_minted_v2?: Maybe<Scalars['numeric']>;\n  uri: Scalars['String'];\n};\n\n/** Boolean expression to filter rows from the table \"current_collections_v2\". All fields are combined with a logical 'AND'. */\nexport type Current_Collections_V2_Bool_Exp = {\n  _and?: InputMaybe<Array<Current_Collections_V2_Bool_Exp>>;\n  _not?: InputMaybe<Current_Collections_V2_Bool_Exp>;\n  _or?: InputMaybe<Array<Current_Collections_V2_Bool_Exp>>;\n  collection_id?: InputMaybe<String_Comparison_Exp>;\n  collection_name?: InputMaybe<String_Comparison_Exp>;\n  creator_address?: InputMaybe<String_Comparison_Exp>;\n  current_supply?: InputMaybe<Numeric_Comparison_Exp>;\n  description?: InputMaybe<String_Comparison_Exp>;\n  last_transaction_timestamp?: InputMaybe<Timestamp_Comparison_Exp>;\n  last_transaction_version?: InputMaybe<Bigint_Comparison_Exp>;\n  max_supply?: InputMaybe<Numeric_Comparison_Exp>;\n  mutable_description?: InputMaybe<Boolean_Comparison_Exp>;\n  mutable_uri?: InputMaybe<Boolean_Comparison_Exp>;\n  table_handle_v1?: InputMaybe<String_Comparison_Exp>;\n  token_standard?: InputMaybe<String_Comparison_Exp>;\n  total_minted_v2?: InputMaybe<Numeric_Comparison_Exp>;\n  uri?: InputMaybe<String_Comparison_Exp>;\n};\n\n/** Ordering options when selecting data from \"current_collections_v2\". */\nexport type Current_Collections_V2_Order_By = {\n  collection_id?: InputMaybe<Order_By>;\n  collection_name?: InputMaybe<Order_By>;\n  creator_address?: InputMaybe<Order_By>;\n  current_supply?: InputMaybe<Order_By>;\n  description?: InputMaybe<Order_By>;\n  last_transaction_timestamp?: InputMaybe<Order_By>;\n  last_transaction_version?: InputMaybe<Order_By>;\n  max_supply?: InputMaybe<Order_By>;\n  mutable_description?: InputMaybe<Order_By>;\n  mutable_uri?: InputMaybe<Order_By>;\n  table_handle_v1?: InputMaybe<Order_By>;\n  token_standard?: InputMaybe<Order_By>;\n  total_minted_v2?: InputMaybe<Order_By>;\n  uri?: InputMaybe<Order_By>;\n};\n\n/** select columns of table \"current_collections_v2\" */\nexport enum Current_Collections_V2_Select_Column {\n  /** column name */\n  CollectionId = 'collection_id',\n  /** column name */\n  CollectionName = 'collection_name',\n  /** column name */\n  CreatorAddress = 'creator_address',\n  /** column name */\n  CurrentSupply = 'current_supply',\n  /** column name */\n  Description = 'description',\n  /** column name */\n  LastTransactionTimestamp = 'last_transaction_timestamp',\n  /** column name */\n  LastTransactionVersion = 'last_transaction_version',\n  /** column name */\n  MaxSupply = 'max_supply',\n  /** column name */\n  MutableDescription = 'mutable_description',\n  /** column name */\n  MutableUri = 'mutable_uri',\n  /** column name */\n  TableHandleV1 = 'table_handle_v1',\n  /** column name */\n  TokenStandard = 'token_standard',\n  /** column name */\n  TotalMintedV2 = 'total_minted_v2',\n  /** column name */\n  Uri = 'uri'\n}\n\n/** Streaming cursor of the table \"current_collections_v2\" */\nexport type Current_Collections_V2_Stream_Cursor_Input = {\n  /** Stream column input with initial value */\n  initial_value: Current_Collections_V2_Stream_Cursor_Value_Input;\n  /** cursor ordering */\n  ordering?: InputMaybe<Cursor_Ordering>;\n};\n\n/** Initial value of the column from where the streaming should start */\nexport type Current_Collections_V2_Stream_Cursor_Value_Input = {\n  collection_id?: InputMaybe<Scalars['String']>;\n  collection_name?: InputMaybe<Scalars['String']>;\n  creator_address?: InputMaybe<Scalars['String']>;\n  current_supply?: InputMaybe<Scalars['numeric']>;\n  description?: InputMaybe<Scalars['String']>;\n  last_transaction_timestamp?: InputMaybe<Scalars['timestamp']>;\n  last_transaction_version?: InputMaybe<Scalars['bigint']>;\n  max_supply?: InputMaybe<Scalars['numeric']>;\n  mutable_description?: InputMaybe<Scalars['Boolean']>;\n  mutable_uri?: InputMaybe<Scalars['Boolean']>;\n  table_handle_v1?: InputMaybe<Scalars['String']>;\n  token_standard?: InputMaybe<Scalars['String']>;\n  total_minted_v2?: InputMaybe<Scalars['numeric']>;\n  uri?: InputMaybe<Scalars['String']>;\n};\n\n/** columns and relationships of \"current_delegated_staking_pool_balances\" */\nexport type Current_Delegated_Staking_Pool_Balances = {\n  __typename?: 'current_delegated_staking_pool_balances';\n  active_table_handle: Scalars['String'];\n  inactive_table_handle: Scalars['String'];\n  last_transaction_version: Scalars['bigint'];\n  operator_commission_percentage: Scalars['numeric'];\n  staking_pool_address: Scalars['String'];\n  total_coins: Scalars['numeric'];\n  total_shares: Scalars['numeric'];\n};\n\n/** Boolean expression to filter rows from the table \"current_delegated_staking_pool_balances\". All fields are combined with a logical 'AND'. */\nexport type Current_Delegated_Staking_Pool_Balances_Bool_Exp = {\n  _and?: InputMaybe<Array<Current_Delegated_Staking_Pool_Balances_Bool_Exp>>;\n  _not?: InputMaybe<Current_Delegated_Staking_Pool_Balances_Bool_Exp>;\n  _or?: InputMaybe<Array<Current_Delegated_Staking_Pool_Balances_Bool_Exp>>;\n  active_table_handle?: InputMaybe<String_Comparison_Exp>;\n  inactive_table_handle?: InputMaybe<String_Comparison_Exp>;\n  last_transaction_version?: InputMaybe<Bigint_Comparison_Exp>;\n  operator_commission_percentage?: InputMaybe<Numeric_Comparison_Exp>;\n  staking_pool_address?: InputMaybe<String_Comparison_Exp>;\n  total_coins?: InputMaybe<Numeric_Comparison_Exp>;\n  total_shares?: InputMaybe<Numeric_Comparison_Exp>;\n};\n\n/** Ordering options when selecting data from \"current_delegated_staking_pool_balances\". */\nexport type Current_Delegated_Staking_Pool_Balances_Order_By = {\n  active_table_handle?: InputMaybe<Order_By>;\n  inactive_table_handle?: InputMaybe<Order_By>;\n  last_transaction_version?: InputMaybe<Order_By>;\n  operator_commission_percentage?: InputMaybe<Order_By>;\n  staking_pool_address?: InputMaybe<Order_By>;\n  total_coins?: InputMaybe<Order_By>;\n  total_shares?: InputMaybe<Order_By>;\n};\n\n/** select columns of table \"current_delegated_staking_pool_balances\" */\nexport enum Current_Delegated_Staking_Pool_Balances_Select_Column {\n  /** column name */\n  ActiveTableHandle = 'active_table_handle',\n  /** column name */\n  InactiveTableHandle = 'inactive_table_handle',\n  /** column name */\n  LastTransactionVersion = 'last_transaction_version',\n  /** column name */\n  OperatorCommissionPercentage = 'operator_commission_percentage',\n  /** column name */\n  StakingPoolAddress = 'staking_pool_address',\n  /** column name */\n  TotalCoins = 'total_coins',\n  /** column name */\n  TotalShares = 'total_shares'\n}\n\n/** Streaming cursor of the table \"current_delegated_staking_pool_balances\" */\nexport type Current_Delegated_Staking_Pool_Balances_Stream_Cursor_Input = {\n  /** Stream column input with initial value */\n  initial_value: Current_Delegated_Staking_Pool_Balances_Stream_Cursor_Value_Input;\n  /** cursor ordering */\n  ordering?: InputMaybe<Cursor_Ordering>;\n};\n\n/** Initial value of the column from where the streaming should start */\nexport type Current_Delegated_Staking_Pool_Balances_Stream_Cursor_Value_Input = {\n  active_table_handle?: InputMaybe<Scalars['String']>;\n  inactive_table_handle?: InputMaybe<Scalars['String']>;\n  last_transaction_version?: InputMaybe<Scalars['bigint']>;\n  operator_commission_percentage?: InputMaybe<Scalars['numeric']>;\n  staking_pool_address?: InputMaybe<Scalars['String']>;\n  total_coins?: InputMaybe<Scalars['numeric']>;\n  total_shares?: InputMaybe<Scalars['numeric']>;\n};\n\n/** columns and relationships of \"current_delegated_voter\" */\nexport type Current_Delegated_Voter = {\n  __typename?: 'current_delegated_voter';\n  delegation_pool_address: Scalars['String'];\n  delegator_address: Scalars['String'];\n  last_transaction_timestamp: Scalars['timestamp'];\n  last_transaction_version: Scalars['bigint'];\n  pending_voter?: Maybe<Scalars['String']>;\n  table_handle?: Maybe<Scalars['String']>;\n  voter?: Maybe<Scalars['String']>;\n};\n\n/** Boolean expression to filter rows from the table \"current_delegated_voter\". All fields are combined with a logical 'AND'. */\nexport type Current_Delegated_Voter_Bool_Exp = {\n  _and?: InputMaybe<Array<Current_Delegated_Voter_Bool_Exp>>;\n  _not?: InputMaybe<Current_Delegated_Voter_Bool_Exp>;\n  _or?: InputMaybe<Array<Current_Delegated_Voter_Bool_Exp>>;\n  delegation_pool_address?: InputMaybe<String_Comparison_Exp>;\n  delegator_address?: InputMaybe<String_Comparison_Exp>;\n  last_transaction_timestamp?: InputMaybe<Timestamp_Comparison_Exp>;\n  last_transaction_version?: InputMaybe<Bigint_Comparison_Exp>;\n  pending_voter?: InputMaybe<String_Comparison_Exp>;\n  table_handle?: InputMaybe<String_Comparison_Exp>;\n  voter?: InputMaybe<String_Comparison_Exp>;\n};\n\n/** Ordering options when selecting data from \"current_delegated_voter\". */\nexport type Current_Delegated_Voter_Order_By = {\n  delegation_pool_address?: InputMaybe<Order_By>;\n  delegator_address?: InputMaybe<Order_By>;\n  last_transaction_timestamp?: InputMaybe<Order_By>;\n  last_transaction_version?: InputMaybe<Order_By>;\n  pending_voter?: InputMaybe<Order_By>;\n  table_handle?: InputMaybe<Order_By>;\n  voter?: InputMaybe<Order_By>;\n};\n\n/** select columns of table \"current_delegated_voter\" */\nexport enum Current_Delegated_Voter_Select_Column {\n  /** column name */\n  DelegationPoolAddress = 'delegation_pool_address',\n  /** column name */\n  DelegatorAddress = 'delegator_address',\n  /** column name */\n  LastTransactionTimestamp = 'last_transaction_timestamp',\n  /** column name */\n  LastTransactionVersion = 'last_transaction_version',\n  /** column name */\n  PendingVoter = 'pending_voter',\n  /** column name */\n  TableHandle = 'table_handle',\n  /** column name */\n  Voter = 'voter'\n}\n\n/** Streaming cursor of the table \"current_delegated_voter\" */\nexport type Current_Delegated_Voter_Stream_Cursor_Input = {\n  /** Stream column input with initial value */\n  initial_value: Current_Delegated_Voter_Stream_Cursor_Value_Input;\n  /** cursor ordering */\n  ordering?: InputMaybe<Cursor_Ordering>;\n};\n\n/** Initial value of the column from where the streaming should start */\nexport type Current_Delegated_Voter_Stream_Cursor_Value_Input = {\n  delegation_pool_address?: InputMaybe<Scalars['String']>;\n  delegator_address?: InputMaybe<Scalars['String']>;\n  last_transaction_timestamp?: InputMaybe<Scalars['timestamp']>;\n  last_transaction_version?: InputMaybe<Scalars['bigint']>;\n  pending_voter?: InputMaybe<Scalars['String']>;\n  table_handle?: InputMaybe<Scalars['String']>;\n  voter?: InputMaybe<Scalars['String']>;\n};\n\n/** columns and relationships of \"current_delegator_balances\" */\nexport type Current_Delegator_Balances = {\n  __typename?: 'current_delegator_balances';\n  /** An object relationship */\n  current_pool_balance?: Maybe<Current_Delegated_Staking_Pool_Balances>;\n  delegator_address: Scalars['String'];\n  last_transaction_version: Scalars['bigint'];\n  parent_table_handle: Scalars['String'];\n  pool_address: Scalars['String'];\n  pool_type: Scalars['String'];\n  shares: Scalars['numeric'];\n  /** An object relationship */\n  staking_pool_metadata?: Maybe<Current_Staking_Pool_Voter>;\n  table_handle: Scalars['String'];\n};\n\n/** Boolean expression to filter rows from the table \"current_delegator_balances\". All fields are combined with a logical 'AND'. */\nexport type Current_Delegator_Balances_Bool_Exp = {\n  _and?: InputMaybe<Array<Current_Delegator_Balances_Bool_Exp>>;\n  _not?: InputMaybe<Current_Delegator_Balances_Bool_Exp>;\n  _or?: InputMaybe<Array<Current_Delegator_Balances_Bool_Exp>>;\n  current_pool_balance?: InputMaybe<Current_Delegated_Staking_Pool_Balances_Bool_Exp>;\n  delegator_address?: InputMaybe<String_Comparison_Exp>;\n  last_transaction_version?: InputMaybe<Bigint_Comparison_Exp>;\n  parent_table_handle?: InputMaybe<String_Comparison_Exp>;\n  pool_address?: InputMaybe<String_Comparison_Exp>;\n  pool_type?: InputMaybe<String_Comparison_Exp>;\n  shares?: InputMaybe<Numeric_Comparison_Exp>;\n  staking_pool_metadata?: InputMaybe<Current_Staking_Pool_Voter_Bool_Exp>;\n  table_handle?: InputMaybe<String_Comparison_Exp>;\n};\n\n/** Ordering options when selecting data from \"current_delegator_balances\". */\nexport type Current_Delegator_Balances_Order_By = {\n  current_pool_balance?: InputMaybe<Current_Delegated_Staking_Pool_Balances_Order_By>;\n  delegator_address?: InputMaybe<Order_By>;\n  last_transaction_version?: InputMaybe<Order_By>;\n  parent_table_handle?: InputMaybe<Order_By>;\n  pool_address?: InputMaybe<Order_By>;\n  pool_type?: InputMaybe<Order_By>;\n  shares?: InputMaybe<Order_By>;\n  staking_pool_metadata?: InputMaybe<Current_Staking_Pool_Voter_Order_By>;\n  table_handle?: InputMaybe<Order_By>;\n};\n\n/** select columns of table \"current_delegator_balances\" */\nexport enum Current_Delegator_Balances_Select_Column {\n  /** column name */\n  DelegatorAddress = 'delegator_address',\n  /** column name */\n  LastTransactionVersion = 'last_transaction_version',\n  /** column name */\n  ParentTableHandle = 'parent_table_handle',\n  /** column name */\n  PoolAddress = 'pool_address',\n  /** column name */\n  PoolType = 'pool_type',\n  /** column name */\n  Shares = 'shares',\n  /** column name */\n  TableHandle = 'table_handle'\n}\n\n/** Streaming cursor of the table \"current_delegator_balances\" */\nexport type Current_Delegator_Balances_Stream_Cursor_Input = {\n  /** Stream column input with initial value */\n  initial_value: Current_Delegator_Balances_Stream_Cursor_Value_Input;\n  /** cursor ordering */\n  ordering?: InputMaybe<Cursor_Ordering>;\n};\n\n/** Initial value of the column from where the streaming should start */\nexport type Current_Delegator_Balances_Stream_Cursor_Value_Input = {\n  delegator_address?: InputMaybe<Scalars['String']>;\n  last_transaction_version?: InputMaybe<Scalars['bigint']>;\n  parent_table_handle?: InputMaybe<Scalars['String']>;\n  pool_address?: InputMaybe<Scalars['String']>;\n  pool_type?: InputMaybe<Scalars['String']>;\n  shares?: InputMaybe<Scalars['numeric']>;\n  table_handle?: InputMaybe<Scalars['String']>;\n};\n\n/** columns and relationships of \"current_fungible_asset_balances\" */\nexport type Current_Fungible_Asset_Balances = {\n  __typename?: 'current_fungible_asset_balances';\n  amount: Scalars['numeric'];\n  asset_type: Scalars['String'];\n  is_frozen: Scalars['Boolean'];\n  is_primary: Scalars['Boolean'];\n  last_transaction_timestamp: Scalars['timestamp'];\n  last_transaction_version: Scalars['bigint'];\n  /** An object relationship */\n  metadata?: Maybe<Fungible_Asset_Metadata>;\n  owner_address: Scalars['String'];\n  storage_id: Scalars['String'];\n  token_standard: Scalars['String'];\n};\n\n/** aggregated selection of \"current_fungible_asset_balances\" */\nexport type Current_Fungible_Asset_Balances_Aggregate = {\n  __typename?: 'current_fungible_asset_balances_aggregate';\n  aggregate?: Maybe<Current_Fungible_Asset_Balances_Aggregate_Fields>;\n  nodes: Array<Current_Fungible_Asset_Balances>;\n};\n\n/** aggregate fields of \"current_fungible_asset_balances\" */\nexport type Current_Fungible_Asset_Balances_Aggregate_Fields = {\n  __typename?: 'current_fungible_asset_balances_aggregate_fields';\n  avg?: Maybe<Current_Fungible_Asset_Balances_Avg_Fields>;\n  count: Scalars['Int'];\n  max?: Maybe<Current_Fungible_Asset_Balances_Max_Fields>;\n  min?: Maybe<Current_Fungible_Asset_Balances_Min_Fields>;\n  stddev?: Maybe<Current_Fungible_Asset_Balances_Stddev_Fields>;\n  stddev_pop?: Maybe<Current_Fungible_Asset_Balances_Stddev_Pop_Fields>;\n  stddev_samp?: Maybe<Current_Fungible_Asset_Balances_Stddev_Samp_Fields>;\n  sum?: Maybe<Current_Fungible_Asset_Balances_Sum_Fields>;\n  var_pop?: Maybe<Current_Fungible_Asset_Balances_Var_Pop_Fields>;\n  var_samp?: Maybe<Current_Fungible_Asset_Balances_Var_Samp_Fields>;\n  variance?: Maybe<Current_Fungible_Asset_Balances_Variance_Fields>;\n};\n\n\n/** aggregate fields of \"current_fungible_asset_balances\" */\nexport type Current_Fungible_Asset_Balances_Aggregate_FieldsCountArgs = {\n  columns?: InputMaybe<Array<Current_Fungible_Asset_Balances_Select_Column>>;\n  distinct?: InputMaybe<Scalars['Boolean']>;\n};\n\n/** aggregate avg on columns */\nexport type Current_Fungible_Asset_Balances_Avg_Fields = {\n  __typename?: 'current_fungible_asset_balances_avg_fields';\n  amount?: Maybe<Scalars['Float']>;\n  last_transaction_version?: Maybe<Scalars['Float']>;\n};\n\n/** Boolean expression to filter rows from the table \"current_fungible_asset_balances\". All fields are combined with a logical 'AND'. */\nexport type Current_Fungible_Asset_Balances_Bool_Exp = {\n  _and?: InputMaybe<Array<Current_Fungible_Asset_Balances_Bool_Exp>>;\n  _not?: InputMaybe<Current_Fungible_Asset_Balances_Bool_Exp>;\n  _or?: InputMaybe<Array<Current_Fungible_Asset_Balances_Bool_Exp>>;\n  amount?: InputMaybe<Numeric_Comparison_Exp>;\n  asset_type?: InputMaybe<String_Comparison_Exp>;\n  is_frozen?: InputMaybe<Boolean_Comparison_Exp>;\n  is_primary?: InputMaybe<Boolean_Comparison_Exp>;\n  last_transaction_timestamp?: InputMaybe<Timestamp_Comparison_Exp>;\n  last_transaction_version?: InputMaybe<Bigint_Comparison_Exp>;\n  metadata?: InputMaybe<Fungible_Asset_Metadata_Bool_Exp>;\n  owner_address?: InputMaybe<String_Comparison_Exp>;\n  storage_id?: InputMaybe<String_Comparison_Exp>;\n  token_standard?: InputMaybe<String_Comparison_Exp>;\n};\n\n/** aggregate max on columns */\nexport type Current_Fungible_Asset_Balances_Max_Fields = {\n  __typename?: 'current_fungible_asset_balances_max_fields';\n  amount?: Maybe<Scalars['numeric']>;\n  asset_type?: Maybe<Scalars['String']>;\n  last_transaction_timestamp?: Maybe<Scalars['timestamp']>;\n  last_transaction_version?: Maybe<Scalars['bigint']>;\n  owner_address?: Maybe<Scalars['String']>;\n  storage_id?: Maybe<Scalars['String']>;\n  token_standard?: Maybe<Scalars['String']>;\n};\n\n/** aggregate min on columns */\nexport type Current_Fungible_Asset_Balances_Min_Fields = {\n  __typename?: 'current_fungible_asset_balances_min_fields';\n  amount?: Maybe<Scalars['numeric']>;\n  asset_type?: Maybe<Scalars['String']>;\n  last_transaction_timestamp?: Maybe<Scalars['timestamp']>;\n  last_transaction_version?: Maybe<Scalars['bigint']>;\n  owner_address?: Maybe<Scalars['String']>;\n  storage_id?: Maybe<Scalars['String']>;\n  token_standard?: Maybe<Scalars['String']>;\n};\n\n/** Ordering options when selecting data from \"current_fungible_asset_balances\". */\nexport type Current_Fungible_Asset_Balances_Order_By = {\n  amount?: InputMaybe<Order_By>;\n  asset_type?: InputMaybe<Order_By>;\n  is_frozen?: InputMaybe<Order_By>;\n  is_primary?: InputMaybe<Order_By>;\n  last_transaction_timestamp?: InputMaybe<Order_By>;\n  last_transaction_version?: InputMaybe<Order_By>;\n  metadata?: InputMaybe<Fungible_Asset_Metadata_Order_By>;\n  owner_address?: InputMaybe<Order_By>;\n  storage_id?: InputMaybe<Order_By>;\n  token_standard?: InputMaybe<Order_By>;\n};\n\n/** select columns of table \"current_fungible_asset_balances\" */\nexport enum Current_Fungible_Asset_Balances_Select_Column {\n  /** column name */\n  Amount = 'amount',\n  /** column name */\n  AssetType = 'asset_type',\n  /** column name */\n  IsFrozen = 'is_frozen',\n  /** column name */\n  IsPrimary = 'is_primary',\n  /** column name */\n  LastTransactionTimestamp = 'last_transaction_timestamp',\n  /** column name */\n  LastTransactionVersion = 'last_transaction_version',\n  /** column name */\n  OwnerAddress = 'owner_address',\n  /** column name */\n  StorageId = 'storage_id',\n  /** column name */\n  TokenStandard = 'token_standard'\n}\n\n/** aggregate stddev on columns */\nexport type Current_Fungible_Asset_Balances_Stddev_Fields = {\n  __typename?: 'current_fungible_asset_balances_stddev_fields';\n  amount?: Maybe<Scalars['Float']>;\n  last_transaction_version?: Maybe<Scalars['Float']>;\n};\n\n/** aggregate stddev_pop on columns */\nexport type Current_Fungible_Asset_Balances_Stddev_Pop_Fields = {\n  __typename?: 'current_fungible_asset_balances_stddev_pop_fields';\n  amount?: Maybe<Scalars['Float']>;\n  last_transaction_version?: Maybe<Scalars['Float']>;\n};\n\n/** aggregate stddev_samp on columns */\nexport type Current_Fungible_Asset_Balances_Stddev_Samp_Fields = {\n  __typename?: 'current_fungible_asset_balances_stddev_samp_fields';\n  amount?: Maybe<Scalars['Float']>;\n  last_transaction_version?: Maybe<Scalars['Float']>;\n};\n\n/** Streaming cursor of the table \"current_fungible_asset_balances\" */\nexport type Current_Fungible_Asset_Balances_Stream_Cursor_Input = {\n  /** Stream column input with initial value */\n  initial_value: Current_Fungible_Asset_Balances_Stream_Cursor_Value_Input;\n  /** cursor ordering */\n  ordering?: InputMaybe<Cursor_Ordering>;\n};\n\n/** Initial value of the column from where the streaming should start */\nexport type Current_Fungible_Asset_Balances_Stream_Cursor_Value_Input = {\n  amount?: InputMaybe<Scalars['numeric']>;\n  asset_type?: InputMaybe<Scalars['String']>;\n  is_frozen?: InputMaybe<Scalars['Boolean']>;\n  is_primary?: InputMaybe<Scalars['Boolean']>;\n  last_transaction_timestamp?: InputMaybe<Scalars['timestamp']>;\n  last_transaction_version?: InputMaybe<Scalars['bigint']>;\n  owner_address?: InputMaybe<Scalars['String']>;\n  storage_id?: InputMaybe<Scalars['String']>;\n  token_standard?: InputMaybe<Scalars['String']>;\n};\n\n/** aggregate sum on columns */\nexport type Current_Fungible_Asset_Balances_Sum_Fields = {\n  __typename?: 'current_fungible_asset_balances_sum_fields';\n  amount?: Maybe<Scalars['numeric']>;\n  last_transaction_version?: Maybe<Scalars['bigint']>;\n};\n\n/** aggregate var_pop on columns */\nexport type Current_Fungible_Asset_Balances_Var_Pop_Fields = {\n  __typename?: 'current_fungible_asset_balances_var_pop_fields';\n  amount?: Maybe<Scalars['Float']>;\n  last_transaction_version?: Maybe<Scalars['Float']>;\n};\n\n/** aggregate var_samp on columns */\nexport type Current_Fungible_Asset_Balances_Var_Samp_Fields = {\n  __typename?: 'current_fungible_asset_balances_var_samp_fields';\n  amount?: Maybe<Scalars['Float']>;\n  last_transaction_version?: Maybe<Scalars['Float']>;\n};\n\n/** aggregate variance on columns */\nexport type Current_Fungible_Asset_Balances_Variance_Fields = {\n  __typename?: 'current_fungible_asset_balances_variance_fields';\n  amount?: Maybe<Scalars['Float']>;\n  last_transaction_version?: Maybe<Scalars['Float']>;\n};\n\n/** columns and relationships of \"current_objects\" */\nexport type Current_Objects = {\n  __typename?: 'current_objects';\n  allow_ungated_transfer: Scalars['Boolean'];\n  is_deleted: Scalars['Boolean'];\n  last_guid_creation_num: Scalars['numeric'];\n  last_transaction_version: Scalars['bigint'];\n  object_address: Scalars['String'];\n  owner_address: Scalars['String'];\n  state_key_hash: Scalars['String'];\n};\n\n/** Boolean expression to filter rows from the table \"current_objects\". All fields are combined with a logical 'AND'. */\nexport type Current_Objects_Bool_Exp = {\n  _and?: InputMaybe<Array<Current_Objects_Bool_Exp>>;\n  _not?: InputMaybe<Current_Objects_Bool_Exp>;\n  _or?: InputMaybe<Array<Current_Objects_Bool_Exp>>;\n  allow_ungated_transfer?: InputMaybe<Boolean_Comparison_Exp>;\n  is_deleted?: InputMaybe<Boolean_Comparison_Exp>;\n  last_guid_creation_num?: InputMaybe<Numeric_Comparison_Exp>;\n  last_transaction_version?: InputMaybe<Bigint_Comparison_Exp>;\n  object_address?: InputMaybe<String_Comparison_Exp>;\n  owner_address?: InputMaybe<String_Comparison_Exp>;\n  state_key_hash?: InputMaybe<String_Comparison_Exp>;\n};\n\n/** Ordering options when selecting data from \"current_objects\". */\nexport type Current_Objects_Order_By = {\n  allow_ungated_transfer?: InputMaybe<Order_By>;\n  is_deleted?: InputMaybe<Order_By>;\n  last_guid_creation_num?: InputMaybe<Order_By>;\n  last_transaction_version?: InputMaybe<Order_By>;\n  object_address?: InputMaybe<Order_By>;\n  owner_address?: InputMaybe<Order_By>;\n  state_key_hash?: InputMaybe<Order_By>;\n};\n\n/** select columns of table \"current_objects\" */\nexport enum Current_Objects_Select_Column {\n  /** column name */\n  AllowUngatedTransfer = 'allow_ungated_transfer',\n  /** column name */\n  IsDeleted = 'is_deleted',\n  /** column name */\n  LastGuidCreationNum = 'last_guid_creation_num',\n  /** column name */\n  LastTransactionVersion = 'last_transaction_version',\n  /** column name */\n  ObjectAddress = 'object_address',\n  /** column name */\n  OwnerAddress = 'owner_address',\n  /** column name */\n  StateKeyHash = 'state_key_hash'\n}\n\n/** Streaming cursor of the table \"current_objects\" */\nexport type Current_Objects_Stream_Cursor_Input = {\n  /** Stream column input with initial value */\n  initial_value: Current_Objects_Stream_Cursor_Value_Input;\n  /** cursor ordering */\n  ordering?: InputMaybe<Cursor_Ordering>;\n};\n\n/** Initial value of the column from where the streaming should start */\nexport type Current_Objects_Stream_Cursor_Value_Input = {\n  allow_ungated_transfer?: InputMaybe<Scalars['Boolean']>;\n  is_deleted?: InputMaybe<Scalars['Boolean']>;\n  last_guid_creation_num?: InputMaybe<Scalars['numeric']>;\n  last_transaction_version?: InputMaybe<Scalars['bigint']>;\n  object_address?: InputMaybe<Scalars['String']>;\n  owner_address?: InputMaybe<Scalars['String']>;\n  state_key_hash?: InputMaybe<Scalars['String']>;\n};\n\n/** columns and relationships of \"current_staking_pool_voter\" */\nexport type Current_Staking_Pool_Voter = {\n  __typename?: 'current_staking_pool_voter';\n  last_transaction_version: Scalars['bigint'];\n  operator_address: Scalars['String'];\n  /** An array relationship */\n  operator_aptos_name: Array<Current_Aptos_Names>;\n  staking_pool_address: Scalars['String'];\n  voter_address: Scalars['String'];\n};\n\n\n/** columns and relationships of \"current_staking_pool_voter\" */\nexport type Current_Staking_Pool_VoterOperator_Aptos_NameArgs = {\n  distinct_on?: InputMaybe<Array<Current_Aptos_Names_Select_Column>>;\n  limit?: InputMaybe<Scalars['Int']>;\n  offset?: InputMaybe<Scalars['Int']>;\n  order_by?: InputMaybe<Array<Current_Aptos_Names_Order_By>>;\n  where?: InputMaybe<Current_Aptos_Names_Bool_Exp>;\n};\n\n/** Boolean expression to filter rows from the table \"current_staking_pool_voter\". All fields are combined with a logical 'AND'. */\nexport type Current_Staking_Pool_Voter_Bool_Exp = {\n  _and?: InputMaybe<Array<Current_Staking_Pool_Voter_Bool_Exp>>;\n  _not?: InputMaybe<Current_Staking_Pool_Voter_Bool_Exp>;\n  _or?: InputMaybe<Array<Current_Staking_Pool_Voter_Bool_Exp>>;\n  last_transaction_version?: InputMaybe<Bigint_Comparison_Exp>;\n  operator_address?: InputMaybe<String_Comparison_Exp>;\n  operator_aptos_name?: InputMaybe<Current_Aptos_Names_Bool_Exp>;\n  staking_pool_address?: InputMaybe<String_Comparison_Exp>;\n  voter_address?: InputMaybe<String_Comparison_Exp>;\n};\n\n/** Ordering options when selecting data from \"current_staking_pool_voter\". */\nexport type Current_Staking_Pool_Voter_Order_By = {\n  last_transaction_version?: InputMaybe<Order_By>;\n  operator_address?: InputMaybe<Order_By>;\n  operator_aptos_name_aggregate?: InputMaybe<Current_Aptos_Names_Aggregate_Order_By>;\n  staking_pool_address?: InputMaybe<Order_By>;\n  voter_address?: InputMaybe<Order_By>;\n};\n\n/** select columns of table \"current_staking_pool_voter\" */\nexport enum Current_Staking_Pool_Voter_Select_Column {\n  /** column name */\n  LastTransactionVersion = 'last_transaction_version',\n  /** column name */\n  OperatorAddress = 'operator_address',\n  /** column name */\n  StakingPoolAddress = 'staking_pool_address',\n  /** column name */\n  VoterAddress = 'voter_address'\n}\n\n/** Streaming cursor of the table \"current_staking_pool_voter\" */\nexport type Current_Staking_Pool_Voter_Stream_Cursor_Input = {\n  /** Stream column input with initial value */\n  initial_value: Current_Staking_Pool_Voter_Stream_Cursor_Value_Input;\n  /** cursor ordering */\n  ordering?: InputMaybe<Cursor_Ordering>;\n};\n\n/** Initial value of the column from where the streaming should start */\nexport type Current_Staking_Pool_Voter_Stream_Cursor_Value_Input = {\n  last_transaction_version?: InputMaybe<Scalars['bigint']>;\n  operator_address?: InputMaybe<Scalars['String']>;\n  staking_pool_address?: InputMaybe<Scalars['String']>;\n  voter_address?: InputMaybe<Scalars['String']>;\n};\n\n/** columns and relationships of \"current_table_items\" */\nexport type Current_Table_Items = {\n  __typename?: 'current_table_items';\n  decoded_key: Scalars['jsonb'];\n  decoded_value?: Maybe<Scalars['jsonb']>;\n  is_deleted: Scalars['Boolean'];\n  key: Scalars['String'];\n  key_hash: Scalars['String'];\n  last_transaction_version: Scalars['bigint'];\n  table_handle: Scalars['String'];\n};\n\n\n/** columns and relationships of \"current_table_items\" */\nexport type Current_Table_ItemsDecoded_KeyArgs = {\n  path?: InputMaybe<Scalars['String']>;\n};\n\n\n/** columns and relationships of \"current_table_items\" */\nexport type Current_Table_ItemsDecoded_ValueArgs = {\n  path?: InputMaybe<Scalars['String']>;\n};\n\n/** Boolean expression to filter rows from the table \"current_table_items\". All fields are combined with a logical 'AND'. */\nexport type Current_Table_Items_Bool_Exp = {\n  _and?: InputMaybe<Array<Current_Table_Items_Bool_Exp>>;\n  _not?: InputMaybe<Current_Table_Items_Bool_Exp>;\n  _or?: InputMaybe<Array<Current_Table_Items_Bool_Exp>>;\n  decoded_key?: InputMaybe<Jsonb_Comparison_Exp>;\n  decoded_value?: InputMaybe<Jsonb_Comparison_Exp>;\n  is_deleted?: InputMaybe<Boolean_Comparison_Exp>;\n  key?: InputMaybe<String_Comparison_Exp>;\n  key_hash?: InputMaybe<String_Comparison_Exp>;\n  last_transaction_version?: InputMaybe<Bigint_Comparison_Exp>;\n  table_handle?: InputMaybe<String_Comparison_Exp>;\n};\n\n/** Ordering options when selecting data from \"current_table_items\". */\nexport type Current_Table_Items_Order_By = {\n  decoded_key?: InputMaybe<Order_By>;\n  decoded_value?: InputMaybe<Order_By>;\n  is_deleted?: InputMaybe<Order_By>;\n  key?: InputMaybe<Order_By>;\n  key_hash?: InputMaybe<Order_By>;\n  last_transaction_version?: InputMaybe<Order_By>;\n  table_handle?: InputMaybe<Order_By>;\n};\n\n/** select columns of table \"current_table_items\" */\nexport enum Current_Table_Items_Select_Column {\n  /** column name */\n  DecodedKey = 'decoded_key',\n  /** column name */\n  DecodedValue = 'decoded_value',\n  /** column name */\n  IsDeleted = 'is_deleted',\n  /** column name */\n  Key = 'key',\n  /** column name */\n  KeyHash = 'key_hash',\n  /** column name */\n  LastTransactionVersion = 'last_transaction_version',\n  /** column name */\n  TableHandle = 'table_handle'\n}\n\n/** Streaming cursor of the table \"current_table_items\" */\nexport type Current_Table_Items_Stream_Cursor_Input = {\n  /** Stream column input with initial value */\n  initial_value: Current_Table_Items_Stream_Cursor_Value_Input;\n  /** cursor ordering */\n  ordering?: InputMaybe<Cursor_Ordering>;\n};\n\n/** Initial value of the column from where the streaming should start */\nexport type Current_Table_Items_Stream_Cursor_Value_Input = {\n  decoded_key?: InputMaybe<Scalars['jsonb']>;\n  decoded_value?: InputMaybe<Scalars['jsonb']>;\n  is_deleted?: InputMaybe<Scalars['Boolean']>;\n  key?: InputMaybe<Scalars['String']>;\n  key_hash?: InputMaybe<Scalars['String']>;\n  last_transaction_version?: InputMaybe<Scalars['bigint']>;\n  table_handle?: InputMaybe<Scalars['String']>;\n};\n\n/** columns and relationships of \"current_token_datas\" */\nexport type Current_Token_Datas = {\n  __typename?: 'current_token_datas';\n  collection_data_id_hash: Scalars['String'];\n  collection_name: Scalars['String'];\n  creator_address: Scalars['String'];\n  /** An object relationship */\n  current_collection_data?: Maybe<Current_Collection_Datas>;\n  default_properties: Scalars['jsonb'];\n  description: Scalars['String'];\n  description_mutable: Scalars['Boolean'];\n  largest_property_version: Scalars['numeric'];\n  last_transaction_timestamp: Scalars['timestamp'];\n  last_transaction_version: Scalars['bigint'];\n  maximum: Scalars['numeric'];\n  maximum_mutable: Scalars['Boolean'];\n  metadata_uri: Scalars['String'];\n  name: Scalars['String'];\n  payee_address: Scalars['String'];\n  properties_mutable: Scalars['Boolean'];\n  royalty_mutable: Scalars['Boolean'];\n  royalty_points_denominator: Scalars['numeric'];\n  royalty_points_numerator: Scalars['numeric'];\n  supply: Scalars['numeric'];\n  token_data_id_hash: Scalars['String'];\n  uri_mutable: Scalars['Boolean'];\n};\n\n\n/** columns and relationships of \"current_token_datas\" */\nexport type Current_Token_DatasDefault_PropertiesArgs = {\n  path?: InputMaybe<Scalars['String']>;\n};\n\n/** Boolean expression to filter rows from the table \"current_token_datas\". All fields are combined with a logical 'AND'. */\nexport type Current_Token_Datas_Bool_Exp = {\n  _and?: InputMaybe<Array<Current_Token_Datas_Bool_Exp>>;\n  _not?: InputMaybe<Current_Token_Datas_Bool_Exp>;\n  _or?: InputMaybe<Array<Current_Token_Datas_Bool_Exp>>;\n  collection_data_id_hash?: InputMaybe<String_Comparison_Exp>;\n  collection_name?: InputMaybe<String_Comparison_Exp>;\n  creator_address?: InputMaybe<String_Comparison_Exp>;\n  current_collection_data?: InputMaybe<Current_Collection_Datas_Bool_Exp>;\n  default_properties?: InputMaybe<Jsonb_Comparison_Exp>;\n  description?: InputMaybe<String_Comparison_Exp>;\n  description_mutable?: InputMaybe<Boolean_Comparison_Exp>;\n  largest_property_version?: InputMaybe<Numeric_Comparison_Exp>;\n  last_transaction_timestamp?: InputMaybe<Timestamp_Comparison_Exp>;\n  last_transaction_version?: InputMaybe<Bigint_Comparison_Exp>;\n  maximum?: InputMaybe<Numeric_Comparison_Exp>;\n  maximum_mutable?: InputMaybe<Boolean_Comparison_Exp>;\n  metadata_uri?: InputMaybe<String_Comparison_Exp>;\n  name?: InputMaybe<String_Comparison_Exp>;\n  payee_address?: InputMaybe<String_Comparison_Exp>;\n  properties_mutable?: InputMaybe<Boolean_Comparison_Exp>;\n  royalty_mutable?: InputMaybe<Boolean_Comparison_Exp>;\n  royalty_points_denominator?: InputMaybe<Numeric_Comparison_Exp>;\n  royalty_points_numerator?: InputMaybe<Numeric_Comparison_Exp>;\n  supply?: InputMaybe<Numeric_Comparison_Exp>;\n  token_data_id_hash?: InputMaybe<String_Comparison_Exp>;\n  uri_mutable?: InputMaybe<Boolean_Comparison_Exp>;\n};\n\n/** Ordering options when selecting data from \"current_token_datas\". */\nexport type Current_Token_Datas_Order_By = {\n  collection_data_id_hash?: InputMaybe<Order_By>;\n  collection_name?: InputMaybe<Order_By>;\n  creator_address?: InputMaybe<Order_By>;\n  current_collection_data?: InputMaybe<Current_Collection_Datas_Order_By>;\n  default_properties?: InputMaybe<Order_By>;\n  description?: InputMaybe<Order_By>;\n  description_mutable?: InputMaybe<Order_By>;\n  largest_property_version?: InputMaybe<Order_By>;\n  last_transaction_timestamp?: InputMaybe<Order_By>;\n  last_transaction_version?: InputMaybe<Order_By>;\n  maximum?: InputMaybe<Order_By>;\n  maximum_mutable?: InputMaybe<Order_By>;\n  metadata_uri?: InputMaybe<Order_By>;\n  name?: InputMaybe<Order_By>;\n  payee_address?: InputMaybe<Order_By>;\n  properties_mutable?: InputMaybe<Order_By>;\n  royalty_mutable?: InputMaybe<Order_By>;\n  royalty_points_denominator?: InputMaybe<Order_By>;\n  royalty_points_numerator?: InputMaybe<Order_By>;\n  supply?: InputMaybe<Order_By>;\n  token_data_id_hash?: InputMaybe<Order_By>;\n  uri_mutable?: InputMaybe<Order_By>;\n};\n\n/** select columns of table \"current_token_datas\" */\nexport enum Current_Token_Datas_Select_Column {\n  /** column name */\n  CollectionDataIdHash = 'collection_data_id_hash',\n  /** column name */\n  CollectionName = 'collection_name',\n  /** column name */\n  CreatorAddress = 'creator_address',\n  /** column name */\n  DefaultProperties = 'default_properties',\n  /** column name */\n  Description = 'description',\n  /** column name */\n  DescriptionMutable = 'description_mutable',\n  /** column name */\n  LargestPropertyVersion = 'largest_property_version',\n  /** column name */\n  LastTransactionTimestamp = 'last_transaction_timestamp',\n  /** column name */\n  LastTransactionVersion = 'last_transaction_version',\n  /** column name */\n  Maximum = 'maximum',\n  /** column name */\n  MaximumMutable = 'maximum_mutable',\n  /** column name */\n  MetadataUri = 'metadata_uri',\n  /** column name */\n  Name = 'name',\n  /** column name */\n  PayeeAddress = 'payee_address',\n  /** column name */\n  PropertiesMutable = 'properties_mutable',\n  /** column name */\n  RoyaltyMutable = 'royalty_mutable',\n  /** column name */\n  RoyaltyPointsDenominator = 'royalty_points_denominator',\n  /** column name */\n  RoyaltyPointsNumerator = 'royalty_points_numerator',\n  /** column name */\n  Supply = 'supply',\n  /** column name */\n  TokenDataIdHash = 'token_data_id_hash',\n  /** column name */\n  UriMutable = 'uri_mutable'\n}\n\n/** Streaming cursor of the table \"current_token_datas\" */\nexport type Current_Token_Datas_Stream_Cursor_Input = {\n  /** Stream column input with initial value */\n  initial_value: Current_Token_Datas_Stream_Cursor_Value_Input;\n  /** cursor ordering */\n  ordering?: InputMaybe<Cursor_Ordering>;\n};\n\n/** Initial value of the column from where the streaming should start */\nexport type Current_Token_Datas_Stream_Cursor_Value_Input = {\n  collection_data_id_hash?: InputMaybe<Scalars['String']>;\n  collection_name?: InputMaybe<Scalars['String']>;\n  creator_address?: InputMaybe<Scalars['String']>;\n  default_properties?: InputMaybe<Scalars['jsonb']>;\n  description?: InputMaybe<Scalars['String']>;\n  description_mutable?: InputMaybe<Scalars['Boolean']>;\n  largest_property_version?: InputMaybe<Scalars['numeric']>;\n  last_transaction_timestamp?: InputMaybe<Scalars['timestamp']>;\n  last_transaction_version?: InputMaybe<Scalars['bigint']>;\n  maximum?: InputMaybe<Scalars['numeric']>;\n  maximum_mutable?: InputMaybe<Scalars['Boolean']>;\n  metadata_uri?: InputMaybe<Scalars['String']>;\n  name?: InputMaybe<Scalars['String']>;\n  payee_address?: InputMaybe<Scalars['String']>;\n  properties_mutable?: InputMaybe<Scalars['Boolean']>;\n  royalty_mutable?: InputMaybe<Scalars['Boolean']>;\n  royalty_points_denominator?: InputMaybe<Scalars['numeric']>;\n  royalty_points_numerator?: InputMaybe<Scalars['numeric']>;\n  supply?: InputMaybe<Scalars['numeric']>;\n  token_data_id_hash?: InputMaybe<Scalars['String']>;\n  uri_mutable?: InputMaybe<Scalars['Boolean']>;\n};\n\n/** columns and relationships of \"current_token_datas_v2\" */\nexport type Current_Token_Datas_V2 = {\n  __typename?: 'current_token_datas_v2';\n  /** An object relationship */\n  aptos_name?: Maybe<Current_Aptos_Names>;\n  /** An object relationship */\n  cdn_token_uris?: Maybe<Nft_Metadata_Crawler_Parsed_Asset_Uris>;\n  collection_id: Scalars['String'];\n  /** An object relationship */\n  current_collection?: Maybe<Current_Collections_V2>;\n  description: Scalars['String'];\n  is_fungible_v2?: Maybe<Scalars['Boolean']>;\n  largest_property_version_v1?: Maybe<Scalars['numeric']>;\n  last_transaction_timestamp: Scalars['timestamp'];\n  last_transaction_version: Scalars['bigint'];\n  maximum?: Maybe<Scalars['numeric']>;\n  supply: Scalars['numeric'];\n  token_data_id: Scalars['String'];\n  token_name: Scalars['String'];\n  token_properties: Scalars['jsonb'];\n  token_standard: Scalars['String'];\n  token_uri: Scalars['String'];\n};\n\n\n/** columns and relationships of \"current_token_datas_v2\" */\nexport type Current_Token_Datas_V2Token_PropertiesArgs = {\n  path?: InputMaybe<Scalars['String']>;\n};\n\n/** Boolean expression to filter rows from the table \"current_token_datas_v2\". All fields are combined with a logical 'AND'. */\nexport type Current_Token_Datas_V2_Bool_Exp = {\n  _and?: InputMaybe<Array<Current_Token_Datas_V2_Bool_Exp>>;\n  _not?: InputMaybe<Current_Token_Datas_V2_Bool_Exp>;\n  _or?: InputMaybe<Array<Current_Token_Datas_V2_Bool_Exp>>;\n  aptos_name?: InputMaybe<Current_Aptos_Names_Bool_Exp>;\n  cdn_token_uris?: InputMaybe<Nft_Metadata_Crawler_Parsed_Asset_Uris_Bool_Exp>;\n  collection_id?: InputMaybe<String_Comparison_Exp>;\n  current_collection?: InputMaybe<Current_Collections_V2_Bool_Exp>;\n  description?: InputMaybe<String_Comparison_Exp>;\n  is_fungible_v2?: InputMaybe<Boolean_Comparison_Exp>;\n  largest_property_version_v1?: InputMaybe<Numeric_Comparison_Exp>;\n  last_transaction_timestamp?: InputMaybe<Timestamp_Comparison_Exp>;\n  last_transaction_version?: InputMaybe<Bigint_Comparison_Exp>;\n  maximum?: InputMaybe<Numeric_Comparison_Exp>;\n  supply?: InputMaybe<Numeric_Comparison_Exp>;\n  token_data_id?: InputMaybe<String_Comparison_Exp>;\n  token_name?: InputMaybe<String_Comparison_Exp>;\n  token_properties?: InputMaybe<Jsonb_Comparison_Exp>;\n  token_standard?: InputMaybe<String_Comparison_Exp>;\n  token_uri?: InputMaybe<String_Comparison_Exp>;\n};\n\n/** Ordering options when selecting data from \"current_token_datas_v2\". */\nexport type Current_Token_Datas_V2_Order_By = {\n  aptos_name?: InputMaybe<Current_Aptos_Names_Order_By>;\n  cdn_token_uris?: InputMaybe<Nft_Metadata_Crawler_Parsed_Asset_Uris_Order_By>;\n  collection_id?: InputMaybe<Order_By>;\n  current_collection?: InputMaybe<Current_Collections_V2_Order_By>;\n  description?: InputMaybe<Order_By>;\n  is_fungible_v2?: InputMaybe<Order_By>;\n  largest_property_version_v1?: InputMaybe<Order_By>;\n  last_transaction_timestamp?: InputMaybe<Order_By>;\n  last_transaction_version?: InputMaybe<Order_By>;\n  maximum?: InputMaybe<Order_By>;\n  supply?: InputMaybe<Order_By>;\n  token_data_id?: InputMaybe<Order_By>;\n  token_name?: InputMaybe<Order_By>;\n  token_properties?: InputMaybe<Order_By>;\n  token_standard?: InputMaybe<Order_By>;\n  token_uri?: InputMaybe<Order_By>;\n};\n\n/** select columns of table \"current_token_datas_v2\" */\nexport enum Current_Token_Datas_V2_Select_Column {\n  /** column name */\n  CollectionId = 'collection_id',\n  /** column name */\n  Description = 'description',\n  /** column name */\n  IsFungibleV2 = 'is_fungible_v2',\n  /** column name */\n  LargestPropertyVersionV1 = 'largest_property_version_v1',\n  /** column name */\n  LastTransactionTimestamp = 'last_transaction_timestamp',\n  /** column name */\n  LastTransactionVersion = 'last_transaction_version',\n  /** column name */\n  Maximum = 'maximum',\n  /** column name */\n  Supply = 'supply',\n  /** column name */\n  TokenDataId = 'token_data_id',\n  /** column name */\n  TokenName = 'token_name',\n  /** column name */\n  TokenProperties = 'token_properties',\n  /** column name */\n  TokenStandard = 'token_standard',\n  /** column name */\n  TokenUri = 'token_uri'\n}\n\n/** Streaming cursor of the table \"current_token_datas_v2\" */\nexport type Current_Token_Datas_V2_Stream_Cursor_Input = {\n  /** Stream column input with initial value */\n  initial_value: Current_Token_Datas_V2_Stream_Cursor_Value_Input;\n  /** cursor ordering */\n  ordering?: InputMaybe<Cursor_Ordering>;\n};\n\n/** Initial value of the column from where the streaming should start */\nexport type Current_Token_Datas_V2_Stream_Cursor_Value_Input = {\n  collection_id?: InputMaybe<Scalars['String']>;\n  description?: InputMaybe<Scalars['String']>;\n  is_fungible_v2?: InputMaybe<Scalars['Boolean']>;\n  largest_property_version_v1?: InputMaybe<Scalars['numeric']>;\n  last_transaction_timestamp?: InputMaybe<Scalars['timestamp']>;\n  last_transaction_version?: InputMaybe<Scalars['bigint']>;\n  maximum?: InputMaybe<Scalars['numeric']>;\n  supply?: InputMaybe<Scalars['numeric']>;\n  token_data_id?: InputMaybe<Scalars['String']>;\n  token_name?: InputMaybe<Scalars['String']>;\n  token_properties?: InputMaybe<Scalars['jsonb']>;\n  token_standard?: InputMaybe<Scalars['String']>;\n  token_uri?: InputMaybe<Scalars['String']>;\n};\n\n/** columns and relationships of \"current_token_ownerships\" */\nexport type Current_Token_Ownerships = {\n  __typename?: 'current_token_ownerships';\n  amount: Scalars['numeric'];\n  /** An object relationship */\n  aptos_name?: Maybe<Current_Aptos_Names>;\n  collection_data_id_hash: Scalars['String'];\n  collection_name: Scalars['String'];\n  creator_address: Scalars['String'];\n  /** An object relationship */\n  current_collection_data?: Maybe<Current_Collection_Datas>;\n  /** An object relationship */\n  current_token_data?: Maybe<Current_Token_Datas>;\n  last_transaction_timestamp: Scalars['timestamp'];\n  last_transaction_version: Scalars['bigint'];\n  name: Scalars['String'];\n  owner_address: Scalars['String'];\n  property_version: Scalars['numeric'];\n  table_type: Scalars['String'];\n  token_data_id_hash: Scalars['String'];\n  token_properties: Scalars['jsonb'];\n};\n\n\n/** columns and relationships of \"current_token_ownerships\" */\nexport type Current_Token_OwnershipsToken_PropertiesArgs = {\n  path?: InputMaybe<Scalars['String']>;\n};\n\n/** aggregated selection of \"current_token_ownerships\" */\nexport type Current_Token_Ownerships_Aggregate = {\n  __typename?: 'current_token_ownerships_aggregate';\n  aggregate?: Maybe<Current_Token_Ownerships_Aggregate_Fields>;\n  nodes: Array<Current_Token_Ownerships>;\n};\n\n/** aggregate fields of \"current_token_ownerships\" */\nexport type Current_Token_Ownerships_Aggregate_Fields = {\n  __typename?: 'current_token_ownerships_aggregate_fields';\n  avg?: Maybe<Current_Token_Ownerships_Avg_Fields>;\n  count: Scalars['Int'];\n  max?: Maybe<Current_Token_Ownerships_Max_Fields>;\n  min?: Maybe<Current_Token_Ownerships_Min_Fields>;\n  stddev?: Maybe<Current_Token_Ownerships_Stddev_Fields>;\n  stddev_pop?: Maybe<Current_Token_Ownerships_Stddev_Pop_Fields>;\n  stddev_samp?: Maybe<Current_Token_Ownerships_Stddev_Samp_Fields>;\n  sum?: Maybe<Current_Token_Ownerships_Sum_Fields>;\n  var_pop?: Maybe<Current_Token_Ownerships_Var_Pop_Fields>;\n  var_samp?: Maybe<Current_Token_Ownerships_Var_Samp_Fields>;\n  variance?: Maybe<Current_Token_Ownerships_Variance_Fields>;\n};\n\n\n/** aggregate fields of \"current_token_ownerships\" */\nexport type Current_Token_Ownerships_Aggregate_FieldsCountArgs = {\n  columns?: InputMaybe<Array<Current_Token_Ownerships_Select_Column>>;\n  distinct?: InputMaybe<Scalars['Boolean']>;\n};\n\n/** order by aggregate values of table \"current_token_ownerships\" */\nexport type Current_Token_Ownerships_Aggregate_Order_By = {\n  avg?: InputMaybe<Current_Token_Ownerships_Avg_Order_By>;\n  count?: InputMaybe<Order_By>;\n  max?: InputMaybe<Current_Token_Ownerships_Max_Order_By>;\n  min?: InputMaybe<Current_Token_Ownerships_Min_Order_By>;\n  stddev?: InputMaybe<Current_Token_Ownerships_Stddev_Order_By>;\n  stddev_pop?: InputMaybe<Current_Token_Ownerships_Stddev_Pop_Order_By>;\n  stddev_samp?: InputMaybe<Current_Token_Ownerships_Stddev_Samp_Order_By>;\n  sum?: InputMaybe<Current_Token_Ownerships_Sum_Order_By>;\n  var_pop?: InputMaybe<Current_Token_Ownerships_Var_Pop_Order_By>;\n  var_samp?: InputMaybe<Current_Token_Ownerships_Var_Samp_Order_By>;\n  variance?: InputMaybe<Current_Token_Ownerships_Variance_Order_By>;\n};\n\n/** aggregate avg on columns */\nexport type Current_Token_Ownerships_Avg_Fields = {\n  __typename?: 'current_token_ownerships_avg_fields';\n  amount?: Maybe<Scalars['Float']>;\n  last_transaction_version?: Maybe<Scalars['Float']>;\n  property_version?: Maybe<Scalars['Float']>;\n};\n\n/** order by avg() on columns of table \"current_token_ownerships\" */\nexport type Current_Token_Ownerships_Avg_Order_By = {\n  amount?: InputMaybe<Order_By>;\n  last_transaction_version?: InputMaybe<Order_By>;\n  property_version?: InputMaybe<Order_By>;\n};\n\n/** Boolean expression to filter rows from the table \"current_token_ownerships\". All fields are combined with a logical 'AND'. */\nexport type Current_Token_Ownerships_Bool_Exp = {\n  _and?: InputMaybe<Array<Current_Token_Ownerships_Bool_Exp>>;\n  _not?: InputMaybe<Current_Token_Ownerships_Bool_Exp>;\n  _or?: InputMaybe<Array<Current_Token_Ownerships_Bool_Exp>>;\n  amount?: InputMaybe<Numeric_Comparison_Exp>;\n  aptos_name?: InputMaybe<Current_Aptos_Names_Bool_Exp>;\n  collection_data_id_hash?: InputMaybe<String_Comparison_Exp>;\n  collection_name?: InputMaybe<String_Comparison_Exp>;\n  creator_address?: InputMaybe<String_Comparison_Exp>;\n  current_collection_data?: InputMaybe<Current_Collection_Datas_Bool_Exp>;\n  current_token_data?: InputMaybe<Current_Token_Datas_Bool_Exp>;\n  last_transaction_timestamp?: InputMaybe<Timestamp_Comparison_Exp>;\n  last_transaction_version?: InputMaybe<Bigint_Comparison_Exp>;\n  name?: InputMaybe<String_Comparison_Exp>;\n  owner_address?: InputMaybe<String_Comparison_Exp>;\n  property_version?: InputMaybe<Numeric_Comparison_Exp>;\n  table_type?: InputMaybe<String_Comparison_Exp>;\n  token_data_id_hash?: InputMaybe<String_Comparison_Exp>;\n  token_properties?: InputMaybe<Jsonb_Comparison_Exp>;\n};\n\n/** aggregate max on columns */\nexport type Current_Token_Ownerships_Max_Fields = {\n  __typename?: 'current_token_ownerships_max_fields';\n  amount?: Maybe<Scalars['numeric']>;\n  collection_data_id_hash?: Maybe<Scalars['String']>;\n  collection_name?: Maybe<Scalars['String']>;\n  creator_address?: Maybe<Scalars['String']>;\n  last_transaction_timestamp?: Maybe<Scalars['timestamp']>;\n  last_transaction_version?: Maybe<Scalars['bigint']>;\n  name?: Maybe<Scalars['String']>;\n  owner_address?: Maybe<Scalars['String']>;\n  property_version?: Maybe<Scalars['numeric']>;\n  table_type?: Maybe<Scalars['String']>;\n  token_data_id_hash?: Maybe<Scalars['String']>;\n};\n\n/** order by max() on columns of table \"current_token_ownerships\" */\nexport type Current_Token_Ownerships_Max_Order_By = {\n  amount?: InputMaybe<Order_By>;\n  collection_data_id_hash?: InputMaybe<Order_By>;\n  collection_name?: InputMaybe<Order_By>;\n  creator_address?: InputMaybe<Order_By>;\n  last_transaction_timestamp?: InputMaybe<Order_By>;\n  last_transaction_version?: InputMaybe<Order_By>;\n  name?: InputMaybe<Order_By>;\n  owner_address?: InputMaybe<Order_By>;\n  property_version?: InputMaybe<Order_By>;\n  table_type?: InputMaybe<Order_By>;\n  token_data_id_hash?: InputMaybe<Order_By>;\n};\n\n/** aggregate min on columns */\nexport type Current_Token_Ownerships_Min_Fields = {\n  __typename?: 'current_token_ownerships_min_fields';\n  amount?: Maybe<Scalars['numeric']>;\n  collection_data_id_hash?: Maybe<Scalars['String']>;\n  collection_name?: Maybe<Scalars['String']>;\n  creator_address?: Maybe<Scalars['String']>;\n  last_transaction_timestamp?: Maybe<Scalars['timestamp']>;\n  last_transaction_version?: Maybe<Scalars['bigint']>;\n  name?: Maybe<Scalars['String']>;\n  owner_address?: Maybe<Scalars['String']>;\n  property_version?: Maybe<Scalars['numeric']>;\n  table_type?: Maybe<Scalars['String']>;\n  token_data_id_hash?: Maybe<Scalars['String']>;\n};\n\n/** order by min() on columns of table \"current_token_ownerships\" */\nexport type Current_Token_Ownerships_Min_Order_By = {\n  amount?: InputMaybe<Order_By>;\n  collection_data_id_hash?: InputMaybe<Order_By>;\n  collection_name?: InputMaybe<Order_By>;\n  creator_address?: InputMaybe<Order_By>;\n  last_transaction_timestamp?: InputMaybe<Order_By>;\n  last_transaction_version?: InputMaybe<Order_By>;\n  name?: InputMaybe<Order_By>;\n  owner_address?: InputMaybe<Order_By>;\n  property_version?: InputMaybe<Order_By>;\n  table_type?: InputMaybe<Order_By>;\n  token_data_id_hash?: InputMaybe<Order_By>;\n};\n\n/** Ordering options when selecting data from \"current_token_ownerships\". */\nexport type Current_Token_Ownerships_Order_By = {\n  amount?: InputMaybe<Order_By>;\n  aptos_name?: InputMaybe<Current_Aptos_Names_Order_By>;\n  collection_data_id_hash?: InputMaybe<Order_By>;\n  collection_name?: InputMaybe<Order_By>;\n  creator_address?: InputMaybe<Order_By>;\n  current_collection_data?: InputMaybe<Current_Collection_Datas_Order_By>;\n  current_token_data?: InputMaybe<Current_Token_Datas_Order_By>;\n  last_transaction_timestamp?: InputMaybe<Order_By>;\n  last_transaction_version?: InputMaybe<Order_By>;\n  name?: InputMaybe<Order_By>;\n  owner_address?: InputMaybe<Order_By>;\n  property_version?: InputMaybe<Order_By>;\n  table_type?: InputMaybe<Order_By>;\n  token_data_id_hash?: InputMaybe<Order_By>;\n  token_properties?: InputMaybe<Order_By>;\n};\n\n/** select columns of table \"current_token_ownerships\" */\nexport enum Current_Token_Ownerships_Select_Column {\n  /** column name */\n  Amount = 'amount',\n  /** column name */\n  CollectionDataIdHash = 'collection_data_id_hash',\n  /** column name */\n  CollectionName = 'collection_name',\n  /** column name */\n  CreatorAddress = 'creator_address',\n  /** column name */\n  LastTransactionTimestamp = 'last_transaction_timestamp',\n  /** column name */\n  LastTransactionVersion = 'last_transaction_version',\n  /** column name */\n  Name = 'name',\n  /** column name */\n  OwnerAddress = 'owner_address',\n  /** column name */\n  PropertyVersion = 'property_version',\n  /** column name */\n  TableType = 'table_type',\n  /** column name */\n  TokenDataIdHash = 'token_data_id_hash',\n  /** column name */\n  TokenProperties = 'token_properties'\n}\n\n/** aggregate stddev on columns */\nexport type Current_Token_Ownerships_Stddev_Fields = {\n  __typename?: 'current_token_ownerships_stddev_fields';\n  amount?: Maybe<Scalars['Float']>;\n  last_transaction_version?: Maybe<Scalars['Float']>;\n  property_version?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev() on columns of table \"current_token_ownerships\" */\nexport type Current_Token_Ownerships_Stddev_Order_By = {\n  amount?: InputMaybe<Order_By>;\n  last_transaction_version?: InputMaybe<Order_By>;\n  property_version?: InputMaybe<Order_By>;\n};\n\n/** aggregate stddev_pop on columns */\nexport type Current_Token_Ownerships_Stddev_Pop_Fields = {\n  __typename?: 'current_token_ownerships_stddev_pop_fields';\n  amount?: Maybe<Scalars['Float']>;\n  last_transaction_version?: Maybe<Scalars['Float']>;\n  property_version?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev_pop() on columns of table \"current_token_ownerships\" */\nexport type Current_Token_Ownerships_Stddev_Pop_Order_By = {\n  amount?: InputMaybe<Order_By>;\n  last_transaction_version?: InputMaybe<Order_By>;\n  property_version?: InputMaybe<Order_By>;\n};\n\n/** aggregate stddev_samp on columns */\nexport type Current_Token_Ownerships_Stddev_Samp_Fields = {\n  __typename?: 'current_token_ownerships_stddev_samp_fields';\n  amount?: Maybe<Scalars['Float']>;\n  last_transaction_version?: Maybe<Scalars['Float']>;\n  property_version?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev_samp() on columns of table \"current_token_ownerships\" */\nexport type Current_Token_Ownerships_Stddev_Samp_Order_By = {\n  amount?: InputMaybe<Order_By>;\n  last_transaction_version?: InputMaybe<Order_By>;\n  property_version?: InputMaybe<Order_By>;\n};\n\n/** Streaming cursor of the table \"current_token_ownerships\" */\nexport type Current_Token_Ownerships_Stream_Cursor_Input = {\n  /** Stream column input with initial value */\n  initial_value: Current_Token_Ownerships_Stream_Cursor_Value_Input;\n  /** cursor ordering */\n  ordering?: InputMaybe<Cursor_Ordering>;\n};\n\n/** Initial value of the column from where the streaming should start */\nexport type Current_Token_Ownerships_Stream_Cursor_Value_Input = {\n  amount?: InputMaybe<Scalars['numeric']>;\n  collection_data_id_hash?: InputMaybe<Scalars['String']>;\n  collection_name?: InputMaybe<Scalars['String']>;\n  creator_address?: InputMaybe<Scalars['String']>;\n  last_transaction_timestamp?: InputMaybe<Scalars['timestamp']>;\n  last_transaction_version?: InputMaybe<Scalars['bigint']>;\n  name?: InputMaybe<Scalars['String']>;\n  owner_address?: InputMaybe<Scalars['String']>;\n  property_version?: InputMaybe<Scalars['numeric']>;\n  table_type?: InputMaybe<Scalars['String']>;\n  token_data_id_hash?: InputMaybe<Scalars['String']>;\n  token_properties?: InputMaybe<Scalars['jsonb']>;\n};\n\n/** aggregate sum on columns */\nexport type Current_Token_Ownerships_Sum_Fields = {\n  __typename?: 'current_token_ownerships_sum_fields';\n  amount?: Maybe<Scalars['numeric']>;\n  last_transaction_version?: Maybe<Scalars['bigint']>;\n  property_version?: Maybe<Scalars['numeric']>;\n};\n\n/** order by sum() on columns of table \"current_token_ownerships\" */\nexport type Current_Token_Ownerships_Sum_Order_By = {\n  amount?: InputMaybe<Order_By>;\n  last_transaction_version?: InputMaybe<Order_By>;\n  property_version?: InputMaybe<Order_By>;\n};\n\n/** columns and relationships of \"current_token_ownerships_v2\" */\nexport type Current_Token_Ownerships_V2 = {\n  __typename?: 'current_token_ownerships_v2';\n  amount: Scalars['numeric'];\n  /** An array relationship */\n  composed_nfts: Array<Current_Token_Ownerships_V2>;\n  /** An aggregate relationship */\n  composed_nfts_aggregate: Current_Token_Ownerships_V2_Aggregate;\n  /** An object relationship */\n  current_token_data?: Maybe<Current_Token_Datas_V2>;\n  is_fungible_v2?: Maybe<Scalars['Boolean']>;\n  is_soulbound_v2?: Maybe<Scalars['Boolean']>;\n  last_transaction_timestamp: Scalars['timestamp'];\n  last_transaction_version: Scalars['bigint'];\n  owner_address: Scalars['String'];\n  property_version_v1: Scalars['numeric'];\n  storage_id: Scalars['String'];\n  table_type_v1?: Maybe<Scalars['String']>;\n  token_data_id: Scalars['String'];\n  token_properties_mutated_v1?: Maybe<Scalars['jsonb']>;\n  token_standard: Scalars['String'];\n};\n\n\n/** columns and relationships of \"current_token_ownerships_v2\" */\nexport type Current_Token_Ownerships_V2Composed_NftsArgs = {\n  distinct_on?: InputMaybe<Array<Current_Token_Ownerships_V2_Select_Column>>;\n  limit?: InputMaybe<Scalars['Int']>;\n  offset?: InputMaybe<Scalars['Int']>;\n  order_by?: InputMaybe<Array<Current_Token_Ownerships_V2_Order_By>>;\n  where?: InputMaybe<Current_Token_Ownerships_V2_Bool_Exp>;\n};\n\n\n/** columns and relationships of \"current_token_ownerships_v2\" */\nexport type Current_Token_Ownerships_V2Composed_Nfts_AggregateArgs = {\n  distinct_on?: InputMaybe<Array<Current_Token_Ownerships_V2_Select_Column>>;\n  limit?: InputMaybe<Scalars['Int']>;\n  offset?: InputMaybe<Scalars['Int']>;\n  order_by?: InputMaybe<Array<Current_Token_Ownerships_V2_Order_By>>;\n  where?: InputMaybe<Current_Token_Ownerships_V2_Bool_Exp>;\n};\n\n\n/** columns and relationships of \"current_token_ownerships_v2\" */\nexport type Current_Token_Ownerships_V2Token_Properties_Mutated_V1Args = {\n  path?: InputMaybe<Scalars['String']>;\n};\n\n/** aggregated selection of \"current_token_ownerships_v2\" */\nexport type Current_Token_Ownerships_V2_Aggregate = {\n  __typename?: 'current_token_ownerships_v2_aggregate';\n  aggregate?: Maybe<Current_Token_Ownerships_V2_Aggregate_Fields>;\n  nodes: Array<Current_Token_Ownerships_V2>;\n};\n\n/** aggregate fields of \"current_token_ownerships_v2\" */\nexport type Current_Token_Ownerships_V2_Aggregate_Fields = {\n  __typename?: 'current_token_ownerships_v2_aggregate_fields';\n  avg?: Maybe<Current_Token_Ownerships_V2_Avg_Fields>;\n  count: Scalars['Int'];\n  max?: Maybe<Current_Token_Ownerships_V2_Max_Fields>;\n  min?: Maybe<Current_Token_Ownerships_V2_Min_Fields>;\n  stddev?: Maybe<Current_Token_Ownerships_V2_Stddev_Fields>;\n  stddev_pop?: Maybe<Current_Token_Ownerships_V2_Stddev_Pop_Fields>;\n  stddev_samp?: Maybe<Current_Token_Ownerships_V2_Stddev_Samp_Fields>;\n  sum?: Maybe<Current_Token_Ownerships_V2_Sum_Fields>;\n  var_pop?: Maybe<Current_Token_Ownerships_V2_Var_Pop_Fields>;\n  var_samp?: Maybe<Current_Token_Ownerships_V2_Var_Samp_Fields>;\n  variance?: Maybe<Current_Token_Ownerships_V2_Variance_Fields>;\n};\n\n\n/** aggregate fields of \"current_token_ownerships_v2\" */\nexport type Current_Token_Ownerships_V2_Aggregate_FieldsCountArgs = {\n  columns?: InputMaybe<Array<Current_Token_Ownerships_V2_Select_Column>>;\n  distinct?: InputMaybe<Scalars['Boolean']>;\n};\n\n/** order by aggregate values of table \"current_token_ownerships_v2\" */\nexport type Current_Token_Ownerships_V2_Aggregate_Order_By = {\n  avg?: InputMaybe<Current_Token_Ownerships_V2_Avg_Order_By>;\n  count?: InputMaybe<Order_By>;\n  max?: InputMaybe<Current_Token_Ownerships_V2_Max_Order_By>;\n  min?: InputMaybe<Current_Token_Ownerships_V2_Min_Order_By>;\n  stddev?: InputMaybe<Current_Token_Ownerships_V2_Stddev_Order_By>;\n  stddev_pop?: InputMaybe<Current_Token_Ownerships_V2_Stddev_Pop_Order_By>;\n  stddev_samp?: InputMaybe<Current_Token_Ownerships_V2_Stddev_Samp_Order_By>;\n  sum?: InputMaybe<Current_Token_Ownerships_V2_Sum_Order_By>;\n  var_pop?: InputMaybe<Current_Token_Ownerships_V2_Var_Pop_Order_By>;\n  var_samp?: InputMaybe<Current_Token_Ownerships_V2_Var_Samp_Order_By>;\n  variance?: InputMaybe<Current_Token_Ownerships_V2_Variance_Order_By>;\n};\n\n/** aggregate avg on columns */\nexport type Current_Token_Ownerships_V2_Avg_Fields = {\n  __typename?: 'current_token_ownerships_v2_avg_fields';\n  amount?: Maybe<Scalars['Float']>;\n  last_transaction_version?: Maybe<Scalars['Float']>;\n  property_version_v1?: Maybe<Scalars['Float']>;\n};\n\n/** order by avg() on columns of table \"current_token_ownerships_v2\" */\nexport type Current_Token_Ownerships_V2_Avg_Order_By = {\n  amount?: InputMaybe<Order_By>;\n  last_transaction_version?: InputMaybe<Order_By>;\n  property_version_v1?: InputMaybe<Order_By>;\n};\n\n/** Boolean expression to filter rows from the table \"current_token_ownerships_v2\". All fields are combined with a logical 'AND'. */\nexport type Current_Token_Ownerships_V2_Bool_Exp = {\n  _and?: InputMaybe<Array<Current_Token_Ownerships_V2_Bool_Exp>>;\n  _not?: InputMaybe<Current_Token_Ownerships_V2_Bool_Exp>;\n  _or?: InputMaybe<Array<Current_Token_Ownerships_V2_Bool_Exp>>;\n  amount?: InputMaybe<Numeric_Comparison_Exp>;\n  composed_nfts?: InputMaybe<Current_Token_Ownerships_V2_Bool_Exp>;\n  current_token_data?: InputMaybe<Current_Token_Datas_V2_Bool_Exp>;\n  is_fungible_v2?: InputMaybe<Boolean_Comparison_Exp>;\n  is_soulbound_v2?: InputMaybe<Boolean_Comparison_Exp>;\n  last_transaction_timestamp?: InputMaybe<Timestamp_Comparison_Exp>;\n  last_transaction_version?: InputMaybe<Bigint_Comparison_Exp>;\n  owner_address?: InputMaybe<String_Comparison_Exp>;\n  property_version_v1?: InputMaybe<Numeric_Comparison_Exp>;\n  storage_id?: InputMaybe<String_Comparison_Exp>;\n  table_type_v1?: InputMaybe<String_Comparison_Exp>;\n  token_data_id?: InputMaybe<String_Comparison_Exp>;\n  token_properties_mutated_v1?: InputMaybe<Jsonb_Comparison_Exp>;\n  token_standard?: InputMaybe<String_Comparison_Exp>;\n};\n\n/** aggregate max on columns */\nexport type Current_Token_Ownerships_V2_Max_Fields = {\n  __typename?: 'current_token_ownerships_v2_max_fields';\n  amount?: Maybe<Scalars['numeric']>;\n  last_transaction_timestamp?: Maybe<Scalars['timestamp']>;\n  last_transaction_version?: Maybe<Scalars['bigint']>;\n  owner_address?: Maybe<Scalars['String']>;\n  property_version_v1?: Maybe<Scalars['numeric']>;\n  storage_id?: Maybe<Scalars['String']>;\n  table_type_v1?: Maybe<Scalars['String']>;\n  token_data_id?: Maybe<Scalars['String']>;\n  token_standard?: Maybe<Scalars['String']>;\n};\n\n/** order by max() on columns of table \"current_token_ownerships_v2\" */\nexport type Current_Token_Ownerships_V2_Max_Order_By = {\n  amount?: InputMaybe<Order_By>;\n  last_transaction_timestamp?: InputMaybe<Order_By>;\n  last_transaction_version?: InputMaybe<Order_By>;\n  owner_address?: InputMaybe<Order_By>;\n  property_version_v1?: InputMaybe<Order_By>;\n  storage_id?: InputMaybe<Order_By>;\n  table_type_v1?: InputMaybe<Order_By>;\n  token_data_id?: InputMaybe<Order_By>;\n  token_standard?: InputMaybe<Order_By>;\n};\n\n/** aggregate min on columns */\nexport type Current_Token_Ownerships_V2_Min_Fields = {\n  __typename?: 'current_token_ownerships_v2_min_fields';\n  amount?: Maybe<Scalars['numeric']>;\n  last_transaction_timestamp?: Maybe<Scalars['timestamp']>;\n  last_transaction_version?: Maybe<Scalars['bigint']>;\n  owner_address?: Maybe<Scalars['String']>;\n  property_version_v1?: Maybe<Scalars['numeric']>;\n  storage_id?: Maybe<Scalars['String']>;\n  table_type_v1?: Maybe<Scalars['String']>;\n  token_data_id?: Maybe<Scalars['String']>;\n  token_standard?: Maybe<Scalars['String']>;\n};\n\n/** order by min() on columns of table \"current_token_ownerships_v2\" */\nexport type Current_Token_Ownerships_V2_Min_Order_By = {\n  amount?: InputMaybe<Order_By>;\n  last_transaction_timestamp?: InputMaybe<Order_By>;\n  last_transaction_version?: InputMaybe<Order_By>;\n  owner_address?: InputMaybe<Order_By>;\n  property_version_v1?: InputMaybe<Order_By>;\n  storage_id?: InputMaybe<Order_By>;\n  table_type_v1?: InputMaybe<Order_By>;\n  token_data_id?: InputMaybe<Order_By>;\n  token_standard?: InputMaybe<Order_By>;\n};\n\n/** Ordering options when selecting data from \"current_token_ownerships_v2\". */\nexport type Current_Token_Ownerships_V2_Order_By = {\n  amount?: InputMaybe<Order_By>;\n  composed_nfts_aggregate?: InputMaybe<Current_Token_Ownerships_V2_Aggregate_Order_By>;\n  current_token_data?: InputMaybe<Current_Token_Datas_V2_Order_By>;\n  is_fungible_v2?: InputMaybe<Order_By>;\n  is_soulbound_v2?: InputMaybe<Order_By>;\n  last_transaction_timestamp?: InputMaybe<Order_By>;\n  last_transaction_version?: InputMaybe<Order_By>;\n  owner_address?: InputMaybe<Order_By>;\n  property_version_v1?: InputMaybe<Order_By>;\n  storage_id?: InputMaybe<Order_By>;\n  table_type_v1?: InputMaybe<Order_By>;\n  token_data_id?: InputMaybe<Order_By>;\n  token_properties_mutated_v1?: InputMaybe<Order_By>;\n  token_standard?: InputMaybe<Order_By>;\n};\n\n/** select columns of table \"current_token_ownerships_v2\" */\nexport enum Current_Token_Ownerships_V2_Select_Column {\n  /** column name */\n  Amount = 'amount',\n  /** column name */\n  IsFungibleV2 = 'is_fungible_v2',\n  /** column name */\n  IsSoulboundV2 = 'is_soulbound_v2',\n  /** column name */\n  LastTransactionTimestamp = 'last_transaction_timestamp',\n  /** column name */\n  LastTransactionVersion = 'last_transaction_version',\n  /** column name */\n  OwnerAddress = 'owner_address',\n  /** column name */\n  PropertyVersionV1 = 'property_version_v1',\n  /** column name */\n  StorageId = 'storage_id',\n  /** column name */\n  TableTypeV1 = 'table_type_v1',\n  /** column name */\n  TokenDataId = 'token_data_id',\n  /** column name */\n  TokenPropertiesMutatedV1 = 'token_properties_mutated_v1',\n  /** column name */\n  TokenStandard = 'token_standard'\n}\n\n/** aggregate stddev on columns */\nexport type Current_Token_Ownerships_V2_Stddev_Fields = {\n  __typename?: 'current_token_ownerships_v2_stddev_fields';\n  amount?: Maybe<Scalars['Float']>;\n  last_transaction_version?: Maybe<Scalars['Float']>;\n  property_version_v1?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev() on columns of table \"current_token_ownerships_v2\" */\nexport type Current_Token_Ownerships_V2_Stddev_Order_By = {\n  amount?: InputMaybe<Order_By>;\n  last_transaction_version?: InputMaybe<Order_By>;\n  property_version_v1?: InputMaybe<Order_By>;\n};\n\n/** aggregate stddev_pop on columns */\nexport type Current_Token_Ownerships_V2_Stddev_Pop_Fields = {\n  __typename?: 'current_token_ownerships_v2_stddev_pop_fields';\n  amount?: Maybe<Scalars['Float']>;\n  last_transaction_version?: Maybe<Scalars['Float']>;\n  property_version_v1?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev_pop() on columns of table \"current_token_ownerships_v2\" */\nexport type Current_Token_Ownerships_V2_Stddev_Pop_Order_By = {\n  amount?: InputMaybe<Order_By>;\n  last_transaction_version?: InputMaybe<Order_By>;\n  property_version_v1?: InputMaybe<Order_By>;\n};\n\n/** aggregate stddev_samp on columns */\nexport type Current_Token_Ownerships_V2_Stddev_Samp_Fields = {\n  __typename?: 'current_token_ownerships_v2_stddev_samp_fields';\n  amount?: Maybe<Scalars['Float']>;\n  last_transaction_version?: Maybe<Scalars['Float']>;\n  property_version_v1?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev_samp() on columns of table \"current_token_ownerships_v2\" */\nexport type Current_Token_Ownerships_V2_Stddev_Samp_Order_By = {\n  amount?: InputMaybe<Order_By>;\n  last_transaction_version?: InputMaybe<Order_By>;\n  property_version_v1?: InputMaybe<Order_By>;\n};\n\n/** Streaming cursor of the table \"current_token_ownerships_v2\" */\nexport type Current_Token_Ownerships_V2_Stream_Cursor_Input = {\n  /** Stream column input with initial value */\n  initial_value: Current_Token_Ownerships_V2_Stream_Cursor_Value_Input;\n  /** cursor ordering */\n  ordering?: InputMaybe<Cursor_Ordering>;\n};\n\n/** Initial value of the column from where the streaming should start */\nexport type Current_Token_Ownerships_V2_Stream_Cursor_Value_Input = {\n  amount?: InputMaybe<Scalars['numeric']>;\n  is_fungible_v2?: InputMaybe<Scalars['Boolean']>;\n  is_soulbound_v2?: InputMaybe<Scalars['Boolean']>;\n  last_transaction_timestamp?: InputMaybe<Scalars['timestamp']>;\n  last_transaction_version?: InputMaybe<Scalars['bigint']>;\n  owner_address?: InputMaybe<Scalars['String']>;\n  property_version_v1?: InputMaybe<Scalars['numeric']>;\n  storage_id?: InputMaybe<Scalars['String']>;\n  table_type_v1?: InputMaybe<Scalars['String']>;\n  token_data_id?: InputMaybe<Scalars['String']>;\n  token_properties_mutated_v1?: InputMaybe<Scalars['jsonb']>;\n  token_standard?: InputMaybe<Scalars['String']>;\n};\n\n/** aggregate sum on columns */\nexport type Current_Token_Ownerships_V2_Sum_Fields = {\n  __typename?: 'current_token_ownerships_v2_sum_fields';\n  amount?: Maybe<Scalars['numeric']>;\n  last_transaction_version?: Maybe<Scalars['bigint']>;\n  property_version_v1?: Maybe<Scalars['numeric']>;\n};\n\n/** order by sum() on columns of table \"current_token_ownerships_v2\" */\nexport type Current_Token_Ownerships_V2_Sum_Order_By = {\n  amount?: InputMaybe<Order_By>;\n  last_transaction_version?: InputMaybe<Order_By>;\n  property_version_v1?: InputMaybe<Order_By>;\n};\n\n/** aggregate var_pop on columns */\nexport type Current_Token_Ownerships_V2_Var_Pop_Fields = {\n  __typename?: 'current_token_ownerships_v2_var_pop_fields';\n  amount?: Maybe<Scalars['Float']>;\n  last_transaction_version?: Maybe<Scalars['Float']>;\n  property_version_v1?: Maybe<Scalars['Float']>;\n};\n\n/** order by var_pop() on columns of table \"current_token_ownerships_v2\" */\nexport type Current_Token_Ownerships_V2_Var_Pop_Order_By = {\n  amount?: InputMaybe<Order_By>;\n  last_transaction_version?: InputMaybe<Order_By>;\n  property_version_v1?: InputMaybe<Order_By>;\n};\n\n/** aggregate var_samp on columns */\nexport type Current_Token_Ownerships_V2_Var_Samp_Fields = {\n  __typename?: 'current_token_ownerships_v2_var_samp_fields';\n  amount?: Maybe<Scalars['Float']>;\n  last_transaction_version?: Maybe<Scalars['Float']>;\n  property_version_v1?: Maybe<Scalars['Float']>;\n};\n\n/** order by var_samp() on columns of table \"current_token_ownerships_v2\" */\nexport type Current_Token_Ownerships_V2_Var_Samp_Order_By = {\n  amount?: InputMaybe<Order_By>;\n  last_transaction_version?: InputMaybe<Order_By>;\n  property_version_v1?: InputMaybe<Order_By>;\n};\n\n/** aggregate variance on columns */\nexport type Current_Token_Ownerships_V2_Variance_Fields = {\n  __typename?: 'current_token_ownerships_v2_variance_fields';\n  amount?: Maybe<Scalars['Float']>;\n  last_transaction_version?: Maybe<Scalars['Float']>;\n  property_version_v1?: Maybe<Scalars['Float']>;\n};\n\n/** order by variance() on columns of table \"current_token_ownerships_v2\" */\nexport type Current_Token_Ownerships_V2_Variance_Order_By = {\n  amount?: InputMaybe<Order_By>;\n  last_transaction_version?: InputMaybe<Order_By>;\n  property_version_v1?: InputMaybe<Order_By>;\n};\n\n/** aggregate var_pop on columns */\nexport type Current_Token_Ownerships_Var_Pop_Fields = {\n  __typename?: 'current_token_ownerships_var_pop_fields';\n  amount?: Maybe<Scalars['Float']>;\n  last_transaction_version?: Maybe<Scalars['Float']>;\n  property_version?: Maybe<Scalars['Float']>;\n};\n\n/** order by var_pop() on columns of table \"current_token_ownerships\" */\nexport type Current_Token_Ownerships_Var_Pop_Order_By = {\n  amount?: InputMaybe<Order_By>;\n  last_transaction_version?: InputMaybe<Order_By>;\n  property_version?: InputMaybe<Order_By>;\n};\n\n/** aggregate var_samp on columns */\nexport type Current_Token_Ownerships_Var_Samp_Fields = {\n  __typename?: 'current_token_ownerships_var_samp_fields';\n  amount?: Maybe<Scalars['Float']>;\n  last_transaction_version?: Maybe<Scalars['Float']>;\n  property_version?: Maybe<Scalars['Float']>;\n};\n\n/** order by var_samp() on columns of table \"current_token_ownerships\" */\nexport type Current_Token_Ownerships_Var_Samp_Order_By = {\n  amount?: InputMaybe<Order_By>;\n  last_transaction_version?: InputMaybe<Order_By>;\n  property_version?: InputMaybe<Order_By>;\n};\n\n/** aggregate variance on columns */\nexport type Current_Token_Ownerships_Variance_Fields = {\n  __typename?: 'current_token_ownerships_variance_fields';\n  amount?: Maybe<Scalars['Float']>;\n  last_transaction_version?: Maybe<Scalars['Float']>;\n  property_version?: Maybe<Scalars['Float']>;\n};\n\n/** order by variance() on columns of table \"current_token_ownerships\" */\nexport type Current_Token_Ownerships_Variance_Order_By = {\n  amount?: InputMaybe<Order_By>;\n  last_transaction_version?: InputMaybe<Order_By>;\n  property_version?: InputMaybe<Order_By>;\n};\n\n/** columns and relationships of \"current_token_pending_claims\" */\nexport type Current_Token_Pending_Claims = {\n  __typename?: 'current_token_pending_claims';\n  amount: Scalars['numeric'];\n  collection_data_id_hash: Scalars['String'];\n  collection_id: Scalars['String'];\n  collection_name: Scalars['String'];\n  creator_address: Scalars['String'];\n  /** An object relationship */\n  current_collection_data?: Maybe<Current_Collection_Datas>;\n  /** An object relationship */\n  current_collection_v2?: Maybe<Current_Collections_V2>;\n  /** An object relationship */\n  current_token_data?: Maybe<Current_Token_Datas>;\n  /** An object relationship */\n  current_token_data_v2?: Maybe<Current_Token_Datas_V2>;\n  from_address: Scalars['String'];\n  last_transaction_timestamp: Scalars['timestamp'];\n  last_transaction_version: Scalars['bigint'];\n  name: Scalars['String'];\n  property_version: Scalars['numeric'];\n  table_handle: Scalars['String'];\n  to_address: Scalars['String'];\n  /** An object relationship */\n  token?: Maybe<Tokens>;\n  token_data_id: Scalars['String'];\n  token_data_id_hash: Scalars['String'];\n};\n\n/** Boolean expression to filter rows from the table \"current_token_pending_claims\". All fields are combined with a logical 'AND'. */\nexport type Current_Token_Pending_Claims_Bool_Exp = {\n  _and?: InputMaybe<Array<Current_Token_Pending_Claims_Bool_Exp>>;\n  _not?: InputMaybe<Current_Token_Pending_Claims_Bool_Exp>;\n  _or?: InputMaybe<Array<Current_Token_Pending_Claims_Bool_Exp>>;\n  amount?: InputMaybe<Numeric_Comparison_Exp>;\n  collection_data_id_hash?: InputMaybe<String_Comparison_Exp>;\n  collection_id?: InputMaybe<String_Comparison_Exp>;\n  collection_name?: InputMaybe<String_Comparison_Exp>;\n  creator_address?: InputMaybe<String_Comparison_Exp>;\n  current_collection_data?: InputMaybe<Current_Collection_Datas_Bool_Exp>;\n  current_collection_v2?: InputMaybe<Current_Collections_V2_Bool_Exp>;\n  current_token_data?: InputMaybe<Current_Token_Datas_Bool_Exp>;\n  current_token_data_v2?: InputMaybe<Current_Token_Datas_V2_Bool_Exp>;\n  from_address?: InputMaybe<String_Comparison_Exp>;\n  last_transaction_timestamp?: InputMaybe<Timestamp_Comparison_Exp>;\n  last_transaction_version?: InputMaybe<Bigint_Comparison_Exp>;\n  name?: InputMaybe<String_Comparison_Exp>;\n  property_version?: InputMaybe<Numeric_Comparison_Exp>;\n  table_handle?: InputMaybe<String_Comparison_Exp>;\n  to_address?: InputMaybe<String_Comparison_Exp>;\n  token?: InputMaybe<Tokens_Bool_Exp>;\n  token_data_id?: InputMaybe<String_Comparison_Exp>;\n  token_data_id_hash?: InputMaybe<String_Comparison_Exp>;\n};\n\n/** Ordering options when selecting data from \"current_token_pending_claims\". */\nexport type Current_Token_Pending_Claims_Order_By = {\n  amount?: InputMaybe<Order_By>;\n  collection_data_id_hash?: InputMaybe<Order_By>;\n  collection_id?: InputMaybe<Order_By>;\n  collection_name?: InputMaybe<Order_By>;\n  creator_address?: InputMaybe<Order_By>;\n  current_collection_data?: InputMaybe<Current_Collection_Datas_Order_By>;\n  current_collection_v2?: InputMaybe<Current_Collections_V2_Order_By>;\n  current_token_data?: InputMaybe<Current_Token_Datas_Order_By>;\n  current_token_data_v2?: InputMaybe<Current_Token_Datas_V2_Order_By>;\n  from_address?: InputMaybe<Order_By>;\n  last_transaction_timestamp?: InputMaybe<Order_By>;\n  last_transaction_version?: InputMaybe<Order_By>;\n  name?: InputMaybe<Order_By>;\n  property_version?: InputMaybe<Order_By>;\n  table_handle?: InputMaybe<Order_By>;\n  to_address?: InputMaybe<Order_By>;\n  token?: InputMaybe<Tokens_Order_By>;\n  token_data_id?: InputMaybe<Order_By>;\n  token_data_id_hash?: InputMaybe<Order_By>;\n};\n\n/** select columns of table \"current_token_pending_claims\" */\nexport enum Current_Token_Pending_Claims_Select_Column {\n  /** column name */\n  Amount = 'amount',\n  /** column name */\n  CollectionDataIdHash = 'collection_data_id_hash',\n  /** column name */\n  CollectionId = 'collection_id',\n  /** column name */\n  CollectionName = 'collection_name',\n  /** column name */\n  CreatorAddress = 'creator_address',\n  /** column name */\n  FromAddress = 'from_address',\n  /** column name */\n  LastTransactionTimestamp = 'last_transaction_timestamp',\n  /** column name */\n  LastTransactionVersion = 'last_transaction_version',\n  /** column name */\n  Name = 'name',\n  /** column name */\n  PropertyVersion = 'property_version',\n  /** column name */\n  TableHandle = 'table_handle',\n  /** column name */\n  ToAddress = 'to_address',\n  /** column name */\n  TokenDataId = 'token_data_id',\n  /** column name */\n  TokenDataIdHash = 'token_data_id_hash'\n}\n\n/** Streaming cursor of the table \"current_token_pending_claims\" */\nexport type Current_Token_Pending_Claims_Stream_Cursor_Input = {\n  /** Stream column input with initial value */\n  initial_value: Current_Token_Pending_Claims_Stream_Cursor_Value_Input;\n  /** cursor ordering */\n  ordering?: InputMaybe<Cursor_Ordering>;\n};\n\n/** Initial value of the column from where the streaming should start */\nexport type Current_Token_Pending_Claims_Stream_Cursor_Value_Input = {\n  amount?: InputMaybe<Scalars['numeric']>;\n  collection_data_id_hash?: InputMaybe<Scalars['String']>;\n  collection_id?: InputMaybe<Scalars['String']>;\n  collection_name?: InputMaybe<Scalars['String']>;\n  creator_address?: InputMaybe<Scalars['String']>;\n  from_address?: InputMaybe<Scalars['String']>;\n  last_transaction_timestamp?: InputMaybe<Scalars['timestamp']>;\n  last_transaction_version?: InputMaybe<Scalars['bigint']>;\n  name?: InputMaybe<Scalars['String']>;\n  property_version?: InputMaybe<Scalars['numeric']>;\n  table_handle?: InputMaybe<Scalars['String']>;\n  to_address?: InputMaybe<Scalars['String']>;\n  token_data_id?: InputMaybe<Scalars['String']>;\n  token_data_id_hash?: InputMaybe<Scalars['String']>;\n};\n\n/** ordering argument of a cursor */\nexport enum Cursor_Ordering {\n  /** ascending ordering of the cursor */\n  Asc = 'ASC',\n  /** descending ordering of the cursor */\n  Desc = 'DESC'\n}\n\n/** columns and relationships of \"delegated_staking_activities\" */\nexport type Delegated_Staking_Activities = {\n  __typename?: 'delegated_staking_activities';\n  amount: Scalars['numeric'];\n  delegator_address: Scalars['String'];\n  event_index: Scalars['bigint'];\n  event_type: Scalars['String'];\n  pool_address: Scalars['String'];\n  transaction_version: Scalars['bigint'];\n};\n\n/** order by aggregate values of table \"delegated_staking_activities\" */\nexport type Delegated_Staking_Activities_Aggregate_Order_By = {\n  avg?: InputMaybe<Delegated_Staking_Activities_Avg_Order_By>;\n  count?: InputMaybe<Order_By>;\n  max?: InputMaybe<Delegated_Staking_Activities_Max_Order_By>;\n  min?: InputMaybe<Delegated_Staking_Activities_Min_Order_By>;\n  stddev?: InputMaybe<Delegated_Staking_Activities_Stddev_Order_By>;\n  stddev_pop?: InputMaybe<Delegated_Staking_Activities_Stddev_Pop_Order_By>;\n  stddev_samp?: InputMaybe<Delegated_Staking_Activities_Stddev_Samp_Order_By>;\n  sum?: InputMaybe<Delegated_Staking_Activities_Sum_Order_By>;\n  var_pop?: InputMaybe<Delegated_Staking_Activities_Var_Pop_Order_By>;\n  var_samp?: InputMaybe<Delegated_Staking_Activities_Var_Samp_Order_By>;\n  variance?: InputMaybe<Delegated_Staking_Activities_Variance_Order_By>;\n};\n\n/** order by avg() on columns of table \"delegated_staking_activities\" */\nexport type Delegated_Staking_Activities_Avg_Order_By = {\n  amount?: InputMaybe<Order_By>;\n  event_index?: InputMaybe<Order_By>;\n  transaction_version?: InputMaybe<Order_By>;\n};\n\n/** Boolean expression to filter rows from the table \"delegated_staking_activities\". All fields are combined with a logical 'AND'. */\nexport type Delegated_Staking_Activities_Bool_Exp = {\n  _and?: InputMaybe<Array<Delegated_Staking_Activities_Bool_Exp>>;\n  _not?: InputMaybe<Delegated_Staking_Activities_Bool_Exp>;\n  _or?: InputMaybe<Array<Delegated_Staking_Activities_Bool_Exp>>;\n  amount?: InputMaybe<Numeric_Comparison_Exp>;\n  delegator_address?: InputMaybe<String_Comparison_Exp>;\n  event_index?: InputMaybe<Bigint_Comparison_Exp>;\n  event_type?: InputMaybe<String_Comparison_Exp>;\n  pool_address?: InputMaybe<String_Comparison_Exp>;\n  transaction_version?: InputMaybe<Bigint_Comparison_Exp>;\n};\n\n/** order by max() on columns of table \"delegated_staking_activities\" */\nexport type Delegated_Staking_Activities_Max_Order_By = {\n  amount?: InputMaybe<Order_By>;\n  delegator_address?: InputMaybe<Order_By>;\n  event_index?: InputMaybe<Order_By>;\n  event_type?: InputMaybe<Order_By>;\n  pool_address?: InputMaybe<Order_By>;\n  transaction_version?: InputMaybe<Order_By>;\n};\n\n/** order by min() on columns of table \"delegated_staking_activities\" */\nexport type Delegated_Staking_Activities_Min_Order_By = {\n  amount?: InputMaybe<Order_By>;\n  delegator_address?: InputMaybe<Order_By>;\n  event_index?: InputMaybe<Order_By>;\n  event_type?: InputMaybe<Order_By>;\n  pool_address?: InputMaybe<Order_By>;\n  transaction_version?: InputMaybe<Order_By>;\n};\n\n/** Ordering options when selecting data from \"delegated_staking_activities\". */\nexport type Delegated_Staking_Activities_Order_By = {\n  amount?: InputMaybe<Order_By>;\n  delegator_address?: InputMaybe<Order_By>;\n  event_index?: InputMaybe<Order_By>;\n  event_type?: InputMaybe<Order_By>;\n  pool_address?: InputMaybe<Order_By>;\n  transaction_version?: InputMaybe<Order_By>;\n};\n\n/** select columns of table \"delegated_staking_activities\" */\nexport enum Delegated_Staking_Activities_Select_Column {\n  /** column name */\n  Amount = 'amount',\n  /** column name */\n  DelegatorAddress = 'delegator_address',\n  /** column name */\n  EventIndex = 'event_index',\n  /** column name */\n  EventType = 'event_type',\n  /** column name */\n  PoolAddress = 'pool_address',\n  /** column name */\n  TransactionVersion = 'transaction_version'\n}\n\n/** order by stddev() on columns of table \"delegated_staking_activities\" */\nexport type Delegated_Staking_Activities_Stddev_Order_By = {\n  amount?: InputMaybe<Order_By>;\n  event_index?: InputMaybe<Order_By>;\n  transaction_version?: InputMaybe<Order_By>;\n};\n\n/** order by stddev_pop() on columns of table \"delegated_staking_activities\" */\nexport type Delegated_Staking_Activities_Stddev_Pop_Order_By = {\n  amount?: InputMaybe<Order_By>;\n  event_index?: InputMaybe<Order_By>;\n  transaction_version?: InputMaybe<Order_By>;\n};\n\n/** order by stddev_samp() on columns of table \"delegated_staking_activities\" */\nexport type Delegated_Staking_Activities_Stddev_Samp_Order_By = {\n  amount?: InputMaybe<Order_By>;\n  event_index?: InputMaybe<Order_By>;\n  transaction_version?: InputMaybe<Order_By>;\n};\n\n/** Streaming cursor of the table \"delegated_staking_activities\" */\nexport type Delegated_Staking_Activities_Stream_Cursor_Input = {\n  /** Stream column input with initial value */\n  initial_value: Delegated_Staking_Activities_Stream_Cursor_Value_Input;\n  /** cursor ordering */\n  ordering?: InputMaybe<Cursor_Ordering>;\n};\n\n/** Initial value of the column from where the streaming should start */\nexport type Delegated_Staking_Activities_Stream_Cursor_Value_Input = {\n  amount?: InputMaybe<Scalars['numeric']>;\n  delegator_address?: InputMaybe<Scalars['String']>;\n  event_index?: InputMaybe<Scalars['bigint']>;\n  event_type?: InputMaybe<Scalars['String']>;\n  pool_address?: InputMaybe<Scalars['String']>;\n  transaction_version?: InputMaybe<Scalars['bigint']>;\n};\n\n/** order by sum() on columns of table \"delegated_staking_activities\" */\nexport type Delegated_Staking_Activities_Sum_Order_By = {\n  amount?: InputMaybe<Order_By>;\n  event_index?: InputMaybe<Order_By>;\n  transaction_version?: InputMaybe<Order_By>;\n};\n\n/** order by var_pop() on columns of table \"delegated_staking_activities\" */\nexport type Delegated_Staking_Activities_Var_Pop_Order_By = {\n  amount?: InputMaybe<Order_By>;\n  event_index?: InputMaybe<Order_By>;\n  transaction_version?: InputMaybe<Order_By>;\n};\n\n/** order by var_samp() on columns of table \"delegated_staking_activities\" */\nexport type Delegated_Staking_Activities_Var_Samp_Order_By = {\n  amount?: InputMaybe<Order_By>;\n  event_index?: InputMaybe<Order_By>;\n  transaction_version?: InputMaybe<Order_By>;\n};\n\n/** order by variance() on columns of table \"delegated_staking_activities\" */\nexport type Delegated_Staking_Activities_Variance_Order_By = {\n  amount?: InputMaybe<Order_By>;\n  event_index?: InputMaybe<Order_By>;\n  transaction_version?: InputMaybe<Order_By>;\n};\n\n/** columns and relationships of \"delegated_staking_pools\" */\nexport type Delegated_Staking_Pools = {\n  __typename?: 'delegated_staking_pools';\n  /** An object relationship */\n  current_staking_pool?: Maybe<Current_Staking_Pool_Voter>;\n  first_transaction_version: Scalars['bigint'];\n  staking_pool_address: Scalars['String'];\n};\n\n/** Boolean expression to filter rows from the table \"delegated_staking_pools\". All fields are combined with a logical 'AND'. */\nexport type Delegated_Staking_Pools_Bool_Exp = {\n  _and?: InputMaybe<Array<Delegated_Staking_Pools_Bool_Exp>>;\n  _not?: InputMaybe<Delegated_Staking_Pools_Bool_Exp>;\n  _or?: InputMaybe<Array<Delegated_Staking_Pools_Bool_Exp>>;\n  current_staking_pool?: InputMaybe<Current_Staking_Pool_Voter_Bool_Exp>;\n  first_transaction_version?: InputMaybe<Bigint_Comparison_Exp>;\n  staking_pool_address?: InputMaybe<String_Comparison_Exp>;\n};\n\n/** Ordering options when selecting data from \"delegated_staking_pools\". */\nexport type Delegated_Staking_Pools_Order_By = {\n  current_staking_pool?: InputMaybe<Current_Staking_Pool_Voter_Order_By>;\n  first_transaction_version?: InputMaybe<Order_By>;\n  staking_pool_address?: InputMaybe<Order_By>;\n};\n\n/** select columns of table \"delegated_staking_pools\" */\nexport enum Delegated_Staking_Pools_Select_Column {\n  /** column name */\n  FirstTransactionVersion = 'first_transaction_version',\n  /** column name */\n  StakingPoolAddress = 'staking_pool_address'\n}\n\n/** Streaming cursor of the table \"delegated_staking_pools\" */\nexport type Delegated_Staking_Pools_Stream_Cursor_Input = {\n  /** Stream column input with initial value */\n  initial_value: Delegated_Staking_Pools_Stream_Cursor_Value_Input;\n  /** cursor ordering */\n  ordering?: InputMaybe<Cursor_Ordering>;\n};\n\n/** Initial value of the column from where the streaming should start */\nexport type Delegated_Staking_Pools_Stream_Cursor_Value_Input = {\n  first_transaction_version?: InputMaybe<Scalars['bigint']>;\n  staking_pool_address?: InputMaybe<Scalars['String']>;\n};\n\n/** columns and relationships of \"delegator_distinct_pool\" */\nexport type Delegator_Distinct_Pool = {\n  __typename?: 'delegator_distinct_pool';\n  /** An object relationship */\n  current_pool_balance?: Maybe<Current_Delegated_Staking_Pool_Balances>;\n  delegator_address?: Maybe<Scalars['String']>;\n  pool_address?: Maybe<Scalars['String']>;\n  /** An object relationship */\n  staking_pool_metadata?: Maybe<Current_Staking_Pool_Voter>;\n};\n\n/** aggregated selection of \"delegator_distinct_pool\" */\nexport type Delegator_Distinct_Pool_Aggregate = {\n  __typename?: 'delegator_distinct_pool_aggregate';\n  aggregate?: Maybe<Delegator_Distinct_Pool_Aggregate_Fields>;\n  nodes: Array<Delegator_Distinct_Pool>;\n};\n\n/** aggregate fields of \"delegator_distinct_pool\" */\nexport type Delegator_Distinct_Pool_Aggregate_Fields = {\n  __typename?: 'delegator_distinct_pool_aggregate_fields';\n  count: Scalars['Int'];\n  max?: Maybe<Delegator_Distinct_Pool_Max_Fields>;\n  min?: Maybe<Delegator_Distinct_Pool_Min_Fields>;\n};\n\n\n/** aggregate fields of \"delegator_distinct_pool\" */\nexport type Delegator_Distinct_Pool_Aggregate_FieldsCountArgs = {\n  columns?: InputMaybe<Array<Delegator_Distinct_Pool_Select_Column>>;\n  distinct?: InputMaybe<Scalars['Boolean']>;\n};\n\n/** Boolean expression to filter rows from the table \"delegator_distinct_pool\". All fields are combined with a logical 'AND'. */\nexport type Delegator_Distinct_Pool_Bool_Exp = {\n  _and?: InputMaybe<Array<Delegator_Distinct_Pool_Bool_Exp>>;\n  _not?: InputMaybe<Delegator_Distinct_Pool_Bool_Exp>;\n  _or?: InputMaybe<Array<Delegator_Distinct_Pool_Bool_Exp>>;\n  current_pool_balance?: InputMaybe<Current_Delegated_Staking_Pool_Balances_Bool_Exp>;\n  delegator_address?: InputMaybe<String_Comparison_Exp>;\n  pool_address?: InputMaybe<String_Comparison_Exp>;\n  staking_pool_metadata?: InputMaybe<Current_Staking_Pool_Voter_Bool_Exp>;\n};\n\n/** aggregate max on columns */\nexport type Delegator_Distinct_Pool_Max_Fields = {\n  __typename?: 'delegator_distinct_pool_max_fields';\n  delegator_address?: Maybe<Scalars['String']>;\n  pool_address?: Maybe<Scalars['String']>;\n};\n\n/** aggregate min on columns */\nexport type Delegator_Distinct_Pool_Min_Fields = {\n  __typename?: 'delegator_distinct_pool_min_fields';\n  delegator_address?: Maybe<Scalars['String']>;\n  pool_address?: Maybe<Scalars['String']>;\n};\n\n/** Ordering options when selecting data from \"delegator_distinct_pool\". */\nexport type Delegator_Distinct_Pool_Order_By = {\n  current_pool_balance?: InputMaybe<Current_Delegated_Staking_Pool_Balances_Order_By>;\n  delegator_address?: InputMaybe<Order_By>;\n  pool_address?: InputMaybe<Order_By>;\n  staking_pool_metadata?: InputMaybe<Current_Staking_Pool_Voter_Order_By>;\n};\n\n/** select columns of table \"delegator_distinct_pool\" */\nexport enum Delegator_Distinct_Pool_Select_Column {\n  /** column name */\n  DelegatorAddress = 'delegator_address',\n  /** column name */\n  PoolAddress = 'pool_address'\n}\n\n/** Streaming cursor of the table \"delegator_distinct_pool\" */\nexport type Delegator_Distinct_Pool_Stream_Cursor_Input = {\n  /** Stream column input with initial value */\n  initial_value: Delegator_Distinct_Pool_Stream_Cursor_Value_Input;\n  /** cursor ordering */\n  ordering?: InputMaybe<Cursor_Ordering>;\n};\n\n/** Initial value of the column from where the streaming should start */\nexport type Delegator_Distinct_Pool_Stream_Cursor_Value_Input = {\n  delegator_address?: InputMaybe<Scalars['String']>;\n  pool_address?: InputMaybe<Scalars['String']>;\n};\n\n/** columns and relationships of \"events\" */\nexport type Events = {\n  __typename?: 'events';\n  account_address: Scalars['String'];\n  creation_number: Scalars['bigint'];\n  data: Scalars['jsonb'];\n  event_index?: Maybe<Scalars['bigint']>;\n  sequence_number: Scalars['bigint'];\n  transaction_block_height: Scalars['bigint'];\n  transaction_version: Scalars['bigint'];\n  type: Scalars['String'];\n};\n\n\n/** columns and relationships of \"events\" */\nexport type EventsDataArgs = {\n  path?: InputMaybe<Scalars['String']>;\n};\n\n/** Boolean expression to filter rows from the table \"events\". All fields are combined with a logical 'AND'. */\nexport type Events_Bool_Exp = {\n  _and?: InputMaybe<Array<Events_Bool_Exp>>;\n  _not?: InputMaybe<Events_Bool_Exp>;\n  _or?: InputMaybe<Array<Events_Bool_Exp>>;\n  account_address?: InputMaybe<String_Comparison_Exp>;\n  creation_number?: InputMaybe<Bigint_Comparison_Exp>;\n  data?: InputMaybe<Jsonb_Comparison_Exp>;\n  event_index?: InputMaybe<Bigint_Comparison_Exp>;\n  sequence_number?: InputMaybe<Bigint_Comparison_Exp>;\n  transaction_block_height?: InputMaybe<Bigint_Comparison_Exp>;\n  transaction_version?: InputMaybe<Bigint_Comparison_Exp>;\n  type?: InputMaybe<String_Comparison_Exp>;\n};\n\n/** Ordering options when selecting data from \"events\". */\nexport type Events_Order_By = {\n  account_address?: InputMaybe<Order_By>;\n  creation_number?: InputMaybe<Order_By>;\n  data?: InputMaybe<Order_By>;\n  event_index?: InputMaybe<Order_By>;\n  sequence_number?: InputMaybe<Order_By>;\n  transaction_block_height?: InputMaybe<Order_By>;\n  transaction_version?: InputMaybe<Order_By>;\n  type?: InputMaybe<Order_By>;\n};\n\n/** select columns of table \"events\" */\nexport enum Events_Select_Column {\n  /** column name */\n  AccountAddress = 'account_address',\n  /** column name */\n  CreationNumber = 'creation_number',\n  /** column name */\n  Data = 'data',\n  /** column name */\n  EventIndex = 'event_index',\n  /** column name */\n  SequenceNumber = 'sequence_number',\n  /** column name */\n  TransactionBlockHeight = 'transaction_block_height',\n  /** column name */\n  TransactionVersion = 'transaction_version',\n  /** column name */\n  Type = 'type'\n}\n\n/** Streaming cursor of the table \"events\" */\nexport type Events_Stream_Cursor_Input = {\n  /** Stream column input with initial value */\n  initial_value: Events_Stream_Cursor_Value_Input;\n  /** cursor ordering */\n  ordering?: InputMaybe<Cursor_Ordering>;\n};\n\n/** Initial value of the column from where the streaming should start */\nexport type Events_Stream_Cursor_Value_Input = {\n  account_address?: InputMaybe<Scalars['String']>;\n  creation_number?: InputMaybe<Scalars['bigint']>;\n  data?: InputMaybe<Scalars['jsonb']>;\n  event_index?: InputMaybe<Scalars['bigint']>;\n  sequence_number?: InputMaybe<Scalars['bigint']>;\n  transaction_block_height?: InputMaybe<Scalars['bigint']>;\n  transaction_version?: InputMaybe<Scalars['bigint']>;\n  type?: InputMaybe<Scalars['String']>;\n};\n\n/** columns and relationships of \"fungible_asset_activities\" */\nexport type Fungible_Asset_Activities = {\n  __typename?: 'fungible_asset_activities';\n  amount?: Maybe<Scalars['numeric']>;\n  asset_type: Scalars['String'];\n  block_height: Scalars['bigint'];\n  entry_function_id_str?: Maybe<Scalars['String']>;\n  event_index: Scalars['bigint'];\n  gas_fee_payer_address?: Maybe<Scalars['String']>;\n  is_frozen?: Maybe<Scalars['Boolean']>;\n  is_gas_fee: Scalars['Boolean'];\n  is_transaction_success: Scalars['Boolean'];\n  /** An object relationship */\n  metadata?: Maybe<Fungible_Asset_Metadata>;\n  owner_address: Scalars['String'];\n  /** An array relationship */\n  owner_aptos_names: Array<Current_Aptos_Names>;\n  storage_id: Scalars['String'];\n  token_standard: Scalars['String'];\n  transaction_timestamp: Scalars['timestamp'];\n  transaction_version: Scalars['bigint'];\n  type: Scalars['String'];\n};\n\n\n/** columns and relationships of \"fungible_asset_activities\" */\nexport type Fungible_Asset_ActivitiesOwner_Aptos_NamesArgs = {\n  distinct_on?: InputMaybe<Array<Current_Aptos_Names_Select_Column>>;\n  limit?: InputMaybe<Scalars['Int']>;\n  offset?: InputMaybe<Scalars['Int']>;\n  order_by?: InputMaybe<Array<Current_Aptos_Names_Order_By>>;\n  where?: InputMaybe<Current_Aptos_Names_Bool_Exp>;\n};\n\n/** order by aggregate values of table \"fungible_asset_activities\" */\nexport type Fungible_Asset_Activities_Aggregate_Order_By = {\n  avg?: InputMaybe<Fungible_Asset_Activities_Avg_Order_By>;\n  count?: InputMaybe<Order_By>;\n  max?: InputMaybe<Fungible_Asset_Activities_Max_Order_By>;\n  min?: InputMaybe<Fungible_Asset_Activities_Min_Order_By>;\n  stddev?: InputMaybe<Fungible_Asset_Activities_Stddev_Order_By>;\n  stddev_pop?: InputMaybe<Fungible_Asset_Activities_Stddev_Pop_Order_By>;\n  stddev_samp?: InputMaybe<Fungible_Asset_Activities_Stddev_Samp_Order_By>;\n  sum?: InputMaybe<Fungible_Asset_Activities_Sum_Order_By>;\n  var_pop?: InputMaybe<Fungible_Asset_Activities_Var_Pop_Order_By>;\n  var_samp?: InputMaybe<Fungible_Asset_Activities_Var_Samp_Order_By>;\n  variance?: InputMaybe<Fungible_Asset_Activities_Variance_Order_By>;\n};\n\n/** order by avg() on columns of table \"fungible_asset_activities\" */\nexport type Fungible_Asset_Activities_Avg_Order_By = {\n  amount?: InputMaybe<Order_By>;\n  block_height?: InputMaybe<Order_By>;\n  event_index?: InputMaybe<Order_By>;\n  transaction_version?: InputMaybe<Order_By>;\n};\n\n/** Boolean expression to filter rows from the table \"fungible_asset_activities\". All fields are combined with a logical 'AND'. */\nexport type Fungible_Asset_Activities_Bool_Exp = {\n  _and?: InputMaybe<Array<Fungible_Asset_Activities_Bool_Exp>>;\n  _not?: InputMaybe<Fungible_Asset_Activities_Bool_Exp>;\n  _or?: InputMaybe<Array<Fungible_Asset_Activities_Bool_Exp>>;\n  amount?: InputMaybe<Numeric_Comparison_Exp>;\n  asset_type?: InputMaybe<String_Comparison_Exp>;\n  block_height?: InputMaybe<Bigint_Comparison_Exp>;\n  entry_function_id_str?: InputMaybe<String_Comparison_Exp>;\n  event_index?: InputMaybe<Bigint_Comparison_Exp>;\n  gas_fee_payer_address?: InputMaybe<String_Comparison_Exp>;\n  is_frozen?: InputMaybe<Boolean_Comparison_Exp>;\n  is_gas_fee?: InputMaybe<Boolean_Comparison_Exp>;\n  is_transaction_success?: InputMaybe<Boolean_Comparison_Exp>;\n  metadata?: InputMaybe<Fungible_Asset_Metadata_Bool_Exp>;\n  owner_address?: InputMaybe<String_Comparison_Exp>;\n  owner_aptos_names?: InputMaybe<Current_Aptos_Names_Bool_Exp>;\n  storage_id?: InputMaybe<String_Comparison_Exp>;\n  token_standard?: InputMaybe<String_Comparison_Exp>;\n  transaction_timestamp?: InputMaybe<Timestamp_Comparison_Exp>;\n  transaction_version?: InputMaybe<Bigint_Comparison_Exp>;\n  type?: InputMaybe<String_Comparison_Exp>;\n};\n\n/** order by max() on columns of table \"fungible_asset_activities\" */\nexport type Fungible_Asset_Activities_Max_Order_By = {\n  amount?: InputMaybe<Order_By>;\n  asset_type?: InputMaybe<Order_By>;\n  block_height?: InputMaybe<Order_By>;\n  entry_function_id_str?: InputMaybe<Order_By>;\n  event_index?: InputMaybe<Order_By>;\n  gas_fee_payer_address?: InputMaybe<Order_By>;\n  owner_address?: InputMaybe<Order_By>;\n  storage_id?: InputMaybe<Order_By>;\n  token_standard?: InputMaybe<Order_By>;\n  transaction_timestamp?: InputMaybe<Order_By>;\n  transaction_version?: InputMaybe<Order_By>;\n  type?: InputMaybe<Order_By>;\n};\n\n/** order by min() on columns of table \"fungible_asset_activities\" */\nexport type Fungible_Asset_Activities_Min_Order_By = {\n  amount?: InputMaybe<Order_By>;\n  asset_type?: InputMaybe<Order_By>;\n  block_height?: InputMaybe<Order_By>;\n  entry_function_id_str?: InputMaybe<Order_By>;\n  event_index?: InputMaybe<Order_By>;\n  gas_fee_payer_address?: InputMaybe<Order_By>;\n  owner_address?: InputMaybe<Order_By>;\n  storage_id?: InputMaybe<Order_By>;\n  token_standard?: InputMaybe<Order_By>;\n  transaction_timestamp?: InputMaybe<Order_By>;\n  transaction_version?: InputMaybe<Order_By>;\n  type?: InputMaybe<Order_By>;\n};\n\n/** Ordering options when selecting data from \"fungible_asset_activities\". */\nexport type Fungible_Asset_Activities_Order_By = {\n  amount?: InputMaybe<Order_By>;\n  asset_type?: InputMaybe<Order_By>;\n  block_height?: InputMaybe<Order_By>;\n  entry_function_id_str?: InputMaybe<Order_By>;\n  event_index?: InputMaybe<Order_By>;\n  gas_fee_payer_address?: InputMaybe<Order_By>;\n  is_frozen?: InputMaybe<Order_By>;\n  is_gas_fee?: InputMaybe<Order_By>;\n  is_transaction_success?: InputMaybe<Order_By>;\n  metadata?: InputMaybe<Fungible_Asset_Metadata_Order_By>;\n  owner_address?: InputMaybe<Order_By>;\n  owner_aptos_names_aggregate?: InputMaybe<Current_Aptos_Names_Aggregate_Order_By>;\n  storage_id?: InputMaybe<Order_By>;\n  token_standard?: InputMaybe<Order_By>;\n  transaction_timestamp?: InputMaybe<Order_By>;\n  transaction_version?: InputMaybe<Order_By>;\n  type?: InputMaybe<Order_By>;\n};\n\n/** select columns of table \"fungible_asset_activities\" */\nexport enum Fungible_Asset_Activities_Select_Column {\n  /** column name */\n  Amount = 'amount',\n  /** column name */\n  AssetType = 'asset_type',\n  /** column name */\n  BlockHeight = 'block_height',\n  /** column name */\n  EntryFunctionIdStr = 'entry_function_id_str',\n  /** column name */\n  EventIndex = 'event_index',\n  /** column name */\n  GasFeePayerAddress = 'gas_fee_payer_address',\n  /** column name */\n  IsFrozen = 'is_frozen',\n  /** column name */\n  IsGasFee = 'is_gas_fee',\n  /** column name */\n  IsTransactionSuccess = 'is_transaction_success',\n  /** column name */\n  OwnerAddress = 'owner_address',\n  /** column name */\n  StorageId = 'storage_id',\n  /** column name */\n  TokenStandard = 'token_standard',\n  /** column name */\n  TransactionTimestamp = 'transaction_timestamp',\n  /** column name */\n  TransactionVersion = 'transaction_version',\n  /** column name */\n  Type = 'type'\n}\n\n/** order by stddev() on columns of table \"fungible_asset_activities\" */\nexport type Fungible_Asset_Activities_Stddev_Order_By = {\n  amount?: InputMaybe<Order_By>;\n  block_height?: InputMaybe<Order_By>;\n  event_index?: InputMaybe<Order_By>;\n  transaction_version?: InputMaybe<Order_By>;\n};\n\n/** order by stddev_pop() on columns of table \"fungible_asset_activities\" */\nexport type Fungible_Asset_Activities_Stddev_Pop_Order_By = {\n  amount?: InputMaybe<Order_By>;\n  block_height?: InputMaybe<Order_By>;\n  event_index?: InputMaybe<Order_By>;\n  transaction_version?: InputMaybe<Order_By>;\n};\n\n/** order by stddev_samp() on columns of table \"fungible_asset_activities\" */\nexport type Fungible_Asset_Activities_Stddev_Samp_Order_By = {\n  amount?: InputMaybe<Order_By>;\n  block_height?: InputMaybe<Order_By>;\n  event_index?: InputMaybe<Order_By>;\n  transaction_version?: InputMaybe<Order_By>;\n};\n\n/** Streaming cursor of the table \"fungible_asset_activities\" */\nexport type Fungible_Asset_Activities_Stream_Cursor_Input = {\n  /** Stream column input with initial value */\n  initial_value: Fungible_Asset_Activities_Stream_Cursor_Value_Input;\n  /** cursor ordering */\n  ordering?: InputMaybe<Cursor_Ordering>;\n};\n\n/** Initial value of the column from where the streaming should start */\nexport type Fungible_Asset_Activities_Stream_Cursor_Value_Input = {\n  amount?: InputMaybe<Scalars['numeric']>;\n  asset_type?: InputMaybe<Scalars['String']>;\n  block_height?: InputMaybe<Scalars['bigint']>;\n  entry_function_id_str?: InputMaybe<Scalars['String']>;\n  event_index?: InputMaybe<Scalars['bigint']>;\n  gas_fee_payer_address?: InputMaybe<Scalars['String']>;\n  is_frozen?: InputMaybe<Scalars['Boolean']>;\n  is_gas_fee?: InputMaybe<Scalars['Boolean']>;\n  is_transaction_success?: InputMaybe<Scalars['Boolean']>;\n  owner_address?: InputMaybe<Scalars['String']>;\n  storage_id?: InputMaybe<Scalars['String']>;\n  token_standard?: InputMaybe<Scalars['String']>;\n  transaction_timestamp?: InputMaybe<Scalars['timestamp']>;\n  transaction_version?: InputMaybe<Scalars['bigint']>;\n  type?: InputMaybe<Scalars['String']>;\n};\n\n/** order by sum() on columns of table \"fungible_asset_activities\" */\nexport type Fungible_Asset_Activities_Sum_Order_By = {\n  amount?: InputMaybe<Order_By>;\n  block_height?: InputMaybe<Order_By>;\n  event_index?: InputMaybe<Order_By>;\n  transaction_version?: InputMaybe<Order_By>;\n};\n\n/** order by var_pop() on columns of table \"fungible_asset_activities\" */\nexport type Fungible_Asset_Activities_Var_Pop_Order_By = {\n  amount?: InputMaybe<Order_By>;\n  block_height?: InputMaybe<Order_By>;\n  event_index?: InputMaybe<Order_By>;\n  transaction_version?: InputMaybe<Order_By>;\n};\n\n/** order by var_samp() on columns of table \"fungible_asset_activities\" */\nexport type Fungible_Asset_Activities_Var_Samp_Order_By = {\n  amount?: InputMaybe<Order_By>;\n  block_height?: InputMaybe<Order_By>;\n  event_index?: InputMaybe<Order_By>;\n  transaction_version?: InputMaybe<Order_By>;\n};\n\n/** order by variance() on columns of table \"fungible_asset_activities\" */\nexport type Fungible_Asset_Activities_Variance_Order_By = {\n  amount?: InputMaybe<Order_By>;\n  block_height?: InputMaybe<Order_By>;\n  event_index?: InputMaybe<Order_By>;\n  transaction_version?: InputMaybe<Order_By>;\n};\n\n/** columns and relationships of \"fungible_asset_metadata\" */\nexport type Fungible_Asset_Metadata = {\n  __typename?: 'fungible_asset_metadata';\n  asset_type: Scalars['String'];\n  creator_address: Scalars['String'];\n  decimals: Scalars['Int'];\n  icon_uri?: Maybe<Scalars['String']>;\n  last_transaction_timestamp: Scalars['timestamp'];\n  last_transaction_version: Scalars['bigint'];\n  name: Scalars['String'];\n  project_uri?: Maybe<Scalars['String']>;\n  supply_aggregator_table_handle_v1?: Maybe<Scalars['String']>;\n  supply_aggregator_table_key_v1?: Maybe<Scalars['String']>;\n  symbol: Scalars['String'];\n  token_standard: Scalars['String'];\n};\n\n/** Boolean expression to filter rows from the table \"fungible_asset_metadata\". All fields are combined with a logical 'AND'. */\nexport type Fungible_Asset_Metadata_Bool_Exp = {\n  _and?: InputMaybe<Array<Fungible_Asset_Metadata_Bool_Exp>>;\n  _not?: InputMaybe<Fungible_Asset_Metadata_Bool_Exp>;\n  _or?: InputMaybe<Array<Fungible_Asset_Metadata_Bool_Exp>>;\n  asset_type?: InputMaybe<String_Comparison_Exp>;\n  creator_address?: InputMaybe<String_Comparison_Exp>;\n  decimals?: InputMaybe<Int_Comparison_Exp>;\n  icon_uri?: InputMaybe<String_Comparison_Exp>;\n  last_transaction_timestamp?: InputMaybe<Timestamp_Comparison_Exp>;\n  last_transaction_version?: InputMaybe<Bigint_Comparison_Exp>;\n  name?: InputMaybe<String_Comparison_Exp>;\n  project_uri?: InputMaybe<String_Comparison_Exp>;\n  supply_aggregator_table_handle_v1?: InputMaybe<String_Comparison_Exp>;\n  supply_aggregator_table_key_v1?: InputMaybe<String_Comparison_Exp>;\n  symbol?: InputMaybe<String_Comparison_Exp>;\n  token_standard?: InputMaybe<String_Comparison_Exp>;\n};\n\n/** Ordering options when selecting data from \"fungible_asset_metadata\". */\nexport type Fungible_Asset_Metadata_Order_By = {\n  asset_type?: InputMaybe<Order_By>;\n  creator_address?: InputMaybe<Order_By>;\n  decimals?: InputMaybe<Order_By>;\n  icon_uri?: InputMaybe<Order_By>;\n  last_transaction_timestamp?: InputMaybe<Order_By>;\n  last_transaction_version?: InputMaybe<Order_By>;\n  name?: InputMaybe<Order_By>;\n  project_uri?: InputMaybe<Order_By>;\n  supply_aggregator_table_handle_v1?: InputMaybe<Order_By>;\n  supply_aggregator_table_key_v1?: InputMaybe<Order_By>;\n  symbol?: InputMaybe<Order_By>;\n  token_standard?: InputMaybe<Order_By>;\n};\n\n/** select columns of table \"fungible_asset_metadata\" */\nexport enum Fungible_Asset_Metadata_Select_Column {\n  /** column name */\n  AssetType = 'asset_type',\n  /** column name */\n  CreatorAddress = 'creator_address',\n  /** column name */\n  Decimals = 'decimals',\n  /** column name */\n  IconUri = 'icon_uri',\n  /** column name */\n  LastTransactionTimestamp = 'last_transaction_timestamp',\n  /** column name */\n  LastTransactionVersion = 'last_transaction_version',\n  /** column name */\n  Name = 'name',\n  /** column name */\n  ProjectUri = 'project_uri',\n  /** column name */\n  SupplyAggregatorTableHandleV1 = 'supply_aggregator_table_handle_v1',\n  /** column name */\n  SupplyAggregatorTableKeyV1 = 'supply_aggregator_table_key_v1',\n  /** column name */\n  Symbol = 'symbol',\n  /** column name */\n  TokenStandard = 'token_standard'\n}\n\n/** Streaming cursor of the table \"fungible_asset_metadata\" */\nexport type Fungible_Asset_Metadata_Stream_Cursor_Input = {\n  /** Stream column input with initial value */\n  initial_value: Fungible_Asset_Metadata_Stream_Cursor_Value_Input;\n  /** cursor ordering */\n  ordering?: InputMaybe<Cursor_Ordering>;\n};\n\n/** Initial value of the column from where the streaming should start */\nexport type Fungible_Asset_Metadata_Stream_Cursor_Value_Input = {\n  asset_type?: InputMaybe<Scalars['String']>;\n  creator_address?: InputMaybe<Scalars['String']>;\n  decimals?: InputMaybe<Scalars['Int']>;\n  icon_uri?: InputMaybe<Scalars['String']>;\n  last_transaction_timestamp?: InputMaybe<Scalars['timestamp']>;\n  last_transaction_version?: InputMaybe<Scalars['bigint']>;\n  name?: InputMaybe<Scalars['String']>;\n  project_uri?: InputMaybe<Scalars['String']>;\n  supply_aggregator_table_handle_v1?: InputMaybe<Scalars['String']>;\n  supply_aggregator_table_key_v1?: InputMaybe<Scalars['String']>;\n  symbol?: InputMaybe<Scalars['String']>;\n  token_standard?: InputMaybe<Scalars['String']>;\n};\n\n/** columns and relationships of \"indexer_status\" */\nexport type Indexer_Status = {\n  __typename?: 'indexer_status';\n  db: Scalars['String'];\n  is_indexer_up: Scalars['Boolean'];\n};\n\n/** Boolean expression to filter rows from the table \"indexer_status\". All fields are combined with a logical 'AND'. */\nexport type Indexer_Status_Bool_Exp = {\n  _and?: InputMaybe<Array<Indexer_Status_Bool_Exp>>;\n  _not?: InputMaybe<Indexer_Status_Bool_Exp>;\n  _or?: InputMaybe<Array<Indexer_Status_Bool_Exp>>;\n  db?: InputMaybe<String_Comparison_Exp>;\n  is_indexer_up?: InputMaybe<Boolean_Comparison_Exp>;\n};\n\n/** Ordering options when selecting data from \"indexer_status\". */\nexport type Indexer_Status_Order_By = {\n  db?: InputMaybe<Order_By>;\n  is_indexer_up?: InputMaybe<Order_By>;\n};\n\n/** select columns of table \"indexer_status\" */\nexport enum Indexer_Status_Select_Column {\n  /** column name */\n  Db = 'db',\n  /** column name */\n  IsIndexerUp = 'is_indexer_up'\n}\n\n/** Streaming cursor of the table \"indexer_status\" */\nexport type Indexer_Status_Stream_Cursor_Input = {\n  /** Stream column input with initial value */\n  initial_value: Indexer_Status_Stream_Cursor_Value_Input;\n  /** cursor ordering */\n  ordering?: InputMaybe<Cursor_Ordering>;\n};\n\n/** Initial value of the column from where the streaming should start */\nexport type Indexer_Status_Stream_Cursor_Value_Input = {\n  db?: InputMaybe<Scalars['String']>;\n  is_indexer_up?: InputMaybe<Scalars['Boolean']>;\n};\n\nexport type Jsonb_Cast_Exp = {\n  String?: InputMaybe<String_Comparison_Exp>;\n};\n\n/** Boolean expression to compare columns of type \"jsonb\". All fields are combined with logical 'AND'. */\nexport type Jsonb_Comparison_Exp = {\n  _cast?: InputMaybe<Jsonb_Cast_Exp>;\n  /** is the column contained in the given json value */\n  _contained_in?: InputMaybe<Scalars['jsonb']>;\n  /** does the column contain the given json value at the top level */\n  _contains?: InputMaybe<Scalars['jsonb']>;\n  _eq?: InputMaybe<Scalars['jsonb']>;\n  _gt?: InputMaybe<Scalars['jsonb']>;\n  _gte?: InputMaybe<Scalars['jsonb']>;\n  /** does the string exist as a top-level key in the column */\n  _has_key?: InputMaybe<Scalars['String']>;\n  /** do all of these strings exist as top-level keys in the column */\n  _has_keys_all?: InputMaybe<Array<Scalars['String']>>;\n  /** do any of these strings exist as top-level keys in the column */\n  _has_keys_any?: InputMaybe<Array<Scalars['String']>>;\n  _in?: InputMaybe<Array<Scalars['jsonb']>>;\n  _is_null?: InputMaybe<Scalars['Boolean']>;\n  _lt?: InputMaybe<Scalars['jsonb']>;\n  _lte?: InputMaybe<Scalars['jsonb']>;\n  _neq?: InputMaybe<Scalars['jsonb']>;\n  _nin?: InputMaybe<Array<Scalars['jsonb']>>;\n};\n\n/** columns and relationships of \"ledger_infos\" */\nexport type Ledger_Infos = {\n  __typename?: 'ledger_infos';\n  chain_id: Scalars['bigint'];\n};\n\n/** Boolean expression to filter rows from the table \"ledger_infos\". All fields are combined with a logical 'AND'. */\nexport type Ledger_Infos_Bool_Exp = {\n  _and?: InputMaybe<Array<Ledger_Infos_Bool_Exp>>;\n  _not?: InputMaybe<Ledger_Infos_Bool_Exp>;\n  _or?: InputMaybe<Array<Ledger_Infos_Bool_Exp>>;\n  chain_id?: InputMaybe<Bigint_Comparison_Exp>;\n};\n\n/** Ordering options when selecting data from \"ledger_infos\". */\nexport type Ledger_Infos_Order_By = {\n  chain_id?: InputMaybe<Order_By>;\n};\n\n/** select columns of table \"ledger_infos\" */\nexport enum Ledger_Infos_Select_Column {\n  /** column name */\n  ChainId = 'chain_id'\n}\n\n/** Streaming cursor of the table \"ledger_infos\" */\nexport type Ledger_Infos_Stream_Cursor_Input = {\n  /** Stream column input with initial value */\n  initial_value: Ledger_Infos_Stream_Cursor_Value_Input;\n  /** cursor ordering */\n  ordering?: InputMaybe<Cursor_Ordering>;\n};\n\n/** Initial value of the column from where the streaming should start */\nexport type Ledger_Infos_Stream_Cursor_Value_Input = {\n  chain_id?: InputMaybe<Scalars['bigint']>;\n};\n\n/** columns and relationships of \"move_resources\" */\nexport type Move_Resources = {\n  __typename?: 'move_resources';\n  address: Scalars['String'];\n  transaction_version: Scalars['bigint'];\n};\n\n/** aggregated selection of \"move_resources\" */\nexport type Move_Resources_Aggregate = {\n  __typename?: 'move_resources_aggregate';\n  aggregate?: Maybe<Move_Resources_Aggregate_Fields>;\n  nodes: Array<Move_Resources>;\n};\n\n/** aggregate fields of \"move_resources\" */\nexport type Move_Resources_Aggregate_Fields = {\n  __typename?: 'move_resources_aggregate_fields';\n  avg?: Maybe<Move_Resources_Avg_Fields>;\n  count: Scalars['Int'];\n  max?: Maybe<Move_Resources_Max_Fields>;\n  min?: Maybe<Move_Resources_Min_Fields>;\n  stddev?: Maybe<Move_Resources_Stddev_Fields>;\n  stddev_pop?: Maybe<Move_Resources_Stddev_Pop_Fields>;\n  stddev_samp?: Maybe<Move_Resources_Stddev_Samp_Fields>;\n  sum?: Maybe<Move_Resources_Sum_Fields>;\n  var_pop?: Maybe<Move_Resources_Var_Pop_Fields>;\n  var_samp?: Maybe<Move_Resources_Var_Samp_Fields>;\n  variance?: Maybe<Move_Resources_Variance_Fields>;\n};\n\n\n/** aggregate fields of \"move_resources\" */\nexport type Move_Resources_Aggregate_FieldsCountArgs = {\n  columns?: InputMaybe<Array<Move_Resources_Select_Column>>;\n  distinct?: InputMaybe<Scalars['Boolean']>;\n};\n\n/** aggregate avg on columns */\nexport type Move_Resources_Avg_Fields = {\n  __typename?: 'move_resources_avg_fields';\n  transaction_version?: Maybe<Scalars['Float']>;\n};\n\n/** Boolean expression to filter rows from the table \"move_resources\". All fields are combined with a logical 'AND'. */\nexport type Move_Resources_Bool_Exp = {\n  _and?: InputMaybe<Array<Move_Resources_Bool_Exp>>;\n  _not?: InputMaybe<Move_Resources_Bool_Exp>;\n  _or?: InputMaybe<Array<Move_Resources_Bool_Exp>>;\n  address?: InputMaybe<String_Comparison_Exp>;\n  transaction_version?: InputMaybe<Bigint_Comparison_Exp>;\n};\n\n/** aggregate max on columns */\nexport type Move_Resources_Max_Fields = {\n  __typename?: 'move_resources_max_fields';\n  address?: Maybe<Scalars['String']>;\n  transaction_version?: Maybe<Scalars['bigint']>;\n};\n\n/** aggregate min on columns */\nexport type Move_Resources_Min_Fields = {\n  __typename?: 'move_resources_min_fields';\n  address?: Maybe<Scalars['String']>;\n  transaction_version?: Maybe<Scalars['bigint']>;\n};\n\n/** Ordering options when selecting data from \"move_resources\". */\nexport type Move_Resources_Order_By = {\n  address?: InputMaybe<Order_By>;\n  transaction_version?: InputMaybe<Order_By>;\n};\n\n/** select columns of table \"move_resources\" */\nexport enum Move_Resources_Select_Column {\n  /** column name */\n  Address = 'address',\n  /** column name */\n  TransactionVersion = 'transaction_version'\n}\n\n/** aggregate stddev on columns */\nexport type Move_Resources_Stddev_Fields = {\n  __typename?: 'move_resources_stddev_fields';\n  transaction_version?: Maybe<Scalars['Float']>;\n};\n\n/** aggregate stddev_pop on columns */\nexport type Move_Resources_Stddev_Pop_Fields = {\n  __typename?: 'move_resources_stddev_pop_fields';\n  transaction_version?: Maybe<Scalars['Float']>;\n};\n\n/** aggregate stddev_samp on columns */\nexport type Move_Resources_Stddev_Samp_Fields = {\n  __typename?: 'move_resources_stddev_samp_fields';\n  transaction_version?: Maybe<Scalars['Float']>;\n};\n\n/** Streaming cursor of the table \"move_resources\" */\nexport type Move_Resources_Stream_Cursor_Input = {\n  /** Stream column input with initial value */\n  initial_value: Move_Resources_Stream_Cursor_Value_Input;\n  /** cursor ordering */\n  ordering?: InputMaybe<Cursor_Ordering>;\n};\n\n/** Initial value of the column from where the streaming should start */\nexport type Move_Resources_Stream_Cursor_Value_Input = {\n  address?: InputMaybe<Scalars['String']>;\n  transaction_version?: InputMaybe<Scalars['bigint']>;\n};\n\n/** aggregate sum on columns */\nexport type Move_Resources_Sum_Fields = {\n  __typename?: 'move_resources_sum_fields';\n  transaction_version?: Maybe<Scalars['bigint']>;\n};\n\n/** aggregate var_pop on columns */\nexport type Move_Resources_Var_Pop_Fields = {\n  __typename?: 'move_resources_var_pop_fields';\n  transaction_version?: Maybe<Scalars['Float']>;\n};\n\n/** aggregate var_samp on columns */\nexport type Move_Resources_Var_Samp_Fields = {\n  __typename?: 'move_resources_var_samp_fields';\n  transaction_version?: Maybe<Scalars['Float']>;\n};\n\n/** aggregate variance on columns */\nexport type Move_Resources_Variance_Fields = {\n  __typename?: 'move_resources_variance_fields';\n  transaction_version?: Maybe<Scalars['Float']>;\n};\n\n/** columns and relationships of \"nft_marketplace_v2.current_nft_marketplace_auctions\" */\nexport type Nft_Marketplace_V2_Current_Nft_Marketplace_Auctions = {\n  __typename?: 'nft_marketplace_v2_current_nft_marketplace_auctions';\n  buy_it_now_price?: Maybe<Scalars['numeric']>;\n  coin_type?: Maybe<Scalars['String']>;\n  collection_id: Scalars['String'];\n  contract_address: Scalars['String'];\n  current_bid_price?: Maybe<Scalars['numeric']>;\n  current_bidder?: Maybe<Scalars['String']>;\n  /** An object relationship */\n  current_token_data?: Maybe<Current_Token_Datas_V2>;\n  entry_function_id_str: Scalars['String'];\n  expiration_time: Scalars['numeric'];\n  fee_schedule_id: Scalars['String'];\n  is_deleted: Scalars['Boolean'];\n  last_transaction_timestamp: Scalars['timestamptz'];\n  last_transaction_version: Scalars['bigint'];\n  listing_id: Scalars['String'];\n  marketplace: Scalars['String'];\n  seller: Scalars['String'];\n  starting_bid_price: Scalars['numeric'];\n  token_amount: Scalars['numeric'];\n  token_data_id: Scalars['String'];\n  token_standard: Scalars['String'];\n};\n\n/** Boolean expression to filter rows from the table \"nft_marketplace_v2.current_nft_marketplace_auctions\". All fields are combined with a logical 'AND'. */\nexport type Nft_Marketplace_V2_Current_Nft_Marketplace_Auctions_Bool_Exp = {\n  _and?: InputMaybe<Array<Nft_Marketplace_V2_Current_Nft_Marketplace_Auctions_Bool_Exp>>;\n  _not?: InputMaybe<Nft_Marketplace_V2_Current_Nft_Marketplace_Auctions_Bool_Exp>;\n  _or?: InputMaybe<Array<Nft_Marketplace_V2_Current_Nft_Marketplace_Auctions_Bool_Exp>>;\n  buy_it_now_price?: InputMaybe<Numeric_Comparison_Exp>;\n  coin_type?: InputMaybe<String_Comparison_Exp>;\n  collection_id?: InputMaybe<String_Comparison_Exp>;\n  contract_address?: InputMaybe<String_Comparison_Exp>;\n  current_bid_price?: InputMaybe<Numeric_Comparison_Exp>;\n  current_bidder?: InputMaybe<String_Comparison_Exp>;\n  current_token_data?: InputMaybe<Current_Token_Datas_V2_Bool_Exp>;\n  entry_function_id_str?: InputMaybe<String_Comparison_Exp>;\n  expiration_time?: InputMaybe<Numeric_Comparison_Exp>;\n  fee_schedule_id?: InputMaybe<String_Comparison_Exp>;\n  is_deleted?: InputMaybe<Boolean_Comparison_Exp>;\n  last_transaction_timestamp?: InputMaybe<Timestamptz_Comparison_Exp>;\n  last_transaction_version?: InputMaybe<Bigint_Comparison_Exp>;\n  listing_id?: InputMaybe<String_Comparison_Exp>;\n  marketplace?: InputMaybe<String_Comparison_Exp>;\n  seller?: InputMaybe<String_Comparison_Exp>;\n  starting_bid_price?: InputMaybe<Numeric_Comparison_Exp>;\n  token_amount?: InputMaybe<Numeric_Comparison_Exp>;\n  token_data_id?: InputMaybe<String_Comparison_Exp>;\n  token_standard?: InputMaybe<String_Comparison_Exp>;\n};\n\n/** Ordering options when selecting data from \"nft_marketplace_v2.current_nft_marketplace_auctions\". */\nexport type Nft_Marketplace_V2_Current_Nft_Marketplace_Auctions_Order_By = {\n  buy_it_now_price?: InputMaybe<Order_By>;\n  coin_type?: InputMaybe<Order_By>;\n  collection_id?: InputMaybe<Order_By>;\n  contract_address?: InputMaybe<Order_By>;\n  current_bid_price?: InputMaybe<Order_By>;\n  current_bidder?: InputMaybe<Order_By>;\n  current_token_data?: InputMaybe<Current_Token_Datas_V2_Order_By>;\n  entry_function_id_str?: InputMaybe<Order_By>;\n  expiration_time?: InputMaybe<Order_By>;\n  fee_schedule_id?: InputMaybe<Order_By>;\n  is_deleted?: InputMaybe<Order_By>;\n  last_transaction_timestamp?: InputMaybe<Order_By>;\n  last_transaction_version?: InputMaybe<Order_By>;\n  listing_id?: InputMaybe<Order_By>;\n  marketplace?: InputMaybe<Order_By>;\n  seller?: InputMaybe<Order_By>;\n  starting_bid_price?: InputMaybe<Order_By>;\n  token_amount?: InputMaybe<Order_By>;\n  token_data_id?: InputMaybe<Order_By>;\n  token_standard?: InputMaybe<Order_By>;\n};\n\n/** select columns of table \"nft_marketplace_v2.current_nft_marketplace_auctions\" */\nexport enum Nft_Marketplace_V2_Current_Nft_Marketplace_Auctions_Select_Column {\n  /** column name */\n  BuyItNowPrice = 'buy_it_now_price',\n  /** column name */\n  CoinType = 'coin_type',\n  /** column name */\n  CollectionId = 'collection_id',\n  /** column name */\n  ContractAddress = 'contract_address',\n  /** column name */\n  CurrentBidPrice = 'current_bid_price',\n  /** column name */\n  CurrentBidder = 'current_bidder',\n  /** column name */\n  EntryFunctionIdStr = 'entry_function_id_str',\n  /** column name */\n  ExpirationTime = 'expiration_time',\n  /** column name */\n  FeeScheduleId = 'fee_schedule_id',\n  /** column name */\n  IsDeleted = 'is_deleted',\n  /** column name */\n  LastTransactionTimestamp = 'last_transaction_timestamp',\n  /** column name */\n  LastTransactionVersion = 'last_transaction_version',\n  /** column name */\n  ListingId = 'listing_id',\n  /** column name */\n  Marketplace = 'marketplace',\n  /** column name */\n  Seller = 'seller',\n  /** column name */\n  StartingBidPrice = 'starting_bid_price',\n  /** column name */\n  TokenAmount = 'token_amount',\n  /** column name */\n  TokenDataId = 'token_data_id',\n  /** column name */\n  TokenStandard = 'token_standard'\n}\n\n/** Streaming cursor of the table \"nft_marketplace_v2_current_nft_marketplace_auctions\" */\nexport type Nft_Marketplace_V2_Current_Nft_Marketplace_Auctions_Stream_Cursor_Input = {\n  /** Stream column input with initial value */\n  initial_value: Nft_Marketplace_V2_Current_Nft_Marketplace_Auctions_Stream_Cursor_Value_Input;\n  /** cursor ordering */\n  ordering?: InputMaybe<Cursor_Ordering>;\n};\n\n/** Initial value of the column from where the streaming should start */\nexport type Nft_Marketplace_V2_Current_Nft_Marketplace_Auctions_Stream_Cursor_Value_Input = {\n  buy_it_now_price?: InputMaybe<Scalars['numeric']>;\n  coin_type?: InputMaybe<Scalars['String']>;\n  collection_id?: InputMaybe<Scalars['String']>;\n  contract_address?: InputMaybe<Scalars['String']>;\n  current_bid_price?: InputMaybe<Scalars['numeric']>;\n  current_bidder?: InputMaybe<Scalars['String']>;\n  entry_function_id_str?: InputMaybe<Scalars['String']>;\n  expiration_time?: InputMaybe<Scalars['numeric']>;\n  fee_schedule_id?: InputMaybe<Scalars['String']>;\n  is_deleted?: InputMaybe<Scalars['Boolean']>;\n  last_transaction_timestamp?: InputMaybe<Scalars['timestamptz']>;\n  last_transaction_version?: InputMaybe<Scalars['bigint']>;\n  listing_id?: InputMaybe<Scalars['String']>;\n  marketplace?: InputMaybe<Scalars['String']>;\n  seller?: InputMaybe<Scalars['String']>;\n  starting_bid_price?: InputMaybe<Scalars['numeric']>;\n  token_amount?: InputMaybe<Scalars['numeric']>;\n  token_data_id?: InputMaybe<Scalars['String']>;\n  token_standard?: InputMaybe<Scalars['String']>;\n};\n\n/** columns and relationships of \"nft_marketplace_v2.current_nft_marketplace_collection_offers\" */\nexport type Nft_Marketplace_V2_Current_Nft_Marketplace_Collection_Offers = {\n  __typename?: 'nft_marketplace_v2_current_nft_marketplace_collection_offers';\n  buyer: Scalars['String'];\n  coin_type?: Maybe<Scalars['String']>;\n  collection_id: Scalars['String'];\n  collection_offer_id: Scalars['String'];\n  contract_address: Scalars['String'];\n  /** An object relationship */\n  current_collection_v2?: Maybe<Current_Collections_V2>;\n  entry_function_id_str: Scalars['String'];\n  expiration_time: Scalars['numeric'];\n  fee_schedule_id: Scalars['String'];\n  is_deleted: Scalars['Boolean'];\n  item_price: Scalars['numeric'];\n  last_transaction_timestamp: Scalars['timestamptz'];\n  last_transaction_version: Scalars['bigint'];\n  marketplace: Scalars['String'];\n  remaining_token_amount: Scalars['numeric'];\n  token_standard: Scalars['String'];\n};\n\n/** Boolean expression to filter rows from the table \"nft_marketplace_v2.current_nft_marketplace_collection_offers\". All fields are combined with a logical 'AND'. */\nexport type Nft_Marketplace_V2_Current_Nft_Marketplace_Collection_Offers_Bool_Exp = {\n  _and?: InputMaybe<Array<Nft_Marketplace_V2_Current_Nft_Marketplace_Collection_Offers_Bool_Exp>>;\n  _not?: InputMaybe<Nft_Marketplace_V2_Current_Nft_Marketplace_Collection_Offers_Bool_Exp>;\n  _or?: InputMaybe<Array<Nft_Marketplace_V2_Current_Nft_Marketplace_Collection_Offers_Bool_Exp>>;\n  buyer?: InputMaybe<String_Comparison_Exp>;\n  coin_type?: InputMaybe<String_Comparison_Exp>;\n  collection_id?: InputMaybe<String_Comparison_Exp>;\n  collection_offer_id?: InputMaybe<String_Comparison_Exp>;\n  contract_address?: InputMaybe<String_Comparison_Exp>;\n  current_collection_v2?: InputMaybe<Current_Collections_V2_Bool_Exp>;\n  entry_function_id_str?: InputMaybe<String_Comparison_Exp>;\n  expiration_time?: InputMaybe<Numeric_Comparison_Exp>;\n  fee_schedule_id?: InputMaybe<String_Comparison_Exp>;\n  is_deleted?: InputMaybe<Boolean_Comparison_Exp>;\n  item_price?: InputMaybe<Numeric_Comparison_Exp>;\n  last_transaction_timestamp?: InputMaybe<Timestamptz_Comparison_Exp>;\n  last_transaction_version?: InputMaybe<Bigint_Comparison_Exp>;\n  marketplace?: InputMaybe<String_Comparison_Exp>;\n  remaining_token_amount?: InputMaybe<Numeric_Comparison_Exp>;\n  token_standard?: InputMaybe<String_Comparison_Exp>;\n};\n\n/** Ordering options when selecting data from \"nft_marketplace_v2.current_nft_marketplace_collection_offers\". */\nexport type Nft_Marketplace_V2_Current_Nft_Marketplace_Collection_Offers_Order_By = {\n  buyer?: InputMaybe<Order_By>;\n  coin_type?: InputMaybe<Order_By>;\n  collection_id?: InputMaybe<Order_By>;\n  collection_offer_id?: InputMaybe<Order_By>;\n  contract_address?: InputMaybe<Order_By>;\n  current_collection_v2?: InputMaybe<Current_Collections_V2_Order_By>;\n  entry_function_id_str?: InputMaybe<Order_By>;\n  expiration_time?: InputMaybe<Order_By>;\n  fee_schedule_id?: InputMaybe<Order_By>;\n  is_deleted?: InputMaybe<Order_By>;\n  item_price?: InputMaybe<Order_By>;\n  last_transaction_timestamp?: InputMaybe<Order_By>;\n  last_transaction_version?: InputMaybe<Order_By>;\n  marketplace?: InputMaybe<Order_By>;\n  remaining_token_amount?: InputMaybe<Order_By>;\n  token_standard?: InputMaybe<Order_By>;\n};\n\n/** select columns of table \"nft_marketplace_v2.current_nft_marketplace_collection_offers\" */\nexport enum Nft_Marketplace_V2_Current_Nft_Marketplace_Collection_Offers_Select_Column {\n  /** column name */\n  Buyer = 'buyer',\n  /** column name */\n  CoinType = 'coin_type',\n  /** column name */\n  CollectionId = 'collection_id',\n  /** column name */\n  CollectionOfferId = 'collection_offer_id',\n  /** column name */\n  ContractAddress = 'contract_address',\n  /** column name */\n  EntryFunctionIdStr = 'entry_function_id_str',\n  /** column name */\n  ExpirationTime = 'expiration_time',\n  /** column name */\n  FeeScheduleId = 'fee_schedule_id',\n  /** column name */\n  IsDeleted = 'is_deleted',\n  /** column name */\n  ItemPrice = 'item_price',\n  /** column name */\n  LastTransactionTimestamp = 'last_transaction_timestamp',\n  /** column name */\n  LastTransactionVersion = 'last_transaction_version',\n  /** column name */\n  Marketplace = 'marketplace',\n  /** column name */\n  RemainingTokenAmount = 'remaining_token_amount',\n  /** column name */\n  TokenStandard = 'token_standard'\n}\n\n/** Streaming cursor of the table \"nft_marketplace_v2_current_nft_marketplace_collection_offers\" */\nexport type Nft_Marketplace_V2_Current_Nft_Marketplace_Collection_Offers_Stream_Cursor_Input = {\n  /** Stream column input with initial value */\n  initial_value: Nft_Marketplace_V2_Current_Nft_Marketplace_Collection_Offers_Stream_Cursor_Value_Input;\n  /** cursor ordering */\n  ordering?: InputMaybe<Cursor_Ordering>;\n};\n\n/** Initial value of the column from where the streaming should start */\nexport type Nft_Marketplace_V2_Current_Nft_Marketplace_Collection_Offers_Stream_Cursor_Value_Input = {\n  buyer?: InputMaybe<Scalars['String']>;\n  coin_type?: InputMaybe<Scalars['String']>;\n  collection_id?: InputMaybe<Scalars['String']>;\n  collection_offer_id?: InputMaybe<Scalars['String']>;\n  contract_address?: InputMaybe<Scalars['String']>;\n  entry_function_id_str?: InputMaybe<Scalars['String']>;\n  expiration_time?: InputMaybe<Scalars['numeric']>;\n  fee_schedule_id?: InputMaybe<Scalars['String']>;\n  is_deleted?: InputMaybe<Scalars['Boolean']>;\n  item_price?: InputMaybe<Scalars['numeric']>;\n  last_transaction_timestamp?: InputMaybe<Scalars['timestamptz']>;\n  last_transaction_version?: InputMaybe<Scalars['bigint']>;\n  marketplace?: InputMaybe<Scalars['String']>;\n  remaining_token_amount?: InputMaybe<Scalars['numeric']>;\n  token_standard?: InputMaybe<Scalars['String']>;\n};\n\n/** columns and relationships of \"nft_marketplace_v2.current_nft_marketplace_listings\" */\nexport type Nft_Marketplace_V2_Current_Nft_Marketplace_Listings = {\n  __typename?: 'nft_marketplace_v2_current_nft_marketplace_listings';\n  coin_type?: Maybe<Scalars['String']>;\n  collection_id: Scalars['String'];\n  contract_address: Scalars['String'];\n  /** An object relationship */\n  current_token_data?: Maybe<Current_Token_Datas_V2>;\n  entry_function_id_str: Scalars['String'];\n  fee_schedule_id: Scalars['String'];\n  is_deleted: Scalars['Boolean'];\n  last_transaction_timestamp: Scalars['timestamptz'];\n  last_transaction_version: Scalars['bigint'];\n  listing_id: Scalars['String'];\n  marketplace: Scalars['String'];\n  price: Scalars['numeric'];\n  seller: Scalars['String'];\n  token_amount: Scalars['numeric'];\n  token_data_id: Scalars['String'];\n  token_standard: Scalars['String'];\n};\n\n/** Boolean expression to filter rows from the table \"nft_marketplace_v2.current_nft_marketplace_listings\". All fields are combined with a logical 'AND'. */\nexport type Nft_Marketplace_V2_Current_Nft_Marketplace_Listings_Bool_Exp = {\n  _and?: InputMaybe<Array<Nft_Marketplace_V2_Current_Nft_Marketplace_Listings_Bool_Exp>>;\n  _not?: InputMaybe<Nft_Marketplace_V2_Current_Nft_Marketplace_Listings_Bool_Exp>;\n  _or?: InputMaybe<Array<Nft_Marketplace_V2_Current_Nft_Marketplace_Listings_Bool_Exp>>;\n  coin_type?: InputMaybe<String_Comparison_Exp>;\n  collection_id?: InputMaybe<String_Comparison_Exp>;\n  contract_address?: InputMaybe<String_Comparison_Exp>;\n  current_token_data?: InputMaybe<Current_Token_Datas_V2_Bool_Exp>;\n  entry_function_id_str?: InputMaybe<String_Comparison_Exp>;\n  fee_schedule_id?: InputMaybe<String_Comparison_Exp>;\n  is_deleted?: InputMaybe<Boolean_Comparison_Exp>;\n  last_transaction_timestamp?: InputMaybe<Timestamptz_Comparison_Exp>;\n  last_transaction_version?: InputMaybe<Bigint_Comparison_Exp>;\n  listing_id?: InputMaybe<String_Comparison_Exp>;\n  marketplace?: InputMaybe<String_Comparison_Exp>;\n  price?: InputMaybe<Numeric_Comparison_Exp>;\n  seller?: InputMaybe<String_Comparison_Exp>;\n  token_amount?: InputMaybe<Numeric_Comparison_Exp>;\n  token_data_id?: InputMaybe<String_Comparison_Exp>;\n  token_standard?: InputMaybe<String_Comparison_Exp>;\n};\n\n/** Ordering options when selecting data from \"nft_marketplace_v2.current_nft_marketplace_listings\". */\nexport type Nft_Marketplace_V2_Current_Nft_Marketplace_Listings_Order_By = {\n  coin_type?: InputMaybe<Order_By>;\n  collection_id?: InputMaybe<Order_By>;\n  contract_address?: InputMaybe<Order_By>;\n  current_token_data?: InputMaybe<Current_Token_Datas_V2_Order_By>;\n  entry_function_id_str?: InputMaybe<Order_By>;\n  fee_schedule_id?: InputMaybe<Order_By>;\n  is_deleted?: InputMaybe<Order_By>;\n  last_transaction_timestamp?: InputMaybe<Order_By>;\n  last_transaction_version?: InputMaybe<Order_By>;\n  listing_id?: InputMaybe<Order_By>;\n  marketplace?: InputMaybe<Order_By>;\n  price?: InputMaybe<Order_By>;\n  seller?: InputMaybe<Order_By>;\n  token_amount?: InputMaybe<Order_By>;\n  token_data_id?: InputMaybe<Order_By>;\n  token_standard?: InputMaybe<Order_By>;\n};\n\n/** select columns of table \"nft_marketplace_v2.current_nft_marketplace_listings\" */\nexport enum Nft_Marketplace_V2_Current_Nft_Marketplace_Listings_Select_Column {\n  /** column name */\n  CoinType = 'coin_type',\n  /** column name */\n  CollectionId = 'collection_id',\n  /** column name */\n  ContractAddress = 'contract_address',\n  /** column name */\n  EntryFunctionIdStr = 'entry_function_id_str',\n  /** column name */\n  FeeScheduleId = 'fee_schedule_id',\n  /** column name */\n  IsDeleted = 'is_deleted',\n  /** column name */\n  LastTransactionTimestamp = 'last_transaction_timestamp',\n  /** column name */\n  LastTransactionVersion = 'last_transaction_version',\n  /** column name */\n  ListingId = 'listing_id',\n  /** column name */\n  Marketplace = 'marketplace',\n  /** column name */\n  Price = 'price',\n  /** column name */\n  Seller = 'seller',\n  /** column name */\n  TokenAmount = 'token_amount',\n  /** column name */\n  TokenDataId = 'token_data_id',\n  /** column name */\n  TokenStandard = 'token_standard'\n}\n\n/** Streaming cursor of the table \"nft_marketplace_v2_current_nft_marketplace_listings\" */\nexport type Nft_Marketplace_V2_Current_Nft_Marketplace_Listings_Stream_Cursor_Input = {\n  /** Stream column input with initial value */\n  initial_value: Nft_Marketplace_V2_Current_Nft_Marketplace_Listings_Stream_Cursor_Value_Input;\n  /** cursor ordering */\n  ordering?: InputMaybe<Cursor_Ordering>;\n};\n\n/** Initial value of the column from where the streaming should start */\nexport type Nft_Marketplace_V2_Current_Nft_Marketplace_Listings_Stream_Cursor_Value_Input = {\n  coin_type?: InputMaybe<Scalars['String']>;\n  collection_id?: InputMaybe<Scalars['String']>;\n  contract_address?: InputMaybe<Scalars['String']>;\n  entry_function_id_str?: InputMaybe<Scalars['String']>;\n  fee_schedule_id?: InputMaybe<Scalars['String']>;\n  is_deleted?: InputMaybe<Scalars['Boolean']>;\n  last_transaction_timestamp?: InputMaybe<Scalars['timestamptz']>;\n  last_transaction_version?: InputMaybe<Scalars['bigint']>;\n  listing_id?: InputMaybe<Scalars['String']>;\n  marketplace?: InputMaybe<Scalars['String']>;\n  price?: InputMaybe<Scalars['numeric']>;\n  seller?: InputMaybe<Scalars['String']>;\n  token_amount?: InputMaybe<Scalars['numeric']>;\n  token_data_id?: InputMaybe<Scalars['String']>;\n  token_standard?: InputMaybe<Scalars['String']>;\n};\n\n/** columns and relationships of \"nft_marketplace_v2.current_nft_marketplace_token_offers\" */\nexport type Nft_Marketplace_V2_Current_Nft_Marketplace_Token_Offers = {\n  __typename?: 'nft_marketplace_v2_current_nft_marketplace_token_offers';\n  buyer: Scalars['String'];\n  coin_type?: Maybe<Scalars['String']>;\n  collection_id: Scalars['String'];\n  contract_address: Scalars['String'];\n  /** An object relationship */\n  current_token_data?: Maybe<Current_Token_Datas_V2>;\n  entry_function_id_str: Scalars['String'];\n  expiration_time: Scalars['numeric'];\n  fee_schedule_id: Scalars['String'];\n  is_deleted: Scalars['Boolean'];\n  last_transaction_timestamp: Scalars['timestamptz'];\n  last_transaction_version: Scalars['bigint'];\n  marketplace: Scalars['String'];\n  offer_id: Scalars['String'];\n  price: Scalars['numeric'];\n  token_amount: Scalars['numeric'];\n  token_data_id: Scalars['String'];\n  token_standard: Scalars['String'];\n};\n\n/** Boolean expression to filter rows from the table \"nft_marketplace_v2.current_nft_marketplace_token_offers\". All fields are combined with a logical 'AND'. */\nexport type Nft_Marketplace_V2_Current_Nft_Marketplace_Token_Offers_Bool_Exp = {\n  _and?: InputMaybe<Array<Nft_Marketplace_V2_Current_Nft_Marketplace_Token_Offers_Bool_Exp>>;\n  _not?: InputMaybe<Nft_Marketplace_V2_Current_Nft_Marketplace_Token_Offers_Bool_Exp>;\n  _or?: InputMaybe<Array<Nft_Marketplace_V2_Current_Nft_Marketplace_Token_Offers_Bool_Exp>>;\n  buyer?: InputMaybe<String_Comparison_Exp>;\n  coin_type?: InputMaybe<String_Comparison_Exp>;\n  collection_id?: InputMaybe<String_Comparison_Exp>;\n  contract_address?: InputMaybe<String_Comparison_Exp>;\n  current_token_data?: InputMaybe<Current_Token_Datas_V2_Bool_Exp>;\n  entry_function_id_str?: InputMaybe<String_Comparison_Exp>;\n  expiration_time?: InputMaybe<Numeric_Comparison_Exp>;\n  fee_schedule_id?: InputMaybe<String_Comparison_Exp>;\n  is_deleted?: InputMaybe<Boolean_Comparison_Exp>;\n  last_transaction_timestamp?: InputMaybe<Timestamptz_Comparison_Exp>;\n  last_transaction_version?: InputMaybe<Bigint_Comparison_Exp>;\n  marketplace?: InputMaybe<String_Comparison_Exp>;\n  offer_id?: InputMaybe<String_Comparison_Exp>;\n  price?: InputMaybe<Numeric_Comparison_Exp>;\n  token_amount?: InputMaybe<Numeric_Comparison_Exp>;\n  token_data_id?: InputMaybe<String_Comparison_Exp>;\n  token_standard?: InputMaybe<String_Comparison_Exp>;\n};\n\n/** Ordering options when selecting data from \"nft_marketplace_v2.current_nft_marketplace_token_offers\". */\nexport type Nft_Marketplace_V2_Current_Nft_Marketplace_Token_Offers_Order_By = {\n  buyer?: InputMaybe<Order_By>;\n  coin_type?: InputMaybe<Order_By>;\n  collection_id?: InputMaybe<Order_By>;\n  contract_address?: InputMaybe<Order_By>;\n  current_token_data?: InputMaybe<Current_Token_Datas_V2_Order_By>;\n  entry_function_id_str?: InputMaybe<Order_By>;\n  expiration_time?: InputMaybe<Order_By>;\n  fee_schedule_id?: InputMaybe<Order_By>;\n  is_deleted?: InputMaybe<Order_By>;\n  last_transaction_timestamp?: InputMaybe<Order_By>;\n  last_transaction_version?: InputMaybe<Order_By>;\n  marketplace?: InputMaybe<Order_By>;\n  offer_id?: InputMaybe<Order_By>;\n  price?: InputMaybe<Order_By>;\n  token_amount?: InputMaybe<Order_By>;\n  token_data_id?: InputMaybe<Order_By>;\n  token_standard?: InputMaybe<Order_By>;\n};\n\n/** select columns of table \"nft_marketplace_v2.current_nft_marketplace_token_offers\" */\nexport enum Nft_Marketplace_V2_Current_Nft_Marketplace_Token_Offers_Select_Column {\n  /** column name */\n  Buyer = 'buyer',\n  /** column name */\n  CoinType = 'coin_type',\n  /** column name */\n  CollectionId = 'collection_id',\n  /** column name */\n  ContractAddress = 'contract_address',\n  /** column name */\n  EntryFunctionIdStr = 'entry_function_id_str',\n  /** column name */\n  ExpirationTime = 'expiration_time',\n  /** column name */\n  FeeScheduleId = 'fee_schedule_id',\n  /** column name */\n  IsDeleted = 'is_deleted',\n  /** column name */\n  LastTransactionTimestamp = 'last_transaction_timestamp',\n  /** column name */\n  LastTransactionVersion = 'last_transaction_version',\n  /** column name */\n  Marketplace = 'marketplace',\n  /** column name */\n  OfferId = 'offer_id',\n  /** column name */\n  Price = 'price',\n  /** column name */\n  TokenAmount = 'token_amount',\n  /** column name */\n  TokenDataId = 'token_data_id',\n  /** column name */\n  TokenStandard = 'token_standard'\n}\n\n/** Streaming cursor of the table \"nft_marketplace_v2_current_nft_marketplace_token_offers\" */\nexport type Nft_Marketplace_V2_Current_Nft_Marketplace_Token_Offers_Stream_Cursor_Input = {\n  /** Stream column input with initial value */\n  initial_value: Nft_Marketplace_V2_Current_Nft_Marketplace_Token_Offers_Stream_Cursor_Value_Input;\n  /** cursor ordering */\n  ordering?: InputMaybe<Cursor_Ordering>;\n};\n\n/** Initial value of the column from where the streaming should start */\nexport type Nft_Marketplace_V2_Current_Nft_Marketplace_Token_Offers_Stream_Cursor_Value_Input = {\n  buyer?: InputMaybe<Scalars['String']>;\n  coin_type?: InputMaybe<Scalars['String']>;\n  collection_id?: InputMaybe<Scalars['String']>;\n  contract_address?: InputMaybe<Scalars['String']>;\n  entry_function_id_str?: InputMaybe<Scalars['String']>;\n  expiration_time?: InputMaybe<Scalars['numeric']>;\n  fee_schedule_id?: InputMaybe<Scalars['String']>;\n  is_deleted?: InputMaybe<Scalars['Boolean']>;\n  last_transaction_timestamp?: InputMaybe<Scalars['timestamptz']>;\n  last_transaction_version?: InputMaybe<Scalars['bigint']>;\n  marketplace?: InputMaybe<Scalars['String']>;\n  offer_id?: InputMaybe<Scalars['String']>;\n  price?: InputMaybe<Scalars['numeric']>;\n  token_amount?: InputMaybe<Scalars['numeric']>;\n  token_data_id?: InputMaybe<Scalars['String']>;\n  token_standard?: InputMaybe<Scalars['String']>;\n};\n\n/** columns and relationships of \"nft_marketplace_v2.nft_marketplace_activities\" */\nexport type Nft_Marketplace_V2_Nft_Marketplace_Activities = {\n  __typename?: 'nft_marketplace_v2_nft_marketplace_activities';\n  buyer?: Maybe<Scalars['String']>;\n  coin_type?: Maybe<Scalars['String']>;\n  collection_id: Scalars['String'];\n  collection_name: Scalars['String'];\n  contract_address: Scalars['String'];\n  creator_address: Scalars['String'];\n  /** An object relationship */\n  current_token_data?: Maybe<Current_Token_Datas_V2>;\n  entry_function_id_str: Scalars['String'];\n  event_index: Scalars['bigint'];\n  event_type: Scalars['String'];\n  fee_schedule_id: Scalars['String'];\n  marketplace: Scalars['String'];\n  offer_or_listing_id: Scalars['String'];\n  price: Scalars['numeric'];\n  property_version?: Maybe<Scalars['String']>;\n  seller?: Maybe<Scalars['String']>;\n  token_amount: Scalars['numeric'];\n  token_data_id?: Maybe<Scalars['String']>;\n  token_name?: Maybe<Scalars['String']>;\n  token_standard: Scalars['String'];\n  transaction_timestamp: Scalars['timestamptz'];\n  transaction_version: Scalars['bigint'];\n};\n\n/** Boolean expression to filter rows from the table \"nft_marketplace_v2.nft_marketplace_activities\". All fields are combined with a logical 'AND'. */\nexport type Nft_Marketplace_V2_Nft_Marketplace_Activities_Bool_Exp = {\n  _and?: InputMaybe<Array<Nft_Marketplace_V2_Nft_Marketplace_Activities_Bool_Exp>>;\n  _not?: InputMaybe<Nft_Marketplace_V2_Nft_Marketplace_Activities_Bool_Exp>;\n  _or?: InputMaybe<Array<Nft_Marketplace_V2_Nft_Marketplace_Activities_Bool_Exp>>;\n  buyer?: InputMaybe<String_Comparison_Exp>;\n  coin_type?: InputMaybe<String_Comparison_Exp>;\n  collection_id?: InputMaybe<String_Comparison_Exp>;\n  collection_name?: InputMaybe<String_Comparison_Exp>;\n  contract_address?: InputMaybe<String_Comparison_Exp>;\n  creator_address?: InputMaybe<String_Comparison_Exp>;\n  current_token_data?: InputMaybe<Current_Token_Datas_V2_Bool_Exp>;\n  entry_function_id_str?: InputMaybe<String_Comparison_Exp>;\n  event_index?: InputMaybe<Bigint_Comparison_Exp>;\n  event_type?: InputMaybe<String_Comparison_Exp>;\n  fee_schedule_id?: InputMaybe<String_Comparison_Exp>;\n  marketplace?: InputMaybe<String_Comparison_Exp>;\n  offer_or_listing_id?: InputMaybe<String_Comparison_Exp>;\n  price?: InputMaybe<Numeric_Comparison_Exp>;\n  property_version?: InputMaybe<String_Comparison_Exp>;\n  seller?: InputMaybe<String_Comparison_Exp>;\n  token_amount?: InputMaybe<Numeric_Comparison_Exp>;\n  token_data_id?: InputMaybe<String_Comparison_Exp>;\n  token_name?: InputMaybe<String_Comparison_Exp>;\n  token_standard?: InputMaybe<String_Comparison_Exp>;\n  transaction_timestamp?: InputMaybe<Timestamptz_Comparison_Exp>;\n  transaction_version?: InputMaybe<Bigint_Comparison_Exp>;\n};\n\n/** Ordering options when selecting data from \"nft_marketplace_v2.nft_marketplace_activities\". */\nexport type Nft_Marketplace_V2_Nft_Marketplace_Activities_Order_By = {\n  buyer?: InputMaybe<Order_By>;\n  coin_type?: InputMaybe<Order_By>;\n  collection_id?: InputMaybe<Order_By>;\n  collection_name?: InputMaybe<Order_By>;\n  contract_address?: InputMaybe<Order_By>;\n  creator_address?: InputMaybe<Order_By>;\n  current_token_data?: InputMaybe<Current_Token_Datas_V2_Order_By>;\n  entry_function_id_str?: InputMaybe<Order_By>;\n  event_index?: InputMaybe<Order_By>;\n  event_type?: InputMaybe<Order_By>;\n  fee_schedule_id?: InputMaybe<Order_By>;\n  marketplace?: InputMaybe<Order_By>;\n  offer_or_listing_id?: InputMaybe<Order_By>;\n  price?: InputMaybe<Order_By>;\n  property_version?: InputMaybe<Order_By>;\n  seller?: InputMaybe<Order_By>;\n  token_amount?: InputMaybe<Order_By>;\n  token_data_id?: InputMaybe<Order_By>;\n  token_name?: InputMaybe<Order_By>;\n  token_standard?: InputMaybe<Order_By>;\n  transaction_timestamp?: InputMaybe<Order_By>;\n  transaction_version?: InputMaybe<Order_By>;\n};\n\n/** select columns of table \"nft_marketplace_v2.nft_marketplace_activities\" */\nexport enum Nft_Marketplace_V2_Nft_Marketplace_Activities_Select_Column {\n  /** column name */\n  Buyer = 'buyer',\n  /** column name */\n  CoinType = 'coin_type',\n  /** column name */\n  CollectionId = 'collection_id',\n  /** column name */\n  CollectionName = 'collection_name',\n  /** column name */\n  ContractAddress = 'contract_address',\n  /** column name */\n  CreatorAddress = 'creator_address',\n  /** column name */\n  EntryFunctionIdStr = 'entry_function_id_str',\n  /** column name */\n  EventIndex = 'event_index',\n  /** column name */\n  EventType = 'event_type',\n  /** column name */\n  FeeScheduleId = 'fee_schedule_id',\n  /** column name */\n  Marketplace = 'marketplace',\n  /** column name */\n  OfferOrListingId = 'offer_or_listing_id',\n  /** column name */\n  Price = 'price',\n  /** column name */\n  PropertyVersion = 'property_version',\n  /** column name */\n  Seller = 'seller',\n  /** column name */\n  TokenAmount = 'token_amount',\n  /** column name */\n  TokenDataId = 'token_data_id',\n  /** column name */\n  TokenName = 'token_name',\n  /** column name */\n  TokenStandard = 'token_standard',\n  /** column name */\n  TransactionTimestamp = 'transaction_timestamp',\n  /** column name */\n  TransactionVersion = 'transaction_version'\n}\n\n/** Streaming cursor of the table \"nft_marketplace_v2_nft_marketplace_activities\" */\nexport type Nft_Marketplace_V2_Nft_Marketplace_Activities_Stream_Cursor_Input = {\n  /** Stream column input with initial value */\n  initial_value: Nft_Marketplace_V2_Nft_Marketplace_Activities_Stream_Cursor_Value_Input;\n  /** cursor ordering */\n  ordering?: InputMaybe<Cursor_Ordering>;\n};\n\n/** Initial value of the column from where the streaming should start */\nexport type Nft_Marketplace_V2_Nft_Marketplace_Activities_Stream_Cursor_Value_Input = {\n  buyer?: InputMaybe<Scalars['String']>;\n  coin_type?: InputMaybe<Scalars['String']>;\n  collection_id?: InputMaybe<Scalars['String']>;\n  collection_name?: InputMaybe<Scalars['String']>;\n  contract_address?: InputMaybe<Scalars['String']>;\n  creator_address?: InputMaybe<Scalars['String']>;\n  entry_function_id_str?: InputMaybe<Scalars['String']>;\n  event_index?: InputMaybe<Scalars['bigint']>;\n  event_type?: InputMaybe<Scalars['String']>;\n  fee_schedule_id?: InputMaybe<Scalars['String']>;\n  marketplace?: InputMaybe<Scalars['String']>;\n  offer_or_listing_id?: InputMaybe<Scalars['String']>;\n  price?: InputMaybe<Scalars['numeric']>;\n  property_version?: InputMaybe<Scalars['String']>;\n  seller?: InputMaybe<Scalars['String']>;\n  token_amount?: InputMaybe<Scalars['numeric']>;\n  token_data_id?: InputMaybe<Scalars['String']>;\n  token_name?: InputMaybe<Scalars['String']>;\n  token_standard?: InputMaybe<Scalars['String']>;\n  transaction_timestamp?: InputMaybe<Scalars['timestamptz']>;\n  transaction_version?: InputMaybe<Scalars['bigint']>;\n};\n\n/** columns and relationships of \"nft_metadata_crawler.parsed_asset_uris\" */\nexport type Nft_Metadata_Crawler_Parsed_Asset_Uris = {\n  __typename?: 'nft_metadata_crawler_parsed_asset_uris';\n  asset_uri: Scalars['String'];\n  cdn_animation_uri?: Maybe<Scalars['String']>;\n  cdn_image_uri?: Maybe<Scalars['String']>;\n  cdn_json_uri?: Maybe<Scalars['String']>;\n  raw_animation_uri?: Maybe<Scalars['String']>;\n  raw_image_uri?: Maybe<Scalars['String']>;\n};\n\n/** Boolean expression to filter rows from the table \"nft_metadata_crawler.parsed_asset_uris\". All fields are combined with a logical 'AND'. */\nexport type Nft_Metadata_Crawler_Parsed_Asset_Uris_Bool_Exp = {\n  _and?: InputMaybe<Array<Nft_Metadata_Crawler_Parsed_Asset_Uris_Bool_Exp>>;\n  _not?: InputMaybe<Nft_Metadata_Crawler_Parsed_Asset_Uris_Bool_Exp>;\n  _or?: InputMaybe<Array<Nft_Metadata_Crawler_Parsed_Asset_Uris_Bool_Exp>>;\n  asset_uri?: InputMaybe<String_Comparison_Exp>;\n  cdn_animation_uri?: InputMaybe<String_Comparison_Exp>;\n  cdn_image_uri?: InputMaybe<String_Comparison_Exp>;\n  cdn_json_uri?: InputMaybe<String_Comparison_Exp>;\n  raw_animation_uri?: InputMaybe<String_Comparison_Exp>;\n  raw_image_uri?: InputMaybe<String_Comparison_Exp>;\n};\n\n/** Ordering options when selecting data from \"nft_metadata_crawler.parsed_asset_uris\". */\nexport type Nft_Metadata_Crawler_Parsed_Asset_Uris_Order_By = {\n  asset_uri?: InputMaybe<Order_By>;\n  cdn_animation_uri?: InputMaybe<Order_By>;\n  cdn_image_uri?: InputMaybe<Order_By>;\n  cdn_json_uri?: InputMaybe<Order_By>;\n  raw_animation_uri?: InputMaybe<Order_By>;\n  raw_image_uri?: InputMaybe<Order_By>;\n};\n\n/** select columns of table \"nft_metadata_crawler.parsed_asset_uris\" */\nexport enum Nft_Metadata_Crawler_Parsed_Asset_Uris_Select_Column {\n  /** column name */\n  AssetUri = 'asset_uri',\n  /** column name */\n  CdnAnimationUri = 'cdn_animation_uri',\n  /** column name */\n  CdnImageUri = 'cdn_image_uri',\n  /** column name */\n  CdnJsonUri = 'cdn_json_uri',\n  /** column name */\n  RawAnimationUri = 'raw_animation_uri',\n  /** column name */\n  RawImageUri = 'raw_image_uri'\n}\n\n/** Streaming cursor of the table \"nft_metadata_crawler_parsed_asset_uris\" */\nexport type Nft_Metadata_Crawler_Parsed_Asset_Uris_Stream_Cursor_Input = {\n  /** Stream column input with initial value */\n  initial_value: Nft_Metadata_Crawler_Parsed_Asset_Uris_Stream_Cursor_Value_Input;\n  /** cursor ordering */\n  ordering?: InputMaybe<Cursor_Ordering>;\n};\n\n/** Initial value of the column from where the streaming should start */\nexport type Nft_Metadata_Crawler_Parsed_Asset_Uris_Stream_Cursor_Value_Input = {\n  asset_uri?: InputMaybe<Scalars['String']>;\n  cdn_animation_uri?: InputMaybe<Scalars['String']>;\n  cdn_image_uri?: InputMaybe<Scalars['String']>;\n  cdn_json_uri?: InputMaybe<Scalars['String']>;\n  raw_animation_uri?: InputMaybe<Scalars['String']>;\n  raw_image_uri?: InputMaybe<Scalars['String']>;\n};\n\n/** columns and relationships of \"num_active_delegator_per_pool\" */\nexport type Num_Active_Delegator_Per_Pool = {\n  __typename?: 'num_active_delegator_per_pool';\n  num_active_delegator?: Maybe<Scalars['bigint']>;\n  pool_address?: Maybe<Scalars['String']>;\n};\n\n/** Boolean expression to filter rows from the table \"num_active_delegator_per_pool\". All fields are combined with a logical 'AND'. */\nexport type Num_Active_Delegator_Per_Pool_Bool_Exp = {\n  _and?: InputMaybe<Array<Num_Active_Delegator_Per_Pool_Bool_Exp>>;\n  _not?: InputMaybe<Num_Active_Delegator_Per_Pool_Bool_Exp>;\n  _or?: InputMaybe<Array<Num_Active_Delegator_Per_Pool_Bool_Exp>>;\n  num_active_delegator?: InputMaybe<Bigint_Comparison_Exp>;\n  pool_address?: InputMaybe<String_Comparison_Exp>;\n};\n\n/** Ordering options when selecting data from \"num_active_delegator_per_pool\". */\nexport type Num_Active_Delegator_Per_Pool_Order_By = {\n  num_active_delegator?: InputMaybe<Order_By>;\n  pool_address?: InputMaybe<Order_By>;\n};\n\n/** select columns of table \"num_active_delegator_per_pool\" */\nexport enum Num_Active_Delegator_Per_Pool_Select_Column {\n  /** column name */\n  NumActiveDelegator = 'num_active_delegator',\n  /** column name */\n  PoolAddress = 'pool_address'\n}\n\n/** Streaming cursor of the table \"num_active_delegator_per_pool\" */\nexport type Num_Active_Delegator_Per_Pool_Stream_Cursor_Input = {\n  /** Stream column input with initial value */\n  initial_value: Num_Active_Delegator_Per_Pool_Stream_Cursor_Value_Input;\n  /** cursor ordering */\n  ordering?: InputMaybe<Cursor_Ordering>;\n};\n\n/** Initial value of the column from where the streaming should start */\nexport type Num_Active_Delegator_Per_Pool_Stream_Cursor_Value_Input = {\n  num_active_delegator?: InputMaybe<Scalars['bigint']>;\n  pool_address?: InputMaybe<Scalars['String']>;\n};\n\n/** Boolean expression to compare columns of type \"numeric\". All fields are combined with logical 'AND'. */\nexport type Numeric_Comparison_Exp = {\n  _eq?: InputMaybe<Scalars['numeric']>;\n  _gt?: InputMaybe<Scalars['numeric']>;\n  _gte?: InputMaybe<Scalars['numeric']>;\n  _in?: InputMaybe<Array<Scalars['numeric']>>;\n  _is_null?: InputMaybe<Scalars['Boolean']>;\n  _lt?: InputMaybe<Scalars['numeric']>;\n  _lte?: InputMaybe<Scalars['numeric']>;\n  _neq?: InputMaybe<Scalars['numeric']>;\n  _nin?: InputMaybe<Array<Scalars['numeric']>>;\n};\n\n/** column ordering options */\nexport enum Order_By {\n  /** in ascending order, nulls last */\n  Asc = 'asc',\n  /** in ascending order, nulls first */\n  AscNullsFirst = 'asc_nulls_first',\n  /** in ascending order, nulls last */\n  AscNullsLast = 'asc_nulls_last',\n  /** in descending order, nulls first */\n  Desc = 'desc',\n  /** in descending order, nulls first */\n  DescNullsFirst = 'desc_nulls_first',\n  /** in descending order, nulls last */\n  DescNullsLast = 'desc_nulls_last'\n}\n\n/** columns and relationships of \"processor_status\" */\nexport type Processor_Status = {\n  __typename?: 'processor_status';\n  last_success_version: Scalars['bigint'];\n  last_updated: Scalars['timestamp'];\n  processor: Scalars['String'];\n};\n\n/** Boolean expression to filter rows from the table \"processor_status\". All fields are combined with a logical 'AND'. */\nexport type Processor_Status_Bool_Exp = {\n  _and?: InputMaybe<Array<Processor_Status_Bool_Exp>>;\n  _not?: InputMaybe<Processor_Status_Bool_Exp>;\n  _or?: InputMaybe<Array<Processor_Status_Bool_Exp>>;\n  last_success_version?: InputMaybe<Bigint_Comparison_Exp>;\n  last_updated?: InputMaybe<Timestamp_Comparison_Exp>;\n  processor?: InputMaybe<String_Comparison_Exp>;\n};\n\n/** Ordering options when selecting data from \"processor_status\". */\nexport type Processor_Status_Order_By = {\n  last_success_version?: InputMaybe<Order_By>;\n  last_updated?: InputMaybe<Order_By>;\n  processor?: InputMaybe<Order_By>;\n};\n\n/** select columns of table \"processor_status\" */\nexport enum Processor_Status_Select_Column {\n  /** column name */\n  LastSuccessVersion = 'last_success_version',\n  /** column name */\n  LastUpdated = 'last_updated',\n  /** column name */\n  Processor = 'processor'\n}\n\n/** Streaming cursor of the table \"processor_status\" */\nexport type Processor_Status_Stream_Cursor_Input = {\n  /** Stream column input with initial value */\n  initial_value: Processor_Status_Stream_Cursor_Value_Input;\n  /** cursor ordering */\n  ordering?: InputMaybe<Cursor_Ordering>;\n};\n\n/** Initial value of the column from where the streaming should start */\nexport type Processor_Status_Stream_Cursor_Value_Input = {\n  last_success_version?: InputMaybe<Scalars['bigint']>;\n  last_updated?: InputMaybe<Scalars['timestamp']>;\n  processor?: InputMaybe<Scalars['String']>;\n};\n\n/** columns and relationships of \"proposal_votes\" */\nexport type Proposal_Votes = {\n  __typename?: 'proposal_votes';\n  num_votes: Scalars['numeric'];\n  proposal_id: Scalars['bigint'];\n  should_pass: Scalars['Boolean'];\n  staking_pool_address: Scalars['String'];\n  transaction_timestamp: Scalars['timestamp'];\n  transaction_version: Scalars['bigint'];\n  voter_address: Scalars['String'];\n};\n\n/** aggregated selection of \"proposal_votes\" */\nexport type Proposal_Votes_Aggregate = {\n  __typename?: 'proposal_votes_aggregate';\n  aggregate?: Maybe<Proposal_Votes_Aggregate_Fields>;\n  nodes: Array<Proposal_Votes>;\n};\n\n/** aggregate fields of \"proposal_votes\" */\nexport type Proposal_Votes_Aggregate_Fields = {\n  __typename?: 'proposal_votes_aggregate_fields';\n  avg?: Maybe<Proposal_Votes_Avg_Fields>;\n  count: Scalars['Int'];\n  max?: Maybe<Proposal_Votes_Max_Fields>;\n  min?: Maybe<Proposal_Votes_Min_Fields>;\n  stddev?: Maybe<Proposal_Votes_Stddev_Fields>;\n  stddev_pop?: Maybe<Proposal_Votes_Stddev_Pop_Fields>;\n  stddev_samp?: Maybe<Proposal_Votes_Stddev_Samp_Fields>;\n  sum?: Maybe<Proposal_Votes_Sum_Fields>;\n  var_pop?: Maybe<Proposal_Votes_Var_Pop_Fields>;\n  var_samp?: Maybe<Proposal_Votes_Var_Samp_Fields>;\n  variance?: Maybe<Proposal_Votes_Variance_Fields>;\n};\n\n\n/** aggregate fields of \"proposal_votes\" */\nexport type Proposal_Votes_Aggregate_FieldsCountArgs = {\n  columns?: InputMaybe<Array<Proposal_Votes_Select_Column>>;\n  distinct?: InputMaybe<Scalars['Boolean']>;\n};\n\n/** aggregate avg on columns */\nexport type Proposal_Votes_Avg_Fields = {\n  __typename?: 'proposal_votes_avg_fields';\n  num_votes?: Maybe<Scalars['Float']>;\n  proposal_id?: Maybe<Scalars['Float']>;\n  transaction_version?: Maybe<Scalars['Float']>;\n};\n\n/** Boolean expression to filter rows from the table \"proposal_votes\". All fields are combined with a logical 'AND'. */\nexport type Proposal_Votes_Bool_Exp = {\n  _and?: InputMaybe<Array<Proposal_Votes_Bool_Exp>>;\n  _not?: InputMaybe<Proposal_Votes_Bool_Exp>;\n  _or?: InputMaybe<Array<Proposal_Votes_Bool_Exp>>;\n  num_votes?: InputMaybe<Numeric_Comparison_Exp>;\n  proposal_id?: InputMaybe<Bigint_Comparison_Exp>;\n  should_pass?: InputMaybe<Boolean_Comparison_Exp>;\n  staking_pool_address?: InputMaybe<String_Comparison_Exp>;\n  transaction_timestamp?: InputMaybe<Timestamp_Comparison_Exp>;\n  transaction_version?: InputMaybe<Bigint_Comparison_Exp>;\n  voter_address?: InputMaybe<String_Comparison_Exp>;\n};\n\n/** aggregate max on columns */\nexport type Proposal_Votes_Max_Fields = {\n  __typename?: 'proposal_votes_max_fields';\n  num_votes?: Maybe<Scalars['numeric']>;\n  proposal_id?: Maybe<Scalars['bigint']>;\n  staking_pool_address?: Maybe<Scalars['String']>;\n  transaction_timestamp?: Maybe<Scalars['timestamp']>;\n  transaction_version?: Maybe<Scalars['bigint']>;\n  voter_address?: Maybe<Scalars['String']>;\n};\n\n/** aggregate min on columns */\nexport type Proposal_Votes_Min_Fields = {\n  __typename?: 'proposal_votes_min_fields';\n  num_votes?: Maybe<Scalars['numeric']>;\n  proposal_id?: Maybe<Scalars['bigint']>;\n  staking_pool_address?: Maybe<Scalars['String']>;\n  transaction_timestamp?: Maybe<Scalars['timestamp']>;\n  transaction_version?: Maybe<Scalars['bigint']>;\n  voter_address?: Maybe<Scalars['String']>;\n};\n\n/** Ordering options when selecting data from \"proposal_votes\". */\nexport type Proposal_Votes_Order_By = {\n  num_votes?: InputMaybe<Order_By>;\n  proposal_id?: InputMaybe<Order_By>;\n  should_pass?: InputMaybe<Order_By>;\n  staking_pool_address?: InputMaybe<Order_By>;\n  transaction_timestamp?: InputMaybe<Order_By>;\n  transaction_version?: InputMaybe<Order_By>;\n  voter_address?: InputMaybe<Order_By>;\n};\n\n/** select columns of table \"proposal_votes\" */\nexport enum Proposal_Votes_Select_Column {\n  /** column name */\n  NumVotes = 'num_votes',\n  /** column name */\n  ProposalId = 'proposal_id',\n  /** column name */\n  ShouldPass = 'should_pass',\n  /** column name */\n  StakingPoolAddress = 'staking_pool_address',\n  /** column name */\n  TransactionTimestamp = 'transaction_timestamp',\n  /** column name */\n  TransactionVersion = 'transaction_version',\n  /** column name */\n  VoterAddress = 'voter_address'\n}\n\n/** aggregate stddev on columns */\nexport type Proposal_Votes_Stddev_Fields = {\n  __typename?: 'proposal_votes_stddev_fields';\n  num_votes?: Maybe<Scalars['Float']>;\n  proposal_id?: Maybe<Scalars['Float']>;\n  transaction_version?: Maybe<Scalars['Float']>;\n};\n\n/** aggregate stddev_pop on columns */\nexport type Proposal_Votes_Stddev_Pop_Fields = {\n  __typename?: 'proposal_votes_stddev_pop_fields';\n  num_votes?: Maybe<Scalars['Float']>;\n  proposal_id?: Maybe<Scalars['Float']>;\n  transaction_version?: Maybe<Scalars['Float']>;\n};\n\n/** aggregate stddev_samp on columns */\nexport type Proposal_Votes_Stddev_Samp_Fields = {\n  __typename?: 'proposal_votes_stddev_samp_fields';\n  num_votes?: Maybe<Scalars['Float']>;\n  proposal_id?: Maybe<Scalars['Float']>;\n  transaction_version?: Maybe<Scalars['Float']>;\n};\n\n/** Streaming cursor of the table \"proposal_votes\" */\nexport type Proposal_Votes_Stream_Cursor_Input = {\n  /** Stream column input with initial value */\n  initial_value: Proposal_Votes_Stream_Cursor_Value_Input;\n  /** cursor ordering */\n  ordering?: InputMaybe<Cursor_Ordering>;\n};\n\n/** Initial value of the column from where the streaming should start */\nexport type Proposal_Votes_Stream_Cursor_Value_Input = {\n  num_votes?: InputMaybe<Scalars['numeric']>;\n  proposal_id?: InputMaybe<Scalars['bigint']>;\n  should_pass?: InputMaybe<Scalars['Boolean']>;\n  staking_pool_address?: InputMaybe<Scalars['String']>;\n  transaction_timestamp?: InputMaybe<Scalars['timestamp']>;\n  transaction_version?: InputMaybe<Scalars['bigint']>;\n  voter_address?: InputMaybe<Scalars['String']>;\n};\n\n/** aggregate sum on columns */\nexport type Proposal_Votes_Sum_Fields = {\n  __typename?: 'proposal_votes_sum_fields';\n  num_votes?: Maybe<Scalars['numeric']>;\n  proposal_id?: Maybe<Scalars['bigint']>;\n  transaction_version?: Maybe<Scalars['bigint']>;\n};\n\n/** aggregate var_pop on columns */\nexport type Proposal_Votes_Var_Pop_Fields = {\n  __typename?: 'proposal_votes_var_pop_fields';\n  num_votes?: Maybe<Scalars['Float']>;\n  proposal_id?: Maybe<Scalars['Float']>;\n  transaction_version?: Maybe<Scalars['Float']>;\n};\n\n/** aggregate var_samp on columns */\nexport type Proposal_Votes_Var_Samp_Fields = {\n  __typename?: 'proposal_votes_var_samp_fields';\n  num_votes?: Maybe<Scalars['Float']>;\n  proposal_id?: Maybe<Scalars['Float']>;\n  transaction_version?: Maybe<Scalars['Float']>;\n};\n\n/** aggregate variance on columns */\nexport type Proposal_Votes_Variance_Fields = {\n  __typename?: 'proposal_votes_variance_fields';\n  num_votes?: Maybe<Scalars['Float']>;\n  proposal_id?: Maybe<Scalars['Float']>;\n  transaction_version?: Maybe<Scalars['Float']>;\n};\n\nexport type Query_Root = {\n  __typename?: 'query_root';\n  /** fetch data from the table: \"account_transactions\" */\n  account_transactions: Array<Account_Transactions>;\n  /** fetch aggregated fields from the table: \"account_transactions\" */\n  account_transactions_aggregate: Account_Transactions_Aggregate;\n  /** fetch data from the table: \"account_transactions\" using primary key columns */\n  account_transactions_by_pk?: Maybe<Account_Transactions>;\n  /** fetch data from the table: \"address_events_summary\" */\n  address_events_summary: Array<Address_Events_Summary>;\n  /** fetch data from the table: \"address_version_from_events\" */\n  address_version_from_events: Array<Address_Version_From_Events>;\n  /** fetch aggregated fields from the table: \"address_version_from_events\" */\n  address_version_from_events_aggregate: Address_Version_From_Events_Aggregate;\n  /** fetch data from the table: \"address_version_from_move_resources\" */\n  address_version_from_move_resources: Array<Address_Version_From_Move_Resources>;\n  /** fetch aggregated fields from the table: \"address_version_from_move_resources\" */\n  address_version_from_move_resources_aggregate: Address_Version_From_Move_Resources_Aggregate;\n  /** fetch data from the table: \"block_metadata_transactions\" */\n  block_metadata_transactions: Array<Block_Metadata_Transactions>;\n  /** fetch data from the table: \"block_metadata_transactions\" using primary key columns */\n  block_metadata_transactions_by_pk?: Maybe<Block_Metadata_Transactions>;\n  /** An array relationship */\n  coin_activities: Array<Coin_Activities>;\n  /** An aggregate relationship */\n  coin_activities_aggregate: Coin_Activities_Aggregate;\n  /** fetch data from the table: \"coin_activities\" using primary key columns */\n  coin_activities_by_pk?: Maybe<Coin_Activities>;\n  /** fetch data from the table: \"coin_balances\" */\n  coin_balances: Array<Coin_Balances>;\n  /** fetch data from the table: \"coin_balances\" using primary key columns */\n  coin_balances_by_pk?: Maybe<Coin_Balances>;\n  /** fetch data from the table: \"coin_infos\" */\n  coin_infos: Array<Coin_Infos>;\n  /** fetch data from the table: \"coin_infos\" using primary key columns */\n  coin_infos_by_pk?: Maybe<Coin_Infos>;\n  /** fetch data from the table: \"coin_supply\" */\n  coin_supply: Array<Coin_Supply>;\n  /** fetch data from the table: \"coin_supply\" using primary key columns */\n  coin_supply_by_pk?: Maybe<Coin_Supply>;\n  /** fetch data from the table: \"collection_datas\" */\n  collection_datas: Array<Collection_Datas>;\n  /** fetch data from the table: \"collection_datas\" using primary key columns */\n  collection_datas_by_pk?: Maybe<Collection_Datas>;\n  /** fetch data from the table: \"current_ans_lookup\" */\n  current_ans_lookup: Array<Current_Ans_Lookup>;\n  /** fetch data from the table: \"current_ans_lookup\" using primary key columns */\n  current_ans_lookup_by_pk?: Maybe<Current_Ans_Lookup>;\n  /** fetch data from the table: \"current_aptos_names\" */\n  current_aptos_names: Array<Current_Aptos_Names>;\n  /** fetch data from the table: \"current_coin_balances\" */\n  current_coin_balances: Array<Current_Coin_Balances>;\n  /** fetch data from the table: \"current_coin_balances\" using primary key columns */\n  current_coin_balances_by_pk?: Maybe<Current_Coin_Balances>;\n  /** fetch data from the table: \"current_collection_datas\" */\n  current_collection_datas: Array<Current_Collection_Datas>;\n  /** fetch data from the table: \"current_collection_datas\" using primary key columns */\n  current_collection_datas_by_pk?: Maybe<Current_Collection_Datas>;\n  /** fetch data from the table: \"current_collection_ownership_v2_view\" */\n  current_collection_ownership_v2_view: Array<Current_Collection_Ownership_V2_View>;\n  /** fetch aggregated fields from the table: \"current_collection_ownership_v2_view\" */\n  current_collection_ownership_v2_view_aggregate: Current_Collection_Ownership_V2_View_Aggregate;\n  /** fetch data from the table: \"current_collections_v2\" */\n  current_collections_v2: Array<Current_Collections_V2>;\n  /** fetch data from the table: \"current_collections_v2\" using primary key columns */\n  current_collections_v2_by_pk?: Maybe<Current_Collections_V2>;\n  /** fetch data from the table: \"current_delegated_staking_pool_balances\" */\n  current_delegated_staking_pool_balances: Array<Current_Delegated_Staking_Pool_Balances>;\n  /** fetch data from the table: \"current_delegated_staking_pool_balances\" using primary key columns */\n  current_delegated_staking_pool_balances_by_pk?: Maybe<Current_Delegated_Staking_Pool_Balances>;\n  /** fetch data from the table: \"current_delegated_voter\" */\n  current_delegated_voter: Array<Current_Delegated_Voter>;\n  /** fetch data from the table: \"current_delegated_voter\" using primary key columns */\n  current_delegated_voter_by_pk?: Maybe<Current_Delegated_Voter>;\n  /** fetch data from the table: \"current_delegator_balances\" */\n  current_delegator_balances: Array<Current_Delegator_Balances>;\n  /** fetch data from the table: \"current_delegator_balances\" using primary key columns */\n  current_delegator_balances_by_pk?: Maybe<Current_Delegator_Balances>;\n  /** fetch data from the table: \"current_fungible_asset_balances\" */\n  current_fungible_asset_balances: Array<Current_Fungible_Asset_Balances>;\n  /** fetch aggregated fields from the table: \"current_fungible_asset_balances\" */\n  current_fungible_asset_balances_aggregate: Current_Fungible_Asset_Balances_Aggregate;\n  /** fetch data from the table: \"current_fungible_asset_balances\" using primary key columns */\n  current_fungible_asset_balances_by_pk?: Maybe<Current_Fungible_Asset_Balances>;\n  /** fetch data from the table: \"current_objects\" */\n  current_objects: Array<Current_Objects>;\n  /** fetch data from the table: \"current_objects\" using primary key columns */\n  current_objects_by_pk?: Maybe<Current_Objects>;\n  /** fetch data from the table: \"current_staking_pool_voter\" */\n  current_staking_pool_voter: Array<Current_Staking_Pool_Voter>;\n  /** fetch data from the table: \"current_staking_pool_voter\" using primary key columns */\n  current_staking_pool_voter_by_pk?: Maybe<Current_Staking_Pool_Voter>;\n  /** fetch data from the table: \"current_table_items\" */\n  current_table_items: Array<Current_Table_Items>;\n  /** fetch data from the table: \"current_table_items\" using primary key columns */\n  current_table_items_by_pk?: Maybe<Current_Table_Items>;\n  /** fetch data from the table: \"current_token_datas\" */\n  current_token_datas: Array<Current_Token_Datas>;\n  /** fetch data from the table: \"current_token_datas\" using primary key columns */\n  current_token_datas_by_pk?: Maybe<Current_Token_Datas>;\n  /** fetch data from the table: \"current_token_datas_v2\" */\n  current_token_datas_v2: Array<Current_Token_Datas_V2>;\n  /** fetch data from the table: \"current_token_datas_v2\" using primary key columns */\n  current_token_datas_v2_by_pk?: Maybe<Current_Token_Datas_V2>;\n  /** fetch data from the table: \"current_token_ownerships\" */\n  current_token_ownerships: Array<Current_Token_Ownerships>;\n  /** fetch aggregated fields from the table: \"current_token_ownerships\" */\n  current_token_ownerships_aggregate: Current_Token_Ownerships_Aggregate;\n  /** fetch data from the table: \"current_token_ownerships\" using primary key columns */\n  current_token_ownerships_by_pk?: Maybe<Current_Token_Ownerships>;\n  /** fetch data from the table: \"current_token_ownerships_v2\" */\n  current_token_ownerships_v2: Array<Current_Token_Ownerships_V2>;\n  /** fetch aggregated fields from the table: \"current_token_ownerships_v2\" */\n  current_token_ownerships_v2_aggregate: Current_Token_Ownerships_V2_Aggregate;\n  /** fetch data from the table: \"current_token_ownerships_v2\" using primary key columns */\n  current_token_ownerships_v2_by_pk?: Maybe<Current_Token_Ownerships_V2>;\n  /** fetch data from the table: \"current_token_pending_claims\" */\n  current_token_pending_claims: Array<Current_Token_Pending_Claims>;\n  /** fetch data from the table: \"current_token_pending_claims\" using primary key columns */\n  current_token_pending_claims_by_pk?: Maybe<Current_Token_Pending_Claims>;\n  /** An array relationship */\n  delegated_staking_activities: Array<Delegated_Staking_Activities>;\n  /** fetch data from the table: \"delegated_staking_activities\" using primary key columns */\n  delegated_staking_activities_by_pk?: Maybe<Delegated_Staking_Activities>;\n  /** fetch data from the table: \"delegated_staking_pools\" */\n  delegated_staking_pools: Array<Delegated_Staking_Pools>;\n  /** fetch data from the table: \"delegated_staking_pools\" using primary key columns */\n  delegated_staking_pools_by_pk?: Maybe<Delegated_Staking_Pools>;\n  /** fetch data from the table: \"delegator_distinct_pool\" */\n  delegator_distinct_pool: Array<Delegator_Distinct_Pool>;\n  /** fetch aggregated fields from the table: \"delegator_distinct_pool\" */\n  delegator_distinct_pool_aggregate: Delegator_Distinct_Pool_Aggregate;\n  /** fetch data from the table: \"events\" */\n  events: Array<Events>;\n  /** fetch data from the table: \"events\" using primary key columns */\n  events_by_pk?: Maybe<Events>;\n  /** An array relationship */\n  fungible_asset_activities: Array<Fungible_Asset_Activities>;\n  /** fetch data from the table: \"fungible_asset_activities\" using primary key columns */\n  fungible_asset_activities_by_pk?: Maybe<Fungible_Asset_Activities>;\n  /** fetch data from the table: \"fungible_asset_metadata\" */\n  fungible_asset_metadata: Array<Fungible_Asset_Metadata>;\n  /** fetch data from the table: \"fungible_asset_metadata\" using primary key columns */\n  fungible_asset_metadata_by_pk?: Maybe<Fungible_Asset_Metadata>;\n  /** fetch data from the table: \"indexer_status\" */\n  indexer_status: Array<Indexer_Status>;\n  /** fetch data from the table: \"indexer_status\" using primary key columns */\n  indexer_status_by_pk?: Maybe<Indexer_Status>;\n  /** fetch data from the table: \"ledger_infos\" */\n  ledger_infos: Array<Ledger_Infos>;\n  /** fetch data from the table: \"ledger_infos\" using primary key columns */\n  ledger_infos_by_pk?: Maybe<Ledger_Infos>;\n  /** fetch data from the table: \"move_resources\" */\n  move_resources: Array<Move_Resources>;\n  /** fetch aggregated fields from the table: \"move_resources\" */\n  move_resources_aggregate: Move_Resources_Aggregate;\n  /** fetch data from the table: \"nft_marketplace_v2.current_nft_marketplace_auctions\" */\n  nft_marketplace_v2_current_nft_marketplace_auctions: Array<Nft_Marketplace_V2_Current_Nft_Marketplace_Auctions>;\n  /** fetch data from the table: \"nft_marketplace_v2.current_nft_marketplace_auctions\" using primary key columns */\n  nft_marketplace_v2_current_nft_marketplace_auctions_by_pk?: Maybe<Nft_Marketplace_V2_Current_Nft_Marketplace_Auctions>;\n  /** fetch data from the table: \"nft_marketplace_v2.current_nft_marketplace_collection_offers\" */\n  nft_marketplace_v2_current_nft_marketplace_collection_offers: Array<Nft_Marketplace_V2_Current_Nft_Marketplace_Collection_Offers>;\n  /** fetch data from the table: \"nft_marketplace_v2.current_nft_marketplace_collection_offers\" using primary key columns */\n  nft_marketplace_v2_current_nft_marketplace_collection_offers_by_pk?: Maybe<Nft_Marketplace_V2_Current_Nft_Marketplace_Collection_Offers>;\n  /** fetch data from the table: \"nft_marketplace_v2.current_nft_marketplace_listings\" */\n  nft_marketplace_v2_current_nft_marketplace_listings: Array<Nft_Marketplace_V2_Current_Nft_Marketplace_Listings>;\n  /** fetch data from the table: \"nft_marketplace_v2.current_nft_marketplace_listings\" using primary key columns */\n  nft_marketplace_v2_current_nft_marketplace_listings_by_pk?: Maybe<Nft_Marketplace_V2_Current_Nft_Marketplace_Listings>;\n  /** fetch data from the table: \"nft_marketplace_v2.current_nft_marketplace_token_offers\" */\n  nft_marketplace_v2_current_nft_marketplace_token_offers: Array<Nft_Marketplace_V2_Current_Nft_Marketplace_Token_Offers>;\n  /** fetch data from the table: \"nft_marketplace_v2.current_nft_marketplace_token_offers\" using primary key columns */\n  nft_marketplace_v2_current_nft_marketplace_token_offers_by_pk?: Maybe<Nft_Marketplace_V2_Current_Nft_Marketplace_Token_Offers>;\n  /** fetch data from the table: \"nft_marketplace_v2.nft_marketplace_activities\" */\n  nft_marketplace_v2_nft_marketplace_activities: Array<Nft_Marketplace_V2_Nft_Marketplace_Activities>;\n  /** fetch data from the table: \"nft_marketplace_v2.nft_marketplace_activities\" using primary key columns */\n  nft_marketplace_v2_nft_marketplace_activities_by_pk?: Maybe<Nft_Marketplace_V2_Nft_Marketplace_Activities>;\n  /** fetch data from the table: \"nft_metadata_crawler.parsed_asset_uris\" */\n  nft_metadata_crawler_parsed_asset_uris: Array<Nft_Metadata_Crawler_Parsed_Asset_Uris>;\n  /** fetch data from the table: \"nft_metadata_crawler.parsed_asset_uris\" using primary key columns */\n  nft_metadata_crawler_parsed_asset_uris_by_pk?: Maybe<Nft_Metadata_Crawler_Parsed_Asset_Uris>;\n  /** fetch data from the table: \"num_active_delegator_per_pool\" */\n  num_active_delegator_per_pool: Array<Num_Active_Delegator_Per_Pool>;\n  /** fetch data from the table: \"processor_status\" */\n  processor_status: Array<Processor_Status>;\n  /** fetch data from the table: \"processor_status\" using primary key columns */\n  processor_status_by_pk?: Maybe<Processor_Status>;\n  /** fetch data from the table: \"proposal_votes\" */\n  proposal_votes: Array<Proposal_Votes>;\n  /** fetch aggregated fields from the table: \"proposal_votes\" */\n  proposal_votes_aggregate: Proposal_Votes_Aggregate;\n  /** fetch data from the table: \"proposal_votes\" using primary key columns */\n  proposal_votes_by_pk?: Maybe<Proposal_Votes>;\n  /** fetch data from the table: \"table_items\" */\n  table_items: Array<Table_Items>;\n  /** fetch data from the table: \"table_items\" using primary key columns */\n  table_items_by_pk?: Maybe<Table_Items>;\n  /** fetch data from the table: \"table_metadatas\" */\n  table_metadatas: Array<Table_Metadatas>;\n  /** fetch data from the table: \"table_metadatas\" using primary key columns */\n  table_metadatas_by_pk?: Maybe<Table_Metadatas>;\n  /** An array relationship */\n  token_activities: Array<Token_Activities>;\n  /** An aggregate relationship */\n  token_activities_aggregate: Token_Activities_Aggregate;\n  /** fetch data from the table: \"token_activities\" using primary key columns */\n  token_activities_by_pk?: Maybe<Token_Activities>;\n  /** An array relationship */\n  token_activities_v2: Array<Token_Activities_V2>;\n  /** An aggregate relationship */\n  token_activities_v2_aggregate: Token_Activities_V2_Aggregate;\n  /** fetch data from the table: \"token_activities_v2\" using primary key columns */\n  token_activities_v2_by_pk?: Maybe<Token_Activities_V2>;\n  /** fetch data from the table: \"token_datas\" */\n  token_datas: Array<Token_Datas>;\n  /** fetch data from the table: \"token_datas\" using primary key columns */\n  token_datas_by_pk?: Maybe<Token_Datas>;\n  /** fetch data from the table: \"token_ownerships\" */\n  token_ownerships: Array<Token_Ownerships>;\n  /** fetch data from the table: \"token_ownerships\" using primary key columns */\n  token_ownerships_by_pk?: Maybe<Token_Ownerships>;\n  /** fetch data from the table: \"tokens\" */\n  tokens: Array<Tokens>;\n  /** fetch data from the table: \"tokens\" using primary key columns */\n  tokens_by_pk?: Maybe<Tokens>;\n  /** fetch data from the table: \"user_transactions\" */\n  user_transactions: Array<User_Transactions>;\n  /** fetch data from the table: \"user_transactions\" using primary key columns */\n  user_transactions_by_pk?: Maybe<User_Transactions>;\n};\n\n\nexport type Query_RootAccount_TransactionsArgs = {\n  distinct_on?: InputMaybe<Array<Account_Transactions_Select_Column>>;\n  limit?: InputMaybe<Scalars['Int']>;\n  offset?: InputMaybe<Scalars['Int']>;\n  order_by?: InputMaybe<Array<Account_Transactions_Order_By>>;\n  where?: InputMaybe<Account_Transactions_Bool_Exp>;\n};\n\n\nexport type Query_RootAccount_Transactions_AggregateArgs = {\n  distinct_on?: InputMaybe<Array<Account_Transactions_Select_Column>>;\n  limit?: InputMaybe<Scalars['Int']>;\n  offset?: InputMaybe<Scalars['Int']>;\n  order_by?: InputMaybe<Array<Account_Transactions_Order_By>>;\n  where?: InputMaybe<Account_Transactions_Bool_Exp>;\n};\n\n\nexport type Query_RootAccount_Transactions_By_PkArgs = {\n  account_address: Scalars['String'];\n  transaction_version: Scalars['bigint'];\n};\n\n\nexport type Query_RootAddress_Events_SummaryArgs = {\n  distinct_on?: InputMaybe<Array<Address_Events_Summary_Select_Column>>;\n  limit?: InputMaybe<Scalars['Int']>;\n  offset?: InputMaybe<Scalars['Int']>;\n  order_by?: InputMaybe<Array<Address_Events_Summary_Order_By>>;\n  where?: InputMaybe<Address_Events_Summary_Bool_Exp>;\n};\n\n\nexport type Query_RootAddress_Version_From_EventsArgs = {\n  distinct_on?: InputMaybe<Array<Address_Version_From_Events_Select_Column>>;\n  limit?: InputMaybe<Scalars['Int']>;\n  offset?: InputMaybe<Scalars['Int']>;\n  order_by?: InputMaybe<Array<Address_Version_From_Events_Order_By>>;\n  where?: InputMaybe<Address_Version_From_Events_Bool_Exp>;\n};\n\n\nexport type Query_RootAddress_Version_From_Events_AggregateArgs = {\n  distinct_on?: InputMaybe<Array<Address_Version_From_Events_Select_Column>>;\n  limit?: InputMaybe<Scalars['Int']>;\n  offset?: InputMaybe<Scalars['Int']>;\n  order_by?: InputMaybe<Array<Address_Version_From_Events_Order_By>>;\n  where?: InputMaybe<Address_Version_From_Events_Bool_Exp>;\n};\n\n\nexport type Query_RootAddress_Version_From_Move_ResourcesArgs = {\n  distinct_on?: InputMaybe<Array<Address_Version_From_Move_Resources_Select_Column>>;\n  limit?: InputMaybe<Scalars['Int']>;\n  offset?: InputMaybe<Scalars['Int']>;\n  order_by?: InputMaybe<Array<Address_Version_From_Move_Resources_Order_By>>;\n  where?: InputMaybe<Address_Version_From_Move_Resources_Bool_Exp>;\n};\n\n\nexport type Query_RootAddress_Version_From_Move_Resources_AggregateArgs = {\n  distinct_on?: InputMaybe<Array<Address_Version_From_Move_Resources_Select_Column>>;\n  limit?: InputMaybe<Scalars['Int']>;\n  offset?: InputMaybe<Scalars['Int']>;\n  order_by?: InputMaybe<Array<Address_Version_From_Move_Resources_Order_By>>;\n  where?: InputMaybe<Address_Version_From_Move_Resources_Bool_Exp>;\n};\n\n\nexport type Query_RootBlock_Metadata_TransactionsArgs = {\n  distinct_on?: InputMaybe<Array<Block_Metadata_Transactions_Select_Column>>;\n  limit?: InputMaybe<Scalars['Int']>;\n  offset?: InputMaybe<Scalars['Int']>;\n  order_by?: InputMaybe<Array<Block_Metadata_Transactions_Order_By>>;\n  where?: InputMaybe<Block_Metadata_Transactions_Bool_Exp>;\n};\n\n\nexport type Query_RootBlock_Metadata_Transactions_By_PkArgs = {\n  version: Scalars['bigint'];\n};\n\n\nexport type Query_RootCoin_ActivitiesArgs = {\n  distinct_on?: InputMaybe<Array<Coin_Activities_Select_Column>>;\n  limit?: InputMaybe<Scalars['Int']>;\n  offset?: InputMaybe<Scalars['Int']>;\n  order_by?: InputMaybe<Array<Coin_Activities_Order_By>>;\n  where?: InputMaybe<Coin_Activities_Bool_Exp>;\n};\n\n\nexport type Query_RootCoin_Activities_AggregateArgs = {\n  distinct_on?: InputMaybe<Array<Coin_Activities_Select_Column>>;\n  limit?: InputMaybe<Scalars['Int']>;\n  offset?: InputMaybe<Scalars['Int']>;\n  order_by?: InputMaybe<Array<Coin_Activities_Order_By>>;\n  where?: InputMaybe<Coin_Activities_Bool_Exp>;\n};\n\n\nexport type Query_RootCoin_Activities_By_PkArgs = {\n  event_account_address: Scalars['String'];\n  event_creation_number: Scalars['bigint'];\n  event_sequence_number: Scalars['bigint'];\n  transaction_version: Scalars['bigint'];\n};\n\n\nexport type Query_RootCoin_BalancesArgs = {\n  distinct_on?: InputMaybe<Array<Coin_Balances_Select_Column>>;\n  limit?: InputMaybe<Scalars['Int']>;\n  offset?: InputMaybe<Scalars['Int']>;\n  order_by?: InputMaybe<Array<Coin_Balances_Order_By>>;\n  where?: InputMaybe<Coin_Balances_Bool_Exp>;\n};\n\n\nexport type Query_RootCoin_Balances_By_PkArgs = {\n  coin_type_hash: Scalars['String'];\n  owner_address: Scalars['String'];\n  transaction_version: Scalars['bigint'];\n};\n\n\nexport type Query_RootCoin_InfosArgs = {\n  distinct_on?: InputMaybe<Array<Coin_Infos_Select_Column>>;\n  limit?: InputMaybe<Scalars['Int']>;\n  offset?: InputMaybe<Scalars['Int']>;\n  order_by?: InputMaybe<Array<Coin_Infos_Order_By>>;\n  where?: InputMaybe<Coin_Infos_Bool_Exp>;\n};\n\n\nexport type Query_RootCoin_Infos_By_PkArgs = {\n  coin_type_hash: Scalars['String'];\n};\n\n\nexport type Query_RootCoin_SupplyArgs = {\n  distinct_on?: InputMaybe<Array<Coin_Supply_Select_Column>>;\n  limit?: InputMaybe<Scalars['Int']>;\n  offset?: InputMaybe<Scalars['Int']>;\n  order_by?: InputMaybe<Array<Coin_Supply_Order_By>>;\n  where?: InputMaybe<Coin_Supply_Bool_Exp>;\n};\n\n\nexport type Query_RootCoin_Supply_By_PkArgs = {\n  coin_type_hash: Scalars['String'];\n  transaction_version: Scalars['bigint'];\n};\n\n\nexport type Query_RootCollection_DatasArgs = {\n  distinct_on?: InputMaybe<Array<Collection_Datas_Select_Column>>;\n  limit?: InputMaybe<Scalars['Int']>;\n  offset?: InputMaybe<Scalars['Int']>;\n  order_by?: InputMaybe<Array<Collection_Datas_Order_By>>;\n  where?: InputMaybe<Collection_Datas_Bool_Exp>;\n};\n\n\nexport type Query_RootCollection_Datas_By_PkArgs = {\n  collection_data_id_hash: Scalars['String'];\n  transaction_version: Scalars['bigint'];\n};\n\n\nexport type Query_RootCurrent_Ans_LookupArgs = {\n  distinct_on?: InputMaybe<Array<Current_Ans_Lookup_Select_Column>>;\n  limit?: InputMaybe<Scalars['Int']>;\n  offset?: InputMaybe<Scalars['Int']>;\n  order_by?: InputMaybe<Array<Current_Ans_Lookup_Order_By>>;\n  where?: InputMaybe<Current_Ans_Lookup_Bool_Exp>;\n};\n\n\nexport type Query_RootCurrent_Ans_Lookup_By_PkArgs = {\n  domain: Scalars['String'];\n  subdomain: Scalars['String'];\n};\n\n\nexport type Query_RootCurrent_Aptos_NamesArgs = {\n  distinct_on?: InputMaybe<Array<Current_Aptos_Names_Select_Column>>;\n  limit?: InputMaybe<Scalars['Int']>;\n  offset?: InputMaybe<Scalars['Int']>;\n  order_by?: InputMaybe<Array<Current_Aptos_Names_Order_By>>;\n  where?: InputMaybe<Current_Aptos_Names_Bool_Exp>;\n};\n\n\nexport type Query_RootCurrent_Coin_BalancesArgs = {\n  distinct_on?: InputMaybe<Array<Current_Coin_Balances_Select_Column>>;\n  limit?: InputMaybe<Scalars['Int']>;\n  offset?: InputMaybe<Scalars['Int']>;\n  order_by?: InputMaybe<Array<Current_Coin_Balances_Order_By>>;\n  where?: InputMaybe<Current_Coin_Balances_Bool_Exp>;\n};\n\n\nexport type Query_RootCurrent_Coin_Balances_By_PkArgs = {\n  coin_type_hash: Scalars['String'];\n  owner_address: Scalars['String'];\n};\n\n\nexport type Query_RootCurrent_Collection_DatasArgs = {\n  distinct_on?: InputMaybe<Array<Current_Collection_Datas_Select_Column>>;\n  limit?: InputMaybe<Scalars['Int']>;\n  offset?: InputMaybe<Scalars['Int']>;\n  order_by?: InputMaybe<Array<Current_Collection_Datas_Order_By>>;\n  where?: InputMaybe<Current_Collection_Datas_Bool_Exp>;\n};\n\n\nexport type Query_RootCurrent_Collection_Datas_By_PkArgs = {\n  collection_data_id_hash: Scalars['String'];\n};\n\n\nexport type Query_RootCurrent_Collection_Ownership_V2_ViewArgs = {\n  distinct_on?: InputMaybe<Array<Current_Collection_Ownership_V2_View_Select_Column>>;\n  limit?: InputMaybe<Scalars['Int']>;\n  offset?: InputMaybe<Scalars['Int']>;\n  order_by?: InputMaybe<Array<Current_Collection_Ownership_V2_View_Order_By>>;\n  where?: InputMaybe<Current_Collection_Ownership_V2_View_Bool_Exp>;\n};\n\n\nexport type Query_RootCurrent_Collection_Ownership_V2_View_AggregateArgs = {\n  distinct_on?: InputMaybe<Array<Current_Collection_Ownership_V2_View_Select_Column>>;\n  limit?: InputMaybe<Scalars['Int']>;\n  offset?: InputMaybe<Scalars['Int']>;\n  order_by?: InputMaybe<Array<Current_Collection_Ownership_V2_View_Order_By>>;\n  where?: InputMaybe<Current_Collection_Ownership_V2_View_Bool_Exp>;\n};\n\n\nexport type Query_RootCurrent_Collections_V2Args = {\n  distinct_on?: InputMaybe<Array<Current_Collections_V2_Select_Column>>;\n  limit?: InputMaybe<Scalars['Int']>;\n  offset?: InputMaybe<Scalars['Int']>;\n  order_by?: InputMaybe<Array<Current_Collections_V2_Order_By>>;\n  where?: InputMaybe<Current_Collections_V2_Bool_Exp>;\n};\n\n\nexport type Query_RootCurrent_Collections_V2_By_PkArgs = {\n  collection_id: Scalars['String'];\n};\n\n\nexport type Query_RootCurrent_Delegated_Staking_Pool_BalancesArgs = {\n  distinct_on?: InputMaybe<Array<Current_Delegated_Staking_Pool_Balances_Select_Column>>;\n  limit?: InputMaybe<Scalars['Int']>;\n  offset?: InputMaybe<Scalars['Int']>;\n  order_by?: InputMaybe<Array<Current_Delegated_Staking_Pool_Balances_Order_By>>;\n  where?: InputMaybe<Current_Delegated_Staking_Pool_Balances_Bool_Exp>;\n};\n\n\nexport type Query_RootCurrent_Delegated_Staking_Pool_Balances_By_PkArgs = {\n  staking_pool_address: Scalars['String'];\n};\n\n\nexport type Query_RootCurrent_Delegated_VoterArgs = {\n  distinct_on?: InputMaybe<Array<Current_Delegated_Voter_Select_Column>>;\n  limit?: InputMaybe<Scalars['Int']>;\n  offset?: InputMaybe<Scalars['Int']>;\n  order_by?: InputMaybe<Array<Current_Delegated_Voter_Order_By>>;\n  where?: InputMaybe<Current_Delegated_Voter_Bool_Exp>;\n};\n\n\nexport type Query_RootCurrent_Delegated_Voter_By_PkArgs = {\n  delegation_pool_address: Scalars['String'];\n  delegator_address: Scalars['String'];\n};\n\n\nexport type Query_RootCurrent_Delegator_BalancesArgs = {\n  distinct_on?: InputMaybe<Array<Current_Delegator_Balances_Select_Column>>;\n  limit?: InputMaybe<Scalars['Int']>;\n  offset?: InputMaybe<Scalars['Int']>;\n  order_by?: InputMaybe<Array<Current_Delegator_Balances_Order_By>>;\n  where?: InputMaybe<Current_Delegator_Balances_Bool_Exp>;\n};\n\n\nexport type Query_RootCurrent_Delegator_Balances_By_PkArgs = {\n  delegator_address: Scalars['String'];\n  pool_address: Scalars['String'];\n  pool_type: Scalars['String'];\n  table_handle: Scalars['String'];\n};\n\n\nexport type Query_RootCurrent_Fungible_Asset_BalancesArgs = {\n  distinct_on?: InputMaybe<Array<Current_Fungible_Asset_Balances_Select_Column>>;\n  limit?: InputMaybe<Scalars['Int']>;\n  offset?: InputMaybe<Scalars['Int']>;\n  order_by?: InputMaybe<Array<Current_Fungible_Asset_Balances_Order_By>>;\n  where?: InputMaybe<Current_Fungible_Asset_Balances_Bool_Exp>;\n};\n\n\nexport type Query_RootCurrent_Fungible_Asset_Balances_AggregateArgs = {\n  distinct_on?: InputMaybe<Array<Current_Fungible_Asset_Balances_Select_Column>>;\n  limit?: InputMaybe<Scalars['Int']>;\n  offset?: InputMaybe<Scalars['Int']>;\n  order_by?: InputMaybe<Array<Current_Fungible_Asset_Balances_Order_By>>;\n  where?: InputMaybe<Current_Fungible_Asset_Balances_Bool_Exp>;\n};\n\n\nexport type Query_RootCurrent_Fungible_Asset_Balances_By_PkArgs = {\n  storage_id: Scalars['String'];\n};\n\n\nexport type Query_RootCurrent_ObjectsArgs = {\n  distinct_on?: InputMaybe<Array<Current_Objects_Select_Column>>;\n  limit?: InputMaybe<Scalars['Int']>;\n  offset?: InputMaybe<Scalars['Int']>;\n  order_by?: InputMaybe<Array<Current_Objects_Order_By>>;\n  where?: InputMaybe<Current_Objects_Bool_Exp>;\n};\n\n\nexport type Query_RootCurrent_Objects_By_PkArgs = {\n  object_address: Scalars['String'];\n};\n\n\nexport type Query_RootCurrent_Staking_Pool_VoterArgs = {\n  distinct_on?: InputMaybe<Array<Current_Staking_Pool_Voter_Select_Column>>;\n  limit?: InputMaybe<Scalars['Int']>;\n  offset?: InputMaybe<Scalars['Int']>;\n  order_by?: InputMaybe<Array<Current_Staking_Pool_Voter_Order_By>>;\n  where?: InputMaybe<Current_Staking_Pool_Voter_Bool_Exp>;\n};\n\n\nexport type Query_RootCurrent_Staking_Pool_Voter_By_PkArgs = {\n  staking_pool_address: Scalars['String'];\n};\n\n\nexport type Query_RootCurrent_Table_ItemsArgs = {\n  distinct_on?: InputMaybe<Array<Current_Table_Items_Select_Column>>;\n  limit?: InputMaybe<Scalars['Int']>;\n  offset?: InputMaybe<Scalars['Int']>;\n  order_by?: InputMaybe<Array<Current_Table_Items_Order_By>>;\n  where?: InputMaybe<Current_Table_Items_Bool_Exp>;\n};\n\n\nexport type Query_RootCurrent_Table_Items_By_PkArgs = {\n  key_hash: Scalars['String'];\n  table_handle: Scalars['String'];\n};\n\n\nexport type Query_RootCurrent_Token_DatasArgs = {\n  distinct_on?: InputMaybe<Array<Current_Token_Datas_Select_Column>>;\n  limit?: InputMaybe<Scalars['Int']>;\n  offset?: InputMaybe<Scalars['Int']>;\n  order_by?: InputMaybe<Array<Current_Token_Datas_Order_By>>;\n  where?: InputMaybe<Current_Token_Datas_Bool_Exp>;\n};\n\n\nexport type Query_RootCurrent_Token_Datas_By_PkArgs = {\n  token_data_id_hash: Scalars['String'];\n};\n\n\nexport type Query_RootCurrent_Token_Datas_V2Args = {\n  distinct_on?: InputMaybe<Array<Current_Token_Datas_V2_Select_Column>>;\n  limit?: InputMaybe<Scalars['Int']>;\n  offset?: InputMaybe<Scalars['Int']>;\n  order_by?: InputMaybe<Array<Current_Token_Datas_V2_Order_By>>;\n  where?: InputMaybe<Current_Token_Datas_V2_Bool_Exp>;\n};\n\n\nexport type Query_RootCurrent_Token_Datas_V2_By_PkArgs = {\n  token_data_id: Scalars['String'];\n};\n\n\nexport type Query_RootCurrent_Token_OwnershipsArgs = {\n  distinct_on?: InputMaybe<Array<Current_Token_Ownerships_Select_Column>>;\n  limit?: InputMaybe<Scalars['Int']>;\n  offset?: InputMaybe<Scalars['Int']>;\n  order_by?: InputMaybe<Array<Current_Token_Ownerships_Order_By>>;\n  where?: InputMaybe<Current_Token_Ownerships_Bool_Exp>;\n};\n\n\nexport type Query_RootCurrent_Token_Ownerships_AggregateArgs = {\n  distinct_on?: InputMaybe<Array<Current_Token_Ownerships_Select_Column>>;\n  limit?: InputMaybe<Scalars['Int']>;\n  offset?: InputMaybe<Scalars['Int']>;\n  order_by?: InputMaybe<Array<Current_Token_Ownerships_Order_By>>;\n  where?: InputMaybe<Current_Token_Ownerships_Bool_Exp>;\n};\n\n\nexport type Query_RootCurrent_Token_Ownerships_By_PkArgs = {\n  owner_address: Scalars['String'];\n  property_version: Scalars['numeric'];\n  token_data_id_hash: Scalars['String'];\n};\n\n\nexport type Query_RootCurrent_Token_Ownerships_V2Args = {\n  distinct_on?: InputMaybe<Array<Current_Token_Ownerships_V2_Select_Column>>;\n  limit?: InputMaybe<Scalars['Int']>;\n  offset?: InputMaybe<Scalars['Int']>;\n  order_by?: InputMaybe<Array<Current_Token_Ownerships_V2_Order_By>>;\n  where?: InputMaybe<Current_Token_Ownerships_V2_Bool_Exp>;\n};\n\n\nexport type Query_RootCurrent_Token_Ownerships_V2_AggregateArgs = {\n  distinct_on?: InputMaybe<Array<Current_Token_Ownerships_V2_Select_Column>>;\n  limit?: InputMaybe<Scalars['Int']>;\n  offset?: InputMaybe<Scalars['Int']>;\n  order_by?: InputMaybe<Array<Current_Token_Ownerships_V2_Order_By>>;\n  where?: InputMaybe<Current_Token_Ownerships_V2_Bool_Exp>;\n};\n\n\nexport type Query_RootCurrent_Token_Ownerships_V2_By_PkArgs = {\n  owner_address: Scalars['String'];\n  property_version_v1: Scalars['numeric'];\n  storage_id: Scalars['String'];\n  token_data_id: Scalars['String'];\n};\n\n\nexport type Query_RootCurrent_Token_Pending_ClaimsArgs = {\n  distinct_on?: InputMaybe<Array<Current_Token_Pending_Claims_Select_Column>>;\n  limit?: InputMaybe<Scalars['Int']>;\n  offset?: InputMaybe<Scalars['Int']>;\n  order_by?: InputMaybe<Array<Current_Token_Pending_Claims_Order_By>>;\n  where?: InputMaybe<Current_Token_Pending_Claims_Bool_Exp>;\n};\n\n\nexport type Query_RootCurrent_Token_Pending_Claims_By_PkArgs = {\n  from_address: Scalars['String'];\n  property_version: Scalars['numeric'];\n  to_address: Scalars['String'];\n  token_data_id_hash: Scalars['String'];\n};\n\n\nexport type Query_RootDelegated_Staking_ActivitiesArgs = {\n  distinct_on?: InputMaybe<Array<Delegated_Staking_Activities_Select_Column>>;\n  limit?: InputMaybe<Scalars['Int']>;\n  offset?: InputMaybe<Scalars['Int']>;\n  order_by?: InputMaybe<Array<Delegated_Staking_Activities_Order_By>>;\n  where?: InputMaybe<Delegated_Staking_Activities_Bool_Exp>;\n};\n\n\nexport type Query_RootDelegated_Staking_Activities_By_PkArgs = {\n  event_index: Scalars['bigint'];\n  transaction_version: Scalars['bigint'];\n};\n\n\nexport type Query_RootDelegated_Staking_PoolsArgs = {\n  distinct_on?: InputMaybe<Array<Delegated_Staking_Pools_Select_Column>>;\n  limit?: InputMaybe<Scalars['Int']>;\n  offset?: InputMaybe<Scalars['Int']>;\n  order_by?: InputMaybe<Array<Delegated_Staking_Pools_Order_By>>;\n  where?: InputMaybe<Delegated_Staking_Pools_Bool_Exp>;\n};\n\n\nexport type Query_RootDelegated_Staking_Pools_By_PkArgs = {\n  staking_pool_address: Scalars['String'];\n};\n\n\nexport type Query_RootDelegator_Distinct_PoolArgs = {\n  distinct_on?: InputMaybe<Array<Delegator_Distinct_Pool_Select_Column>>;\n  limit?: InputMaybe<Scalars['Int']>;\n  offset?: InputMaybe<Scalars['Int']>;\n  order_by?: InputMaybe<Array<Delegator_Distinct_Pool_Order_By>>;\n  where?: InputMaybe<Delegator_Distinct_Pool_Bool_Exp>;\n};\n\n\nexport type Query_RootDelegator_Distinct_Pool_AggregateArgs = {\n  distinct_on?: InputMaybe<Array<Delegator_Distinct_Pool_Select_Column>>;\n  limit?: InputMaybe<Scalars['Int']>;\n  offset?: InputMaybe<Scalars['Int']>;\n  order_by?: InputMaybe<Array<Delegator_Distinct_Pool_Order_By>>;\n  where?: InputMaybe<Delegator_Distinct_Pool_Bool_Exp>;\n};\n\n\nexport type Query_RootEventsArgs = {\n  distinct_on?: InputMaybe<Array<Events_Select_Column>>;\n  limit?: InputMaybe<Scalars['Int']>;\n  offset?: InputMaybe<Scalars['Int']>;\n  order_by?: InputMaybe<Array<Events_Order_By>>;\n  where?: InputMaybe<Events_Bool_Exp>;\n};\n\n\nexport type Query_RootEvents_By_PkArgs = {\n  account_address: Scalars['String'];\n  creation_number: Scalars['bigint'];\n  sequence_number: Scalars['bigint'];\n};\n\n\nexport type Query_RootFungible_Asset_ActivitiesArgs = {\n  distinct_on?: InputMaybe<Array<Fungible_Asset_Activities_Select_Column>>;\n  limit?: InputMaybe<Scalars['Int']>;\n  offset?: InputMaybe<Scalars['Int']>;\n  order_by?: InputMaybe<Array<Fungible_Asset_Activities_Order_By>>;\n  where?: InputMaybe<Fungible_Asset_Activities_Bool_Exp>;\n};\n\n\nexport type Query_RootFungible_Asset_Activities_By_PkArgs = {\n  event_index: Scalars['bigint'];\n  transaction_version: Scalars['bigint'];\n};\n\n\nexport type Query_RootFungible_Asset_MetadataArgs = {\n  distinct_on?: InputMaybe<Array<Fungible_Asset_Metadata_Select_Column>>;\n  limit?: InputMaybe<Scalars['Int']>;\n  offset?: InputMaybe<Scalars['Int']>;\n  order_by?: InputMaybe<Array<Fungible_Asset_Metadata_Order_By>>;\n  where?: InputMaybe<Fungible_Asset_Metadata_Bool_Exp>;\n};\n\n\nexport type Query_RootFungible_Asset_Metadata_By_PkArgs = {\n  asset_type: Scalars['String'];\n};\n\n\nexport type Query_RootIndexer_StatusArgs = {\n  distinct_on?: InputMaybe<Array<Indexer_Status_Select_Column>>;\n  limit?: InputMaybe<Scalars['Int']>;\n  offset?: InputMaybe<Scalars['Int']>;\n  order_by?: InputMaybe<Array<Indexer_Status_Order_By>>;\n  where?: InputMaybe<Indexer_Status_Bool_Exp>;\n};\n\n\nexport type Query_RootIndexer_Status_By_PkArgs = {\n  db: Scalars['String'];\n};\n\n\nexport type Query_RootLedger_InfosArgs = {\n  distinct_on?: InputMaybe<Array<Ledger_Infos_Select_Column>>;\n  limit?: InputMaybe<Scalars['Int']>;\n  offset?: InputMaybe<Scalars['Int']>;\n  order_by?: InputMaybe<Array<Ledger_Infos_Order_By>>;\n  where?: InputMaybe<Ledger_Infos_Bool_Exp>;\n};\n\n\nexport type Query_RootLedger_Infos_By_PkArgs = {\n  chain_id: Scalars['bigint'];\n};\n\n\nexport type Query_RootMove_ResourcesArgs = {\n  distinct_on?: InputMaybe<Array<Move_Resources_Select_Column>>;\n  limit?: InputMaybe<Scalars['Int']>;\n  offset?: InputMaybe<Scalars['Int']>;\n  order_by?: InputMaybe<Array<Move_Resources_Order_By>>;\n  where?: InputMaybe<Move_Resources_Bool_Exp>;\n};\n\n\nexport type Query_RootMove_Resources_AggregateArgs = {\n  distinct_on?: InputMaybe<Array<Move_Resources_Select_Column>>;\n  limit?: InputMaybe<Scalars['Int']>;\n  offset?: InputMaybe<Scalars['Int']>;\n  order_by?: InputMaybe<Array<Move_Resources_Order_By>>;\n  where?: InputMaybe<Move_Resources_Bool_Exp>;\n};\n\n\nexport type Query_RootNft_Marketplace_V2_Current_Nft_Marketplace_AuctionsArgs = {\n  distinct_on?: InputMaybe<Array<Nft_Marketplace_V2_Current_Nft_Marketplace_Auctions_Select_Column>>;\n  limit?: InputMaybe<Scalars['Int']>;\n  offset?: InputMaybe<Scalars['Int']>;\n  order_by?: InputMaybe<Array<Nft_Marketplace_V2_Current_Nft_Marketplace_Auctions_Order_By>>;\n  where?: InputMaybe<Nft_Marketplace_V2_Current_Nft_Marketplace_Auctions_Bool_Exp>;\n};\n\n\nexport type Query_RootNft_Marketplace_V2_Current_Nft_Marketplace_Auctions_By_PkArgs = {\n  listing_id: Scalars['String'];\n  token_data_id: Scalars['String'];\n};\n\n\nexport type Query_RootNft_Marketplace_V2_Current_Nft_Marketplace_Collection_OffersArgs = {\n  distinct_on?: InputMaybe<Array<Nft_Marketplace_V2_Current_Nft_Marketplace_Collection_Offers_Select_Column>>;\n  limit?: InputMaybe<Scalars['Int']>;\n  offset?: InputMaybe<Scalars['Int']>;\n  order_by?: InputMaybe<Array<Nft_Marketplace_V2_Current_Nft_Marketplace_Collection_Offers_Order_By>>;\n  where?: InputMaybe<Nft_Marketplace_V2_Current_Nft_Marketplace_Collection_Offers_Bool_Exp>;\n};\n\n\nexport type Query_RootNft_Marketplace_V2_Current_Nft_Marketplace_Collection_Offers_By_PkArgs = {\n  collection_id: Scalars['String'];\n  collection_offer_id: Scalars['String'];\n};\n\n\nexport type Query_RootNft_Marketplace_V2_Current_Nft_Marketplace_ListingsArgs = {\n  distinct_on?: InputMaybe<Array<Nft_Marketplace_V2_Current_Nft_Marketplace_Listings_Select_Column>>;\n  limit?: InputMaybe<Scalars['Int']>;\n  offset?: InputMaybe<Scalars['Int']>;\n  order_by?: InputMaybe<Array<Nft_Marketplace_V2_Current_Nft_Marketplace_Listings_Order_By>>;\n  where?: InputMaybe<Nft_Marketplace_V2_Current_Nft_Marketplace_Listings_Bool_Exp>;\n};\n\n\nexport type Query_RootNft_Marketplace_V2_Current_Nft_Marketplace_Listings_By_PkArgs = {\n  listing_id: Scalars['String'];\n  token_data_id: Scalars['String'];\n};\n\n\nexport type Query_RootNft_Marketplace_V2_Current_Nft_Marketplace_Token_OffersArgs = {\n  distinct_on?: InputMaybe<Array<Nft_Marketplace_V2_Current_Nft_Marketplace_Token_Offers_Select_Column>>;\n  limit?: InputMaybe<Scalars['Int']>;\n  offset?: InputMaybe<Scalars['Int']>;\n  order_by?: InputMaybe<Array<Nft_Marketplace_V2_Current_Nft_Marketplace_Token_Offers_Order_By>>;\n  where?: InputMaybe<Nft_Marketplace_V2_Current_Nft_Marketplace_Token_Offers_Bool_Exp>;\n};\n\n\nexport type Query_RootNft_Marketplace_V2_Current_Nft_Marketplace_Token_Offers_By_PkArgs = {\n  offer_id: Scalars['String'];\n  token_data_id: Scalars['String'];\n};\n\n\nexport type Query_RootNft_Marketplace_V2_Nft_Marketplace_ActivitiesArgs = {\n  distinct_on?: InputMaybe<Array<Nft_Marketplace_V2_Nft_Marketplace_Activities_Select_Column>>;\n  limit?: InputMaybe<Scalars['Int']>;\n  offset?: InputMaybe<Scalars['Int']>;\n  order_by?: InputMaybe<Array<Nft_Marketplace_V2_Nft_Marketplace_Activities_Order_By>>;\n  where?: InputMaybe<Nft_Marketplace_V2_Nft_Marketplace_Activities_Bool_Exp>;\n};\n\n\nexport type Query_RootNft_Marketplace_V2_Nft_Marketplace_Activities_By_PkArgs = {\n  event_index: Scalars['bigint'];\n  transaction_version: Scalars['bigint'];\n};\n\n\nexport type Query_RootNft_Metadata_Crawler_Parsed_Asset_UrisArgs = {\n  distinct_on?: InputMaybe<Array<Nft_Metadata_Crawler_Parsed_Asset_Uris_Select_Column>>;\n  limit?: InputMaybe<Scalars['Int']>;\n  offset?: InputMaybe<Scalars['Int']>;\n  order_by?: InputMaybe<Array<Nft_Metadata_Crawler_Parsed_Asset_Uris_Order_By>>;\n  where?: InputMaybe<Nft_Metadata_Crawler_Parsed_Asset_Uris_Bool_Exp>;\n};\n\n\nexport type Query_RootNft_Metadata_Crawler_Parsed_Asset_Uris_By_PkArgs = {\n  asset_uri: Scalars['String'];\n};\n\n\nexport type Query_RootNum_Active_Delegator_Per_PoolArgs = {\n  distinct_on?: InputMaybe<Array<Num_Active_Delegator_Per_Pool_Select_Column>>;\n  limit?: InputMaybe<Scalars['Int']>;\n  offset?: InputMaybe<Scalars['Int']>;\n  order_by?: InputMaybe<Array<Num_Active_Delegator_Per_Pool_Order_By>>;\n  where?: InputMaybe<Num_Active_Delegator_Per_Pool_Bool_Exp>;\n};\n\n\nexport type Query_RootProcessor_StatusArgs = {\n  distinct_on?: InputMaybe<Array<Processor_Status_Select_Column>>;\n  limit?: InputMaybe<Scalars['Int']>;\n  offset?: InputMaybe<Scalars['Int']>;\n  order_by?: InputMaybe<Array<Processor_Status_Order_By>>;\n  where?: InputMaybe<Processor_Status_Bool_Exp>;\n};\n\n\nexport type Query_RootProcessor_Status_By_PkArgs = {\n  processor: Scalars['String'];\n};\n\n\nexport type Query_RootProposal_VotesArgs = {\n  distinct_on?: InputMaybe<Array<Proposal_Votes_Select_Column>>;\n  limit?: InputMaybe<Scalars['Int']>;\n  offset?: InputMaybe<Scalars['Int']>;\n  order_by?: InputMaybe<Array<Proposal_Votes_Order_By>>;\n  where?: InputMaybe<Proposal_Votes_Bool_Exp>;\n};\n\n\nexport type Query_RootProposal_Votes_AggregateArgs = {\n  distinct_on?: InputMaybe<Array<Proposal_Votes_Select_Column>>;\n  limit?: InputMaybe<Scalars['Int']>;\n  offset?: InputMaybe<Scalars['Int']>;\n  order_by?: InputMaybe<Array<Proposal_Votes_Order_By>>;\n  where?: InputMaybe<Proposal_Votes_Bool_Exp>;\n};\n\n\nexport type Query_RootProposal_Votes_By_PkArgs = {\n  proposal_id: Scalars['bigint'];\n  transaction_version: Scalars['bigint'];\n  voter_address: Scalars['String'];\n};\n\n\nexport type Query_RootTable_ItemsArgs = {\n  distinct_on?: InputMaybe<Array<Table_Items_Select_Column>>;\n  limit?: InputMaybe<Scalars['Int']>;\n  offset?: InputMaybe<Scalars['Int']>;\n  order_by?: InputMaybe<Array<Table_Items_Order_By>>;\n  where?: InputMaybe<Table_Items_Bool_Exp>;\n};\n\n\nexport type Query_RootTable_Items_By_PkArgs = {\n  transaction_version: Scalars['bigint'];\n  write_set_change_index: Scalars['bigint'];\n};\n\n\nexport type Query_RootTable_MetadatasArgs = {\n  distinct_on?: InputMaybe<Array<Table_Metadatas_Select_Column>>;\n  limit?: InputMaybe<Scalars['Int']>;\n  offset?: InputMaybe<Scalars['Int']>;\n  order_by?: InputMaybe<Array<Table_Metadatas_Order_By>>;\n  where?: InputMaybe<Table_Metadatas_Bool_Exp>;\n};\n\n\nexport type Query_RootTable_Metadatas_By_PkArgs = {\n  handle: Scalars['String'];\n};\n\n\nexport type Query_RootToken_ActivitiesArgs = {\n  distinct_on?: InputMaybe<Array<Token_Activities_Select_Column>>;\n  limit?: InputMaybe<Scalars['Int']>;\n  offset?: InputMaybe<Scalars['Int']>;\n  order_by?: InputMaybe<Array<Token_Activities_Order_By>>;\n  where?: InputMaybe<Token_Activities_Bool_Exp>;\n};\n\n\nexport type Query_RootToken_Activities_AggregateArgs = {\n  distinct_on?: InputMaybe<Array<Token_Activities_Select_Column>>;\n  limit?: InputMaybe<Scalars['Int']>;\n  offset?: InputMaybe<Scalars['Int']>;\n  order_by?: InputMaybe<Array<Token_Activities_Order_By>>;\n  where?: InputMaybe<Token_Activities_Bool_Exp>;\n};\n\n\nexport type Query_RootToken_Activities_By_PkArgs = {\n  event_account_address: Scalars['String'];\n  event_creation_number: Scalars['bigint'];\n  event_sequence_number: Scalars['bigint'];\n  transaction_version: Scalars['bigint'];\n};\n\n\nexport type Query_RootToken_Activities_V2Args = {\n  distinct_on?: InputMaybe<Array<Token_Activities_V2_Select_Column>>;\n  limit?: InputMaybe<Scalars['Int']>;\n  offset?: InputMaybe<Scalars['Int']>;\n  order_by?: InputMaybe<Array<Token_Activities_V2_Order_By>>;\n  where?: InputMaybe<Token_Activities_V2_Bool_Exp>;\n};\n\n\nexport type Query_RootToken_Activities_V2_AggregateArgs = {\n  distinct_on?: InputMaybe<Array<Token_Activities_V2_Select_Column>>;\n  limit?: InputMaybe<Scalars['Int']>;\n  offset?: InputMaybe<Scalars['Int']>;\n  order_by?: InputMaybe<Array<Token_Activities_V2_Order_By>>;\n  where?: InputMaybe<Token_Activities_V2_Bool_Exp>;\n};\n\n\nexport type Query_RootToken_Activities_V2_By_PkArgs = {\n  event_index: Scalars['bigint'];\n  transaction_version: Scalars['bigint'];\n};\n\n\nexport type Query_RootToken_DatasArgs = {\n  distinct_on?: InputMaybe<Array<Token_Datas_Select_Column>>;\n  limit?: InputMaybe<Scalars['Int']>;\n  offset?: InputMaybe<Scalars['Int']>;\n  order_by?: InputMaybe<Array<Token_Datas_Order_By>>;\n  where?: InputMaybe<Token_Datas_Bool_Exp>;\n};\n\n\nexport type Query_RootToken_Datas_By_PkArgs = {\n  token_data_id_hash: Scalars['String'];\n  transaction_version: Scalars['bigint'];\n};\n\n\nexport type Query_RootToken_OwnershipsArgs = {\n  distinct_on?: InputMaybe<Array<Token_Ownerships_Select_Column>>;\n  limit?: InputMaybe<Scalars['Int']>;\n  offset?: InputMaybe<Scalars['Int']>;\n  order_by?: InputMaybe<Array<Token_Ownerships_Order_By>>;\n  where?: InputMaybe<Token_Ownerships_Bool_Exp>;\n};\n\n\nexport type Query_RootToken_Ownerships_By_PkArgs = {\n  property_version: Scalars['numeric'];\n  table_handle: Scalars['String'];\n  token_data_id_hash: Scalars['String'];\n  transaction_version: Scalars['bigint'];\n};\n\n\nexport type Query_RootTokensArgs = {\n  distinct_on?: InputMaybe<Array<Tokens_Select_Column>>;\n  limit?: InputMaybe<Scalars['Int']>;\n  offset?: InputMaybe<Scalars['Int']>;\n  order_by?: InputMaybe<Array<Tokens_Order_By>>;\n  where?: InputMaybe<Tokens_Bool_Exp>;\n};\n\n\nexport type Query_RootTokens_By_PkArgs = {\n  property_version: Scalars['numeric'];\n  token_data_id_hash: Scalars['String'];\n  transaction_version: Scalars['bigint'];\n};\n\n\nexport type Query_RootUser_TransactionsArgs = {\n  distinct_on?: InputMaybe<Array<User_Transactions_Select_Column>>;\n  limit?: InputMaybe<Scalars['Int']>;\n  offset?: InputMaybe<Scalars['Int']>;\n  order_by?: InputMaybe<Array<User_Transactions_Order_By>>;\n  where?: InputMaybe<User_Transactions_Bool_Exp>;\n};\n\n\nexport type Query_RootUser_Transactions_By_PkArgs = {\n  version: Scalars['bigint'];\n};\n\nexport type Subscription_Root = {\n  __typename?: 'subscription_root';\n  /** fetch data from the table: \"account_transactions\" */\n  account_transactions: Array<Account_Transactions>;\n  /** fetch aggregated fields from the table: \"account_transactions\" */\n  account_transactions_aggregate: Account_Transactions_Aggregate;\n  /** fetch data from the table: \"account_transactions\" using primary key columns */\n  account_transactions_by_pk?: Maybe<Account_Transactions>;\n  /** fetch data from the table in a streaming manner : \"account_transactions\" */\n  account_transactions_stream: Array<Account_Transactions>;\n  /** fetch data from the table: \"address_events_summary\" */\n  address_events_summary: Array<Address_Events_Summary>;\n  /** fetch data from the table in a streaming manner : \"address_events_summary\" */\n  address_events_summary_stream: Array<Address_Events_Summary>;\n  /** fetch data from the table: \"address_version_from_events\" */\n  address_version_from_events: Array<Address_Version_From_Events>;\n  /** fetch aggregated fields from the table: \"address_version_from_events\" */\n  address_version_from_events_aggregate: Address_Version_From_Events_Aggregate;\n  /** fetch data from the table in a streaming manner : \"address_version_from_events\" */\n  address_version_from_events_stream: Array<Address_Version_From_Events>;\n  /** fetch data from the table: \"address_version_from_move_resources\" */\n  address_version_from_move_resources: Array<Address_Version_From_Move_Resources>;\n  /** fetch aggregated fields from the table: \"address_version_from_move_resources\" */\n  address_version_from_move_resources_aggregate: Address_Version_From_Move_Resources_Aggregate;\n  /** fetch data from the table in a streaming manner : \"address_version_from_move_resources\" */\n  address_version_from_move_resources_stream: Array<Address_Version_From_Move_Resources>;\n  /** fetch data from the table: \"block_metadata_transactions\" */\n  block_metadata_transactions: Array<Block_Metadata_Transactions>;\n  /** fetch data from the table: \"block_metadata_transactions\" using primary key columns */\n  block_metadata_transactions_by_pk?: Maybe<Block_Metadata_Transactions>;\n  /** fetch data from the table in a streaming manner : \"block_metadata_transactions\" */\n  block_metadata_transactions_stream: Array<Block_Metadata_Transactions>;\n  /** An array relationship */\n  coin_activities: Array<Coin_Activities>;\n  /** An aggregate relationship */\n  coin_activities_aggregate: Coin_Activities_Aggregate;\n  /** fetch data from the table: \"coin_activities\" using primary key columns */\n  coin_activities_by_pk?: Maybe<Coin_Activities>;\n  /** fetch data from the table in a streaming manner : \"coin_activities\" */\n  coin_activities_stream: Array<Coin_Activities>;\n  /** fetch data from the table: \"coin_balances\" */\n  coin_balances: Array<Coin_Balances>;\n  /** fetch data from the table: \"coin_balances\" using primary key columns */\n  coin_balances_by_pk?: Maybe<Coin_Balances>;\n  /** fetch data from the table in a streaming manner : \"coin_balances\" */\n  coin_balances_stream: Array<Coin_Balances>;\n  /** fetch data from the table: \"coin_infos\" */\n  coin_infos: Array<Coin_Infos>;\n  /** fetch data from the table: \"coin_infos\" using primary key columns */\n  coin_infos_by_pk?: Maybe<Coin_Infos>;\n  /** fetch data from the table in a streaming manner : \"coin_infos\" */\n  coin_infos_stream: Array<Coin_Infos>;\n  /** fetch data from the table: \"coin_supply\" */\n  coin_supply: Array<Coin_Supply>;\n  /** fetch data from the table: \"coin_supply\" using primary key columns */\n  coin_supply_by_pk?: Maybe<Coin_Supply>;\n  /** fetch data from the table in a streaming manner : \"coin_supply\" */\n  coin_supply_stream: Array<Coin_Supply>;\n  /** fetch data from the table: \"collection_datas\" */\n  collection_datas: Array<Collection_Datas>;\n  /** fetch data from the table: \"collection_datas\" using primary key columns */\n  collection_datas_by_pk?: Maybe<Collection_Datas>;\n  /** fetch data from the table in a streaming manner : \"collection_datas\" */\n  collection_datas_stream: Array<Collection_Datas>;\n  /** fetch data from the table: \"current_ans_lookup\" */\n  current_ans_lookup: Array<Current_Ans_Lookup>;\n  /** fetch data from the table: \"current_ans_lookup\" using primary key columns */\n  current_ans_lookup_by_pk?: Maybe<Current_Ans_Lookup>;\n  /** fetch data from the table in a streaming manner : \"current_ans_lookup\" */\n  current_ans_lookup_stream: Array<Current_Ans_Lookup>;\n  /** fetch data from the table: \"current_aptos_names\" */\n  current_aptos_names: Array<Current_Aptos_Names>;\n  /** fetch data from the table in a streaming manner : \"current_aptos_names\" */\n  current_aptos_names_stream: Array<Current_Aptos_Names>;\n  /** fetch data from the table: \"current_coin_balances\" */\n  current_coin_balances: Array<Current_Coin_Balances>;\n  /** fetch data from the table: \"current_coin_balances\" using primary key columns */\n  current_coin_balances_by_pk?: Maybe<Current_Coin_Balances>;\n  /** fetch data from the table in a streaming manner : \"current_coin_balances\" */\n  current_coin_balances_stream: Array<Current_Coin_Balances>;\n  /** fetch data from the table: \"current_collection_datas\" */\n  current_collection_datas: Array<Current_Collection_Datas>;\n  /** fetch data from the table: \"current_collection_datas\" using primary key columns */\n  current_collection_datas_by_pk?: Maybe<Current_Collection_Datas>;\n  /** fetch data from the table in a streaming manner : \"current_collection_datas\" */\n  current_collection_datas_stream: Array<Current_Collection_Datas>;\n  /** fetch data from the table: \"current_collection_ownership_v2_view\" */\n  current_collection_ownership_v2_view: Array<Current_Collection_Ownership_V2_View>;\n  /** fetch aggregated fields from the table: \"current_collection_ownership_v2_view\" */\n  current_collection_ownership_v2_view_aggregate: Current_Collection_Ownership_V2_View_Aggregate;\n  /** fetch data from the table in a streaming manner : \"current_collection_ownership_v2_view\" */\n  current_collection_ownership_v2_view_stream: Array<Current_Collection_Ownership_V2_View>;\n  /** fetch data from the table: \"current_collections_v2\" */\n  current_collections_v2: Array<Current_Collections_V2>;\n  /** fetch data from the table: \"current_collections_v2\" using primary key columns */\n  current_collections_v2_by_pk?: Maybe<Current_Collections_V2>;\n  /** fetch data from the table in a streaming manner : \"current_collections_v2\" */\n  current_collections_v2_stream: Array<Current_Collections_V2>;\n  /** fetch data from the table: \"current_delegated_staking_pool_balances\" */\n  current_delegated_staking_pool_balances: Array<Current_Delegated_Staking_Pool_Balances>;\n  /** fetch data from the table: \"current_delegated_staking_pool_balances\" using primary key columns */\n  current_delegated_staking_pool_balances_by_pk?: Maybe<Current_Delegated_Staking_Pool_Balances>;\n  /** fetch data from the table in a streaming manner : \"current_delegated_staking_pool_balances\" */\n  current_delegated_staking_pool_balances_stream: Array<Current_Delegated_Staking_Pool_Balances>;\n  /** fetch data from the table: \"current_delegated_voter\" */\n  current_delegated_voter: Array<Current_Delegated_Voter>;\n  /** fetch data from the table: \"current_delegated_voter\" using primary key columns */\n  current_delegated_voter_by_pk?: Maybe<Current_Delegated_Voter>;\n  /** fetch data from the table in a streaming manner : \"current_delegated_voter\" */\n  current_delegated_voter_stream: Array<Current_Delegated_Voter>;\n  /** fetch data from the table: \"current_delegator_balances\" */\n  current_delegator_balances: Array<Current_Delegator_Balances>;\n  /** fetch data from the table: \"current_delegator_balances\" using primary key columns */\n  current_delegator_balances_by_pk?: Maybe<Current_Delegator_Balances>;\n  /** fetch data from the table in a streaming manner : \"current_delegator_balances\" */\n  current_delegator_balances_stream: Array<Current_Delegator_Balances>;\n  /** fetch data from the table: \"current_fungible_asset_balances\" */\n  current_fungible_asset_balances: Array<Current_Fungible_Asset_Balances>;\n  /** fetch aggregated fields from the table: \"current_fungible_asset_balances\" */\n  current_fungible_asset_balances_aggregate: Current_Fungible_Asset_Balances_Aggregate;\n  /** fetch data from the table: \"current_fungible_asset_balances\" using primary key columns */\n  current_fungible_asset_balances_by_pk?: Maybe<Current_Fungible_Asset_Balances>;\n  /** fetch data from the table in a streaming manner : \"current_fungible_asset_balances\" */\n  current_fungible_asset_balances_stream: Array<Current_Fungible_Asset_Balances>;\n  /** fetch data from the table: \"current_objects\" */\n  current_objects: Array<Current_Objects>;\n  /** fetch data from the table: \"current_objects\" using primary key columns */\n  current_objects_by_pk?: Maybe<Current_Objects>;\n  /** fetch data from the table in a streaming manner : \"current_objects\" */\n  current_objects_stream: Array<Current_Objects>;\n  /** fetch data from the table: \"current_staking_pool_voter\" */\n  current_staking_pool_voter: Array<Current_Staking_Pool_Voter>;\n  /** fetch data from the table: \"current_staking_pool_voter\" using primary key columns */\n  current_staking_pool_voter_by_pk?: Maybe<Current_Staking_Pool_Voter>;\n  /** fetch data from the table in a streaming manner : \"current_staking_pool_voter\" */\n  current_staking_pool_voter_stream: Array<Current_Staking_Pool_Voter>;\n  /** fetch data from the table: \"current_table_items\" */\n  current_table_items: Array<Current_Table_Items>;\n  /** fetch data from the table: \"current_table_items\" using primary key columns */\n  current_table_items_by_pk?: Maybe<Current_Table_Items>;\n  /** fetch data from the table in a streaming manner : \"current_table_items\" */\n  current_table_items_stream: Array<Current_Table_Items>;\n  /** fetch data from the table: \"current_token_datas\" */\n  current_token_datas: Array<Current_Token_Datas>;\n  /** fetch data from the table: \"current_token_datas\" using primary key columns */\n  current_token_datas_by_pk?: Maybe<Current_Token_Datas>;\n  /** fetch data from the table in a streaming manner : \"current_token_datas\" */\n  current_token_datas_stream: Array<Current_Token_Datas>;\n  /** fetch data from the table: \"current_token_datas_v2\" */\n  current_token_datas_v2: Array<Current_Token_Datas_V2>;\n  /** fetch data from the table: \"current_token_datas_v2\" using primary key columns */\n  current_token_datas_v2_by_pk?: Maybe<Current_Token_Datas_V2>;\n  /** fetch data from the table in a streaming manner : \"current_token_datas_v2\" */\n  current_token_datas_v2_stream: Array<Current_Token_Datas_V2>;\n  /** fetch data from the table: \"current_token_ownerships\" */\n  current_token_ownerships: Array<Current_Token_Ownerships>;\n  /** fetch aggregated fields from the table: \"current_token_ownerships\" */\n  current_token_ownerships_aggregate: Current_Token_Ownerships_Aggregate;\n  /** fetch data from the table: \"current_token_ownerships\" using primary key columns */\n  current_token_ownerships_by_pk?: Maybe<Current_Token_Ownerships>;\n  /** fetch data from the table in a streaming manner : \"current_token_ownerships\" */\n  current_token_ownerships_stream: Array<Current_Token_Ownerships>;\n  /** fetch data from the table: \"current_token_ownerships_v2\" */\n  current_token_ownerships_v2: Array<Current_Token_Ownerships_V2>;\n  /** fetch aggregated fields from the table: \"current_token_ownerships_v2\" */\n  current_token_ownerships_v2_aggregate: Current_Token_Ownerships_V2_Aggregate;\n  /** fetch data from the table: \"current_token_ownerships_v2\" using primary key columns */\n  current_token_ownerships_v2_by_pk?: Maybe<Current_Token_Ownerships_V2>;\n  /** fetch data from the table in a streaming manner : \"current_token_ownerships_v2\" */\n  current_token_ownerships_v2_stream: Array<Current_Token_Ownerships_V2>;\n  /** fetch data from the table: \"current_token_pending_claims\" */\n  current_token_pending_claims: Array<Current_Token_Pending_Claims>;\n  /** fetch data from the table: \"current_token_pending_claims\" using primary key columns */\n  current_token_pending_claims_by_pk?: Maybe<Current_Token_Pending_Claims>;\n  /** fetch data from the table in a streaming manner : \"current_token_pending_claims\" */\n  current_token_pending_claims_stream: Array<Current_Token_Pending_Claims>;\n  /** An array relationship */\n  delegated_staking_activities: Array<Delegated_Staking_Activities>;\n  /** fetch data from the table: \"delegated_staking_activities\" using primary key columns */\n  delegated_staking_activities_by_pk?: Maybe<Delegated_Staking_Activities>;\n  /** fetch data from the table in a streaming manner : \"delegated_staking_activities\" */\n  delegated_staking_activities_stream: Array<Delegated_Staking_Activities>;\n  /** fetch data from the table: \"delegated_staking_pools\" */\n  delegated_staking_pools: Array<Delegated_Staking_Pools>;\n  /** fetch data from the table: \"delegated_staking_pools\" using primary key columns */\n  delegated_staking_pools_by_pk?: Maybe<Delegated_Staking_Pools>;\n  /** fetch data from the table in a streaming manner : \"delegated_staking_pools\" */\n  delegated_staking_pools_stream: Array<Delegated_Staking_Pools>;\n  /** fetch data from the table: \"delegator_distinct_pool\" */\n  delegator_distinct_pool: Array<Delegator_Distinct_Pool>;\n  /** fetch aggregated fields from the table: \"delegator_distinct_pool\" */\n  delegator_distinct_pool_aggregate: Delegator_Distinct_Pool_Aggregate;\n  /** fetch data from the table in a streaming manner : \"delegator_distinct_pool\" */\n  delegator_distinct_pool_stream: Array<Delegator_Distinct_Pool>;\n  /** fetch data from the table: \"events\" */\n  events: Array<Events>;\n  /** fetch data from the table: \"events\" using primary key columns */\n  events_by_pk?: Maybe<Events>;\n  /** fetch data from the table in a streaming manner : \"events\" */\n  events_stream: Array<Events>;\n  /** An array relationship */\n  fungible_asset_activities: Array<Fungible_Asset_Activities>;\n  /** fetch data from the table: \"fungible_asset_activities\" using primary key columns */\n  fungible_asset_activities_by_pk?: Maybe<Fungible_Asset_Activities>;\n  /** fetch data from the table in a streaming manner : \"fungible_asset_activities\" */\n  fungible_asset_activities_stream: Array<Fungible_Asset_Activities>;\n  /** fetch data from the table: \"fungible_asset_metadata\" */\n  fungible_asset_metadata: Array<Fungible_Asset_Metadata>;\n  /** fetch data from the table: \"fungible_asset_metadata\" using primary key columns */\n  fungible_asset_metadata_by_pk?: Maybe<Fungible_Asset_Metadata>;\n  /** fetch data from the table in a streaming manner : \"fungible_asset_metadata\" */\n  fungible_asset_metadata_stream: Array<Fungible_Asset_Metadata>;\n  /** fetch data from the table: \"indexer_status\" */\n  indexer_status: Array<Indexer_Status>;\n  /** fetch data from the table: \"indexer_status\" using primary key columns */\n  indexer_status_by_pk?: Maybe<Indexer_Status>;\n  /** fetch data from the table in a streaming manner : \"indexer_status\" */\n  indexer_status_stream: Array<Indexer_Status>;\n  /** fetch data from the table: \"ledger_infos\" */\n  ledger_infos: Array<Ledger_Infos>;\n  /** fetch data from the table: \"ledger_infos\" using primary key columns */\n  ledger_infos_by_pk?: Maybe<Ledger_Infos>;\n  /** fetch data from the table in a streaming manner : \"ledger_infos\" */\n  ledger_infos_stream: Array<Ledger_Infos>;\n  /** fetch data from the table: \"move_resources\" */\n  move_resources: Array<Move_Resources>;\n  /** fetch aggregated fields from the table: \"move_resources\" */\n  move_resources_aggregate: Move_Resources_Aggregate;\n  /** fetch data from the table in a streaming manner : \"move_resources\" */\n  move_resources_stream: Array<Move_Resources>;\n  /** fetch data from the table: \"nft_marketplace_v2.current_nft_marketplace_auctions\" */\n  nft_marketplace_v2_current_nft_marketplace_auctions: Array<Nft_Marketplace_V2_Current_Nft_Marketplace_Auctions>;\n  /** fetch data from the table: \"nft_marketplace_v2.current_nft_marketplace_auctions\" using primary key columns */\n  nft_marketplace_v2_current_nft_marketplace_auctions_by_pk?: Maybe<Nft_Marketplace_V2_Current_Nft_Marketplace_Auctions>;\n  /** fetch data from the table in a streaming manner : \"nft_marketplace_v2.current_nft_marketplace_auctions\" */\n  nft_marketplace_v2_current_nft_marketplace_auctions_stream: Array<Nft_Marketplace_V2_Current_Nft_Marketplace_Auctions>;\n  /** fetch data from the table: \"nft_marketplace_v2.current_nft_marketplace_collection_offers\" */\n  nft_marketplace_v2_current_nft_marketplace_collection_offers: Array<Nft_Marketplace_V2_Current_Nft_Marketplace_Collection_Offers>;\n  /** fetch data from the table: \"nft_marketplace_v2.current_nft_marketplace_collection_offers\" using primary key columns */\n  nft_marketplace_v2_current_nft_marketplace_collection_offers_by_pk?: Maybe<Nft_Marketplace_V2_Current_Nft_Marketplace_Collection_Offers>;\n  /** fetch data from the table in a streaming manner : \"nft_marketplace_v2.current_nft_marketplace_collection_offers\" */\n  nft_marketplace_v2_current_nft_marketplace_collection_offers_stream: Array<Nft_Marketplace_V2_Current_Nft_Marketplace_Collection_Offers>;\n  /** fetch data from the table: \"nft_marketplace_v2.current_nft_marketplace_listings\" */\n  nft_marketplace_v2_current_nft_marketplace_listings: Array<Nft_Marketplace_V2_Current_Nft_Marketplace_Listings>;\n  /** fetch data from the table: \"nft_marketplace_v2.current_nft_marketplace_listings\" using primary key columns */\n  nft_marketplace_v2_current_nft_marketplace_listings_by_pk?: Maybe<Nft_Marketplace_V2_Current_Nft_Marketplace_Listings>;\n  /** fetch data from the table in a streaming manner : \"nft_marketplace_v2.current_nft_marketplace_listings\" */\n  nft_marketplace_v2_current_nft_marketplace_listings_stream: Array<Nft_Marketplace_V2_Current_Nft_Marketplace_Listings>;\n  /** fetch data from the table: \"nft_marketplace_v2.current_nft_marketplace_token_offers\" */\n  nft_marketplace_v2_current_nft_marketplace_token_offers: Array<Nft_Marketplace_V2_Current_Nft_Marketplace_Token_Offers>;\n  /** fetch data from the table: \"nft_marketplace_v2.current_nft_marketplace_token_offers\" using primary key columns */\n  nft_marketplace_v2_current_nft_marketplace_token_offers_by_pk?: Maybe<Nft_Marketplace_V2_Current_Nft_Marketplace_Token_Offers>;\n  /** fetch data from the table in a streaming manner : \"nft_marketplace_v2.current_nft_marketplace_token_offers\" */\n  nft_marketplace_v2_current_nft_marketplace_token_offers_stream: Array<Nft_Marketplace_V2_Current_Nft_Marketplace_Token_Offers>;\n  /** fetch data from the table: \"nft_marketplace_v2.nft_marketplace_activities\" */\n  nft_marketplace_v2_nft_marketplace_activities: Array<Nft_Marketplace_V2_Nft_Marketplace_Activities>;\n  /** fetch data from the table: \"nft_marketplace_v2.nft_marketplace_activities\" using primary key columns */\n  nft_marketplace_v2_nft_marketplace_activities_by_pk?: Maybe<Nft_Marketplace_V2_Nft_Marketplace_Activities>;\n  /** fetch data from the table in a streaming manner : \"nft_marketplace_v2.nft_marketplace_activities\" */\n  nft_marketplace_v2_nft_marketplace_activities_stream: Array<Nft_Marketplace_V2_Nft_Marketplace_Activities>;\n  /** fetch data from the table: \"nft_metadata_crawler.parsed_asset_uris\" */\n  nft_metadata_crawler_parsed_asset_uris: Array<Nft_Metadata_Crawler_Parsed_Asset_Uris>;\n  /** fetch data from the table: \"nft_metadata_crawler.parsed_asset_uris\" using primary key columns */\n  nft_metadata_crawler_parsed_asset_uris_by_pk?: Maybe<Nft_Metadata_Crawler_Parsed_Asset_Uris>;\n  /** fetch data from the table in a streaming manner : \"nft_metadata_crawler.parsed_asset_uris\" */\n  nft_metadata_crawler_parsed_asset_uris_stream: Array<Nft_Metadata_Crawler_Parsed_Asset_Uris>;\n  /** fetch data from the table: \"num_active_delegator_per_pool\" */\n  num_active_delegator_per_pool: Array<Num_Active_Delegator_Per_Pool>;\n  /** fetch data from the table in a streaming manner : \"num_active_delegator_per_pool\" */\n  num_active_delegator_per_pool_stream: Array<Num_Active_Delegator_Per_Pool>;\n  /** fetch data from the table: \"processor_status\" */\n  processor_status: Array<Processor_Status>;\n  /** fetch data from the table: \"processor_status\" using primary key columns */\n  processor_status_by_pk?: Maybe<Processor_Status>;\n  /** fetch data from the table in a streaming manner : \"processor_status\" */\n  processor_status_stream: Array<Processor_Status>;\n  /** fetch data from the table: \"proposal_votes\" */\n  proposal_votes: Array<Proposal_Votes>;\n  /** fetch aggregated fields from the table: \"proposal_votes\" */\n  proposal_votes_aggregate: Proposal_Votes_Aggregate;\n  /** fetch data from the table: \"proposal_votes\" using primary key columns */\n  proposal_votes_by_pk?: Maybe<Proposal_Votes>;\n  /** fetch data from the table in a streaming manner : \"proposal_votes\" */\n  proposal_votes_stream: Array<Proposal_Votes>;\n  /** fetch data from the table: \"table_items\" */\n  table_items: Array<Table_Items>;\n  /** fetch data from the table: \"table_items\" using primary key columns */\n  table_items_by_pk?: Maybe<Table_Items>;\n  /** fetch data from the table in a streaming manner : \"table_items\" */\n  table_items_stream: Array<Table_Items>;\n  /** fetch data from the table: \"table_metadatas\" */\n  table_metadatas: Array<Table_Metadatas>;\n  /** fetch data from the table: \"table_metadatas\" using primary key columns */\n  table_metadatas_by_pk?: Maybe<Table_Metadatas>;\n  /** fetch data from the table in a streaming manner : \"table_metadatas\" */\n  table_metadatas_stream: Array<Table_Metadatas>;\n  /** An array relationship */\n  token_activities: Array<Token_Activities>;\n  /** An aggregate relationship */\n  token_activities_aggregate: Token_Activities_Aggregate;\n  /** fetch data from the table: \"token_activities\" using primary key columns */\n  token_activities_by_pk?: Maybe<Token_Activities>;\n  /** fetch data from the table in a streaming manner : \"token_activities\" */\n  token_activities_stream: Array<Token_Activities>;\n  /** An array relationship */\n  token_activities_v2: Array<Token_Activities_V2>;\n  /** An aggregate relationship */\n  token_activities_v2_aggregate: Token_Activities_V2_Aggregate;\n  /** fetch data from the table: \"token_activities_v2\" using primary key columns */\n  token_activities_v2_by_pk?: Maybe<Token_Activities_V2>;\n  /** fetch data from the table in a streaming manner : \"token_activities_v2\" */\n  token_activities_v2_stream: Array<Token_Activities_V2>;\n  /** fetch data from the table: \"token_datas\" */\n  token_datas: Array<Token_Datas>;\n  /** fetch data from the table: \"token_datas\" using primary key columns */\n  token_datas_by_pk?: Maybe<Token_Datas>;\n  /** fetch data from the table in a streaming manner : \"token_datas\" */\n  token_datas_stream: Array<Token_Datas>;\n  /** fetch data from the table: \"token_ownerships\" */\n  token_ownerships: Array<Token_Ownerships>;\n  /** fetch data from the table: \"token_ownerships\" using primary key columns */\n  token_ownerships_by_pk?: Maybe<Token_Ownerships>;\n  /** fetch data from the table in a streaming manner : \"token_ownerships\" */\n  token_ownerships_stream: Array<Token_Ownerships>;\n  /** fetch data from the table: \"tokens\" */\n  tokens: Array<Tokens>;\n  /** fetch data from the table: \"tokens\" using primary key columns */\n  tokens_by_pk?: Maybe<Tokens>;\n  /** fetch data from the table in a streaming manner : \"tokens\" */\n  tokens_stream: Array<Tokens>;\n  /** fetch data from the table: \"user_transactions\" */\n  user_transactions: Array<User_Transactions>;\n  /** fetch data from the table: \"user_transactions\" using primary key columns */\n  user_transactions_by_pk?: Maybe<User_Transactions>;\n  /** fetch data from the table in a streaming manner : \"user_transactions\" */\n  user_transactions_stream: Array<User_Transactions>;\n};\n\n\nexport type Subscription_RootAccount_TransactionsArgs = {\n  distinct_on?: InputMaybe<Array<Account_Transactions_Select_Column>>;\n  limit?: InputMaybe<Scalars['Int']>;\n  offset?: InputMaybe<Scalars['Int']>;\n  order_by?: InputMaybe<Array<Account_Transactions_Order_By>>;\n  where?: InputMaybe<Account_Transactions_Bool_Exp>;\n};\n\n\nexport type Subscription_RootAccount_Transactions_AggregateArgs = {\n  distinct_on?: InputMaybe<Array<Account_Transactions_Select_Column>>;\n  limit?: InputMaybe<Scalars['Int']>;\n  offset?: InputMaybe<Scalars['Int']>;\n  order_by?: InputMaybe<Array<Account_Transactions_Order_By>>;\n  where?: InputMaybe<Account_Transactions_Bool_Exp>;\n};\n\n\nexport type Subscription_RootAccount_Transactions_By_PkArgs = {\n  account_address: Scalars['String'];\n  transaction_version: Scalars['bigint'];\n};\n\n\nexport type Subscription_RootAccount_Transactions_StreamArgs = {\n  batch_size: Scalars['Int'];\n  cursor: Array<InputMaybe<Account_Transactions_Stream_Cursor_Input>>;\n  where?: InputMaybe<Account_Transactions_Bool_Exp>;\n};\n\n\nexport type Subscription_RootAddress_Events_SummaryArgs = {\n  distinct_on?: InputMaybe<Array<Address_Events_Summary_Select_Column>>;\n  limit?: InputMaybe<Scalars['Int']>;\n  offset?: InputMaybe<Scalars['Int']>;\n  order_by?: InputMaybe<Array<Address_Events_Summary_Order_By>>;\n  where?: InputMaybe<Address_Events_Summary_Bool_Exp>;\n};\n\n\nexport type Subscription_RootAddress_Events_Summary_StreamArgs = {\n  batch_size: Scalars['Int'];\n  cursor: Array<InputMaybe<Address_Events_Summary_Stream_Cursor_Input>>;\n  where?: InputMaybe<Address_Events_Summary_Bool_Exp>;\n};\n\n\nexport type Subscription_RootAddress_Version_From_EventsArgs = {\n  distinct_on?: InputMaybe<Array<Address_Version_From_Events_Select_Column>>;\n  limit?: InputMaybe<Scalars['Int']>;\n  offset?: InputMaybe<Scalars['Int']>;\n  order_by?: InputMaybe<Array<Address_Version_From_Events_Order_By>>;\n  where?: InputMaybe<Address_Version_From_Events_Bool_Exp>;\n};\n\n\nexport type Subscription_RootAddress_Version_From_Events_AggregateArgs = {\n  distinct_on?: InputMaybe<Array<Address_Version_From_Events_Select_Column>>;\n  limit?: InputMaybe<Scalars['Int']>;\n  offset?: InputMaybe<Scalars['Int']>;\n  order_by?: InputMaybe<Array<Address_Version_From_Events_Order_By>>;\n  where?: InputMaybe<Address_Version_From_Events_Bool_Exp>;\n};\n\n\nexport type Subscription_RootAddress_Version_From_Events_StreamArgs = {\n  batch_size: Scalars['Int'];\n  cursor: Array<InputMaybe<Address_Version_From_Events_Stream_Cursor_Input>>;\n  where?: InputMaybe<Address_Version_From_Events_Bool_Exp>;\n};\n\n\nexport type Subscription_RootAddress_Version_From_Move_ResourcesArgs = {\n  distinct_on?: InputMaybe<Array<Address_Version_From_Move_Resources_Select_Column>>;\n  limit?: InputMaybe<Scalars['Int']>;\n  offset?: InputMaybe<Scalars['Int']>;\n  order_by?: InputMaybe<Array<Address_Version_From_Move_Resources_Order_By>>;\n  where?: InputMaybe<Address_Version_From_Move_Resources_Bool_Exp>;\n};\n\n\nexport type Subscription_RootAddress_Version_From_Move_Resources_AggregateArgs = {\n  distinct_on?: InputMaybe<Array<Address_Version_From_Move_Resources_Select_Column>>;\n  limit?: InputMaybe<Scalars['Int']>;\n  offset?: InputMaybe<Scalars['Int']>;\n  order_by?: InputMaybe<Array<Address_Version_From_Move_Resources_Order_By>>;\n  where?: InputMaybe<Address_Version_From_Move_Resources_Bool_Exp>;\n};\n\n\nexport type Subscription_RootAddress_Version_From_Move_Resources_StreamArgs = {\n  batch_size: Scalars['Int'];\n  cursor: Array<InputMaybe<Address_Version_From_Move_Resources_Stream_Cursor_Input>>;\n  where?: InputMaybe<Address_Version_From_Move_Resources_Bool_Exp>;\n};\n\n\nexport type Subscription_RootBlock_Metadata_TransactionsArgs = {\n  distinct_on?: InputMaybe<Array<Block_Metadata_Transactions_Select_Column>>;\n  limit?: InputMaybe<Scalars['Int']>;\n  offset?: InputMaybe<Scalars['Int']>;\n  order_by?: InputMaybe<Array<Block_Metadata_Transactions_Order_By>>;\n  where?: InputMaybe<Block_Metadata_Transactions_Bool_Exp>;\n};\n\n\nexport type Subscription_RootBlock_Metadata_Transactions_By_PkArgs = {\n  version: Scalars['bigint'];\n};\n\n\nexport type Subscription_RootBlock_Metadata_Transactions_StreamArgs = {\n  batch_size: Scalars['Int'];\n  cursor: Array<InputMaybe<Block_Metadata_Transactions_Stream_Cursor_Input>>;\n  where?: InputMaybe<Block_Metadata_Transactions_Bool_Exp>;\n};\n\n\nexport type Subscription_RootCoin_ActivitiesArgs = {\n  distinct_on?: InputMaybe<Array<Coin_Activities_Select_Column>>;\n  limit?: InputMaybe<Scalars['Int']>;\n  offset?: InputMaybe<Scalars['Int']>;\n  order_by?: InputMaybe<Array<Coin_Activities_Order_By>>;\n  where?: InputMaybe<Coin_Activities_Bool_Exp>;\n};\n\n\nexport type Subscription_RootCoin_Activities_AggregateArgs = {\n  distinct_on?: InputMaybe<Array<Coin_Activities_Select_Column>>;\n  limit?: InputMaybe<Scalars['Int']>;\n  offset?: InputMaybe<Scalars['Int']>;\n  order_by?: InputMaybe<Array<Coin_Activities_Order_By>>;\n  where?: InputMaybe<Coin_Activities_Bool_Exp>;\n};\n\n\nexport type Subscription_RootCoin_Activities_By_PkArgs = {\n  event_account_address: Scalars['String'];\n  event_creation_number: Scalars['bigint'];\n  event_sequence_number: Scalars['bigint'];\n  transaction_version: Scalars['bigint'];\n};\n\n\nexport type Subscription_RootCoin_Activities_StreamArgs = {\n  batch_size: Scalars['Int'];\n  cursor: Array<InputMaybe<Coin_Activities_Stream_Cursor_Input>>;\n  where?: InputMaybe<Coin_Activities_Bool_Exp>;\n};\n\n\nexport type Subscription_RootCoin_BalancesArgs = {\n  distinct_on?: InputMaybe<Array<Coin_Balances_Select_Column>>;\n  limit?: InputMaybe<Scalars['Int']>;\n  offset?: InputMaybe<Scalars['Int']>;\n  order_by?: InputMaybe<Array<Coin_Balances_Order_By>>;\n  where?: InputMaybe<Coin_Balances_Bool_Exp>;\n};\n\n\nexport type Subscription_RootCoin_Balances_By_PkArgs = {\n  coin_type_hash: Scalars['String'];\n  owner_address: Scalars['String'];\n  transaction_version: Scalars['bigint'];\n};\n\n\nexport type Subscription_RootCoin_Balances_StreamArgs = {\n  batch_size: Scalars['Int'];\n  cursor: Array<InputMaybe<Coin_Balances_Stream_Cursor_Input>>;\n  where?: InputMaybe<Coin_Balances_Bool_Exp>;\n};\n\n\nexport type Subscription_RootCoin_InfosArgs = {\n  distinct_on?: InputMaybe<Array<Coin_Infos_Select_Column>>;\n  limit?: InputMaybe<Scalars['Int']>;\n  offset?: InputMaybe<Scalars['Int']>;\n  order_by?: InputMaybe<Array<Coin_Infos_Order_By>>;\n  where?: InputMaybe<Coin_Infos_Bool_Exp>;\n};\n\n\nexport type Subscription_RootCoin_Infos_By_PkArgs = {\n  coin_type_hash: Scalars['String'];\n};\n\n\nexport type Subscription_RootCoin_Infos_StreamArgs = {\n  batch_size: Scalars['Int'];\n  cursor: Array<InputMaybe<Coin_Infos_Stream_Cursor_Input>>;\n  where?: InputMaybe<Coin_Infos_Bool_Exp>;\n};\n\n\nexport type Subscription_RootCoin_SupplyArgs = {\n  distinct_on?: InputMaybe<Array<Coin_Supply_Select_Column>>;\n  limit?: InputMaybe<Scalars['Int']>;\n  offset?: InputMaybe<Scalars['Int']>;\n  order_by?: InputMaybe<Array<Coin_Supply_Order_By>>;\n  where?: InputMaybe<Coin_Supply_Bool_Exp>;\n};\n\n\nexport type Subscription_RootCoin_Supply_By_PkArgs = {\n  coin_type_hash: Scalars['String'];\n  transaction_version: Scalars['bigint'];\n};\n\n\nexport type Subscription_RootCoin_Supply_StreamArgs = {\n  batch_size: Scalars['Int'];\n  cursor: Array<InputMaybe<Coin_Supply_Stream_Cursor_Input>>;\n  where?: InputMaybe<Coin_Supply_Bool_Exp>;\n};\n\n\nexport type Subscription_RootCollection_DatasArgs = {\n  distinct_on?: InputMaybe<Array<Collection_Datas_Select_Column>>;\n  limit?: InputMaybe<Scalars['Int']>;\n  offset?: InputMaybe<Scalars['Int']>;\n  order_by?: InputMaybe<Array<Collection_Datas_Order_By>>;\n  where?: InputMaybe<Collection_Datas_Bool_Exp>;\n};\n\n\nexport type Subscription_RootCollection_Datas_By_PkArgs = {\n  collection_data_id_hash: Scalars['String'];\n  transaction_version: Scalars['bigint'];\n};\n\n\nexport type Subscription_RootCollection_Datas_StreamArgs = {\n  batch_size: Scalars['Int'];\n  cursor: Array<InputMaybe<Collection_Datas_Stream_Cursor_Input>>;\n  where?: InputMaybe<Collection_Datas_Bool_Exp>;\n};\n\n\nexport type Subscription_RootCurrent_Ans_LookupArgs = {\n  distinct_on?: InputMaybe<Array<Current_Ans_Lookup_Select_Column>>;\n  limit?: InputMaybe<Scalars['Int']>;\n  offset?: InputMaybe<Scalars['Int']>;\n  order_by?: InputMaybe<Array<Current_Ans_Lookup_Order_By>>;\n  where?: InputMaybe<Current_Ans_Lookup_Bool_Exp>;\n};\n\n\nexport type Subscription_RootCurrent_Ans_Lookup_By_PkArgs = {\n  domain: Scalars['String'];\n  subdomain: Scalars['String'];\n};\n\n\nexport type Subscription_RootCurrent_Ans_Lookup_StreamArgs = {\n  batch_size: Scalars['Int'];\n  cursor: Array<InputMaybe<Current_Ans_Lookup_Stream_Cursor_Input>>;\n  where?: InputMaybe<Current_Ans_Lookup_Bool_Exp>;\n};\n\n\nexport type Subscription_RootCurrent_Aptos_NamesArgs = {\n  distinct_on?: InputMaybe<Array<Current_Aptos_Names_Select_Column>>;\n  limit?: InputMaybe<Scalars['Int']>;\n  offset?: InputMaybe<Scalars['Int']>;\n  order_by?: InputMaybe<Array<Current_Aptos_Names_Order_By>>;\n  where?: InputMaybe<Current_Aptos_Names_Bool_Exp>;\n};\n\n\nexport type Subscription_RootCurrent_Aptos_Names_StreamArgs = {\n  batch_size: Scalars['Int'];\n  cursor: Array<InputMaybe<Current_Aptos_Names_Stream_Cursor_Input>>;\n  where?: InputMaybe<Current_Aptos_Names_Bool_Exp>;\n};\n\n\nexport type Subscription_RootCurrent_Coin_BalancesArgs = {\n  distinct_on?: InputMaybe<Array<Current_Coin_Balances_Select_Column>>;\n  limit?: InputMaybe<Scalars['Int']>;\n  offset?: InputMaybe<Scalars['Int']>;\n  order_by?: InputMaybe<Array<Current_Coin_Balances_Order_By>>;\n  where?: InputMaybe<Current_Coin_Balances_Bool_Exp>;\n};\n\n\nexport type Subscription_RootCurrent_Coin_Balances_By_PkArgs = {\n  coin_type_hash: Scalars['String'];\n  owner_address: Scalars['String'];\n};\n\n\nexport type Subscription_RootCurrent_Coin_Balances_StreamArgs = {\n  batch_size: Scalars['Int'];\n  cursor: Array<InputMaybe<Current_Coin_Balances_Stream_Cursor_Input>>;\n  where?: InputMaybe<Current_Coin_Balances_Bool_Exp>;\n};\n\n\nexport type Subscription_RootCurrent_Collection_DatasArgs = {\n  distinct_on?: InputMaybe<Array<Current_Collection_Datas_Select_Column>>;\n  limit?: InputMaybe<Scalars['Int']>;\n  offset?: InputMaybe<Scalars['Int']>;\n  order_by?: InputMaybe<Array<Current_Collection_Datas_Order_By>>;\n  where?: InputMaybe<Current_Collection_Datas_Bool_Exp>;\n};\n\n\nexport type Subscription_RootCurrent_Collection_Datas_By_PkArgs = {\n  collection_data_id_hash: Scalars['String'];\n};\n\n\nexport type Subscription_RootCurrent_Collection_Datas_StreamArgs = {\n  batch_size: Scalars['Int'];\n  cursor: Array<InputMaybe<Current_Collection_Datas_Stream_Cursor_Input>>;\n  where?: InputMaybe<Current_Collection_Datas_Bool_Exp>;\n};\n\n\nexport type Subscription_RootCurrent_Collection_Ownership_V2_ViewArgs = {\n  distinct_on?: InputMaybe<Array<Current_Collection_Ownership_V2_View_Select_Column>>;\n  limit?: InputMaybe<Scalars['Int']>;\n  offset?: InputMaybe<Scalars['Int']>;\n  order_by?: InputMaybe<Array<Current_Collection_Ownership_V2_View_Order_By>>;\n  where?: InputMaybe<Current_Collection_Ownership_V2_View_Bool_Exp>;\n};\n\n\nexport type Subscription_RootCurrent_Collection_Ownership_V2_View_AggregateArgs = {\n  distinct_on?: InputMaybe<Array<Current_Collection_Ownership_V2_View_Select_Column>>;\n  limit?: InputMaybe<Scalars['Int']>;\n  offset?: InputMaybe<Scalars['Int']>;\n  order_by?: InputMaybe<Array<Current_Collection_Ownership_V2_View_Order_By>>;\n  where?: InputMaybe<Current_Collection_Ownership_V2_View_Bool_Exp>;\n};\n\n\nexport type Subscription_RootCurrent_Collection_Ownership_V2_View_StreamArgs = {\n  batch_size: Scalars['Int'];\n  cursor: Array<InputMaybe<Current_Collection_Ownership_V2_View_Stream_Cursor_Input>>;\n  where?: InputMaybe<Current_Collection_Ownership_V2_View_Bool_Exp>;\n};\n\n\nexport type Subscription_RootCurrent_Collections_V2Args = {\n  distinct_on?: InputMaybe<Array<Current_Collections_V2_Select_Column>>;\n  limit?: InputMaybe<Scalars['Int']>;\n  offset?: InputMaybe<Scalars['Int']>;\n  order_by?: InputMaybe<Array<Current_Collections_V2_Order_By>>;\n  where?: InputMaybe<Current_Collections_V2_Bool_Exp>;\n};\n\n\nexport type Subscription_RootCurrent_Collections_V2_By_PkArgs = {\n  collection_id: Scalars['String'];\n};\n\n\nexport type Subscription_RootCurrent_Collections_V2_StreamArgs = {\n  batch_size: Scalars['Int'];\n  cursor: Array<InputMaybe<Current_Collections_V2_Stream_Cursor_Input>>;\n  where?: InputMaybe<Current_Collections_V2_Bool_Exp>;\n};\n\n\nexport type Subscription_RootCurrent_Delegated_Staking_Pool_BalancesArgs = {\n  distinct_on?: InputMaybe<Array<Current_Delegated_Staking_Pool_Balances_Select_Column>>;\n  limit?: InputMaybe<Scalars['Int']>;\n  offset?: InputMaybe<Scalars['Int']>;\n  order_by?: InputMaybe<Array<Current_Delegated_Staking_Pool_Balances_Order_By>>;\n  where?: InputMaybe<Current_Delegated_Staking_Pool_Balances_Bool_Exp>;\n};\n\n\nexport type Subscription_RootCurrent_Delegated_Staking_Pool_Balances_By_PkArgs = {\n  staking_pool_address: Scalars['String'];\n};\n\n\nexport type Subscription_RootCurrent_Delegated_Staking_Pool_Balances_StreamArgs = {\n  batch_size: Scalars['Int'];\n  cursor: Array<InputMaybe<Current_Delegated_Staking_Pool_Balances_Stream_Cursor_Input>>;\n  where?: InputMaybe<Current_Delegated_Staking_Pool_Balances_Bool_Exp>;\n};\n\n\nexport type Subscription_RootCurrent_Delegated_VoterArgs = {\n  distinct_on?: InputMaybe<Array<Current_Delegated_Voter_Select_Column>>;\n  limit?: InputMaybe<Scalars['Int']>;\n  offset?: InputMaybe<Scalars['Int']>;\n  order_by?: InputMaybe<Array<Current_Delegated_Voter_Order_By>>;\n  where?: InputMaybe<Current_Delegated_Voter_Bool_Exp>;\n};\n\n\nexport type Subscription_RootCurrent_Delegated_Voter_By_PkArgs = {\n  delegation_pool_address: Scalars['String'];\n  delegator_address: Scalars['String'];\n};\n\n\nexport type Subscription_RootCurrent_Delegated_Voter_StreamArgs = {\n  batch_size: Scalars['Int'];\n  cursor: Array<InputMaybe<Current_Delegated_Voter_Stream_Cursor_Input>>;\n  where?: InputMaybe<Current_Delegated_Voter_Bool_Exp>;\n};\n\n\nexport type Subscription_RootCurrent_Delegator_BalancesArgs = {\n  distinct_on?: InputMaybe<Array<Current_Delegator_Balances_Select_Column>>;\n  limit?: InputMaybe<Scalars['Int']>;\n  offset?: InputMaybe<Scalars['Int']>;\n  order_by?: InputMaybe<Array<Current_Delegator_Balances_Order_By>>;\n  where?: InputMaybe<Current_Delegator_Balances_Bool_Exp>;\n};\n\n\nexport type Subscription_RootCurrent_Delegator_Balances_By_PkArgs = {\n  delegator_address: Scalars['String'];\n  pool_address: Scalars['String'];\n  pool_type: Scalars['String'];\n  table_handle: Scalars['String'];\n};\n\n\nexport type Subscription_RootCurrent_Delegator_Balances_StreamArgs = {\n  batch_size: Scalars['Int'];\n  cursor: Array<InputMaybe<Current_Delegator_Balances_Stream_Cursor_Input>>;\n  where?: InputMaybe<Current_Delegator_Balances_Bool_Exp>;\n};\n\n\nexport type Subscription_RootCurrent_Fungible_Asset_BalancesArgs = {\n  distinct_on?: InputMaybe<Array<Current_Fungible_Asset_Balances_Select_Column>>;\n  limit?: InputMaybe<Scalars['Int']>;\n  offset?: InputMaybe<Scalars['Int']>;\n  order_by?: InputMaybe<Array<Current_Fungible_Asset_Balances_Order_By>>;\n  where?: InputMaybe<Current_Fungible_Asset_Balances_Bool_Exp>;\n};\n\n\nexport type Subscription_RootCurrent_Fungible_Asset_Balances_AggregateArgs = {\n  distinct_on?: InputMaybe<Array<Current_Fungible_Asset_Balances_Select_Column>>;\n  limit?: InputMaybe<Scalars['Int']>;\n  offset?: InputMaybe<Scalars['Int']>;\n  order_by?: InputMaybe<Array<Current_Fungible_Asset_Balances_Order_By>>;\n  where?: InputMaybe<Current_Fungible_Asset_Balances_Bool_Exp>;\n};\n\n\nexport type Subscription_RootCurrent_Fungible_Asset_Balances_By_PkArgs = {\n  storage_id: Scalars['String'];\n};\n\n\nexport type Subscription_RootCurrent_Fungible_Asset_Balances_StreamArgs = {\n  batch_size: Scalars['Int'];\n  cursor: Array<InputMaybe<Current_Fungible_Asset_Balances_Stream_Cursor_Input>>;\n  where?: InputMaybe<Current_Fungible_Asset_Balances_Bool_Exp>;\n};\n\n\nexport type Subscription_RootCurrent_ObjectsArgs = {\n  distinct_on?: InputMaybe<Array<Current_Objects_Select_Column>>;\n  limit?: InputMaybe<Scalars['Int']>;\n  offset?: InputMaybe<Scalars['Int']>;\n  order_by?: InputMaybe<Array<Current_Objects_Order_By>>;\n  where?: InputMaybe<Current_Objects_Bool_Exp>;\n};\n\n\nexport type Subscription_RootCurrent_Objects_By_PkArgs = {\n  object_address: Scalars['String'];\n};\n\n\nexport type Subscription_RootCurrent_Objects_StreamArgs = {\n  batch_size: Scalars['Int'];\n  cursor: Array<InputMaybe<Current_Objects_Stream_Cursor_Input>>;\n  where?: InputMaybe<Current_Objects_Bool_Exp>;\n};\n\n\nexport type Subscription_RootCurrent_Staking_Pool_VoterArgs = {\n  distinct_on?: InputMaybe<Array<Current_Staking_Pool_Voter_Select_Column>>;\n  limit?: InputMaybe<Scalars['Int']>;\n  offset?: InputMaybe<Scalars['Int']>;\n  order_by?: InputMaybe<Array<Current_Staking_Pool_Voter_Order_By>>;\n  where?: InputMaybe<Current_Staking_Pool_Voter_Bool_Exp>;\n};\n\n\nexport type Subscription_RootCurrent_Staking_Pool_Voter_By_PkArgs = {\n  staking_pool_address: Scalars['String'];\n};\n\n\nexport type Subscription_RootCurrent_Staking_Pool_Voter_StreamArgs = {\n  batch_size: Scalars['Int'];\n  cursor: Array<InputMaybe<Current_Staking_Pool_Voter_Stream_Cursor_Input>>;\n  where?: InputMaybe<Current_Staking_Pool_Voter_Bool_Exp>;\n};\n\n\nexport type Subscription_RootCurrent_Table_ItemsArgs = {\n  distinct_on?: InputMaybe<Array<Current_Table_Items_Select_Column>>;\n  limit?: InputMaybe<Scalars['Int']>;\n  offset?: InputMaybe<Scalars['Int']>;\n  order_by?: InputMaybe<Array<Current_Table_Items_Order_By>>;\n  where?: InputMaybe<Current_Table_Items_Bool_Exp>;\n};\n\n\nexport type Subscription_RootCurrent_Table_Items_By_PkArgs = {\n  key_hash: Scalars['String'];\n  table_handle: Scalars['String'];\n};\n\n\nexport type Subscription_RootCurrent_Table_Items_StreamArgs = {\n  batch_size: Scalars['Int'];\n  cursor: Array<InputMaybe<Current_Table_Items_Stream_Cursor_Input>>;\n  where?: InputMaybe<Current_Table_Items_Bool_Exp>;\n};\n\n\nexport type Subscription_RootCurrent_Token_DatasArgs = {\n  distinct_on?: InputMaybe<Array<Current_Token_Datas_Select_Column>>;\n  limit?: InputMaybe<Scalars['Int']>;\n  offset?: InputMaybe<Scalars['Int']>;\n  order_by?: InputMaybe<Array<Current_Token_Datas_Order_By>>;\n  where?: InputMaybe<Current_Token_Datas_Bool_Exp>;\n};\n\n\nexport type Subscription_RootCurrent_Token_Datas_By_PkArgs = {\n  token_data_id_hash: Scalars['String'];\n};\n\n\nexport type Subscription_RootCurrent_Token_Datas_StreamArgs = {\n  batch_size: Scalars['Int'];\n  cursor: Array<InputMaybe<Current_Token_Datas_Stream_Cursor_Input>>;\n  where?: InputMaybe<Current_Token_Datas_Bool_Exp>;\n};\n\n\nexport type Subscription_RootCurrent_Token_Datas_V2Args = {\n  distinct_on?: InputMaybe<Array<Current_Token_Datas_V2_Select_Column>>;\n  limit?: InputMaybe<Scalars['Int']>;\n  offset?: InputMaybe<Scalars['Int']>;\n  order_by?: InputMaybe<Array<Current_Token_Datas_V2_Order_By>>;\n  where?: InputMaybe<Current_Token_Datas_V2_Bool_Exp>;\n};\n\n\nexport type Subscription_RootCurrent_Token_Datas_V2_By_PkArgs = {\n  token_data_id: Scalars['String'];\n};\n\n\nexport type Subscription_RootCurrent_Token_Datas_V2_StreamArgs = {\n  batch_size: Scalars['Int'];\n  cursor: Array<InputMaybe<Current_Token_Datas_V2_Stream_Cursor_Input>>;\n  where?: InputMaybe<Current_Token_Datas_V2_Bool_Exp>;\n};\n\n\nexport type Subscription_RootCurrent_Token_OwnershipsArgs = {\n  distinct_on?: InputMaybe<Array<Current_Token_Ownerships_Select_Column>>;\n  limit?: InputMaybe<Scalars['Int']>;\n  offset?: InputMaybe<Scalars['Int']>;\n  order_by?: InputMaybe<Array<Current_Token_Ownerships_Order_By>>;\n  where?: InputMaybe<Current_Token_Ownerships_Bool_Exp>;\n};\n\n\nexport type Subscription_RootCurrent_Token_Ownerships_AggregateArgs = {\n  distinct_on?: InputMaybe<Array<Current_Token_Ownerships_Select_Column>>;\n  limit?: InputMaybe<Scalars['Int']>;\n  offset?: InputMaybe<Scalars['Int']>;\n  order_by?: InputMaybe<Array<Current_Token_Ownerships_Order_By>>;\n  where?: InputMaybe<Current_Token_Ownerships_Bool_Exp>;\n};\n\n\nexport type Subscription_RootCurrent_Token_Ownerships_By_PkArgs = {\n  owner_address: Scalars['String'];\n  property_version: Scalars['numeric'];\n  token_data_id_hash: Scalars['String'];\n};\n\n\nexport type Subscription_RootCurrent_Token_Ownerships_StreamArgs = {\n  batch_size: Scalars['Int'];\n  cursor: Array<InputMaybe<Current_Token_Ownerships_Stream_Cursor_Input>>;\n  where?: InputMaybe<Current_Token_Ownerships_Bool_Exp>;\n};\n\n\nexport type Subscription_RootCurrent_Token_Ownerships_V2Args = {\n  distinct_on?: InputMaybe<Array<Current_Token_Ownerships_V2_Select_Column>>;\n  limit?: InputMaybe<Scalars['Int']>;\n  offset?: InputMaybe<Scalars['Int']>;\n  order_by?: InputMaybe<Array<Current_Token_Ownerships_V2_Order_By>>;\n  where?: InputMaybe<Current_Token_Ownerships_V2_Bool_Exp>;\n};\n\n\nexport type Subscription_RootCurrent_Token_Ownerships_V2_AggregateArgs = {\n  distinct_on?: InputMaybe<Array<Current_Token_Ownerships_V2_Select_Column>>;\n  limit?: InputMaybe<Scalars['Int']>;\n  offset?: InputMaybe<Scalars['Int']>;\n  order_by?: InputMaybe<Array<Current_Token_Ownerships_V2_Order_By>>;\n  where?: InputMaybe<Current_Token_Ownerships_V2_Bool_Exp>;\n};\n\n\nexport type Subscription_RootCurrent_Token_Ownerships_V2_By_PkArgs = {\n  owner_address: Scalars['String'];\n  property_version_v1: Scalars['numeric'];\n  storage_id: Scalars['String'];\n  token_data_id: Scalars['String'];\n};\n\n\nexport type Subscription_RootCurrent_Token_Ownerships_V2_StreamArgs = {\n  batch_size: Scalars['Int'];\n  cursor: Array<InputMaybe<Current_Token_Ownerships_V2_Stream_Cursor_Input>>;\n  where?: InputMaybe<Current_Token_Ownerships_V2_Bool_Exp>;\n};\n\n\nexport type Subscription_RootCurrent_Token_Pending_ClaimsArgs = {\n  distinct_on?: InputMaybe<Array<Current_Token_Pending_Claims_Select_Column>>;\n  limit?: InputMaybe<Scalars['Int']>;\n  offset?: InputMaybe<Scalars['Int']>;\n  order_by?: InputMaybe<Array<Current_Token_Pending_Claims_Order_By>>;\n  where?: InputMaybe<Current_Token_Pending_Claims_Bool_Exp>;\n};\n\n\nexport type Subscription_RootCurrent_Token_Pending_Claims_By_PkArgs = {\n  from_address: Scalars['String'];\n  property_version: Scalars['numeric'];\n  to_address: Scalars['String'];\n  token_data_id_hash: Scalars['String'];\n};\n\n\nexport type Subscription_RootCurrent_Token_Pending_Claims_StreamArgs = {\n  batch_size: Scalars['Int'];\n  cursor: Array<InputMaybe<Current_Token_Pending_Claims_Stream_Cursor_Input>>;\n  where?: InputMaybe<Current_Token_Pending_Claims_Bool_Exp>;\n};\n\n\nexport type Subscription_RootDelegated_Staking_ActivitiesArgs = {\n  distinct_on?: InputMaybe<Array<Delegated_Staking_Activities_Select_Column>>;\n  limit?: InputMaybe<Scalars['Int']>;\n  offset?: InputMaybe<Scalars['Int']>;\n  order_by?: InputMaybe<Array<Delegated_Staking_Activities_Order_By>>;\n  where?: InputMaybe<Delegated_Staking_Activities_Bool_Exp>;\n};\n\n\nexport type Subscription_RootDelegated_Staking_Activities_By_PkArgs = {\n  event_index: Scalars['bigint'];\n  transaction_version: Scalars['bigint'];\n};\n\n\nexport type Subscription_RootDelegated_Staking_Activities_StreamArgs = {\n  batch_size: Scalars['Int'];\n  cursor: Array<InputMaybe<Delegated_Staking_Activities_Stream_Cursor_Input>>;\n  where?: InputMaybe<Delegated_Staking_Activities_Bool_Exp>;\n};\n\n\nexport type Subscription_RootDelegated_Staking_PoolsArgs = {\n  distinct_on?: InputMaybe<Array<Delegated_Staking_Pools_Select_Column>>;\n  limit?: InputMaybe<Scalars['Int']>;\n  offset?: InputMaybe<Scalars['Int']>;\n  order_by?: InputMaybe<Array<Delegated_Staking_Pools_Order_By>>;\n  where?: InputMaybe<Delegated_Staking_Pools_Bool_Exp>;\n};\n\n\nexport type Subscription_RootDelegated_Staking_Pools_By_PkArgs = {\n  staking_pool_address: Scalars['String'];\n};\n\n\nexport type Subscription_RootDelegated_Staking_Pools_StreamArgs = {\n  batch_size: Scalars['Int'];\n  cursor: Array<InputMaybe<Delegated_Staking_Pools_Stream_Cursor_Input>>;\n  where?: InputMaybe<Delegated_Staking_Pools_Bool_Exp>;\n};\n\n\nexport type Subscription_RootDelegator_Distinct_PoolArgs = {\n  distinct_on?: InputMaybe<Array<Delegator_Distinct_Pool_Select_Column>>;\n  limit?: InputMaybe<Scalars['Int']>;\n  offset?: InputMaybe<Scalars['Int']>;\n  order_by?: InputMaybe<Array<Delegator_Distinct_Pool_Order_By>>;\n  where?: InputMaybe<Delegator_Distinct_Pool_Bool_Exp>;\n};\n\n\nexport type Subscription_RootDelegator_Distinct_Pool_AggregateArgs = {\n  distinct_on?: InputMaybe<Array<Delegator_Distinct_Pool_Select_Column>>;\n  limit?: InputMaybe<Scalars['Int']>;\n  offset?: InputMaybe<Scalars['Int']>;\n  order_by?: InputMaybe<Array<Delegator_Distinct_Pool_Order_By>>;\n  where?: InputMaybe<Delegator_Distinct_Pool_Bool_Exp>;\n};\n\n\nexport type Subscription_RootDelegator_Distinct_Pool_StreamArgs = {\n  batch_size: Scalars['Int'];\n  cursor: Array<InputMaybe<Delegator_Distinct_Pool_Stream_Cursor_Input>>;\n  where?: InputMaybe<Delegator_Distinct_Pool_Bool_Exp>;\n};\n\n\nexport type Subscription_RootEventsArgs = {\n  distinct_on?: InputMaybe<Array<Events_Select_Column>>;\n  limit?: InputMaybe<Scalars['Int']>;\n  offset?: InputMaybe<Scalars['Int']>;\n  order_by?: InputMaybe<Array<Events_Order_By>>;\n  where?: InputMaybe<Events_Bool_Exp>;\n};\n\n\nexport type Subscription_RootEvents_By_PkArgs = {\n  account_address: Scalars['String'];\n  creation_number: Scalars['bigint'];\n  sequence_number: Scalars['bigint'];\n};\n\n\nexport type Subscription_RootEvents_StreamArgs = {\n  batch_size: Scalars['Int'];\n  cursor: Array<InputMaybe<Events_Stream_Cursor_Input>>;\n  where?: InputMaybe<Events_Bool_Exp>;\n};\n\n\nexport type Subscription_RootFungible_Asset_ActivitiesArgs = {\n  distinct_on?: InputMaybe<Array<Fungible_Asset_Activities_Select_Column>>;\n  limit?: InputMaybe<Scalars['Int']>;\n  offset?: InputMaybe<Scalars['Int']>;\n  order_by?: InputMaybe<Array<Fungible_Asset_Activities_Order_By>>;\n  where?: InputMaybe<Fungible_Asset_Activities_Bool_Exp>;\n};\n\n\nexport type Subscription_RootFungible_Asset_Activities_By_PkArgs = {\n  event_index: Scalars['bigint'];\n  transaction_version: Scalars['bigint'];\n};\n\n\nexport type Subscription_RootFungible_Asset_Activities_StreamArgs = {\n  batch_size: Scalars['Int'];\n  cursor: Array<InputMaybe<Fungible_Asset_Activities_Stream_Cursor_Input>>;\n  where?: InputMaybe<Fungible_Asset_Activities_Bool_Exp>;\n};\n\n\nexport type Subscription_RootFungible_Asset_MetadataArgs = {\n  distinct_on?: InputMaybe<Array<Fungible_Asset_Metadata_Select_Column>>;\n  limit?: InputMaybe<Scalars['Int']>;\n  offset?: InputMaybe<Scalars['Int']>;\n  order_by?: InputMaybe<Array<Fungible_Asset_Metadata_Order_By>>;\n  where?: InputMaybe<Fungible_Asset_Metadata_Bool_Exp>;\n};\n\n\nexport type Subscription_RootFungible_Asset_Metadata_By_PkArgs = {\n  asset_type: Scalars['String'];\n};\n\n\nexport type Subscription_RootFungible_Asset_Metadata_StreamArgs = {\n  batch_size: Scalars['Int'];\n  cursor: Array<InputMaybe<Fungible_Asset_Metadata_Stream_Cursor_Input>>;\n  where?: InputMaybe<Fungible_Asset_Metadata_Bool_Exp>;\n};\n\n\nexport type Subscription_RootIndexer_StatusArgs = {\n  distinct_on?: InputMaybe<Array<Indexer_Status_Select_Column>>;\n  limit?: InputMaybe<Scalars['Int']>;\n  offset?: InputMaybe<Scalars['Int']>;\n  order_by?: InputMaybe<Array<Indexer_Status_Order_By>>;\n  where?: InputMaybe<Indexer_Status_Bool_Exp>;\n};\n\n\nexport type Subscription_RootIndexer_Status_By_PkArgs = {\n  db: Scalars['String'];\n};\n\n\nexport type Subscription_RootIndexer_Status_StreamArgs = {\n  batch_size: Scalars['Int'];\n  cursor: Array<InputMaybe<Indexer_Status_Stream_Cursor_Input>>;\n  where?: InputMaybe<Indexer_Status_Bool_Exp>;\n};\n\n\nexport type Subscription_RootLedger_InfosArgs = {\n  distinct_on?: InputMaybe<Array<Ledger_Infos_Select_Column>>;\n  limit?: InputMaybe<Scalars['Int']>;\n  offset?: InputMaybe<Scalars['Int']>;\n  order_by?: InputMaybe<Array<Ledger_Infos_Order_By>>;\n  where?: InputMaybe<Ledger_Infos_Bool_Exp>;\n};\n\n\nexport type Subscription_RootLedger_Infos_By_PkArgs = {\n  chain_id: Scalars['bigint'];\n};\n\n\nexport type Subscription_RootLedger_Infos_StreamArgs = {\n  batch_size: Scalars['Int'];\n  cursor: Array<InputMaybe<Ledger_Infos_Stream_Cursor_Input>>;\n  where?: InputMaybe<Ledger_Infos_Bool_Exp>;\n};\n\n\nexport type Subscription_RootMove_ResourcesArgs = {\n  distinct_on?: InputMaybe<Array<Move_Resources_Select_Column>>;\n  limit?: InputMaybe<Scalars['Int']>;\n  offset?: InputMaybe<Scalars['Int']>;\n  order_by?: InputMaybe<Array<Move_Resources_Order_By>>;\n  where?: InputMaybe<Move_Resources_Bool_Exp>;\n};\n\n\nexport type Subscription_RootMove_Resources_AggregateArgs = {\n  distinct_on?: InputMaybe<Array<Move_Resources_Select_Column>>;\n  limit?: InputMaybe<Scalars['Int']>;\n  offset?: InputMaybe<Scalars['Int']>;\n  order_by?: InputMaybe<Array<Move_Resources_Order_By>>;\n  where?: InputMaybe<Move_Resources_Bool_Exp>;\n};\n\n\nexport type Subscription_RootMove_Resources_StreamArgs = {\n  batch_size: Scalars['Int'];\n  cursor: Array<InputMaybe<Move_Resources_Stream_Cursor_Input>>;\n  where?: InputMaybe<Move_Resources_Bool_Exp>;\n};\n\n\nexport type Subscription_RootNft_Marketplace_V2_Current_Nft_Marketplace_AuctionsArgs = {\n  distinct_on?: InputMaybe<Array<Nft_Marketplace_V2_Current_Nft_Marketplace_Auctions_Select_Column>>;\n  limit?: InputMaybe<Scalars['Int']>;\n  offset?: InputMaybe<Scalars['Int']>;\n  order_by?: InputMaybe<Array<Nft_Marketplace_V2_Current_Nft_Marketplace_Auctions_Order_By>>;\n  where?: InputMaybe<Nft_Marketplace_V2_Current_Nft_Marketplace_Auctions_Bool_Exp>;\n};\n\n\nexport type Subscription_RootNft_Marketplace_V2_Current_Nft_Marketplace_Auctions_By_PkArgs = {\n  listing_id: Scalars['String'];\n  token_data_id: Scalars['String'];\n};\n\n\nexport type Subscription_RootNft_Marketplace_V2_Current_Nft_Marketplace_Auctions_StreamArgs = {\n  batch_size: Scalars['Int'];\n  cursor: Array<InputMaybe<Nft_Marketplace_V2_Current_Nft_Marketplace_Auctions_Stream_Cursor_Input>>;\n  where?: InputMaybe<Nft_Marketplace_V2_Current_Nft_Marketplace_Auctions_Bool_Exp>;\n};\n\n\nexport type Subscription_RootNft_Marketplace_V2_Current_Nft_Marketplace_Collection_OffersArgs = {\n  distinct_on?: InputMaybe<Array<Nft_Marketplace_V2_Current_Nft_Marketplace_Collection_Offers_Select_Column>>;\n  limit?: InputMaybe<Scalars['Int']>;\n  offset?: InputMaybe<Scalars['Int']>;\n  order_by?: InputMaybe<Array<Nft_Marketplace_V2_Current_Nft_Marketplace_Collection_Offers_Order_By>>;\n  where?: InputMaybe<Nft_Marketplace_V2_Current_Nft_Marketplace_Collection_Offers_Bool_Exp>;\n};\n\n\nexport type Subscription_RootNft_Marketplace_V2_Current_Nft_Marketplace_Collection_Offers_By_PkArgs = {\n  collection_id: Scalars['String'];\n  collection_offer_id: Scalars['String'];\n};\n\n\nexport type Subscription_RootNft_Marketplace_V2_Current_Nft_Marketplace_Collection_Offers_StreamArgs = {\n  batch_size: Scalars['Int'];\n  cursor: Array<InputMaybe<Nft_Marketplace_V2_Current_Nft_Marketplace_Collection_Offers_Stream_Cursor_Input>>;\n  where?: InputMaybe<Nft_Marketplace_V2_Current_Nft_Marketplace_Collection_Offers_Bool_Exp>;\n};\n\n\nexport type Subscription_RootNft_Marketplace_V2_Current_Nft_Marketplace_ListingsArgs = {\n  distinct_on?: InputMaybe<Array<Nft_Marketplace_V2_Current_Nft_Marketplace_Listings_Select_Column>>;\n  limit?: InputMaybe<Scalars['Int']>;\n  offset?: InputMaybe<Scalars['Int']>;\n  order_by?: InputMaybe<Array<Nft_Marketplace_V2_Current_Nft_Marketplace_Listings_Order_By>>;\n  where?: InputMaybe<Nft_Marketplace_V2_Current_Nft_Marketplace_Listings_Bool_Exp>;\n};\n\n\nexport type Subscription_RootNft_Marketplace_V2_Current_Nft_Marketplace_Listings_By_PkArgs = {\n  listing_id: Scalars['String'];\n  token_data_id: Scalars['String'];\n};\n\n\nexport type Subscription_RootNft_Marketplace_V2_Current_Nft_Marketplace_Listings_StreamArgs = {\n  batch_size: Scalars['Int'];\n  cursor: Array<InputMaybe<Nft_Marketplace_V2_Current_Nft_Marketplace_Listings_Stream_Cursor_Input>>;\n  where?: InputMaybe<Nft_Marketplace_V2_Current_Nft_Marketplace_Listings_Bool_Exp>;\n};\n\n\nexport type Subscription_RootNft_Marketplace_V2_Current_Nft_Marketplace_Token_OffersArgs = {\n  distinct_on?: InputMaybe<Array<Nft_Marketplace_V2_Current_Nft_Marketplace_Token_Offers_Select_Column>>;\n  limit?: InputMaybe<Scalars['Int']>;\n  offset?: InputMaybe<Scalars['Int']>;\n  order_by?: InputMaybe<Array<Nft_Marketplace_V2_Current_Nft_Marketplace_Token_Offers_Order_By>>;\n  where?: InputMaybe<Nft_Marketplace_V2_Current_Nft_Marketplace_Token_Offers_Bool_Exp>;\n};\n\n\nexport type Subscription_RootNft_Marketplace_V2_Current_Nft_Marketplace_Token_Offers_By_PkArgs = {\n  offer_id: Scalars['String'];\n  token_data_id: Scalars['String'];\n};\n\n\nexport type Subscription_RootNft_Marketplace_V2_Current_Nft_Marketplace_Token_Offers_StreamArgs = {\n  batch_size: Scalars['Int'];\n  cursor: Array<InputMaybe<Nft_Marketplace_V2_Current_Nft_Marketplace_Token_Offers_Stream_Cursor_Input>>;\n  where?: InputMaybe<Nft_Marketplace_V2_Current_Nft_Marketplace_Token_Offers_Bool_Exp>;\n};\n\n\nexport type Subscription_RootNft_Marketplace_V2_Nft_Marketplace_ActivitiesArgs = {\n  distinct_on?: InputMaybe<Array<Nft_Marketplace_V2_Nft_Marketplace_Activities_Select_Column>>;\n  limit?: InputMaybe<Scalars['Int']>;\n  offset?: InputMaybe<Scalars['Int']>;\n  order_by?: InputMaybe<Array<Nft_Marketplace_V2_Nft_Marketplace_Activities_Order_By>>;\n  where?: InputMaybe<Nft_Marketplace_V2_Nft_Marketplace_Activities_Bool_Exp>;\n};\n\n\nexport type Subscription_RootNft_Marketplace_V2_Nft_Marketplace_Activities_By_PkArgs = {\n  event_index: Scalars['bigint'];\n  transaction_version: Scalars['bigint'];\n};\n\n\nexport type Subscription_RootNft_Marketplace_V2_Nft_Marketplace_Activities_StreamArgs = {\n  batch_size: Scalars['Int'];\n  cursor: Array<InputMaybe<Nft_Marketplace_V2_Nft_Marketplace_Activities_Stream_Cursor_Input>>;\n  where?: InputMaybe<Nft_Marketplace_V2_Nft_Marketplace_Activities_Bool_Exp>;\n};\n\n\nexport type Subscription_RootNft_Metadata_Crawler_Parsed_Asset_UrisArgs = {\n  distinct_on?: InputMaybe<Array<Nft_Metadata_Crawler_Parsed_Asset_Uris_Select_Column>>;\n  limit?: InputMaybe<Scalars['Int']>;\n  offset?: InputMaybe<Scalars['Int']>;\n  order_by?: InputMaybe<Array<Nft_Metadata_Crawler_Parsed_Asset_Uris_Order_By>>;\n  where?: InputMaybe<Nft_Metadata_Crawler_Parsed_Asset_Uris_Bool_Exp>;\n};\n\n\nexport type Subscription_RootNft_Metadata_Crawler_Parsed_Asset_Uris_By_PkArgs = {\n  asset_uri: Scalars['String'];\n};\n\n\nexport type Subscription_RootNft_Metadata_Crawler_Parsed_Asset_Uris_StreamArgs = {\n  batch_size: Scalars['Int'];\n  cursor: Array<InputMaybe<Nft_Metadata_Crawler_Parsed_Asset_Uris_Stream_Cursor_Input>>;\n  where?: InputMaybe<Nft_Metadata_Crawler_Parsed_Asset_Uris_Bool_Exp>;\n};\n\n\nexport type Subscription_RootNum_Active_Delegator_Per_PoolArgs = {\n  distinct_on?: InputMaybe<Array<Num_Active_Delegator_Per_Pool_Select_Column>>;\n  limit?: InputMaybe<Scalars['Int']>;\n  offset?: InputMaybe<Scalars['Int']>;\n  order_by?: InputMaybe<Array<Num_Active_Delegator_Per_Pool_Order_By>>;\n  where?: InputMaybe<Num_Active_Delegator_Per_Pool_Bool_Exp>;\n};\n\n\nexport type Subscription_RootNum_Active_Delegator_Per_Pool_StreamArgs = {\n  batch_size: Scalars['Int'];\n  cursor: Array<InputMaybe<Num_Active_Delegator_Per_Pool_Stream_Cursor_Input>>;\n  where?: InputMaybe<Num_Active_Delegator_Per_Pool_Bool_Exp>;\n};\n\n\nexport type Subscription_RootProcessor_StatusArgs = {\n  distinct_on?: InputMaybe<Array<Processor_Status_Select_Column>>;\n  limit?: InputMaybe<Scalars['Int']>;\n  offset?: InputMaybe<Scalars['Int']>;\n  order_by?: InputMaybe<Array<Processor_Status_Order_By>>;\n  where?: InputMaybe<Processor_Status_Bool_Exp>;\n};\n\n\nexport type Subscription_RootProcessor_Status_By_PkArgs = {\n  processor: Scalars['String'];\n};\n\n\nexport type Subscription_RootProcessor_Status_StreamArgs = {\n  batch_size: Scalars['Int'];\n  cursor: Array<InputMaybe<Processor_Status_Stream_Cursor_Input>>;\n  where?: InputMaybe<Processor_Status_Bool_Exp>;\n};\n\n\nexport type Subscription_RootProposal_VotesArgs = {\n  distinct_on?: InputMaybe<Array<Proposal_Votes_Select_Column>>;\n  limit?: InputMaybe<Scalars['Int']>;\n  offset?: InputMaybe<Scalars['Int']>;\n  order_by?: InputMaybe<Array<Proposal_Votes_Order_By>>;\n  where?: InputMaybe<Proposal_Votes_Bool_Exp>;\n};\n\n\nexport type Subscription_RootProposal_Votes_AggregateArgs = {\n  distinct_on?: InputMaybe<Array<Proposal_Votes_Select_Column>>;\n  limit?: InputMaybe<Scalars['Int']>;\n  offset?: InputMaybe<Scalars['Int']>;\n  order_by?: InputMaybe<Array<Proposal_Votes_Order_By>>;\n  where?: InputMaybe<Proposal_Votes_Bool_Exp>;\n};\n\n\nexport type Subscription_RootProposal_Votes_By_PkArgs = {\n  proposal_id: Scalars['bigint'];\n  transaction_version: Scalars['bigint'];\n  voter_address: Scalars['String'];\n};\n\n\nexport type Subscription_RootProposal_Votes_StreamArgs = {\n  batch_size: Scalars['Int'];\n  cursor: Array<InputMaybe<Proposal_Votes_Stream_Cursor_Input>>;\n  where?: InputMaybe<Proposal_Votes_Bool_Exp>;\n};\n\n\nexport type Subscription_RootTable_ItemsArgs = {\n  distinct_on?: InputMaybe<Array<Table_Items_Select_Column>>;\n  limit?: InputMaybe<Scalars['Int']>;\n  offset?: InputMaybe<Scalars['Int']>;\n  order_by?: InputMaybe<Array<Table_Items_Order_By>>;\n  where?: InputMaybe<Table_Items_Bool_Exp>;\n};\n\n\nexport type Subscription_RootTable_Items_By_PkArgs = {\n  transaction_version: Scalars['bigint'];\n  write_set_change_index: Scalars['bigint'];\n};\n\n\nexport type Subscription_RootTable_Items_StreamArgs = {\n  batch_size: Scalars['Int'];\n  cursor: Array<InputMaybe<Table_Items_Stream_Cursor_Input>>;\n  where?: InputMaybe<Table_Items_Bool_Exp>;\n};\n\n\nexport type Subscription_RootTable_MetadatasArgs = {\n  distinct_on?: InputMaybe<Array<Table_Metadatas_Select_Column>>;\n  limit?: InputMaybe<Scalars['Int']>;\n  offset?: InputMaybe<Scalars['Int']>;\n  order_by?: InputMaybe<Array<Table_Metadatas_Order_By>>;\n  where?: InputMaybe<Table_Metadatas_Bool_Exp>;\n};\n\n\nexport type Subscription_RootTable_Metadatas_By_PkArgs = {\n  handle: Scalars['String'];\n};\n\n\nexport type Subscription_RootTable_Metadatas_StreamArgs = {\n  batch_size: Scalars['Int'];\n  cursor: Array<InputMaybe<Table_Metadatas_Stream_Cursor_Input>>;\n  where?: InputMaybe<Table_Metadatas_Bool_Exp>;\n};\n\n\nexport type Subscription_RootToken_ActivitiesArgs = {\n  distinct_on?: InputMaybe<Array<Token_Activities_Select_Column>>;\n  limit?: InputMaybe<Scalars['Int']>;\n  offset?: InputMaybe<Scalars['Int']>;\n  order_by?: InputMaybe<Array<Token_Activities_Order_By>>;\n  where?: InputMaybe<Token_Activities_Bool_Exp>;\n};\n\n\nexport type Subscription_RootToken_Activities_AggregateArgs = {\n  distinct_on?: InputMaybe<Array<Token_Activities_Select_Column>>;\n  limit?: InputMaybe<Scalars['Int']>;\n  offset?: InputMaybe<Scalars['Int']>;\n  order_by?: InputMaybe<Array<Token_Activities_Order_By>>;\n  where?: InputMaybe<Token_Activities_Bool_Exp>;\n};\n\n\nexport type Subscription_RootToken_Activities_By_PkArgs = {\n  event_account_address: Scalars['String'];\n  event_creation_number: Scalars['bigint'];\n  event_sequence_number: Scalars['bigint'];\n  transaction_version: Scalars['bigint'];\n};\n\n\nexport type Subscription_RootToken_Activities_StreamArgs = {\n  batch_size: Scalars['Int'];\n  cursor: Array<InputMaybe<Token_Activities_Stream_Cursor_Input>>;\n  where?: InputMaybe<Token_Activities_Bool_Exp>;\n};\n\n\nexport type Subscription_RootToken_Activities_V2Args = {\n  distinct_on?: InputMaybe<Array<Token_Activities_V2_Select_Column>>;\n  limit?: InputMaybe<Scalars['Int']>;\n  offset?: InputMaybe<Scalars['Int']>;\n  order_by?: InputMaybe<Array<Token_Activities_V2_Order_By>>;\n  where?: InputMaybe<Token_Activities_V2_Bool_Exp>;\n};\n\n\nexport type Subscription_RootToken_Activities_V2_AggregateArgs = {\n  distinct_on?: InputMaybe<Array<Token_Activities_V2_Select_Column>>;\n  limit?: InputMaybe<Scalars['Int']>;\n  offset?: InputMaybe<Scalars['Int']>;\n  order_by?: InputMaybe<Array<Token_Activities_V2_Order_By>>;\n  where?: InputMaybe<Token_Activities_V2_Bool_Exp>;\n};\n\n\nexport type Subscription_RootToken_Activities_V2_By_PkArgs = {\n  event_index: Scalars['bigint'];\n  transaction_version: Scalars['bigint'];\n};\n\n\nexport type Subscription_RootToken_Activities_V2_StreamArgs = {\n  batch_size: Scalars['Int'];\n  cursor: Array<InputMaybe<Token_Activities_V2_Stream_Cursor_Input>>;\n  where?: InputMaybe<Token_Activities_V2_Bool_Exp>;\n};\n\n\nexport type Subscription_RootToken_DatasArgs = {\n  distinct_on?: InputMaybe<Array<Token_Datas_Select_Column>>;\n  limit?: InputMaybe<Scalars['Int']>;\n  offset?: InputMaybe<Scalars['Int']>;\n  order_by?: InputMaybe<Array<Token_Datas_Order_By>>;\n  where?: InputMaybe<Token_Datas_Bool_Exp>;\n};\n\n\nexport type Subscription_RootToken_Datas_By_PkArgs = {\n  token_data_id_hash: Scalars['String'];\n  transaction_version: Scalars['bigint'];\n};\n\n\nexport type Subscription_RootToken_Datas_StreamArgs = {\n  batch_size: Scalars['Int'];\n  cursor: Array<InputMaybe<Token_Datas_Stream_Cursor_Input>>;\n  where?: InputMaybe<Token_Datas_Bool_Exp>;\n};\n\n\nexport type Subscription_RootToken_OwnershipsArgs = {\n  distinct_on?: InputMaybe<Array<Token_Ownerships_Select_Column>>;\n  limit?: InputMaybe<Scalars['Int']>;\n  offset?: InputMaybe<Scalars['Int']>;\n  order_by?: InputMaybe<Array<Token_Ownerships_Order_By>>;\n  where?: InputMaybe<Token_Ownerships_Bool_Exp>;\n};\n\n\nexport type Subscription_RootToken_Ownerships_By_PkArgs = {\n  property_version: Scalars['numeric'];\n  table_handle: Scalars['String'];\n  token_data_id_hash: Scalars['String'];\n  transaction_version: Scalars['bigint'];\n};\n\n\nexport type Subscription_RootToken_Ownerships_StreamArgs = {\n  batch_size: Scalars['Int'];\n  cursor: Array<InputMaybe<Token_Ownerships_Stream_Cursor_Input>>;\n  where?: InputMaybe<Token_Ownerships_Bool_Exp>;\n};\n\n\nexport type Subscription_RootTokensArgs = {\n  distinct_on?: InputMaybe<Array<Tokens_Select_Column>>;\n  limit?: InputMaybe<Scalars['Int']>;\n  offset?: InputMaybe<Scalars['Int']>;\n  order_by?: InputMaybe<Array<Tokens_Order_By>>;\n  where?: InputMaybe<Tokens_Bool_Exp>;\n};\n\n\nexport type Subscription_RootTokens_By_PkArgs = {\n  property_version: Scalars['numeric'];\n  token_data_id_hash: Scalars['String'];\n  transaction_version: Scalars['bigint'];\n};\n\n\nexport type Subscription_RootTokens_StreamArgs = {\n  batch_size: Scalars['Int'];\n  cursor: Array<InputMaybe<Tokens_Stream_Cursor_Input>>;\n  where?: InputMaybe<Tokens_Bool_Exp>;\n};\n\n\nexport type Subscription_RootUser_TransactionsArgs = {\n  distinct_on?: InputMaybe<Array<User_Transactions_Select_Column>>;\n  limit?: InputMaybe<Scalars['Int']>;\n  offset?: InputMaybe<Scalars['Int']>;\n  order_by?: InputMaybe<Array<User_Transactions_Order_By>>;\n  where?: InputMaybe<User_Transactions_Bool_Exp>;\n};\n\n\nexport type Subscription_RootUser_Transactions_By_PkArgs = {\n  version: Scalars['bigint'];\n};\n\n\nexport type Subscription_RootUser_Transactions_StreamArgs = {\n  batch_size: Scalars['Int'];\n  cursor: Array<InputMaybe<User_Transactions_Stream_Cursor_Input>>;\n  where?: InputMaybe<User_Transactions_Bool_Exp>;\n};\n\n/** columns and relationships of \"table_items\" */\nexport type Table_Items = {\n  __typename?: 'table_items';\n  decoded_key: Scalars['jsonb'];\n  decoded_value?: Maybe<Scalars['jsonb']>;\n  key: Scalars['String'];\n  table_handle: Scalars['String'];\n  transaction_version: Scalars['bigint'];\n  write_set_change_index: Scalars['bigint'];\n};\n\n\n/** columns and relationships of \"table_items\" */\nexport type Table_ItemsDecoded_KeyArgs = {\n  path?: InputMaybe<Scalars['String']>;\n};\n\n\n/** columns and relationships of \"table_items\" */\nexport type Table_ItemsDecoded_ValueArgs = {\n  path?: InputMaybe<Scalars['String']>;\n};\n\n/** Boolean expression to filter rows from the table \"table_items\". All fields are combined with a logical 'AND'. */\nexport type Table_Items_Bool_Exp = {\n  _and?: InputMaybe<Array<Table_Items_Bool_Exp>>;\n  _not?: InputMaybe<Table_Items_Bool_Exp>;\n  _or?: InputMaybe<Array<Table_Items_Bool_Exp>>;\n  decoded_key?: InputMaybe<Jsonb_Comparison_Exp>;\n  decoded_value?: InputMaybe<Jsonb_Comparison_Exp>;\n  key?: InputMaybe<String_Comparison_Exp>;\n  table_handle?: InputMaybe<String_Comparison_Exp>;\n  transaction_version?: InputMaybe<Bigint_Comparison_Exp>;\n  write_set_change_index?: InputMaybe<Bigint_Comparison_Exp>;\n};\n\n/** Ordering options when selecting data from \"table_items\". */\nexport type Table_Items_Order_By = {\n  decoded_key?: InputMaybe<Order_By>;\n  decoded_value?: InputMaybe<Order_By>;\n  key?: InputMaybe<Order_By>;\n  table_handle?: InputMaybe<Order_By>;\n  transaction_version?: InputMaybe<Order_By>;\n  write_set_change_index?: InputMaybe<Order_By>;\n};\n\n/** select columns of table \"table_items\" */\nexport enum Table_Items_Select_Column {\n  /** column name */\n  DecodedKey = 'decoded_key',\n  /** column name */\n  DecodedValue = 'decoded_value',\n  /** column name */\n  Key = 'key',\n  /** column name */\n  TableHandle = 'table_handle',\n  /** column name */\n  TransactionVersion = 'transaction_version',\n  /** column name */\n  WriteSetChangeIndex = 'write_set_change_index'\n}\n\n/** Streaming cursor of the table \"table_items\" */\nexport type Table_Items_Stream_Cursor_Input = {\n  /** Stream column input with initial value */\n  initial_value: Table_Items_Stream_Cursor_Value_Input;\n  /** cursor ordering */\n  ordering?: InputMaybe<Cursor_Ordering>;\n};\n\n/** Initial value of the column from where the streaming should start */\nexport type Table_Items_Stream_Cursor_Value_Input = {\n  decoded_key?: InputMaybe<Scalars['jsonb']>;\n  decoded_value?: InputMaybe<Scalars['jsonb']>;\n  key?: InputMaybe<Scalars['String']>;\n  table_handle?: InputMaybe<Scalars['String']>;\n  transaction_version?: InputMaybe<Scalars['bigint']>;\n  write_set_change_index?: InputMaybe<Scalars['bigint']>;\n};\n\n/** columns and relationships of \"table_metadatas\" */\nexport type Table_Metadatas = {\n  __typename?: 'table_metadatas';\n  handle: Scalars['String'];\n  key_type: Scalars['String'];\n  value_type: Scalars['String'];\n};\n\n/** Boolean expression to filter rows from the table \"table_metadatas\". All fields are combined with a logical 'AND'. */\nexport type Table_Metadatas_Bool_Exp = {\n  _and?: InputMaybe<Array<Table_Metadatas_Bool_Exp>>;\n  _not?: InputMaybe<Table_Metadatas_Bool_Exp>;\n  _or?: InputMaybe<Array<Table_Metadatas_Bool_Exp>>;\n  handle?: InputMaybe<String_Comparison_Exp>;\n  key_type?: InputMaybe<String_Comparison_Exp>;\n  value_type?: InputMaybe<String_Comparison_Exp>;\n};\n\n/** Ordering options when selecting data from \"table_metadatas\". */\nexport type Table_Metadatas_Order_By = {\n  handle?: InputMaybe<Order_By>;\n  key_type?: InputMaybe<Order_By>;\n  value_type?: InputMaybe<Order_By>;\n};\n\n/** select columns of table \"table_metadatas\" */\nexport enum Table_Metadatas_Select_Column {\n  /** column name */\n  Handle = 'handle',\n  /** column name */\n  KeyType = 'key_type',\n  /** column name */\n  ValueType = 'value_type'\n}\n\n/** Streaming cursor of the table \"table_metadatas\" */\nexport type Table_Metadatas_Stream_Cursor_Input = {\n  /** Stream column input with initial value */\n  initial_value: Table_Metadatas_Stream_Cursor_Value_Input;\n  /** cursor ordering */\n  ordering?: InputMaybe<Cursor_Ordering>;\n};\n\n/** Initial value of the column from where the streaming should start */\nexport type Table_Metadatas_Stream_Cursor_Value_Input = {\n  handle?: InputMaybe<Scalars['String']>;\n  key_type?: InputMaybe<Scalars['String']>;\n  value_type?: InputMaybe<Scalars['String']>;\n};\n\n/** Boolean expression to compare columns of type \"timestamp\". All fields are combined with logical 'AND'. */\nexport type Timestamp_Comparison_Exp = {\n  _eq?: InputMaybe<Scalars['timestamp']>;\n  _gt?: InputMaybe<Scalars['timestamp']>;\n  _gte?: InputMaybe<Scalars['timestamp']>;\n  _in?: InputMaybe<Array<Scalars['timestamp']>>;\n  _is_null?: InputMaybe<Scalars['Boolean']>;\n  _lt?: InputMaybe<Scalars['timestamp']>;\n  _lte?: InputMaybe<Scalars['timestamp']>;\n  _neq?: InputMaybe<Scalars['timestamp']>;\n  _nin?: InputMaybe<Array<Scalars['timestamp']>>;\n};\n\n/** Boolean expression to compare columns of type \"timestamptz\". All fields are combined with logical 'AND'. */\nexport type Timestamptz_Comparison_Exp = {\n  _eq?: InputMaybe<Scalars['timestamptz']>;\n  _gt?: InputMaybe<Scalars['timestamptz']>;\n  _gte?: InputMaybe<Scalars['timestamptz']>;\n  _in?: InputMaybe<Array<Scalars['timestamptz']>>;\n  _is_null?: InputMaybe<Scalars['Boolean']>;\n  _lt?: InputMaybe<Scalars['timestamptz']>;\n  _lte?: InputMaybe<Scalars['timestamptz']>;\n  _neq?: InputMaybe<Scalars['timestamptz']>;\n  _nin?: InputMaybe<Array<Scalars['timestamptz']>>;\n};\n\n/** columns and relationships of \"token_activities\" */\nexport type Token_Activities = {\n  __typename?: 'token_activities';\n  /** An array relationship */\n  aptos_names_owner: Array<Current_Aptos_Names>;\n  /** An array relationship */\n  aptos_names_to: Array<Current_Aptos_Names>;\n  coin_amount?: Maybe<Scalars['numeric']>;\n  coin_type?: Maybe<Scalars['String']>;\n  collection_data_id_hash: Scalars['String'];\n  collection_name: Scalars['String'];\n  creator_address: Scalars['String'];\n  /** An object relationship */\n  current_token_data?: Maybe<Current_Token_Datas>;\n  event_account_address: Scalars['String'];\n  event_creation_number: Scalars['bigint'];\n  event_index?: Maybe<Scalars['bigint']>;\n  event_sequence_number: Scalars['bigint'];\n  from_address?: Maybe<Scalars['String']>;\n  name: Scalars['String'];\n  property_version: Scalars['numeric'];\n  to_address?: Maybe<Scalars['String']>;\n  token_amount: Scalars['numeric'];\n  token_data_id_hash: Scalars['String'];\n  transaction_timestamp: Scalars['timestamp'];\n  transaction_version: Scalars['bigint'];\n  transfer_type: Scalars['String'];\n};\n\n\n/** columns and relationships of \"token_activities\" */\nexport type Token_ActivitiesAptos_Names_OwnerArgs = {\n  distinct_on?: InputMaybe<Array<Current_Aptos_Names_Select_Column>>;\n  limit?: InputMaybe<Scalars['Int']>;\n  offset?: InputMaybe<Scalars['Int']>;\n  order_by?: InputMaybe<Array<Current_Aptos_Names_Order_By>>;\n  where?: InputMaybe<Current_Aptos_Names_Bool_Exp>;\n};\n\n\n/** columns and relationships of \"token_activities\" */\nexport type Token_ActivitiesAptos_Names_ToArgs = {\n  distinct_on?: InputMaybe<Array<Current_Aptos_Names_Select_Column>>;\n  limit?: InputMaybe<Scalars['Int']>;\n  offset?: InputMaybe<Scalars['Int']>;\n  order_by?: InputMaybe<Array<Current_Aptos_Names_Order_By>>;\n  where?: InputMaybe<Current_Aptos_Names_Bool_Exp>;\n};\n\n/** aggregated selection of \"token_activities\" */\nexport type Token_Activities_Aggregate = {\n  __typename?: 'token_activities_aggregate';\n  aggregate?: Maybe<Token_Activities_Aggregate_Fields>;\n  nodes: Array<Token_Activities>;\n};\n\n/** aggregate fields of \"token_activities\" */\nexport type Token_Activities_Aggregate_Fields = {\n  __typename?: 'token_activities_aggregate_fields';\n  avg?: Maybe<Token_Activities_Avg_Fields>;\n  count: Scalars['Int'];\n  max?: Maybe<Token_Activities_Max_Fields>;\n  min?: Maybe<Token_Activities_Min_Fields>;\n  stddev?: Maybe<Token_Activities_Stddev_Fields>;\n  stddev_pop?: Maybe<Token_Activities_Stddev_Pop_Fields>;\n  stddev_samp?: Maybe<Token_Activities_Stddev_Samp_Fields>;\n  sum?: Maybe<Token_Activities_Sum_Fields>;\n  var_pop?: Maybe<Token_Activities_Var_Pop_Fields>;\n  var_samp?: Maybe<Token_Activities_Var_Samp_Fields>;\n  variance?: Maybe<Token_Activities_Variance_Fields>;\n};\n\n\n/** aggregate fields of \"token_activities\" */\nexport type Token_Activities_Aggregate_FieldsCountArgs = {\n  columns?: InputMaybe<Array<Token_Activities_Select_Column>>;\n  distinct?: InputMaybe<Scalars['Boolean']>;\n};\n\n/** order by aggregate values of table \"token_activities\" */\nexport type Token_Activities_Aggregate_Order_By = {\n  avg?: InputMaybe<Token_Activities_Avg_Order_By>;\n  count?: InputMaybe<Order_By>;\n  max?: InputMaybe<Token_Activities_Max_Order_By>;\n  min?: InputMaybe<Token_Activities_Min_Order_By>;\n  stddev?: InputMaybe<Token_Activities_Stddev_Order_By>;\n  stddev_pop?: InputMaybe<Token_Activities_Stddev_Pop_Order_By>;\n  stddev_samp?: InputMaybe<Token_Activities_Stddev_Samp_Order_By>;\n  sum?: InputMaybe<Token_Activities_Sum_Order_By>;\n  var_pop?: InputMaybe<Token_Activities_Var_Pop_Order_By>;\n  var_samp?: InputMaybe<Token_Activities_Var_Samp_Order_By>;\n  variance?: InputMaybe<Token_Activities_Variance_Order_By>;\n};\n\n/** aggregate avg on columns */\nexport type Token_Activities_Avg_Fields = {\n  __typename?: 'token_activities_avg_fields';\n  coin_amount?: Maybe<Scalars['Float']>;\n  event_creation_number?: Maybe<Scalars['Float']>;\n  event_index?: Maybe<Scalars['Float']>;\n  event_sequence_number?: Maybe<Scalars['Float']>;\n  property_version?: Maybe<Scalars['Float']>;\n  token_amount?: Maybe<Scalars['Float']>;\n  transaction_version?: Maybe<Scalars['Float']>;\n};\n\n/** order by avg() on columns of table \"token_activities\" */\nexport type Token_Activities_Avg_Order_By = {\n  coin_amount?: InputMaybe<Order_By>;\n  event_creation_number?: InputMaybe<Order_By>;\n  event_index?: InputMaybe<Order_By>;\n  event_sequence_number?: InputMaybe<Order_By>;\n  property_version?: InputMaybe<Order_By>;\n  token_amount?: InputMaybe<Order_By>;\n  transaction_version?: InputMaybe<Order_By>;\n};\n\n/** Boolean expression to filter rows from the table \"token_activities\". All fields are combined with a logical 'AND'. */\nexport type Token_Activities_Bool_Exp = {\n  _and?: InputMaybe<Array<Token_Activities_Bool_Exp>>;\n  _not?: InputMaybe<Token_Activities_Bool_Exp>;\n  _or?: InputMaybe<Array<Token_Activities_Bool_Exp>>;\n  aptos_names_owner?: InputMaybe<Current_Aptos_Names_Bool_Exp>;\n  aptos_names_to?: InputMaybe<Current_Aptos_Names_Bool_Exp>;\n  coin_amount?: InputMaybe<Numeric_Comparison_Exp>;\n  coin_type?: InputMaybe<String_Comparison_Exp>;\n  collection_data_id_hash?: InputMaybe<String_Comparison_Exp>;\n  collection_name?: InputMaybe<String_Comparison_Exp>;\n  creator_address?: InputMaybe<String_Comparison_Exp>;\n  current_token_data?: InputMaybe<Current_Token_Datas_Bool_Exp>;\n  event_account_address?: InputMaybe<String_Comparison_Exp>;\n  event_creation_number?: InputMaybe<Bigint_Comparison_Exp>;\n  event_index?: InputMaybe<Bigint_Comparison_Exp>;\n  event_sequence_number?: InputMaybe<Bigint_Comparison_Exp>;\n  from_address?: InputMaybe<String_Comparison_Exp>;\n  name?: InputMaybe<String_Comparison_Exp>;\n  property_version?: InputMaybe<Numeric_Comparison_Exp>;\n  to_address?: InputMaybe<String_Comparison_Exp>;\n  token_amount?: InputMaybe<Numeric_Comparison_Exp>;\n  token_data_id_hash?: InputMaybe<String_Comparison_Exp>;\n  transaction_timestamp?: InputMaybe<Timestamp_Comparison_Exp>;\n  transaction_version?: InputMaybe<Bigint_Comparison_Exp>;\n  transfer_type?: InputMaybe<String_Comparison_Exp>;\n};\n\n/** aggregate max on columns */\nexport type Token_Activities_Max_Fields = {\n  __typename?: 'token_activities_max_fields';\n  coin_amount?: Maybe<Scalars['numeric']>;\n  coin_type?: Maybe<Scalars['String']>;\n  collection_data_id_hash?: Maybe<Scalars['String']>;\n  collection_name?: Maybe<Scalars['String']>;\n  creator_address?: Maybe<Scalars['String']>;\n  event_account_address?: Maybe<Scalars['String']>;\n  event_creation_number?: Maybe<Scalars['bigint']>;\n  event_index?: Maybe<Scalars['bigint']>;\n  event_sequence_number?: Maybe<Scalars['bigint']>;\n  from_address?: Maybe<Scalars['String']>;\n  name?: Maybe<Scalars['String']>;\n  property_version?: Maybe<Scalars['numeric']>;\n  to_address?: Maybe<Scalars['String']>;\n  token_amount?: Maybe<Scalars['numeric']>;\n  token_data_id_hash?: Maybe<Scalars['String']>;\n  transaction_timestamp?: Maybe<Scalars['timestamp']>;\n  transaction_version?: Maybe<Scalars['bigint']>;\n  transfer_type?: Maybe<Scalars['String']>;\n};\n\n/** order by max() on columns of table \"token_activities\" */\nexport type Token_Activities_Max_Order_By = {\n  coin_amount?: InputMaybe<Order_By>;\n  coin_type?: InputMaybe<Order_By>;\n  collection_data_id_hash?: InputMaybe<Order_By>;\n  collection_name?: InputMaybe<Order_By>;\n  creator_address?: InputMaybe<Order_By>;\n  event_account_address?: InputMaybe<Order_By>;\n  event_creation_number?: InputMaybe<Order_By>;\n  event_index?: InputMaybe<Order_By>;\n  event_sequence_number?: InputMaybe<Order_By>;\n  from_address?: InputMaybe<Order_By>;\n  name?: InputMaybe<Order_By>;\n  property_version?: InputMaybe<Order_By>;\n  to_address?: InputMaybe<Order_By>;\n  token_amount?: InputMaybe<Order_By>;\n  token_data_id_hash?: InputMaybe<Order_By>;\n  transaction_timestamp?: InputMaybe<Order_By>;\n  transaction_version?: InputMaybe<Order_By>;\n  transfer_type?: InputMaybe<Order_By>;\n};\n\n/** aggregate min on columns */\nexport type Token_Activities_Min_Fields = {\n  __typename?: 'token_activities_min_fields';\n  coin_amount?: Maybe<Scalars['numeric']>;\n  coin_type?: Maybe<Scalars['String']>;\n  collection_data_id_hash?: Maybe<Scalars['String']>;\n  collection_name?: Maybe<Scalars['String']>;\n  creator_address?: Maybe<Scalars['String']>;\n  event_account_address?: Maybe<Scalars['String']>;\n  event_creation_number?: Maybe<Scalars['bigint']>;\n  event_index?: Maybe<Scalars['bigint']>;\n  event_sequence_number?: Maybe<Scalars['bigint']>;\n  from_address?: Maybe<Scalars['String']>;\n  name?: Maybe<Scalars['String']>;\n  property_version?: Maybe<Scalars['numeric']>;\n  to_address?: Maybe<Scalars['String']>;\n  token_amount?: Maybe<Scalars['numeric']>;\n  token_data_id_hash?: Maybe<Scalars['String']>;\n  transaction_timestamp?: Maybe<Scalars['timestamp']>;\n  transaction_version?: Maybe<Scalars['bigint']>;\n  transfer_type?: Maybe<Scalars['String']>;\n};\n\n/** order by min() on columns of table \"token_activities\" */\nexport type Token_Activities_Min_Order_By = {\n  coin_amount?: InputMaybe<Order_By>;\n  coin_type?: InputMaybe<Order_By>;\n  collection_data_id_hash?: InputMaybe<Order_By>;\n  collection_name?: InputMaybe<Order_By>;\n  creator_address?: InputMaybe<Order_By>;\n  event_account_address?: InputMaybe<Order_By>;\n  event_creation_number?: InputMaybe<Order_By>;\n  event_index?: InputMaybe<Order_By>;\n  event_sequence_number?: InputMaybe<Order_By>;\n  from_address?: InputMaybe<Order_By>;\n  name?: InputMaybe<Order_By>;\n  property_version?: InputMaybe<Order_By>;\n  to_address?: InputMaybe<Order_By>;\n  token_amount?: InputMaybe<Order_By>;\n  token_data_id_hash?: InputMaybe<Order_By>;\n  transaction_timestamp?: InputMaybe<Order_By>;\n  transaction_version?: InputMaybe<Order_By>;\n  transfer_type?: InputMaybe<Order_By>;\n};\n\n/** Ordering options when selecting data from \"token_activities\". */\nexport type Token_Activities_Order_By = {\n  aptos_names_owner_aggregate?: InputMaybe<Current_Aptos_Names_Aggregate_Order_By>;\n  aptos_names_to_aggregate?: InputMaybe<Current_Aptos_Names_Aggregate_Order_By>;\n  coin_amount?: InputMaybe<Order_By>;\n  coin_type?: InputMaybe<Order_By>;\n  collection_data_id_hash?: InputMaybe<Order_By>;\n  collection_name?: InputMaybe<Order_By>;\n  creator_address?: InputMaybe<Order_By>;\n  current_token_data?: InputMaybe<Current_Token_Datas_Order_By>;\n  event_account_address?: InputMaybe<Order_By>;\n  event_creation_number?: InputMaybe<Order_By>;\n  event_index?: InputMaybe<Order_By>;\n  event_sequence_number?: InputMaybe<Order_By>;\n  from_address?: InputMaybe<Order_By>;\n  name?: InputMaybe<Order_By>;\n  property_version?: InputMaybe<Order_By>;\n  to_address?: InputMaybe<Order_By>;\n  token_amount?: InputMaybe<Order_By>;\n  token_data_id_hash?: InputMaybe<Order_By>;\n  transaction_timestamp?: InputMaybe<Order_By>;\n  transaction_version?: InputMaybe<Order_By>;\n  transfer_type?: InputMaybe<Order_By>;\n};\n\n/** select columns of table \"token_activities\" */\nexport enum Token_Activities_Select_Column {\n  /** column name */\n  CoinAmount = 'coin_amount',\n  /** column name */\n  CoinType = 'coin_type',\n  /** column name */\n  CollectionDataIdHash = 'collection_data_id_hash',\n  /** column name */\n  CollectionName = 'collection_name',\n  /** column name */\n  CreatorAddress = 'creator_address',\n  /** column name */\n  EventAccountAddress = 'event_account_address',\n  /** column name */\n  EventCreationNumber = 'event_creation_number',\n  /** column name */\n  EventIndex = 'event_index',\n  /** column name */\n  EventSequenceNumber = 'event_sequence_number',\n  /** column name */\n  FromAddress = 'from_address',\n  /** column name */\n  Name = 'name',\n  /** column name */\n  PropertyVersion = 'property_version',\n  /** column name */\n  ToAddress = 'to_address',\n  /** column name */\n  TokenAmount = 'token_amount',\n  /** column name */\n  TokenDataIdHash = 'token_data_id_hash',\n  /** column name */\n  TransactionTimestamp = 'transaction_timestamp',\n  /** column name */\n  TransactionVersion = 'transaction_version',\n  /** column name */\n  TransferType = 'transfer_type'\n}\n\n/** aggregate stddev on columns */\nexport type Token_Activities_Stddev_Fields = {\n  __typename?: 'token_activities_stddev_fields';\n  coin_amount?: Maybe<Scalars['Float']>;\n  event_creation_number?: Maybe<Scalars['Float']>;\n  event_index?: Maybe<Scalars['Float']>;\n  event_sequence_number?: Maybe<Scalars['Float']>;\n  property_version?: Maybe<Scalars['Float']>;\n  token_amount?: Maybe<Scalars['Float']>;\n  transaction_version?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev() on columns of table \"token_activities\" */\nexport type Token_Activities_Stddev_Order_By = {\n  coin_amount?: InputMaybe<Order_By>;\n  event_creation_number?: InputMaybe<Order_By>;\n  event_index?: InputMaybe<Order_By>;\n  event_sequence_number?: InputMaybe<Order_By>;\n  property_version?: InputMaybe<Order_By>;\n  token_amount?: InputMaybe<Order_By>;\n  transaction_version?: InputMaybe<Order_By>;\n};\n\n/** aggregate stddev_pop on columns */\nexport type Token_Activities_Stddev_Pop_Fields = {\n  __typename?: 'token_activities_stddev_pop_fields';\n  coin_amount?: Maybe<Scalars['Float']>;\n  event_creation_number?: Maybe<Scalars['Float']>;\n  event_index?: Maybe<Scalars['Float']>;\n  event_sequence_number?: Maybe<Scalars['Float']>;\n  property_version?: Maybe<Scalars['Float']>;\n  token_amount?: Maybe<Scalars['Float']>;\n  transaction_version?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev_pop() on columns of table \"token_activities\" */\nexport type Token_Activities_Stddev_Pop_Order_By = {\n  coin_amount?: InputMaybe<Order_By>;\n  event_creation_number?: InputMaybe<Order_By>;\n  event_index?: InputMaybe<Order_By>;\n  event_sequence_number?: InputMaybe<Order_By>;\n  property_version?: InputMaybe<Order_By>;\n  token_amount?: InputMaybe<Order_By>;\n  transaction_version?: InputMaybe<Order_By>;\n};\n\n/** aggregate stddev_samp on columns */\nexport type Token_Activities_Stddev_Samp_Fields = {\n  __typename?: 'token_activities_stddev_samp_fields';\n  coin_amount?: Maybe<Scalars['Float']>;\n  event_creation_number?: Maybe<Scalars['Float']>;\n  event_index?: Maybe<Scalars['Float']>;\n  event_sequence_number?: Maybe<Scalars['Float']>;\n  property_version?: Maybe<Scalars['Float']>;\n  token_amount?: Maybe<Scalars['Float']>;\n  transaction_version?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev_samp() on columns of table \"token_activities\" */\nexport type Token_Activities_Stddev_Samp_Order_By = {\n  coin_amount?: InputMaybe<Order_By>;\n  event_creation_number?: InputMaybe<Order_By>;\n  event_index?: InputMaybe<Order_By>;\n  event_sequence_number?: InputMaybe<Order_By>;\n  property_version?: InputMaybe<Order_By>;\n  token_amount?: InputMaybe<Order_By>;\n  transaction_version?: InputMaybe<Order_By>;\n};\n\n/** Streaming cursor of the table \"token_activities\" */\nexport type Token_Activities_Stream_Cursor_Input = {\n  /** Stream column input with initial value */\n  initial_value: Token_Activities_Stream_Cursor_Value_Input;\n  /** cursor ordering */\n  ordering?: InputMaybe<Cursor_Ordering>;\n};\n\n/** Initial value of the column from where the streaming should start */\nexport type Token_Activities_Stream_Cursor_Value_Input = {\n  coin_amount?: InputMaybe<Scalars['numeric']>;\n  coin_type?: InputMaybe<Scalars['String']>;\n  collection_data_id_hash?: InputMaybe<Scalars['String']>;\n  collection_name?: InputMaybe<Scalars['String']>;\n  creator_address?: InputMaybe<Scalars['String']>;\n  event_account_address?: InputMaybe<Scalars['String']>;\n  event_creation_number?: InputMaybe<Scalars['bigint']>;\n  event_index?: InputMaybe<Scalars['bigint']>;\n  event_sequence_number?: InputMaybe<Scalars['bigint']>;\n  from_address?: InputMaybe<Scalars['String']>;\n  name?: InputMaybe<Scalars['String']>;\n  property_version?: InputMaybe<Scalars['numeric']>;\n  to_address?: InputMaybe<Scalars['String']>;\n  token_amount?: InputMaybe<Scalars['numeric']>;\n  token_data_id_hash?: InputMaybe<Scalars['String']>;\n  transaction_timestamp?: InputMaybe<Scalars['timestamp']>;\n  transaction_version?: InputMaybe<Scalars['bigint']>;\n  transfer_type?: InputMaybe<Scalars['String']>;\n};\n\n/** aggregate sum on columns */\nexport type Token_Activities_Sum_Fields = {\n  __typename?: 'token_activities_sum_fields';\n  coin_amount?: Maybe<Scalars['numeric']>;\n  event_creation_number?: Maybe<Scalars['bigint']>;\n  event_index?: Maybe<Scalars['bigint']>;\n  event_sequence_number?: Maybe<Scalars['bigint']>;\n  property_version?: Maybe<Scalars['numeric']>;\n  token_amount?: Maybe<Scalars['numeric']>;\n  transaction_version?: Maybe<Scalars['bigint']>;\n};\n\n/** order by sum() on columns of table \"token_activities\" */\nexport type Token_Activities_Sum_Order_By = {\n  coin_amount?: InputMaybe<Order_By>;\n  event_creation_number?: InputMaybe<Order_By>;\n  event_index?: InputMaybe<Order_By>;\n  event_sequence_number?: InputMaybe<Order_By>;\n  property_version?: InputMaybe<Order_By>;\n  token_amount?: InputMaybe<Order_By>;\n  transaction_version?: InputMaybe<Order_By>;\n};\n\n/** columns and relationships of \"token_activities_v2\" */\nexport type Token_Activities_V2 = {\n  __typename?: 'token_activities_v2';\n  after_value?: Maybe<Scalars['String']>;\n  /** An array relationship */\n  aptos_names_from: Array<Current_Aptos_Names>;\n  /** An array relationship */\n  aptos_names_to: Array<Current_Aptos_Names>;\n  before_value?: Maybe<Scalars['String']>;\n  /** An object relationship */\n  current_token_data?: Maybe<Current_Token_Datas_V2>;\n  entry_function_id_str?: Maybe<Scalars['String']>;\n  event_account_address: Scalars['String'];\n  event_index: Scalars['bigint'];\n  from_address?: Maybe<Scalars['String']>;\n  is_fungible_v2?: Maybe<Scalars['Boolean']>;\n  property_version_v1: Scalars['numeric'];\n  to_address?: Maybe<Scalars['String']>;\n  token_amount: Scalars['numeric'];\n  token_data_id: Scalars['String'];\n  token_standard: Scalars['String'];\n  transaction_timestamp: Scalars['timestamp'];\n  transaction_version: Scalars['bigint'];\n  type: Scalars['String'];\n};\n\n\n/** columns and relationships of \"token_activities_v2\" */\nexport type Token_Activities_V2Aptos_Names_FromArgs = {\n  distinct_on?: InputMaybe<Array<Current_Aptos_Names_Select_Column>>;\n  limit?: InputMaybe<Scalars['Int']>;\n  offset?: InputMaybe<Scalars['Int']>;\n  order_by?: InputMaybe<Array<Current_Aptos_Names_Order_By>>;\n  where?: InputMaybe<Current_Aptos_Names_Bool_Exp>;\n};\n\n\n/** columns and relationships of \"token_activities_v2\" */\nexport type Token_Activities_V2Aptos_Names_ToArgs = {\n  distinct_on?: InputMaybe<Array<Current_Aptos_Names_Select_Column>>;\n  limit?: InputMaybe<Scalars['Int']>;\n  offset?: InputMaybe<Scalars['Int']>;\n  order_by?: InputMaybe<Array<Current_Aptos_Names_Order_By>>;\n  where?: InputMaybe<Current_Aptos_Names_Bool_Exp>;\n};\n\n/** aggregated selection of \"token_activities_v2\" */\nexport type Token_Activities_V2_Aggregate = {\n  __typename?: 'token_activities_v2_aggregate';\n  aggregate?: Maybe<Token_Activities_V2_Aggregate_Fields>;\n  nodes: Array<Token_Activities_V2>;\n};\n\n/** aggregate fields of \"token_activities_v2\" */\nexport type Token_Activities_V2_Aggregate_Fields = {\n  __typename?: 'token_activities_v2_aggregate_fields';\n  avg?: Maybe<Token_Activities_V2_Avg_Fields>;\n  count: Scalars['Int'];\n  max?: Maybe<Token_Activities_V2_Max_Fields>;\n  min?: Maybe<Token_Activities_V2_Min_Fields>;\n  stddev?: Maybe<Token_Activities_V2_Stddev_Fields>;\n  stddev_pop?: Maybe<Token_Activities_V2_Stddev_Pop_Fields>;\n  stddev_samp?: Maybe<Token_Activities_V2_Stddev_Samp_Fields>;\n  sum?: Maybe<Token_Activities_V2_Sum_Fields>;\n  var_pop?: Maybe<Token_Activities_V2_Var_Pop_Fields>;\n  var_samp?: Maybe<Token_Activities_V2_Var_Samp_Fields>;\n  variance?: Maybe<Token_Activities_V2_Variance_Fields>;\n};\n\n\n/** aggregate fields of \"token_activities_v2\" */\nexport type Token_Activities_V2_Aggregate_FieldsCountArgs = {\n  columns?: InputMaybe<Array<Token_Activities_V2_Select_Column>>;\n  distinct?: InputMaybe<Scalars['Boolean']>;\n};\n\n/** order by aggregate values of table \"token_activities_v2\" */\nexport type Token_Activities_V2_Aggregate_Order_By = {\n  avg?: InputMaybe<Token_Activities_V2_Avg_Order_By>;\n  count?: InputMaybe<Order_By>;\n  max?: InputMaybe<Token_Activities_V2_Max_Order_By>;\n  min?: InputMaybe<Token_Activities_V2_Min_Order_By>;\n  stddev?: InputMaybe<Token_Activities_V2_Stddev_Order_By>;\n  stddev_pop?: InputMaybe<Token_Activities_V2_Stddev_Pop_Order_By>;\n  stddev_samp?: InputMaybe<Token_Activities_V2_Stddev_Samp_Order_By>;\n  sum?: InputMaybe<Token_Activities_V2_Sum_Order_By>;\n  var_pop?: InputMaybe<Token_Activities_V2_Var_Pop_Order_By>;\n  var_samp?: InputMaybe<Token_Activities_V2_Var_Samp_Order_By>;\n  variance?: InputMaybe<Token_Activities_V2_Variance_Order_By>;\n};\n\n/** aggregate avg on columns */\nexport type Token_Activities_V2_Avg_Fields = {\n  __typename?: 'token_activities_v2_avg_fields';\n  event_index?: Maybe<Scalars['Float']>;\n  property_version_v1?: Maybe<Scalars['Float']>;\n  token_amount?: Maybe<Scalars['Float']>;\n  transaction_version?: Maybe<Scalars['Float']>;\n};\n\n/** order by avg() on columns of table \"token_activities_v2\" */\nexport type Token_Activities_V2_Avg_Order_By = {\n  event_index?: InputMaybe<Order_By>;\n  property_version_v1?: InputMaybe<Order_By>;\n  token_amount?: InputMaybe<Order_By>;\n  transaction_version?: InputMaybe<Order_By>;\n};\n\n/** Boolean expression to filter rows from the table \"token_activities_v2\". All fields are combined with a logical 'AND'. */\nexport type Token_Activities_V2_Bool_Exp = {\n  _and?: InputMaybe<Array<Token_Activities_V2_Bool_Exp>>;\n  _not?: InputMaybe<Token_Activities_V2_Bool_Exp>;\n  _or?: InputMaybe<Array<Token_Activities_V2_Bool_Exp>>;\n  after_value?: InputMaybe<String_Comparison_Exp>;\n  aptos_names_from?: InputMaybe<Current_Aptos_Names_Bool_Exp>;\n  aptos_names_to?: InputMaybe<Current_Aptos_Names_Bool_Exp>;\n  before_value?: InputMaybe<String_Comparison_Exp>;\n  current_token_data?: InputMaybe<Current_Token_Datas_V2_Bool_Exp>;\n  entry_function_id_str?: InputMaybe<String_Comparison_Exp>;\n  event_account_address?: InputMaybe<String_Comparison_Exp>;\n  event_index?: InputMaybe<Bigint_Comparison_Exp>;\n  from_address?: InputMaybe<String_Comparison_Exp>;\n  is_fungible_v2?: InputMaybe<Boolean_Comparison_Exp>;\n  property_version_v1?: InputMaybe<Numeric_Comparison_Exp>;\n  to_address?: InputMaybe<String_Comparison_Exp>;\n  token_amount?: InputMaybe<Numeric_Comparison_Exp>;\n  token_data_id?: InputMaybe<String_Comparison_Exp>;\n  token_standard?: InputMaybe<String_Comparison_Exp>;\n  transaction_timestamp?: InputMaybe<Timestamp_Comparison_Exp>;\n  transaction_version?: InputMaybe<Bigint_Comparison_Exp>;\n  type?: InputMaybe<String_Comparison_Exp>;\n};\n\n/** aggregate max on columns */\nexport type Token_Activities_V2_Max_Fields = {\n  __typename?: 'token_activities_v2_max_fields';\n  after_value?: Maybe<Scalars['String']>;\n  before_value?: Maybe<Scalars['String']>;\n  entry_function_id_str?: Maybe<Scalars['String']>;\n  event_account_address?: Maybe<Scalars['String']>;\n  event_index?: Maybe<Scalars['bigint']>;\n  from_address?: Maybe<Scalars['String']>;\n  property_version_v1?: Maybe<Scalars['numeric']>;\n  to_address?: Maybe<Scalars['String']>;\n  token_amount?: Maybe<Scalars['numeric']>;\n  token_data_id?: Maybe<Scalars['String']>;\n  token_standard?: Maybe<Scalars['String']>;\n  transaction_timestamp?: Maybe<Scalars['timestamp']>;\n  transaction_version?: Maybe<Scalars['bigint']>;\n  type?: Maybe<Scalars['String']>;\n};\n\n/** order by max() on columns of table \"token_activities_v2\" */\nexport type Token_Activities_V2_Max_Order_By = {\n  after_value?: InputMaybe<Order_By>;\n  before_value?: InputMaybe<Order_By>;\n  entry_function_id_str?: InputMaybe<Order_By>;\n  event_account_address?: InputMaybe<Order_By>;\n  event_index?: InputMaybe<Order_By>;\n  from_address?: InputMaybe<Order_By>;\n  property_version_v1?: InputMaybe<Order_By>;\n  to_address?: InputMaybe<Order_By>;\n  token_amount?: InputMaybe<Order_By>;\n  token_data_id?: InputMaybe<Order_By>;\n  token_standard?: InputMaybe<Order_By>;\n  transaction_timestamp?: InputMaybe<Order_By>;\n  transaction_version?: InputMaybe<Order_By>;\n  type?: InputMaybe<Order_By>;\n};\n\n/** aggregate min on columns */\nexport type Token_Activities_V2_Min_Fields = {\n  __typename?: 'token_activities_v2_min_fields';\n  after_value?: Maybe<Scalars['String']>;\n  before_value?: Maybe<Scalars['String']>;\n  entry_function_id_str?: Maybe<Scalars['String']>;\n  event_account_address?: Maybe<Scalars['String']>;\n  event_index?: Maybe<Scalars['bigint']>;\n  from_address?: Maybe<Scalars['String']>;\n  property_version_v1?: Maybe<Scalars['numeric']>;\n  to_address?: Maybe<Scalars['String']>;\n  token_amount?: Maybe<Scalars['numeric']>;\n  token_data_id?: Maybe<Scalars['String']>;\n  token_standard?: Maybe<Scalars['String']>;\n  transaction_timestamp?: Maybe<Scalars['timestamp']>;\n  transaction_version?: Maybe<Scalars['bigint']>;\n  type?: Maybe<Scalars['String']>;\n};\n\n/** order by min() on columns of table \"token_activities_v2\" */\nexport type Token_Activities_V2_Min_Order_By = {\n  after_value?: InputMaybe<Order_By>;\n  before_value?: InputMaybe<Order_By>;\n  entry_function_id_str?: InputMaybe<Order_By>;\n  event_account_address?: InputMaybe<Order_By>;\n  event_index?: InputMaybe<Order_By>;\n  from_address?: InputMaybe<Order_By>;\n  property_version_v1?: InputMaybe<Order_By>;\n  to_address?: InputMaybe<Order_By>;\n  token_amount?: InputMaybe<Order_By>;\n  token_data_id?: InputMaybe<Order_By>;\n  token_standard?: InputMaybe<Order_By>;\n  transaction_timestamp?: InputMaybe<Order_By>;\n  transaction_version?: InputMaybe<Order_By>;\n  type?: InputMaybe<Order_By>;\n};\n\n/** Ordering options when selecting data from \"token_activities_v2\". */\nexport type Token_Activities_V2_Order_By = {\n  after_value?: InputMaybe<Order_By>;\n  aptos_names_from_aggregate?: InputMaybe<Current_Aptos_Names_Aggregate_Order_By>;\n  aptos_names_to_aggregate?: InputMaybe<Current_Aptos_Names_Aggregate_Order_By>;\n  before_value?: InputMaybe<Order_By>;\n  current_token_data?: InputMaybe<Current_Token_Datas_V2_Order_By>;\n  entry_function_id_str?: InputMaybe<Order_By>;\n  event_account_address?: InputMaybe<Order_By>;\n  event_index?: InputMaybe<Order_By>;\n  from_address?: InputMaybe<Order_By>;\n  is_fungible_v2?: InputMaybe<Order_By>;\n  property_version_v1?: InputMaybe<Order_By>;\n  to_address?: InputMaybe<Order_By>;\n  token_amount?: InputMaybe<Order_By>;\n  token_data_id?: InputMaybe<Order_By>;\n  token_standard?: InputMaybe<Order_By>;\n  transaction_timestamp?: InputMaybe<Order_By>;\n  transaction_version?: InputMaybe<Order_By>;\n  type?: InputMaybe<Order_By>;\n};\n\n/** select columns of table \"token_activities_v2\" */\nexport enum Token_Activities_V2_Select_Column {\n  /** column name */\n  AfterValue = 'after_value',\n  /** column name */\n  BeforeValue = 'before_value',\n  /** column name */\n  EntryFunctionIdStr = 'entry_function_id_str',\n  /** column name */\n  EventAccountAddress = 'event_account_address',\n  /** column name */\n  EventIndex = 'event_index',\n  /** column name */\n  FromAddress = 'from_address',\n  /** column name */\n  IsFungibleV2 = 'is_fungible_v2',\n  /** column name */\n  PropertyVersionV1 = 'property_version_v1',\n  /** column name */\n  ToAddress = 'to_address',\n  /** column name */\n  TokenAmount = 'token_amount',\n  /** column name */\n  TokenDataId = 'token_data_id',\n  /** column name */\n  TokenStandard = 'token_standard',\n  /** column name */\n  TransactionTimestamp = 'transaction_timestamp',\n  /** column name */\n  TransactionVersion = 'transaction_version',\n  /** column name */\n  Type = 'type'\n}\n\n/** aggregate stddev on columns */\nexport type Token_Activities_V2_Stddev_Fields = {\n  __typename?: 'token_activities_v2_stddev_fields';\n  event_index?: Maybe<Scalars['Float']>;\n  property_version_v1?: Maybe<Scalars['Float']>;\n  token_amount?: Maybe<Scalars['Float']>;\n  transaction_version?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev() on columns of table \"token_activities_v2\" */\nexport type Token_Activities_V2_Stddev_Order_By = {\n  event_index?: InputMaybe<Order_By>;\n  property_version_v1?: InputMaybe<Order_By>;\n  token_amount?: InputMaybe<Order_By>;\n  transaction_version?: InputMaybe<Order_By>;\n};\n\n/** aggregate stddev_pop on columns */\nexport type Token_Activities_V2_Stddev_Pop_Fields = {\n  __typename?: 'token_activities_v2_stddev_pop_fields';\n  event_index?: Maybe<Scalars['Float']>;\n  property_version_v1?: Maybe<Scalars['Float']>;\n  token_amount?: Maybe<Scalars['Float']>;\n  transaction_version?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev_pop() on columns of table \"token_activities_v2\" */\nexport type Token_Activities_V2_Stddev_Pop_Order_By = {\n  event_index?: InputMaybe<Order_By>;\n  property_version_v1?: InputMaybe<Order_By>;\n  token_amount?: InputMaybe<Order_By>;\n  transaction_version?: InputMaybe<Order_By>;\n};\n\n/** aggregate stddev_samp on columns */\nexport type Token_Activities_V2_Stddev_Samp_Fields = {\n  __typename?: 'token_activities_v2_stddev_samp_fields';\n  event_index?: Maybe<Scalars['Float']>;\n  property_version_v1?: Maybe<Scalars['Float']>;\n  token_amount?: Maybe<Scalars['Float']>;\n  transaction_version?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev_samp() on columns of table \"token_activities_v2\" */\nexport type Token_Activities_V2_Stddev_Samp_Order_By = {\n  event_index?: InputMaybe<Order_By>;\n  property_version_v1?: InputMaybe<Order_By>;\n  token_amount?: InputMaybe<Order_By>;\n  transaction_version?: InputMaybe<Order_By>;\n};\n\n/** Streaming cursor of the table \"token_activities_v2\" */\nexport type Token_Activities_V2_Stream_Cursor_Input = {\n  /** Stream column input with initial value */\n  initial_value: Token_Activities_V2_Stream_Cursor_Value_Input;\n  /** cursor ordering */\n  ordering?: InputMaybe<Cursor_Ordering>;\n};\n\n/** Initial value of the column from where the streaming should start */\nexport type Token_Activities_V2_Stream_Cursor_Value_Input = {\n  after_value?: InputMaybe<Scalars['String']>;\n  before_value?: InputMaybe<Scalars['String']>;\n  entry_function_id_str?: InputMaybe<Scalars['String']>;\n  event_account_address?: InputMaybe<Scalars['String']>;\n  event_index?: InputMaybe<Scalars['bigint']>;\n  from_address?: InputMaybe<Scalars['String']>;\n  is_fungible_v2?: InputMaybe<Scalars['Boolean']>;\n  property_version_v1?: InputMaybe<Scalars['numeric']>;\n  to_address?: InputMaybe<Scalars['String']>;\n  token_amount?: InputMaybe<Scalars['numeric']>;\n  token_data_id?: InputMaybe<Scalars['String']>;\n  token_standard?: InputMaybe<Scalars['String']>;\n  transaction_timestamp?: InputMaybe<Scalars['timestamp']>;\n  transaction_version?: InputMaybe<Scalars['bigint']>;\n  type?: InputMaybe<Scalars['String']>;\n};\n\n/** aggregate sum on columns */\nexport type Token_Activities_V2_Sum_Fields = {\n  __typename?: 'token_activities_v2_sum_fields';\n  event_index?: Maybe<Scalars['bigint']>;\n  property_version_v1?: Maybe<Scalars['numeric']>;\n  token_amount?: Maybe<Scalars['numeric']>;\n  transaction_version?: Maybe<Scalars['bigint']>;\n};\n\n/** order by sum() on columns of table \"token_activities_v2\" */\nexport type Token_Activities_V2_Sum_Order_By = {\n  event_index?: InputMaybe<Order_By>;\n  property_version_v1?: InputMaybe<Order_By>;\n  token_amount?: InputMaybe<Order_By>;\n  transaction_version?: InputMaybe<Order_By>;\n};\n\n/** aggregate var_pop on columns */\nexport type Token_Activities_V2_Var_Pop_Fields = {\n  __typename?: 'token_activities_v2_var_pop_fields';\n  event_index?: Maybe<Scalars['Float']>;\n  property_version_v1?: Maybe<Scalars['Float']>;\n  token_amount?: Maybe<Scalars['Float']>;\n  transaction_version?: Maybe<Scalars['Float']>;\n};\n\n/** order by var_pop() on columns of table \"token_activities_v2\" */\nexport type Token_Activities_V2_Var_Pop_Order_By = {\n  event_index?: InputMaybe<Order_By>;\n  property_version_v1?: InputMaybe<Order_By>;\n  token_amount?: InputMaybe<Order_By>;\n  transaction_version?: InputMaybe<Order_By>;\n};\n\n/** aggregate var_samp on columns */\nexport type Token_Activities_V2_Var_Samp_Fields = {\n  __typename?: 'token_activities_v2_var_samp_fields';\n  event_index?: Maybe<Scalars['Float']>;\n  property_version_v1?: Maybe<Scalars['Float']>;\n  token_amount?: Maybe<Scalars['Float']>;\n  transaction_version?: Maybe<Scalars['Float']>;\n};\n\n/** order by var_samp() on columns of table \"token_activities_v2\" */\nexport type Token_Activities_V2_Var_Samp_Order_By = {\n  event_index?: InputMaybe<Order_By>;\n  property_version_v1?: InputMaybe<Order_By>;\n  token_amount?: InputMaybe<Order_By>;\n  transaction_version?: InputMaybe<Order_By>;\n};\n\n/** aggregate variance on columns */\nexport type Token_Activities_V2_Variance_Fields = {\n  __typename?: 'token_activities_v2_variance_fields';\n  event_index?: Maybe<Scalars['Float']>;\n  property_version_v1?: Maybe<Scalars['Float']>;\n  token_amount?: Maybe<Scalars['Float']>;\n  transaction_version?: Maybe<Scalars['Float']>;\n};\n\n/** order by variance() on columns of table \"token_activities_v2\" */\nexport type Token_Activities_V2_Variance_Order_By = {\n  event_index?: InputMaybe<Order_By>;\n  property_version_v1?: InputMaybe<Order_By>;\n  token_amount?: InputMaybe<Order_By>;\n  transaction_version?: InputMaybe<Order_By>;\n};\n\n/** aggregate var_pop on columns */\nexport type Token_Activities_Var_Pop_Fields = {\n  __typename?: 'token_activities_var_pop_fields';\n  coin_amount?: Maybe<Scalars['Float']>;\n  event_creation_number?: Maybe<Scalars['Float']>;\n  event_index?: Maybe<Scalars['Float']>;\n  event_sequence_number?: Maybe<Scalars['Float']>;\n  property_version?: Maybe<Scalars['Float']>;\n  token_amount?: Maybe<Scalars['Float']>;\n  transaction_version?: Maybe<Scalars['Float']>;\n};\n\n/** order by var_pop() on columns of table \"token_activities\" */\nexport type Token_Activities_Var_Pop_Order_By = {\n  coin_amount?: InputMaybe<Order_By>;\n  event_creation_number?: InputMaybe<Order_By>;\n  event_index?: InputMaybe<Order_By>;\n  event_sequence_number?: InputMaybe<Order_By>;\n  property_version?: InputMaybe<Order_By>;\n  token_amount?: InputMaybe<Order_By>;\n  transaction_version?: InputMaybe<Order_By>;\n};\n\n/** aggregate var_samp on columns */\nexport type Token_Activities_Var_Samp_Fields = {\n  __typename?: 'token_activities_var_samp_fields';\n  coin_amount?: Maybe<Scalars['Float']>;\n  event_creation_number?: Maybe<Scalars['Float']>;\n  event_index?: Maybe<Scalars['Float']>;\n  event_sequence_number?: Maybe<Scalars['Float']>;\n  property_version?: Maybe<Scalars['Float']>;\n  token_amount?: Maybe<Scalars['Float']>;\n  transaction_version?: Maybe<Scalars['Float']>;\n};\n\n/** order by var_samp() on columns of table \"token_activities\" */\nexport type Token_Activities_Var_Samp_Order_By = {\n  coin_amount?: InputMaybe<Order_By>;\n  event_creation_number?: InputMaybe<Order_By>;\n  event_index?: InputMaybe<Order_By>;\n  event_sequence_number?: InputMaybe<Order_By>;\n  property_version?: InputMaybe<Order_By>;\n  token_amount?: InputMaybe<Order_By>;\n  transaction_version?: InputMaybe<Order_By>;\n};\n\n/** aggregate variance on columns */\nexport type Token_Activities_Variance_Fields = {\n  __typename?: 'token_activities_variance_fields';\n  coin_amount?: Maybe<Scalars['Float']>;\n  event_creation_number?: Maybe<Scalars['Float']>;\n  event_index?: Maybe<Scalars['Float']>;\n  event_sequence_number?: Maybe<Scalars['Float']>;\n  property_version?: Maybe<Scalars['Float']>;\n  token_amount?: Maybe<Scalars['Float']>;\n  transaction_version?: Maybe<Scalars['Float']>;\n};\n\n/** order by variance() on columns of table \"token_activities\" */\nexport type Token_Activities_Variance_Order_By = {\n  coin_amount?: InputMaybe<Order_By>;\n  event_creation_number?: InputMaybe<Order_By>;\n  event_index?: InputMaybe<Order_By>;\n  event_sequence_number?: InputMaybe<Order_By>;\n  property_version?: InputMaybe<Order_By>;\n  token_amount?: InputMaybe<Order_By>;\n  transaction_version?: InputMaybe<Order_By>;\n};\n\n/** columns and relationships of \"token_datas\" */\nexport type Token_Datas = {\n  __typename?: 'token_datas';\n  collection_data_id_hash: Scalars['String'];\n  collection_name: Scalars['String'];\n  creator_address: Scalars['String'];\n  default_properties: Scalars['jsonb'];\n  description: Scalars['String'];\n  description_mutable: Scalars['Boolean'];\n  largest_property_version: Scalars['numeric'];\n  maximum: Scalars['numeric'];\n  maximum_mutable: Scalars['Boolean'];\n  metadata_uri: Scalars['String'];\n  name: Scalars['String'];\n  payee_address: Scalars['String'];\n  properties_mutable: Scalars['Boolean'];\n  royalty_mutable: Scalars['Boolean'];\n  royalty_points_denominator: Scalars['numeric'];\n  royalty_points_numerator: Scalars['numeric'];\n  supply: Scalars['numeric'];\n  token_data_id_hash: Scalars['String'];\n  transaction_timestamp: Scalars['timestamp'];\n  transaction_version: Scalars['bigint'];\n  uri_mutable: Scalars['Boolean'];\n};\n\n\n/** columns and relationships of \"token_datas\" */\nexport type Token_DatasDefault_PropertiesArgs = {\n  path?: InputMaybe<Scalars['String']>;\n};\n\n/** Boolean expression to filter rows from the table \"token_datas\". All fields are combined with a logical 'AND'. */\nexport type Token_Datas_Bool_Exp = {\n  _and?: InputMaybe<Array<Token_Datas_Bool_Exp>>;\n  _not?: InputMaybe<Token_Datas_Bool_Exp>;\n  _or?: InputMaybe<Array<Token_Datas_Bool_Exp>>;\n  collection_data_id_hash?: InputMaybe<String_Comparison_Exp>;\n  collection_name?: InputMaybe<String_Comparison_Exp>;\n  creator_address?: InputMaybe<String_Comparison_Exp>;\n  default_properties?: InputMaybe<Jsonb_Comparison_Exp>;\n  description?: InputMaybe<String_Comparison_Exp>;\n  description_mutable?: InputMaybe<Boolean_Comparison_Exp>;\n  largest_property_version?: InputMaybe<Numeric_Comparison_Exp>;\n  maximum?: InputMaybe<Numeric_Comparison_Exp>;\n  maximum_mutable?: InputMaybe<Boolean_Comparison_Exp>;\n  metadata_uri?: InputMaybe<String_Comparison_Exp>;\n  name?: InputMaybe<String_Comparison_Exp>;\n  payee_address?: InputMaybe<String_Comparison_Exp>;\n  properties_mutable?: InputMaybe<Boolean_Comparison_Exp>;\n  royalty_mutable?: InputMaybe<Boolean_Comparison_Exp>;\n  royalty_points_denominator?: InputMaybe<Numeric_Comparison_Exp>;\n  royalty_points_numerator?: InputMaybe<Numeric_Comparison_Exp>;\n  supply?: InputMaybe<Numeric_Comparison_Exp>;\n  token_data_id_hash?: InputMaybe<String_Comparison_Exp>;\n  transaction_timestamp?: InputMaybe<Timestamp_Comparison_Exp>;\n  transaction_version?: InputMaybe<Bigint_Comparison_Exp>;\n  uri_mutable?: InputMaybe<Boolean_Comparison_Exp>;\n};\n\n/** Ordering options when selecting data from \"token_datas\". */\nexport type Token_Datas_Order_By = {\n  collection_data_id_hash?: InputMaybe<Order_By>;\n  collection_name?: InputMaybe<Order_By>;\n  creator_address?: InputMaybe<Order_By>;\n  default_properties?: InputMaybe<Order_By>;\n  description?: InputMaybe<Order_By>;\n  description_mutable?: InputMaybe<Order_By>;\n  largest_property_version?: InputMaybe<Order_By>;\n  maximum?: InputMaybe<Order_By>;\n  maximum_mutable?: InputMaybe<Order_By>;\n  metadata_uri?: InputMaybe<Order_By>;\n  name?: InputMaybe<Order_By>;\n  payee_address?: InputMaybe<Order_By>;\n  properties_mutable?: InputMaybe<Order_By>;\n  royalty_mutable?: InputMaybe<Order_By>;\n  royalty_points_denominator?: InputMaybe<Order_By>;\n  royalty_points_numerator?: InputMaybe<Order_By>;\n  supply?: InputMaybe<Order_By>;\n  token_data_id_hash?: InputMaybe<Order_By>;\n  transaction_timestamp?: InputMaybe<Order_By>;\n  transaction_version?: InputMaybe<Order_By>;\n  uri_mutable?: InputMaybe<Order_By>;\n};\n\n/** select columns of table \"token_datas\" */\nexport enum Token_Datas_Select_Column {\n  /** column name */\n  CollectionDataIdHash = 'collection_data_id_hash',\n  /** column name */\n  CollectionName = 'collection_name',\n  /** column name */\n  CreatorAddress = 'creator_address',\n  /** column name */\n  DefaultProperties = 'default_properties',\n  /** column name */\n  Description = 'description',\n  /** column name */\n  DescriptionMutable = 'description_mutable',\n  /** column name */\n  LargestPropertyVersion = 'largest_property_version',\n  /** column name */\n  Maximum = 'maximum',\n  /** column name */\n  MaximumMutable = 'maximum_mutable',\n  /** column name */\n  MetadataUri = 'metadata_uri',\n  /** column name */\n  Name = 'name',\n  /** column name */\n  PayeeAddress = 'payee_address',\n  /** column name */\n  PropertiesMutable = 'properties_mutable',\n  /** column name */\n  RoyaltyMutable = 'royalty_mutable',\n  /** column name */\n  RoyaltyPointsDenominator = 'royalty_points_denominator',\n  /** column name */\n  RoyaltyPointsNumerator = 'royalty_points_numerator',\n  /** column name */\n  Supply = 'supply',\n  /** column name */\n  TokenDataIdHash = 'token_data_id_hash',\n  /** column name */\n  TransactionTimestamp = 'transaction_timestamp',\n  /** column name */\n  TransactionVersion = 'transaction_version',\n  /** column name */\n  UriMutable = 'uri_mutable'\n}\n\n/** Streaming cursor of the table \"token_datas\" */\nexport type Token_Datas_Stream_Cursor_Input = {\n  /** Stream column input with initial value */\n  initial_value: Token_Datas_Stream_Cursor_Value_Input;\n  /** cursor ordering */\n  ordering?: InputMaybe<Cursor_Ordering>;\n};\n\n/** Initial value of the column from where the streaming should start */\nexport type Token_Datas_Stream_Cursor_Value_Input = {\n  collection_data_id_hash?: InputMaybe<Scalars['String']>;\n  collection_name?: InputMaybe<Scalars['String']>;\n  creator_address?: InputMaybe<Scalars['String']>;\n  default_properties?: InputMaybe<Scalars['jsonb']>;\n  description?: InputMaybe<Scalars['String']>;\n  description_mutable?: InputMaybe<Scalars['Boolean']>;\n  largest_property_version?: InputMaybe<Scalars['numeric']>;\n  maximum?: InputMaybe<Scalars['numeric']>;\n  maximum_mutable?: InputMaybe<Scalars['Boolean']>;\n  metadata_uri?: InputMaybe<Scalars['String']>;\n  name?: InputMaybe<Scalars['String']>;\n  payee_address?: InputMaybe<Scalars['String']>;\n  properties_mutable?: InputMaybe<Scalars['Boolean']>;\n  royalty_mutable?: InputMaybe<Scalars['Boolean']>;\n  royalty_points_denominator?: InputMaybe<Scalars['numeric']>;\n  royalty_points_numerator?: InputMaybe<Scalars['numeric']>;\n  supply?: InputMaybe<Scalars['numeric']>;\n  token_data_id_hash?: InputMaybe<Scalars['String']>;\n  transaction_timestamp?: InputMaybe<Scalars['timestamp']>;\n  transaction_version?: InputMaybe<Scalars['bigint']>;\n  uri_mutable?: InputMaybe<Scalars['Boolean']>;\n};\n\n/** columns and relationships of \"token_ownerships\" */\nexport type Token_Ownerships = {\n  __typename?: 'token_ownerships';\n  amount: Scalars['numeric'];\n  collection_data_id_hash: Scalars['String'];\n  collection_name: Scalars['String'];\n  creator_address: Scalars['String'];\n  name: Scalars['String'];\n  owner_address?: Maybe<Scalars['String']>;\n  property_version: Scalars['numeric'];\n  table_handle: Scalars['String'];\n  table_type?: Maybe<Scalars['String']>;\n  token_data_id_hash: Scalars['String'];\n  transaction_timestamp: Scalars['timestamp'];\n  transaction_version: Scalars['bigint'];\n};\n\n/** Boolean expression to filter rows from the table \"token_ownerships\". All fields are combined with a logical 'AND'. */\nexport type Token_Ownerships_Bool_Exp = {\n  _and?: InputMaybe<Array<Token_Ownerships_Bool_Exp>>;\n  _not?: InputMaybe<Token_Ownerships_Bool_Exp>;\n  _or?: InputMaybe<Array<Token_Ownerships_Bool_Exp>>;\n  amount?: InputMaybe<Numeric_Comparison_Exp>;\n  collection_data_id_hash?: InputMaybe<String_Comparison_Exp>;\n  collection_name?: InputMaybe<String_Comparison_Exp>;\n  creator_address?: InputMaybe<String_Comparison_Exp>;\n  name?: InputMaybe<String_Comparison_Exp>;\n  owner_address?: InputMaybe<String_Comparison_Exp>;\n  property_version?: InputMaybe<Numeric_Comparison_Exp>;\n  table_handle?: InputMaybe<String_Comparison_Exp>;\n  table_type?: InputMaybe<String_Comparison_Exp>;\n  token_data_id_hash?: InputMaybe<String_Comparison_Exp>;\n  transaction_timestamp?: InputMaybe<Timestamp_Comparison_Exp>;\n  transaction_version?: InputMaybe<Bigint_Comparison_Exp>;\n};\n\n/** Ordering options when selecting data from \"token_ownerships\". */\nexport type Token_Ownerships_Order_By = {\n  amount?: InputMaybe<Order_By>;\n  collection_data_id_hash?: InputMaybe<Order_By>;\n  collection_name?: InputMaybe<Order_By>;\n  creator_address?: InputMaybe<Order_By>;\n  name?: InputMaybe<Order_By>;\n  owner_address?: InputMaybe<Order_By>;\n  property_version?: InputMaybe<Order_By>;\n  table_handle?: InputMaybe<Order_By>;\n  table_type?: InputMaybe<Order_By>;\n  token_data_id_hash?: InputMaybe<Order_By>;\n  transaction_timestamp?: InputMaybe<Order_By>;\n  transaction_version?: InputMaybe<Order_By>;\n};\n\n/** select columns of table \"token_ownerships\" */\nexport enum Token_Ownerships_Select_Column {\n  /** column name */\n  Amount = 'amount',\n  /** column name */\n  CollectionDataIdHash = 'collection_data_id_hash',\n  /** column name */\n  CollectionName = 'collection_name',\n  /** column name */\n  CreatorAddress = 'creator_address',\n  /** column name */\n  Name = 'name',\n  /** column name */\n  OwnerAddress = 'owner_address',\n  /** column name */\n  PropertyVersion = 'property_version',\n  /** column name */\n  TableHandle = 'table_handle',\n  /** column name */\n  TableType = 'table_type',\n  /** column name */\n  TokenDataIdHash = 'token_data_id_hash',\n  /** column name */\n  TransactionTimestamp = 'transaction_timestamp',\n  /** column name */\n  TransactionVersion = 'transaction_version'\n}\n\n/** Streaming cursor of the table \"token_ownerships\" */\nexport type Token_Ownerships_Stream_Cursor_Input = {\n  /** Stream column input with initial value */\n  initial_value: Token_Ownerships_Stream_Cursor_Value_Input;\n  /** cursor ordering */\n  ordering?: InputMaybe<Cursor_Ordering>;\n};\n\n/** Initial value of the column from where the streaming should start */\nexport type Token_Ownerships_Stream_Cursor_Value_Input = {\n  amount?: InputMaybe<Scalars['numeric']>;\n  collection_data_id_hash?: InputMaybe<Scalars['String']>;\n  collection_name?: InputMaybe<Scalars['String']>;\n  creator_address?: InputMaybe<Scalars['String']>;\n  name?: InputMaybe<Scalars['String']>;\n  owner_address?: InputMaybe<Scalars['String']>;\n  property_version?: InputMaybe<Scalars['numeric']>;\n  table_handle?: InputMaybe<Scalars['String']>;\n  table_type?: InputMaybe<Scalars['String']>;\n  token_data_id_hash?: InputMaybe<Scalars['String']>;\n  transaction_timestamp?: InputMaybe<Scalars['timestamp']>;\n  transaction_version?: InputMaybe<Scalars['bigint']>;\n};\n\n/** columns and relationships of \"tokens\" */\nexport type Tokens = {\n  __typename?: 'tokens';\n  collection_data_id_hash: Scalars['String'];\n  collection_name: Scalars['String'];\n  creator_address: Scalars['String'];\n  name: Scalars['String'];\n  property_version: Scalars['numeric'];\n  token_data_id_hash: Scalars['String'];\n  token_properties: Scalars['jsonb'];\n  transaction_timestamp: Scalars['timestamp'];\n  transaction_version: Scalars['bigint'];\n};\n\n\n/** columns and relationships of \"tokens\" */\nexport type TokensToken_PropertiesArgs = {\n  path?: InputMaybe<Scalars['String']>;\n};\n\n/** Boolean expression to filter rows from the table \"tokens\". All fields are combined with a logical 'AND'. */\nexport type Tokens_Bool_Exp = {\n  _and?: InputMaybe<Array<Tokens_Bool_Exp>>;\n  _not?: InputMaybe<Tokens_Bool_Exp>;\n  _or?: InputMaybe<Array<Tokens_Bool_Exp>>;\n  collection_data_id_hash?: InputMaybe<String_Comparison_Exp>;\n  collection_name?: InputMaybe<String_Comparison_Exp>;\n  creator_address?: InputMaybe<String_Comparison_Exp>;\n  name?: InputMaybe<String_Comparison_Exp>;\n  property_version?: InputMaybe<Numeric_Comparison_Exp>;\n  token_data_id_hash?: InputMaybe<String_Comparison_Exp>;\n  token_properties?: InputMaybe<Jsonb_Comparison_Exp>;\n  transaction_timestamp?: InputMaybe<Timestamp_Comparison_Exp>;\n  transaction_version?: InputMaybe<Bigint_Comparison_Exp>;\n};\n\n/** Ordering options when selecting data from \"tokens\". */\nexport type Tokens_Order_By = {\n  collection_data_id_hash?: InputMaybe<Order_By>;\n  collection_name?: InputMaybe<Order_By>;\n  creator_address?: InputMaybe<Order_By>;\n  name?: InputMaybe<Order_By>;\n  property_version?: InputMaybe<Order_By>;\n  token_data_id_hash?: InputMaybe<Order_By>;\n  token_properties?: InputMaybe<Order_By>;\n  transaction_timestamp?: InputMaybe<Order_By>;\n  transaction_version?: InputMaybe<Order_By>;\n};\n\n/** select columns of table \"tokens\" */\nexport enum Tokens_Select_Column {\n  /** column name */\n  CollectionDataIdHash = 'collection_data_id_hash',\n  /** column name */\n  CollectionName = 'collection_name',\n  /** column name */\n  CreatorAddress = 'creator_address',\n  /** column name */\n  Name = 'name',\n  /** column name */\n  PropertyVersion = 'property_version',\n  /** column name */\n  TokenDataIdHash = 'token_data_id_hash',\n  /** column name */\n  TokenProperties = 'token_properties',\n  /** column name */\n  TransactionTimestamp = 'transaction_timestamp',\n  /** column name */\n  TransactionVersion = 'transaction_version'\n}\n\n/** Streaming cursor of the table \"tokens\" */\nexport type Tokens_Stream_Cursor_Input = {\n  /** Stream column input with initial value */\n  initial_value: Tokens_Stream_Cursor_Value_Input;\n  /** cursor ordering */\n  ordering?: InputMaybe<Cursor_Ordering>;\n};\n\n/** Initial value of the column from where the streaming should start */\nexport type Tokens_Stream_Cursor_Value_Input = {\n  collection_data_id_hash?: InputMaybe<Scalars['String']>;\n  collection_name?: InputMaybe<Scalars['String']>;\n  creator_address?: InputMaybe<Scalars['String']>;\n  name?: InputMaybe<Scalars['String']>;\n  property_version?: InputMaybe<Scalars['numeric']>;\n  token_data_id_hash?: InputMaybe<Scalars['String']>;\n  token_properties?: InputMaybe<Scalars['jsonb']>;\n  transaction_timestamp?: InputMaybe<Scalars['timestamp']>;\n  transaction_version?: InputMaybe<Scalars['bigint']>;\n};\n\n/** columns and relationships of \"user_transactions\" */\nexport type User_Transactions = {\n  __typename?: 'user_transactions';\n  block_height: Scalars['bigint'];\n  entry_function_id_str: Scalars['String'];\n  epoch: Scalars['bigint'];\n  expiration_timestamp_secs: Scalars['timestamp'];\n  gas_unit_price: Scalars['numeric'];\n  max_gas_amount: Scalars['numeric'];\n  parent_signature_type: Scalars['String'];\n  sender: Scalars['String'];\n  sequence_number: Scalars['bigint'];\n  timestamp: Scalars['timestamp'];\n  version: Scalars['bigint'];\n};\n\n/** Boolean expression to filter rows from the table \"user_transactions\". All fields are combined with a logical 'AND'. */\nexport type User_Transactions_Bool_Exp = {\n  _and?: InputMaybe<Array<User_Transactions_Bool_Exp>>;\n  _not?: InputMaybe<User_Transactions_Bool_Exp>;\n  _or?: InputMaybe<Array<User_Transactions_Bool_Exp>>;\n  block_height?: InputMaybe<Bigint_Comparison_Exp>;\n  entry_function_id_str?: InputMaybe<String_Comparison_Exp>;\n  epoch?: InputMaybe<Bigint_Comparison_Exp>;\n  expiration_timestamp_secs?: InputMaybe<Timestamp_Comparison_Exp>;\n  gas_unit_price?: InputMaybe<Numeric_Comparison_Exp>;\n  max_gas_amount?: InputMaybe<Numeric_Comparison_Exp>;\n  parent_signature_type?: InputMaybe<String_Comparison_Exp>;\n  sender?: InputMaybe<String_Comparison_Exp>;\n  sequence_number?: InputMaybe<Bigint_Comparison_Exp>;\n  timestamp?: InputMaybe<Timestamp_Comparison_Exp>;\n  version?: InputMaybe<Bigint_Comparison_Exp>;\n};\n\n/** Ordering options when selecting data from \"user_transactions\". */\nexport type User_Transactions_Order_By = {\n  block_height?: InputMaybe<Order_By>;\n  entry_function_id_str?: InputMaybe<Order_By>;\n  epoch?: InputMaybe<Order_By>;\n  expiration_timestamp_secs?: InputMaybe<Order_By>;\n  gas_unit_price?: InputMaybe<Order_By>;\n  max_gas_amount?: InputMaybe<Order_By>;\n  parent_signature_type?: InputMaybe<Order_By>;\n  sender?: InputMaybe<Order_By>;\n  sequence_number?: InputMaybe<Order_By>;\n  timestamp?: InputMaybe<Order_By>;\n  version?: InputMaybe<Order_By>;\n};\n\n/** select columns of table \"user_transactions\" */\nexport enum User_Transactions_Select_Column {\n  /** column name */\n  BlockHeight = 'block_height',\n  /** column name */\n  EntryFunctionIdStr = 'entry_function_id_str',\n  /** column name */\n  Epoch = 'epoch',\n  /** column name */\n  ExpirationTimestampSecs = 'expiration_timestamp_secs',\n  /** column name */\n  GasUnitPrice = 'gas_unit_price',\n  /** column name */\n  MaxGasAmount = 'max_gas_amount',\n  /** column name */\n  ParentSignatureType = 'parent_signature_type',\n  /** column name */\n  Sender = 'sender',\n  /** column name */\n  SequenceNumber = 'sequence_number',\n  /** column name */\n  Timestamp = 'timestamp',\n  /** column name */\n  Version = 'version'\n}\n\n/** Streaming cursor of the table \"user_transactions\" */\nexport type User_Transactions_Stream_Cursor_Input = {\n  /** Stream column input with initial value */\n  initial_value: User_Transactions_Stream_Cursor_Value_Input;\n  /** cursor ordering */\n  ordering?: InputMaybe<Cursor_Ordering>;\n};\n\n/** Initial value of the column from where the streaming should start */\nexport type User_Transactions_Stream_Cursor_Value_Input = {\n  block_height?: InputMaybe<Scalars['bigint']>;\n  entry_function_id_str?: InputMaybe<Scalars['String']>;\n  epoch?: InputMaybe<Scalars['bigint']>;\n  expiration_timestamp_secs?: InputMaybe<Scalars['timestamp']>;\n  gas_unit_price?: InputMaybe<Scalars['numeric']>;\n  max_gas_amount?: InputMaybe<Scalars['numeric']>;\n  parent_signature_type?: InputMaybe<Scalars['String']>;\n  sender?: InputMaybe<Scalars['String']>;\n  sequence_number?: InputMaybe<Scalars['bigint']>;\n  timestamp?: InputMaybe<Scalars['timestamp']>;\n  version?: InputMaybe<Scalars['bigint']>;\n};\n"]},"metadata":{},"sourceType":"module"}