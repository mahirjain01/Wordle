{"ast":null,"code":"const U32_MASK64 = BigInt(2 ** 32 - 1);\n\nconst _32n = BigInt(32); // We are not using BigUint64Array, because they are extremely slow as per 2022\n\n\nexport function fromBig(n) {\n  let le = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  if (le) return {\n    h: Number(n & U32_MASK64),\n    l: Number(n >> _32n & U32_MASK64)\n  };\n  return {\n    h: Number(n >> _32n & U32_MASK64) | 0,\n    l: Number(n & U32_MASK64) | 0\n  };\n}\nexport function split(lst) {\n  let le = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  let Ah = new Uint32Array(lst.length);\n  let Al = new Uint32Array(lst.length);\n\n  for (let i = 0; i < lst.length; i++) {\n    const {\n      h,\n      l\n    } = fromBig(lst[i], le);\n    [Ah[i], Al[i]] = [h, l];\n  }\n\n  return [Ah, Al];\n}\nexport const toBig = (h, l) => BigInt(h >>> 0) << _32n | BigInt(l >>> 0); // for Shift in [0, 32)\n\nconst shrSH = (h, l, s) => h >>> s;\n\nconst shrSL = (h, l, s) => h << 32 - s | l >>> s; // Right rotate for Shift in [1, 32)\n\n\nconst rotrSH = (h, l, s) => h >>> s | l << 32 - s;\n\nconst rotrSL = (h, l, s) => h << 32 - s | l >>> s; // Right rotate for Shift in (32, 64), NOTE: 32 is special case.\n\n\nconst rotrBH = (h, l, s) => h << 64 - s | l >>> s - 32;\n\nconst rotrBL = (h, l, s) => h >>> s - 32 | l << 64 - s; // Right rotate for shift===32 (just swaps l&h)\n\n\nconst rotr32H = (h, l) => l;\n\nconst rotr32L = (h, l) => h; // Left rotate for Shift in [1, 32)\n\n\nconst rotlSH = (h, l, s) => h << s | l >>> 32 - s;\n\nconst rotlSL = (h, l, s) => l << s | h >>> 32 - s; // Left rotate for Shift in (32, 64), NOTE: 32 is special case.\n\n\nconst rotlBH = (h, l, s) => l << s - 32 | h >>> 64 - s;\n\nconst rotlBL = (h, l, s) => h << s - 32 | l >>> 64 - s; // JS uses 32-bit signed integers for bitwise operations which means we cannot\n// simple take carry out of low bit sum by shift, we need to use division.\n// Removing \"export\" has 5% perf penalty -_-\n\n\nexport function add(Ah, Al, Bh, Bl) {\n  const l = (Al >>> 0) + (Bl >>> 0);\n  return {\n    h: Ah + Bh + (l / 2 ** 32 | 0) | 0,\n    l: l | 0\n  };\n} // Addition with more than 2 elements\n\nconst add3L = (Al, Bl, Cl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0);\n\nconst add3H = (low, Ah, Bh, Ch) => Ah + Bh + Ch + (low / 2 ** 32 | 0) | 0;\n\nconst add4L = (Al, Bl, Cl, Dl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0);\n\nconst add4H = (low, Ah, Bh, Ch, Dh) => Ah + Bh + Ch + Dh + (low / 2 ** 32 | 0) | 0;\n\nconst add5L = (Al, Bl, Cl, Dl, El) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0) + (El >>> 0);\n\nconst add5H = (low, Ah, Bh, Ch, Dh, Eh) => Ah + Bh + Ch + Dh + Eh + (low / 2 ** 32 | 0) | 0; // prettier-ignore\n\n\nconst u64 = {\n  fromBig,\n  split,\n  toBig,\n  shrSH,\n  shrSL,\n  rotrSH,\n  rotrSL,\n  rotrBH,\n  rotrBL,\n  rotr32H,\n  rotr32L,\n  rotlSH,\n  rotlSL,\n  rotlBH,\n  rotlBL,\n  add,\n  add3L,\n  add3H,\n  add4L,\n  add4H,\n  add5H,\n  add5L\n};\nexport default u64;","map":{"version":3,"sources":["/home/mahir/INTER-IIT/wordle/node_modules/@noble/hashes/esm/_u64.js"],"names":["U32_MASK64","BigInt","_32n","fromBig","n","le","h","Number","l","split","lst","Ah","Uint32Array","length","Al","i","toBig","shrSH","s","shrSL","rotrSH","rotrSL","rotrBH","rotrBL","rotr32H","rotr32L","rotlSH","rotlSL","rotlBH","rotlBL","add","Bh","Bl","add3L","Cl","add3H","low","Ch","add4L","Dl","add4H","Dh","add5L","El","add5H","Eh","u64"],"mappings":"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","sourcesContent":["const U32_MASK64 = BigInt(2 ** 32 - 1);\nconst _32n = BigInt(32);\n// We are not using BigUint64Array, because they are extremely slow as per 2022\nexport function fromBig(n, le = false) {\n    if (le)\n        return { h: Number(n & U32_MASK64), l: Number((n >> _32n) & U32_MASK64) };\n    return { h: Number((n >> _32n) & U32_MASK64) | 0, l: Number(n & U32_MASK64) | 0 };\n}\nexport function split(lst, le = false) {\n    let Ah = new Uint32Array(lst.length);\n    let Al = new Uint32Array(lst.length);\n    for (let i = 0; i < lst.length; i++) {\n        const { h, l } = fromBig(lst[i], le);\n        [Ah[i], Al[i]] = [h, l];\n    }\n    return [Ah, Al];\n}\nexport const toBig = (h, l) => (BigInt(h >>> 0) << _32n) | BigInt(l >>> 0);\n// for Shift in [0, 32)\nconst shrSH = (h, l, s) => h >>> s;\nconst shrSL = (h, l, s) => (h << (32 - s)) | (l >>> s);\n// Right rotate for Shift in [1, 32)\nconst rotrSH = (h, l, s) => (h >>> s) | (l << (32 - s));\nconst rotrSL = (h, l, s) => (h << (32 - s)) | (l >>> s);\n// Right rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotrBH = (h, l, s) => (h << (64 - s)) | (l >>> (s - 32));\nconst rotrBL = (h, l, s) => (h >>> (s - 32)) | (l << (64 - s));\n// Right rotate for shift===32 (just swaps l&h)\nconst rotr32H = (h, l) => l;\nconst rotr32L = (h, l) => h;\n// Left rotate for Shift in [1, 32)\nconst rotlSH = (h, l, s) => (h << s) | (l >>> (32 - s));\nconst rotlSL = (h, l, s) => (l << s) | (h >>> (32 - s));\n// Left rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotlBH = (h, l, s) => (l << (s - 32)) | (h >>> (64 - s));\nconst rotlBL = (h, l, s) => (h << (s - 32)) | (l >>> (64 - s));\n// JS uses 32-bit signed integers for bitwise operations which means we cannot\n// simple take carry out of low bit sum by shift, we need to use division.\n// Removing \"export\" has 5% perf penalty -_-\nexport function add(Ah, Al, Bh, Bl) {\n    const l = (Al >>> 0) + (Bl >>> 0);\n    return { h: (Ah + Bh + ((l / 2 ** 32) | 0)) | 0, l: l | 0 };\n}\n// Addition with more than 2 elements\nconst add3L = (Al, Bl, Cl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0);\nconst add3H = (low, Ah, Bh, Ch) => (Ah + Bh + Ch + ((low / 2 ** 32) | 0)) | 0;\nconst add4L = (Al, Bl, Cl, Dl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0);\nconst add4H = (low, Ah, Bh, Ch, Dh) => (Ah + Bh + Ch + Dh + ((low / 2 ** 32) | 0)) | 0;\nconst add5L = (Al, Bl, Cl, Dl, El) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0) + (El >>> 0);\nconst add5H = (low, Ah, Bh, Ch, Dh, Eh) => (Ah + Bh + Ch + Dh + Eh + ((low / 2 ** 32) | 0)) | 0;\n// prettier-ignore\nconst u64 = {\n    fromBig, split, toBig,\n    shrSH, shrSL,\n    rotrSH, rotrSL, rotrBH, rotrBL,\n    rotr32H, rotr32L,\n    rotlSH, rotlSL, rotlBH, rotlBL,\n    add, add3L, add3H, add4L, add4H, add5H, add5L,\n};\nexport default u64;\n"]},"metadata":{},"sourceType":"module"}