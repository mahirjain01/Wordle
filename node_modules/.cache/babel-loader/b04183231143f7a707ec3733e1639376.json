{"ast":null,"code":"import assert from './_assert.js';\nimport u64 from './_u64.js';\nimport { Hash, u32, toBytes, wrapConstructor, wrapConstructorWithOpts } from './utils.js'; // Various per round constants calculations\n\nconst [SHA3_PI, SHA3_ROTL, _SHA3_IOTA] = [[], [], []];\n\nconst _0n = BigInt(0);\n\nconst _1n = BigInt(1);\n\nconst _2n = BigInt(2);\n\nconst _7n = BigInt(7);\n\nconst _256n = BigInt(256);\n\nconst _0x71n = BigInt(0x71);\n\nfor (let round = 0, R = _1n, x = 1, y = 0; round < 24; round++) {\n  // Pi\n  [x, y] = [y, (2 * x + 3 * y) % 5];\n  SHA3_PI.push(2 * (5 * y + x)); // Rotational\n\n  SHA3_ROTL.push((round + 1) * (round + 2) / 2 % 64); // Iota\n\n  let t = _0n;\n\n  for (let j = 0; j < 7; j++) {\n    R = (R << _1n ^ (R >> _7n) * _0x71n) % _256n;\n    if (R & _2n) t ^= _1n << (_1n << BigInt(j)) - _1n;\n  }\n\n  _SHA3_IOTA.push(t);\n}\n\nconst [SHA3_IOTA_H, SHA3_IOTA_L] = u64.split(_SHA3_IOTA, true); // Left rotation (without 0, 32, 64)\n\nconst rotlH = (h, l, s) => s > 32 ? u64.rotlBH(h, l, s) : u64.rotlSH(h, l, s);\n\nconst rotlL = (h, l, s) => s > 32 ? u64.rotlBL(h, l, s) : u64.rotlSL(h, l, s); // Same as keccakf1600, but allows to skip some rounds\n\n\nexport function keccakP(s) {\n  let rounds = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 24;\n  const B = new Uint32Array(5 * 2); // NOTE: all indices are x2 since we store state as u32 instead of u64 (bigints to slow in js)\n\n  for (let round = 24 - rounds; round < 24; round++) {\n    // Theta θ\n    for (let x = 0; x < 10; x++) B[x] = s[x] ^ s[x + 10] ^ s[x + 20] ^ s[x + 30] ^ s[x + 40];\n\n    for (let x = 0; x < 10; x += 2) {\n      const idx1 = (x + 8) % 10;\n      const idx0 = (x + 2) % 10;\n      const B0 = B[idx0];\n      const B1 = B[idx0 + 1];\n      const Th = rotlH(B0, B1, 1) ^ B[idx1];\n      const Tl = rotlL(B0, B1, 1) ^ B[idx1 + 1];\n\n      for (let y = 0; y < 50; y += 10) {\n        s[x + y] ^= Th;\n        s[x + y + 1] ^= Tl;\n      }\n    } // Rho (ρ) and Pi (π)\n\n\n    let curH = s[2];\n    let curL = s[3];\n\n    for (let t = 0; t < 24; t++) {\n      const shift = SHA3_ROTL[t];\n      const Th = rotlH(curH, curL, shift);\n      const Tl = rotlL(curH, curL, shift);\n      const PI = SHA3_PI[t];\n      curH = s[PI];\n      curL = s[PI + 1];\n      s[PI] = Th;\n      s[PI + 1] = Tl;\n    } // Chi (χ)\n\n\n    for (let y = 0; y < 50; y += 10) {\n      for (let x = 0; x < 10; x++) B[x] = s[y + x];\n\n      for (let x = 0; x < 10; x++) s[y + x] ^= ~B[(x + 2) % 10] & B[(x + 4) % 10];\n    } // Iota (ι)\n\n\n    s[0] ^= SHA3_IOTA_H[round];\n    s[1] ^= SHA3_IOTA_L[round];\n  }\n\n  B.fill(0);\n}\nexport class Keccak extends Hash {\n  // NOTE: we accept arguments in bytes instead of bits here.\n  constructor(blockLen, suffix, outputLen) {\n    let enableXOF = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n    let rounds = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 24;\n    super();\n    this.blockLen = blockLen;\n    this.suffix = suffix;\n    this.outputLen = outputLen;\n    this.enableXOF = enableXOF;\n    this.rounds = rounds;\n    this.pos = 0;\n    this.posOut = 0;\n    this.finished = false;\n    this.destroyed = false; // Can be passed from user as dkLen\n\n    assert.number(outputLen); // 1600 = 5x5 matrix of 64bit.  1600 bits === 200 bytes\n\n    if (0 >= this.blockLen || this.blockLen >= 200) throw new Error('Sha3 supports only keccak-f1600 function');\n    this.state = new Uint8Array(200);\n    this.state32 = u32(this.state);\n  }\n\n  keccak() {\n    keccakP(this.state32, this.rounds);\n    this.posOut = 0;\n    this.pos = 0;\n  }\n\n  update(data) {\n    assert.exists(this);\n    const {\n      blockLen,\n      state\n    } = this;\n    data = toBytes(data);\n    const len = data.length;\n\n    for (let pos = 0; pos < len;) {\n      const take = Math.min(blockLen - this.pos, len - pos);\n\n      for (let i = 0; i < take; i++) state[this.pos++] ^= data[pos++];\n\n      if (this.pos === blockLen) this.keccak();\n    }\n\n    return this;\n  }\n\n  finish() {\n    if (this.finished) return;\n    this.finished = true;\n    const {\n      state,\n      suffix,\n      pos,\n      blockLen\n    } = this; // Do the padding\n\n    state[pos] ^= suffix;\n    if ((suffix & 0x80) !== 0 && pos === blockLen - 1) this.keccak();\n    state[blockLen - 1] ^= 0x80;\n    this.keccak();\n  }\n\n  writeInto(out) {\n    assert.exists(this, false);\n    assert.bytes(out);\n    this.finish();\n    const bufferOut = this.state;\n    const {\n      blockLen\n    } = this;\n\n    for (let pos = 0, len = out.length; pos < len;) {\n      if (this.posOut >= blockLen) this.keccak();\n      const take = Math.min(blockLen - this.posOut, len - pos);\n      out.set(bufferOut.subarray(this.posOut, this.posOut + take), pos);\n      this.posOut += take;\n      pos += take;\n    }\n\n    return out;\n  }\n\n  xofInto(out) {\n    // Sha3/Keccak usage with XOF is probably mistake, only SHAKE instances can do XOF\n    if (!this.enableXOF) throw new Error('XOF is not possible for this instance');\n    return this.writeInto(out);\n  }\n\n  xof(bytes) {\n    assert.number(bytes);\n    return this.xofInto(new Uint8Array(bytes));\n  }\n\n  digestInto(out) {\n    assert.output(out, this);\n    if (this.finished) throw new Error('digest() was already called');\n    this.writeInto(out);\n    this.destroy();\n    return out;\n  }\n\n  digest() {\n    return this.digestInto(new Uint8Array(this.outputLen));\n  }\n\n  destroy() {\n    this.destroyed = true;\n    this.state.fill(0);\n  }\n\n  _cloneInto(to) {\n    const {\n      blockLen,\n      suffix,\n      outputLen,\n      rounds,\n      enableXOF\n    } = this;\n    to || (to = new Keccak(blockLen, suffix, outputLen, enableXOF, rounds));\n    to.state32.set(this.state32);\n    to.pos = this.pos;\n    to.posOut = this.posOut;\n    to.finished = this.finished;\n    to.rounds = rounds; // Suffix can change in cSHAKE\n\n    to.suffix = suffix;\n    to.outputLen = outputLen;\n    to.enableXOF = enableXOF;\n    to.destroyed = this.destroyed;\n    return to;\n  }\n\n}\n\nconst gen = (suffix, blockLen, outputLen) => wrapConstructor(() => new Keccak(blockLen, suffix, outputLen));\n\nexport const sha3_224 = gen(0x06, 144, 224 / 8);\n/**\n * SHA3-256 hash function\n * @param message - that would be hashed\n */\n\nexport const sha3_256 = gen(0x06, 136, 256 / 8);\nexport const sha3_384 = gen(0x06, 104, 384 / 8);\nexport const sha3_512 = gen(0x06, 72, 512 / 8);\nexport const keccak_224 = gen(0x01, 144, 224 / 8);\n/**\n * keccak-256 hash function. Different from SHA3-256.\n * @param message - that would be hashed\n */\n\nexport const keccak_256 = gen(0x01, 136, 256 / 8);\nexport const keccak_384 = gen(0x01, 104, 384 / 8);\nexport const keccak_512 = gen(0x01, 72, 512 / 8);\n\nconst genShake = (suffix, blockLen, outputLen) => wrapConstructorWithOpts(function () {\n  let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return new Keccak(blockLen, suffix, opts.dkLen === undefined ? outputLen : opts.dkLen, true);\n});\n\nexport const shake128 = genShake(0x1f, 168, 128 / 8);\nexport const shake256 = genShake(0x1f, 136, 256 / 8);","map":{"version":3,"sources":["/home/mahir/INTER-IIT/wordle/node_modules/@noble/hashes/esm/sha3.js"],"names":["assert","u64","Hash","u32","toBytes","wrapConstructor","wrapConstructorWithOpts","SHA3_PI","SHA3_ROTL","_SHA3_IOTA","_0n","BigInt","_1n","_2n","_7n","_256n","_0x71n","round","R","x","y","push","t","j","SHA3_IOTA_H","SHA3_IOTA_L","split","rotlH","h","l","s","rotlBH","rotlSH","rotlL","rotlBL","rotlSL","keccakP","rounds","B","Uint32Array","idx1","idx0","B0","B1","Th","Tl","curH","curL","shift","PI","fill","Keccak","constructor","blockLen","suffix","outputLen","enableXOF","pos","posOut","finished","destroyed","number","Error","state","Uint8Array","state32","keccak","update","data","exists","len","length","take","Math","min","i","finish","writeInto","out","bytes","bufferOut","set","subarray","xofInto","xof","digestInto","output","destroy","digest","_cloneInto","to","gen","sha3_224","sha3_256","sha3_384","sha3_512","keccak_224","keccak_256","keccak_384","keccak_512","genShake","opts","dkLen","undefined","shake128","shake256"],"mappings":"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","sourcesContent":["import assert from './_assert.js';\nimport u64 from './_u64.js';\nimport { Hash, u32, toBytes, wrapConstructor, wrapConstructorWithOpts, } from './utils.js';\n// Various per round constants calculations\nconst [SHA3_PI, SHA3_ROTL, _SHA3_IOTA] = [[], [], []];\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\nconst _2n = BigInt(2);\nconst _7n = BigInt(7);\nconst _256n = BigInt(256);\nconst _0x71n = BigInt(0x71);\nfor (let round = 0, R = _1n, x = 1, y = 0; round < 24; round++) {\n    // Pi\n    [x, y] = [y, (2 * x + 3 * y) % 5];\n    SHA3_PI.push(2 * (5 * y + x));\n    // Rotational\n    SHA3_ROTL.push((((round + 1) * (round + 2)) / 2) % 64);\n    // Iota\n    let t = _0n;\n    for (let j = 0; j < 7; j++) {\n        R = ((R << _1n) ^ ((R >> _7n) * _0x71n)) % _256n;\n        if (R & _2n)\n            t ^= _1n << ((_1n << BigInt(j)) - _1n);\n    }\n    _SHA3_IOTA.push(t);\n}\nconst [SHA3_IOTA_H, SHA3_IOTA_L] = u64.split(_SHA3_IOTA, true);\n// Left rotation (without 0, 32, 64)\nconst rotlH = (h, l, s) => s > 32 ? u64.rotlBH(h, l, s) : u64.rotlSH(h, l, s);\nconst rotlL = (h, l, s) => s > 32 ? u64.rotlBL(h, l, s) : u64.rotlSL(h, l, s);\n// Same as keccakf1600, but allows to skip some rounds\nexport function keccakP(s, rounds = 24) {\n    const B = new Uint32Array(5 * 2);\n    // NOTE: all indices are x2 since we store state as u32 instead of u64 (bigints to slow in js)\n    for (let round = 24 - rounds; round < 24; round++) {\n        // Theta θ\n        for (let x = 0; x < 10; x++)\n            B[x] = s[x] ^ s[x + 10] ^ s[x + 20] ^ s[x + 30] ^ s[x + 40];\n        for (let x = 0; x < 10; x += 2) {\n            const idx1 = (x + 8) % 10;\n            const idx0 = (x + 2) % 10;\n            const B0 = B[idx0];\n            const B1 = B[idx0 + 1];\n            const Th = rotlH(B0, B1, 1) ^ B[idx1];\n            const Tl = rotlL(B0, B1, 1) ^ B[idx1 + 1];\n            for (let y = 0; y < 50; y += 10) {\n                s[x + y] ^= Th;\n                s[x + y + 1] ^= Tl;\n            }\n        }\n        // Rho (ρ) and Pi (π)\n        let curH = s[2];\n        let curL = s[3];\n        for (let t = 0; t < 24; t++) {\n            const shift = SHA3_ROTL[t];\n            const Th = rotlH(curH, curL, shift);\n            const Tl = rotlL(curH, curL, shift);\n            const PI = SHA3_PI[t];\n            curH = s[PI];\n            curL = s[PI + 1];\n            s[PI] = Th;\n            s[PI + 1] = Tl;\n        }\n        // Chi (χ)\n        for (let y = 0; y < 50; y += 10) {\n            for (let x = 0; x < 10; x++)\n                B[x] = s[y + x];\n            for (let x = 0; x < 10; x++)\n                s[y + x] ^= ~B[(x + 2) % 10] & B[(x + 4) % 10];\n        }\n        // Iota (ι)\n        s[0] ^= SHA3_IOTA_H[round];\n        s[1] ^= SHA3_IOTA_L[round];\n    }\n    B.fill(0);\n}\nexport class Keccak extends Hash {\n    // NOTE: we accept arguments in bytes instead of bits here.\n    constructor(blockLen, suffix, outputLen, enableXOF = false, rounds = 24) {\n        super();\n        this.blockLen = blockLen;\n        this.suffix = suffix;\n        this.outputLen = outputLen;\n        this.enableXOF = enableXOF;\n        this.rounds = rounds;\n        this.pos = 0;\n        this.posOut = 0;\n        this.finished = false;\n        this.destroyed = false;\n        // Can be passed from user as dkLen\n        assert.number(outputLen);\n        // 1600 = 5x5 matrix of 64bit.  1600 bits === 200 bytes\n        if (0 >= this.blockLen || this.blockLen >= 200)\n            throw new Error('Sha3 supports only keccak-f1600 function');\n        this.state = new Uint8Array(200);\n        this.state32 = u32(this.state);\n    }\n    keccak() {\n        keccakP(this.state32, this.rounds);\n        this.posOut = 0;\n        this.pos = 0;\n    }\n    update(data) {\n        assert.exists(this);\n        const { blockLen, state } = this;\n        data = toBytes(data);\n        const len = data.length;\n        for (let pos = 0; pos < len;) {\n            const take = Math.min(blockLen - this.pos, len - pos);\n            for (let i = 0; i < take; i++)\n                state[this.pos++] ^= data[pos++];\n            if (this.pos === blockLen)\n                this.keccak();\n        }\n        return this;\n    }\n    finish() {\n        if (this.finished)\n            return;\n        this.finished = true;\n        const { state, suffix, pos, blockLen } = this;\n        // Do the padding\n        state[pos] ^= suffix;\n        if ((suffix & 0x80) !== 0 && pos === blockLen - 1)\n            this.keccak();\n        state[blockLen - 1] ^= 0x80;\n        this.keccak();\n    }\n    writeInto(out) {\n        assert.exists(this, false);\n        assert.bytes(out);\n        this.finish();\n        const bufferOut = this.state;\n        const { blockLen } = this;\n        for (let pos = 0, len = out.length; pos < len;) {\n            if (this.posOut >= blockLen)\n                this.keccak();\n            const take = Math.min(blockLen - this.posOut, len - pos);\n            out.set(bufferOut.subarray(this.posOut, this.posOut + take), pos);\n            this.posOut += take;\n            pos += take;\n        }\n        return out;\n    }\n    xofInto(out) {\n        // Sha3/Keccak usage with XOF is probably mistake, only SHAKE instances can do XOF\n        if (!this.enableXOF)\n            throw new Error('XOF is not possible for this instance');\n        return this.writeInto(out);\n    }\n    xof(bytes) {\n        assert.number(bytes);\n        return this.xofInto(new Uint8Array(bytes));\n    }\n    digestInto(out) {\n        assert.output(out, this);\n        if (this.finished)\n            throw new Error('digest() was already called');\n        this.writeInto(out);\n        this.destroy();\n        return out;\n    }\n    digest() {\n        return this.digestInto(new Uint8Array(this.outputLen));\n    }\n    destroy() {\n        this.destroyed = true;\n        this.state.fill(0);\n    }\n    _cloneInto(to) {\n        const { blockLen, suffix, outputLen, rounds, enableXOF } = this;\n        to || (to = new Keccak(blockLen, suffix, outputLen, enableXOF, rounds));\n        to.state32.set(this.state32);\n        to.pos = this.pos;\n        to.posOut = this.posOut;\n        to.finished = this.finished;\n        to.rounds = rounds;\n        // Suffix can change in cSHAKE\n        to.suffix = suffix;\n        to.outputLen = outputLen;\n        to.enableXOF = enableXOF;\n        to.destroyed = this.destroyed;\n        return to;\n    }\n}\nconst gen = (suffix, blockLen, outputLen) => wrapConstructor(() => new Keccak(blockLen, suffix, outputLen));\nexport const sha3_224 = gen(0x06, 144, 224 / 8);\n/**\n * SHA3-256 hash function\n * @param message - that would be hashed\n */\nexport const sha3_256 = gen(0x06, 136, 256 / 8);\nexport const sha3_384 = gen(0x06, 104, 384 / 8);\nexport const sha3_512 = gen(0x06, 72, 512 / 8);\nexport const keccak_224 = gen(0x01, 144, 224 / 8);\n/**\n * keccak-256 hash function. Different from SHA3-256.\n * @param message - that would be hashed\n */\nexport const keccak_256 = gen(0x01, 136, 256 / 8);\nexport const keccak_384 = gen(0x01, 104, 384 / 8);\nexport const keccak_512 = gen(0x01, 72, 512 / 8);\nconst genShake = (suffix, blockLen, outputLen) => wrapConstructorWithOpts((opts = {}) => new Keccak(blockLen, suffix, opts.dkLen === undefined ? outputLen : opts.dkLen, true));\nexport const shake128 = genShake(0x1f, 168, 128 / 8);\nexport const shake256 = genShake(0x1f, 136, 256 / 8);\n"]},"metadata":{},"sourceType":"module"}